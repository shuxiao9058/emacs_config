;; Object html/
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "html/"
  :tables (list 
   (semanticdb-table "html-parse.c"
    :major-mode 'c-mode
    :tags 
        '( ("http/html/html-parse.h" include (:system-flag t) nil [250 283])
            ("http/html/hash-table.h" include (:system-flag t) nil [284 317])
            ("../../utils/cutil.h" include nil nil [318 348])
            ("bool" variable (:constant-flag t) nil [358 362])
            ("true" variable (:constant-flag t) nil [375 379])
            ("false" variable (:constant-flag t) nil [390 395])
            ("c_isspace" variable (:constant-flag t) nil [407 416])
            ("c_isdigit" variable (:constant-flag t) nil [454 463])
            ("c_isalnum" variable (:constant-flag t) nil [501 510])
            ("pool" type
               (:members 
                  ( ("contents" variable
                       (:pointer 1
                        :type "char")
                        (reparse-symbol classsubparts) [1163 1178])
                    ("size" variable (:type "int") (reparse-symbol classsubparts) [1226 1235])
                    ("tail" variable (:type "int") (reparse-symbol classsubparts) [1282 1291])
                    ("resized" variable (:type "bool") (reparse-symbol classsubparts) [1351 1364])
                    ("orig_contents" variable
                       (:pointer 1
                        :type "char")
                        (reparse-symbol classsubparts) [1473 1493])
                    ("orig_size" variable (:type "int") (reparse-symbol classsubparts) [1726 1740]))                  
                :type "struct")
                nil [1147 1743])
            ("POOL_INIT" variable (:constant-flag t) nil [1819 1828])
            ("POOL_GROW" variable (:constant-flag t) nil [2505 2514])
            ("POOL_APPEND" variable (:constant-flag t) nil [2758 2769])
            ("POOL_APPEND_CHR" variable (:constant-flag t) nil [3209 3224])
            ("POOL_REWIND" variable (:constant-flag t) nil [3490 3501])
            ("POOL_FREE" variable (:constant-flag t) nil [3847 3856])
            ("GROW_ARRAY" variable (:constant-flag t) nil [4747 4757])
            ("FITS" variable (:constant-flag t) nil [6540 6544])
            ("ENT1" variable (:constant-flag t) nil [6717 6721])
            ("ENT2" variable (:constant-flag t) nil [6765 6769])
            ("ENT3" variable (:constant-flag t) nil [6831 6835])
            ("SKIP_SEMI" variable (:constant-flag t) nil [7094 7103])
            ("tagstack_item" type
               (:members 
                  ( ("tagname_begin" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol classsubparts) [7181 7207])
                    ("tagname_end" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol classsubparts) [7210 7234])
                    ("contents_begin" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol classsubparts) [7237 7264])
                    ("contents_end" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol classsubparts) [7267 7292])
                    ("prev" variable
                       (:pointer 1
                        :type ("tagstack_item" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol classsubparts) [7307 7334])
                    ("next" variable
                       (:pointer 1
                        :type ("tagstack_item" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol classsubparts) [7337 7364]))                  
                :type "struct")
                nil [7156 7367])
            ("tagstack_push" function
               (:pointer 1
                :arguments 
                  ( ("head" variable
                       (:pointer 2
                        :type ("tagstack_item" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [7407 7435])
                    ("tail" variable
                       (:pointer 2
                        :type ("tagstack_item" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [7436 7464]))                  
                :type ("tagstack_item" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [7369 7753])
            ("tagstack_pop" function
               (:arguments 
                  ( ("head" variable
                       (:pointer 2
                        :type ("tagstack_item" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [7829 7857])
                    ("tail" variable
                       (:pointer 2
                        :type ("tagstack_item" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [7858 7886])
                    ("ts" variable
                       (:pointer 1
                        :type ("tagstack_item" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [7901 7926]))                  
                :type "void")
                nil [7810 8513])
            ("tagstack_find" function
               (:pointer 1
                :arguments 
                  ( ("tail" variable
                       (:pointer 1
                        :type ("tagstack_item" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [8553 8580])
                    ("tagname_begin" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [8581 8607])
                    ("tagname_end" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [8623 8647]))                  
                :type ("tagstack_item" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [8515 8938])
            ("decode_entity" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("ptr" variable
                       (:pointer 2
                        :constant-flag t
                        :type "unsigned char")
                        (reparse-symbol arg-sub-list) [9386 9412])
                    ("end" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [9413 9429]))                  
                :type "int")
                nil [9360 10855])
            ("" type
               (:members 
                  ( ("AP_DOWNCASE" variable
                       (:constant-flag t
                        :default-value (10956 10957)
                        :type "int")
                        (reparse-symbol enumsubparts) [10932 10957])
                    ("AP_DECODE_ENTITIES" variable
                       (:constant-flag t
                        :default-value (10985 10986)
                        :type "int")
                        (reparse-symbol enumsubparts) [10961 10986])
                    ("AP_TRIM_BLANKS" variable
                       (:constant-flag t
                        :default-value (11014 11015)
                        :type "int")
                        (reparse-symbol enumsubparts) [10990 11015]))                  
                :type "enum")
                nil [10923 11018])
            ("convert_and_copy" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("pool" variable
                       (:pointer 1
                        :type ("pool" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [11555 11573])
                    ("beg" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [11574 11590])
                    ("end" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [11591 11607])
                    ("flags" variable (:type "int") (reparse-symbol arg-sub-list) [11608 11618]))                  
                :type "void")
                nil [11525 13551])
            ("NAME_CHAR_P" variable (:constant-flag t) nil [14129 14140])
            ("advance_declaration" function
               (:pointer 1
                :typemodifiers ("static")
                :constant-flag t
                :arguments 
                  ( ("beg" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [15102 15118])
                    ("end" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [15119 15135]))                  
                :type "char")
                nil [15061 18817])
            ("find_comment_end" function
               (:pointer 1
                :typemodifiers ("static")
                :constant-flag t
                :arguments 
                  ( ("beg" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [19040 19056])
                    ("end" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [19057 19073]))                  
                :type "char")
                nil [19002 20078])
            ("name_allowed" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("ht" variable
                       (:pointer 1
                        :constant-flag t
                        :type ("hash_table" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [20212 20240])
                    ("b" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [20241 20255])
                    ("e" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [20256 20270]))                  
                :type "int")
                nil [20186 20394])
            ("ADVANCE" variable (:constant-flag t) nil [20550 20557])
            ("SKIP_WS" variable (:constant-flag t) nil [20795 20802])
            ("SKIP_NON_WS" variable (:constant-flag t) nil [21046 21057])
            ("map_html_tags" function
               (:arguments 
                  ( ("text" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [21984 22001])
                    ("size" variable (:type "int") (reparse-symbol arg-sub-list) [22002 22011])
                    ("" variable (:type "void") (reparse-symbol arg-sub-list) [22027 22041])
                    ("maparg" variable
                       (:pointer 1
                        :type "void")
                        (reparse-symbol arg-sub-list) [22070 22083])
                    ("flags" variable (:type "int") (reparse-symbol arg-sub-list) [22099 22109])
                    ("allowed_tags" variable
                       (:pointer 1
                        :constant-flag t
                        :type ("hash_table" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [22125 22163])
                    ("allowed_attributes" variable
                       (:pointer 1
                        :constant-flag t
                        :type ("hash_table" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [22179 22223]))                  
                :type "void")
                nil [21964 34021]))          
    :file "html-parse.c"
    :pointmax 34111
    :fsize 35221
    :lastmodtime '(20859 41886 0 0)
    :unmatched-syntax '((semantic-list 22042 . 22068) (semantic-list 22032 . 22041))
    :lexical-table 
        '(("c_isspace" (spp-arg-list ("c") 416 . 419) . ((symbol "isspace" 420 . 427) (semantic-list "((unsigned char)c)" 427 . 445)))
          ("POOL_INIT" (spp-arg-list ("p" "initial_storage" "initial_size") 1828 . 1862) . 
              ((DO "do" 1863 . 1865) (semantic-list "{        \\
  struct pool *P = (p);                                         \\
  P->contents = (initial_storage);                              \\
  P->size = (initial_size);                                     \\
  P->tail = 0;                                                  \\
  P->resized = false;                                           \\
  P->orig_contents = P->contents;                               \\
  P->orig_size = P->size;                                       \\
}" 1866 . 2340) (WHILE "while" 2341 . 2346) (semantic-list "(0)" 2347 . 2350)))
          ("POOL_REWIND" (spp-arg-list ("p") 3501 . 3504) . 
              ((semantic-list "(p)" 3505 . 3508) (punctuation "-" 3508 . 3509) (punctuation ">" 3509 . 3510) (symbol "tail" 3510 . 3514) (punctuation "=" 3515 . 3516) (number "0" 3517 . 3518)))
          ("c_isalnum" (spp-arg-list ("c") 510 . 513) . ((symbol "isalnum" 514 . 521) (semantic-list "((unsigned char)c)" 521 . 539)))
          ("POOL_GROW" (spp-arg-list ("p" "increase") 2514 . 2527) . ((symbol "GROW_ARRAY" 2565 . 2575) (semantic-list "((p)->contents, (p)->size, (p)->tail + (increase), \\
              (p)->resized, char)" 2576 . 2662)))
          ("NAME_CHAR_P" (spp-arg-list ("x") 14140 . 14143) . ((semantic-list "((x) > 32 && (x) < 127                           \\
                        && (x) != '=' && (x) != '<' && (x) != '>'       \\
                        && (x) != '/')" 14144 . 14307)))
          ("POOL_FREE" (spp-arg-list ("p") 3856 . 3859) . 
              ((DO "do" 3860 . 3862) (semantic-list "{                       \\
  struct pool *P = p;                           \\
  if (P->resized)                               \\
    xfree (P->contents);                        \\
  P->contents = P->orig_contents;               \\
  P->size = P->orig_size;                       \\
  P->tail = 0;                                  \\
  P->resized = false;                           \\
}" 3863 . 4240) (WHILE "while" 4241 . 4246) (semantic-list "(0)" 4247 . 4250)))
          ("POOL_APPEND" (spp-arg-list ("p" "beg" "end") 2769 . 2782) . 
              ((DO "do" 2783 . 2785) (semantic-list "{                   \\
  const char *PA_beg = (beg);                           \\
  int PA_size = (end) - PA_beg;                         \\
  POOL_GROW (p, PA_size);                               \\
  memcpy ((p)->contents + (p)->tail, PA_beg, PA_size);  \\
  (p)->tail += PA_size;                                 \\
}" 2786 . 3099) (WHILE "while" 3100 . 3105) (semantic-list "(0)" 3106 . 3109)))
          ("POOL_APPEND_CHR" (spp-arg-list ("p" "ch") 3224 . 3231) . 
              ((DO "do" 3232 . 3234) (semantic-list "{             \\
  char PAC_char = (ch);                         \\
  POOL_GROW (p, 1);                             \\
  (p)->contents[(p)->tail++] = PAC_char;        \\
}" 3235 . 3402) (WHILE "while" 3403 . 3408) (semantic-list "(0)" 3409 . 3412)))
          ("c_isdigit" (spp-arg-list ("c") 463 . 466) . ((symbol "isdigit" 467 . 474) (semantic-list "((unsigned char)c)" 474 . 492)))
          ("GROW_ARRAY" (spp-arg-list ("basevar" "sizevar" "needed_size" "resized" "type") 4757 . 4803) . 
              ((DO "do" 4804 . 4806) (semantic-list "{           \\
  long ga_needed_size = (needed_size);                                          \\
  long ga_newsize = (sizevar);                                                  \\
  while (ga_newsize < ga_needed_size)                                           \\
    ga_newsize <<= 1;                                                           \\
  if (ga_newsize != (sizevar))                                                  \\
    {                                                                           \\
      if (resized)                                                              \\
        basevar = xrealloc (basevar, ga_newsize * sizeof (type));               \\
      else                                                                      \\
        {                                                                       \\
          void *ga_new = xmalloc (ga_newsize * sizeof (type));                  \\
          memcpy (ga_new, basevar, (sizevar) * sizeof (type));                  \\
          (basevar) = ga_new;                                                   \\
          resized = true;                                                       \\
        }                                                                       \\
      (sizevar) = ga_newsize;                                                   \\
    }                                                                           \\
}" 4807 . 6216) (WHILE "while" 6217 . 6222) (semantic-list "(0)" 6223 . 6226)))
          )

    )
   )
  :file "!home!revir!workspace!new!safesitetask!http!html!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2"
  )

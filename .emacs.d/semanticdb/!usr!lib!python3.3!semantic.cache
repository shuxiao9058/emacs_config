;; Object python3.3/
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "python3.3/"
  :tables (list 
   (semanticdb-table "subprocess.py"
    :major-mode 'python-mode
    :tags 
        '( ("r\"\"\"subprocess - Subprocesses with accessible I/O streams

This module allows you to spawn processes, connect to their
input/output/error pipes, and obtain their return codes.  This module
intends to replace several other, older modules and functions, like:

os.system
os.spawn*

Information about how the subprocess module can be used to replace these
modules and functions can be found below.



Using the subprocess module
===========================
This module defines one class called Popen:

class Popen(args, bufsize=-1, executable=None,
            stdin=None, stdout=None, stderr=None,
            preexec_fn=None, close_fds=True, shell=False,
            cwd=None, env=None, universal_newlines=False,
            startupinfo=None, creationflags=0,
            restore_signals=True, start_new_session=False, pass_fds=()):


Arguments are:

args should be a string, or a sequence of program arguments.  The
program to execute is normally the first item in the args sequence or
string, but can be explicitly set by using the executable argument.

On POSIX, with shell=False (default): In this case, the Popen class
uses os.execvp() to execute the child program.  args should normally
be a sequence.  A string will be treated as a sequence with the string
as the only item (the program to execute).

On POSIX, with shell=True: If args is a string, it specifies the
command string to execute through the shell.  If args is a sequence,
the first item specifies the command string, and any additional items
will be treated as additional shell arguments.

On Windows: the Popen class uses CreateProcess() to execute the child
program, which operates on strings.  If args is a sequence, it will be
converted to a string using the list2cmdline method.  Please note that
not all MS Windows applications interpret the command line the same
way: The list2cmdline is designed for applications using the same
rules as the MS C runtime.

bufsize will be supplied as the corresponding argument to the io.open()
function when creating the stdin/stdout/stderr pipe file objects:
0 means unbuffered (read & write are one system call and can return short),
1 means line buffered, any other positive value means use a buffer of
approximately that size.  A negative bufsize, the default, means the system
default of io.DEFAULT_BUFFER_SIZE will be used.

stdin, stdout and stderr specify the executed programs' standard
input, standard output and standard error file handles, respectively.
Valid values are PIPE, an existing file descriptor (a positive
integer), an existing file object, and None.  PIPE indicates that a
new pipe to the child should be created.  With None, no redirection
will occur; the child's file handles will be inherited from the
parent.  Additionally, stderr can be STDOUT, which indicates that the
stderr data from the applications should be captured into the same
file handle as for stdout.

On POSIX, if preexec_fn is set to a callable object, this object will be
called in the child process just before the child is executed.  The use
of preexec_fn is not thread safe, using it in the presence of threads
could lead to a deadlock in the child process before the new executable
is executed.

If close_fds is true, all file descriptors except 0, 1 and 2 will be
closed before the child process is executed.  The default for close_fds
varies by platform:  Always true on POSIX.  True when stdin/stdout/stderr
are None on Windows, false otherwise.

pass_fds is an optional sequence of file descriptors to keep open between the
parent and child.  Providing any pass_fds implicitly sets close_fds to true.

if shell is true, the specified command will be executed through the
shell.

If cwd is not None, the current directory will be changed to cwd
before the child is executed.

On POSIX, if restore_signals is True all signals that Python sets to
SIG_IGN are restored to SIG_DFL in the child process before the exec.
Currently this includes the SIGPIPE, SIGXFZ and SIGXFSZ signals.  This
parameter does nothing on Windows.

On POSIX, if start_new_session is True, the setsid() system call will be made
in the child process prior to executing the command.

If env is not None, it defines the environment variables for the new
process.

If universal_newlines is true, the file objects stdout and stderr are
opened as a text files, but lines may be terminated by any of '\\n',
the Unix end-of-line convention, '\\r', the old Macintosh convention or
'\\r\\n', the Windows convention.  All of these external representations
are seen as '\\n' by the Python program.  Also, the newlines attribute
of the file objects stdout, stdin and stderr are not updated by the
communicate() method.

The startupinfo and creationflags, if given, will be passed to the
underlying CreateProcess() function.  They can specify things such as
appearance of the main window and priority for the new process.
(Windows only)


This module also defines some shortcut functions:

call(*popenargs, **kwargs):
    Run command with arguments.  Wait for command to complete, then
    return the returncode attribute.

    The arguments are the same as for the Popen constructor.  Example:

    >>> retcode = subprocess.call([\"ls\", \"-l\"])

check_call(*popenargs, **kwargs):
    Run command with arguments.  Wait for command to complete.  If the
    exit code was zero then return, otherwise raise
    CalledProcessError.  The CalledProcessError object will have the
    return code in the returncode attribute.

    The arguments are the same as for the Popen constructor.  Example:

    >>> subprocess.check_call([\"ls\", \"-l\"])
    0

getstatusoutput(cmd):
    Return (status, output) of executing cmd in a shell.

    Execute the string 'cmd' in a shell with os.popen() and return a 2-tuple
    (status, output).  cmd is actually run as '{ cmd ; } 2>&1', so that the
    returned output will contain output or error messages. A trailing newline
    is stripped from the output. The exit status for the command can be
    interpreted according to the rules for the C function wait().  Example:

    >>> subprocess.getstatusoutput('ls /bin/ls')
    (0, '/bin/ls')
    >>> subprocess.getstatusoutput('cat /bin/junk')
    (256, 'cat: /bin/junk: No such file or directory')
    >>> subprocess.getstatusoutput('/bin/junk')
    (256, 'sh: /bin/junk: not found')

getoutput(cmd):
    Return output (stdout or stderr) of executing cmd in a shell.

    Like getstatusoutput(), except the exit status is ignored and the return
    value is a string containing the command's output.  Example:

    >>> subprocess.getoutput('ls /bin/ls')
    '/bin/ls'

check_output(*popenargs, **kwargs):
    Run command with arguments and return its output.

    If the exit code was non-zero it raises a CalledProcessError.  The
    CalledProcessError object will have the return code in the returncode
    attribute and output in the output attribute.

    The arguments are the same as for the Popen constructor.  Example:

    >>> output = subprocess.check_output([\"ls\", \"-l\", \"/dev/null\"])


Exceptions
----------
Exceptions raised in the child process, before the new program has
started to execute, will be re-raised in the parent.  Additionally,
the exception object will have one extra attribute called
'child_traceback', which is a string containing traceback information
from the childs point of view.

The most common exception raised is OSError.  This occurs, for
example, when trying to execute a non-existent file.  Applications
should prepare for OSErrors.

A ValueError will be raised if Popen is called with invalid arguments.

Exceptions defined within this module inherit from SubprocessError.
check_call() and check_output() will raise CalledProcessError if the
called process returns a non-zero return code.  TimeoutExpired
be raised if a timeout was specified and expired.


Security
--------
Unlike some other popen functions, this implementation will never call
/bin/sh implicitly.  This means that all characters, including shell
metacharacters, can safely be passed to child processes.


Popen objects
=============
Instances of the Popen class have the following methods:

poll()
    Check if child process has terminated.  Returns returncode
    attribute.

wait()
    Wait for child process to terminate.  Returns returncode attribute.

communicate(input=None)
    Interact with process: Send data to stdin.  Read data from stdout
    and stderr, until end-of-file is reached.  Wait for process to
    terminate.  The optional input argument should be a string to be
    sent to the child process, or None, if no data should be sent to
    the child.

    communicate() returns a tuple (stdout, stderr).

    Note: The data read is buffered in memory, so do not use this
    method if the data size is large or unlimited.

The following attributes are also available:

stdin
    If the stdin argument is PIPE, this attribute is a file object
    that provides input to the child process.  Otherwise, it is None.

stdout
    If the stdout argument is PIPE, this attribute is a file object
    that provides output from the child process.  Otherwise, it is
    None.

stderr
    If the stderr argument is PIPE, this attribute is file object that
    provides error output from the child process.  Otherwise, it is
    None.

pid
    The process ID of the child process.

returncode
    The child return code.  A None value indicates that the process
    hasn't terminated yet.  A negative value -N indicates that the
    child was terminated by signal N (POSIX only).


Replacing older functions with the subprocess module
====================================================
In this section, \"a ==> b\" means that b can be used as a replacement
for a.

Note: All functions in this section fail (more or less) silently if
the executed program cannot be found; this module raises an OSError
exception.

In the following examples, we assume that the subprocess module is
imported with \"from subprocess import *\".


Replacing /bin/sh shell backquote
---------------------------------
output=`mycmd myarg`
==>
output = Popen([\"mycmd\", \"myarg\"], stdout=PIPE).communicate()[0]


Replacing shell pipe line
-------------------------
output=`dmesg | grep hda`
==>
p1 = Popen([\"dmesg\"], stdout=PIPE)
p2 = Popen([\"grep\", \"hda\"], stdin=p1.stdout, stdout=PIPE)
output = p2.communicate()[0]


Replacing os.system()
---------------------
sts = os.system(\"mycmd\" + \" myarg\")
==>
p = Popen(\"mycmd\" + \" myarg\", shell=True)
pid, sts = os.waitpid(p.pid, 0)

Note:

* Calling the program through the shell is usually not required.

* It's easier to look at the returncode attribute than the
  exitstatus.

A more real-world example would look like this:

try:
    retcode = call(\"mycmd\" + \" myarg\", shell=True)
    if retcode < 0:
        print(\"Child was terminated by signal\", -retcode, file=sys.stderr)
    else:
        print(\"Child returned\", retcode, file=sys.stderr)
except OSError as e:
    print(\"Execution failed:\", e, file=sys.stderr)


Replacing os.spawn*
-------------------
P_NOWAIT example:

pid = os.spawnlp(os.P_NOWAIT, \"/bin/mycmd\", \"mycmd\", \"myarg\")
==>
pid = Popen([\"/bin/mycmd\", \"myarg\"]).pid


P_WAIT example:

retcode = os.spawnlp(os.P_WAIT, \"/bin/mycmd\", \"mycmd\", \"myarg\")
==>
retcode = call([\"/bin/mycmd\", \"myarg\"])


Vector example:

os.spawnvp(os.P_NOWAIT, path, args)
==>
Popen([path] + args[1:])


Environment example:

os.spawnlpe(os.P_NOWAIT, \"/bin/mycmd\", \"mycmd\", \"myarg\", env)
==>
Popen([\"/bin/mycmd\", \"myarg\"], env={\"PATH\": \"/usr/bin\"})
\"\"\"" code nil nil [299 11824])
            ("sys" include nil nil [11826 11836])
            ("mswindows" variable nil nil [11837 11874])
            ("io" include nil nil [11876 11885])
            ("os" include nil nil [11886 11895])
            ("time" include nil nil [11896 11907])
            ("traceback" include nil nil [11908 11924])
            ("gc" include nil nil [11925 11934])
            ("signal" include nil nil [11935 11948])
            ("builtins" include nil nil [11949 11964])
            ("warnings" include nil nil [11965 11980])
            ("errno" include nil nil [11981 11993])
            ("try" code nil nil [11994 12094])
            ("SubprocessError" type
               (:superclasses ("Exception")
                :members 
                  ( ("pass" code nil nil nil))                  
                :type "class")
                nil [12136 12175])
            ("CalledProcessError" type
               (:documentation "This exception is raised when a process run by check_call() or
    check_output() returns a non-zero exit status.
    The exit status will be stored in the returncode attribute;
    check_output() will also store the output in the output attribute.
    "
                :superclasses ("SubprocessError")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [12546 12574])
                            ("self" variable nil (reparse-symbol indented_block_body) [12583 12597])
                            ("self" variable nil (reparse-symbol indented_block_body) [12606 12626]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12501 12505])
                            ("returncode" variable nil (reparse-symbol function_parameters) [12507 12517])
                            ("cmd" variable nil (reparse-symbol function_parameters) [12519 12522])
                            ("output" variable nil (reparse-symbol function_parameters) [12524 12530]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [12488 12627])
                    ("__str__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12643 12647]))                          )
                        (reparse-symbol indented_block_body) [12631 12743]))                  
                :type "class")
                nil [12177 12743])
            ("TimeoutExpired" type
               (:documentation "This exception is raised when the timeout expires while waiting for a
    child process.
    "
                :superclasses ("SubprocessError")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [12947 12961])
                            ("self" variable nil (reparse-symbol indented_block_body) [12970 12992])
                            ("self" variable nil (reparse-symbol indented_block_body) [13001 13021]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12905 12909])
                            ("cmd" variable nil (reparse-symbol function_parameters) [12911 12914])
                            ("timeout" variable nil (reparse-symbol function_parameters) [12916 12923])
                            ("output" variable nil (reparse-symbol function_parameters) [12925 12931]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [12892 13022])
                    ("__str__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13039 13043]))                          )
                        (reparse-symbol indented_block_body) [13027 13148]))                  
                :type "class")
                nil [12745 13148])
            ("if" code nil nil [13150 13776])
            ("__all__" variable nil nil [13778 13929])
            ("if" code nil nil [13931 14957])
            ("try" code nil nil [14958 15025])
            ("_active" variable nil nil [15284 15296])
            ("_cleanup" function nil nil [15298 15684])
            ("PIPE" code nil nil [15685 15694])
            ("STDOUT" code nil nil [15695 15706])
            ("DEVNULL" code nil nil [15707 15719])
            ("_eintr_retry_call" function (:arguments 
              ( ("func" variable nil (reparse-symbol function_parameters) [15744 15748])
                ("args" variable nil (reparse-symbol function_parameters) [15750 15755]))              ) nil [15722 15872])
            ("_args_from_interpreter_flags" function (:documentation "Return a list of command-line arguments reproducing the current
    settings in sys.flags and sys.warnoptions.") nil [16033 16786])
            ("call" function
               (:documentation "Run command with arguments.  Wait for command to complete or
    timeout, then return the returncode attribute.

    The arguments are the same as for the Popen constructor.  Example:

    retcode = call([\"ls\", \"-l\"])
    "
                :arguments 
                  ( ("popenargs" variable nil (reparse-symbol function_parameters) [16797 16807])
                    ("timeout" variable nil (reparse-symbol function_parameters) [16809 16816])
                    ("kwargs" variable nil (reparse-symbol function_parameters) [16823 16831]))                  )
                nil [16788 17242])
            ("check_call" function
               (:documentation "Run command with arguments.  Wait for command to complete.  If
    the exit code was zero then return, otherwise raise
    CalledProcessError.  The CalledProcessError object will have the
    return code in the returncode attribute.

    The arguments are the same as for the call function.  Example:

    check_call([\"ls\", \"-l\"])
    "
                :arguments 
                  ( ("popenargs" variable nil (reparse-symbol function_parameters) [17259 17269])
                    ("kwargs" variable nil (reparse-symbol function_parameters) [17271 17279]))                  )
                nil [17244 17833])
            ("check_output" function (:arguments 
              ( ("popenargs" variable nil (reparse-symbol function_parameters) [17852 17862])
                ("timeout" variable nil (reparse-symbol function_parameters) [17864 17871])
                ("kwargs" variable nil (reparse-symbol function_parameters) [17878 17886]))              ) nil [17835 19425])
            ("list2cmdline" function
               (:documentation "
    Translate a sequence of arguments into a command line
    string, using the same rules as the MS C runtime:

    1) Arguments are delimited by white space, which is either a
       space or a tab.

    2) A string surrounded by double quotation marks is
       interpreted as a single argument, regardless of white space
       contained within.  A quoted string can be embedded in an
       argument.

    3) A double quotation mark preceded by a backslash is
       interpreted as a literal double quotation mark.

    4) Backslashes are interpreted literally, unless they
       immediately precede a double quotation mark.

    5) If backslashes immediately precede a double quotation mark,
       every pair of backslashes is interpreted as a literal
       backslash.  If the number of backslashes is odd, the last
       backslash escapes the next double quotation mark as
       described in rule 3.
    "
                :arguments 
                  ( ("seq" variable nil (reparse-symbol function_parameters) [19444 19447]))                  )
                nil [19427 66583]))          
    :file "subprocess.py"
    :pointmax 66583
    :fsize 66582
    :lastmodtime '(20832 44201 0 0)
    :unmatched-syntax '((INDENT_BLOCK 21048 . 66583) (NEWLINE 21009 . 21010) (COLON 21008 . 21009) (ELIF 20995 . 20999) (INDENT_BLOCK 20950 . 20983) (IF 20881 . 20883) (NAME 20917 . 20918) (NAME 20919 . 20923) (IF 20924 . 20926) (NAME 20930 . 20934) (NAME 20935 . 20937) (NAME 20938 . 20944) (NAME 20945 . 20948) (NEWLINE 20949 . 20950))
    )
   (semanticdb-table "os.py"
    :major-mode 'python-mode
    :tags 
        '( ("r\"\"\"OS routines for Mac, NT, or Posix depending on what system we're on.

This exports:
  - all functions from posix, nt, os2, or ce, e.g. unlink, stat, etc.
  - os.path is either posixpath or ntpath
  - os.name is either 'posix', 'nt', 'os2' or 'ce'.
  - os.curdir is a string representing the current directory ('.' or ':')
  - os.pardir is a string representing the parent directory ('..' or '::')
  - os.sep is the (or a most common) pathname separator ('/' or ':' or '\\\\')
  - os.extsep is the extension separator (always '.')
  - os.altsep is the alternate pathname separator (None or '/')
  - os.pathsep is the component separator used in $PATH etc
  - os.linesep is the line separator in text files ('\\r' or '\\n' or '\\r\\n')
  - os.defpath is the default search path for executables
  - os.devnull is the file path of the null device ('/dev/null', etc.)

Programs that import and use 'os' stand a better chance of being
portable between different platforms.  Of course, they must then
only use functions that are defined by all platforms (e.g., unlink
and opendir), and leave all pathname manipulation to os.path
(e.g., split and join).
\"\"\"" code nil nil [1 1148])
            ("sys" include nil nil [1154 1171])
            ("errno" include nil nil [1154 1171])
            ("stat" include nil nil [1172 1189])
            ("_names" variable nil nil [1191 1224])
            ("__all__" variable nil nil [1274 1520])
            ("_exists" function (:arguments 
              ( ("name" variable nil (reparse-symbol function_parameters) [1534 1538]))              ) nil [1522 1570])
            ("_get_exports_list" function (:arguments 
              ( ("module" variable nil (reparse-symbol function_parameters) [1593 1599]))              ) nil [1571 1729])
            ("if" code nil nil [1842 3492])
            ("sys" variable nil nil [3493 3522])
            ("" code nil nil [3543 3611])
            ("del" code nil nil [3613 3623])
            ("if" code nil nil [3626 6848])
            ("SEEK_SET" variable nil nil [7040 7052])
            ("SEEK_CUR" variable nil nil [7053 7065])
            ("SEEK_END" variable nil nil [7066 7078])
            ("_get_masked_mode" function (:arguments 
              ( ("mode" variable nil (reparse-symbol function_parameters) [7102 7106]))              ) nil [7081 7169])
            ("makedirs" function
               (:documentation "makedirs(path [, mode=0o777][, exist_ok=False])

    Super-mkdir; create a leaf directory and all intermediate ones.
    Works like mkdir, except that any intermediate path segment (not
    just the rightmost) will be created if it does not exist. If the
    target directory with the same mode as we specified already exists,
    raises an OSError if exist_ok is False, otherwise no exception is
    raised.  This is recursive.

    "
                :arguments 
                  ( ("name" variable nil (reparse-symbol function_parameters) [7274 7278])
                    ("mode" variable nil (reparse-symbol function_parameters) [7280 7284])
                    ("exist_ok" variable nil (reparse-symbol function_parameters) [7292 7300]))                  )
                nil [7261 9126])
            ("removedirs" function
               (:documentation "removedirs(path)

    Super-rmdir; remove a leaf directory and all empty intermediate
    ones.  Works like rmdir except that, if the leaf directory is
    successfully removed, directories corresponding to rightmost path
    segments will be pruned away until either the whole path is
    consumed or an error occurs.  Errors during this latter phase are
    ignored -- they generally mean that a directory was not empty.

    "
                :arguments 
                  ( ("name" variable nil (reparse-symbol function_parameters) [9142 9146]))                  )
                nil [9127 9833])
            ("renames" function
               (:documentation "renames(old, new)

    Super-rename; create directories as necessary and delete any left
    empty.  Works like rename, except creation of any intermediate
    directories needed to make the new pathname good is attempted
    first.  After the rename, directories corresponding to rightmost
    path segments of the old name will be pruned way until either the
    whole path is consumed or a nonempty directory is found.

    Note: this function can fail with the new directory structure made
    if you lack permissions needed to unlink the leaf directory or
    file.

    "
                :arguments 
                  ( ("old" variable nil (reparse-symbol function_parameters) [9846 9849])
                    ("new" variable nil (reparse-symbol function_parameters) [9851 9854]))                  )
                nil [9834 10705])
            ("__all__" code nil nil [10706 10759])
            ("walk" function
               (:documentation "Directory tree generator.

    For each directory in the directory tree rooted at top (including top
    itself, but excluding '.' and '..'), yields a 3-tuple

        dirpath, dirnames, filenames

    dirpath is a string, the path to the directory.  dirnames is a list of
    the names of the subdirectories in dirpath (excluding '.' and '..').
    filenames is a list of the names of the non-directory files in dirpath.
    Note that the names in the lists are just names, with no path components.
    To get a full path (which begins with top) to a file or directory in
    dirpath, do os.path.join(dirpath, name).

    If optional arg 'topdown' is true or not specified, the triple for a
    directory is generated before the triples for any of its subdirectories
    (directories are generated top down).  If topdown is false, the triple
    for a directory is generated after the triples for all of its
    subdirectories (directories are generated bottom up).

    When topdown is true, the caller can modify the dirnames list in-place
    (e.g., via del or slice assignment), and walk will only recurse into the
    subdirectories whose names remain in dirnames; this can be used to prune
    the search, or to impose a specific order of visiting.  Modifying
    dirnames when topdown is false is ineffective, since the directories in
    dirnames have already been generated by the time dirnames itself is
    generated.

    By default errors from the os.listdir() call are ignored.  If
    optional arg 'onerror' is specified, it should be a function; it
    will be called with one argument, an os.error instance.  It can
    report the error to continue with the walk, or raise the exception
    to abort the walk.  Note that the filename is available as the
    filename attribute of the exception object.

    By default, os.walk does not follow symbolic links to subdirectories on
    systems that support them.  In order to get this functionality, set the
    optional argument 'followlinks' to true.

    Caution:  if you pass a relative pathname for top, don't change the
    current working directory between resumptions of walk.  walk never
    changes the current directory, and assumes that the client doesn't
    either.

    Example:

    import os
    from os.path import join, getsize
    for root, dirs, files in os.walk('python/Lib/email'):
        print(root, \"consumes\", end=\"\")
        print(sum([getsize(join(root, name)) for name in files]), end=\"\")
        print(\"bytes in\", len(files), \"non-directory files\")
        if 'CVS' in dirs:
            dirs.remove('CVS')  # don't visit CVS directories
    "
                :arguments 
                  ( ("top" variable nil (reparse-symbol function_parameters) [10770 10773])
                    ("topdown" variable nil (reparse-symbol function_parameters) [10775 10782])
                    ("onerror" variable nil (reparse-symbol function_parameters) [10789 10796])
                    ("followlinks" variable nil (reparse-symbol function_parameters) [10803 10814]))                  )
                nil [10761 14533])
            ("__all__" code nil nil [14534 14556])
            ("if" code nil nil [14558 18444])
            ("try" code nil nil [18485 18537])
            ("execl" function
               (:documentation "execl(file, *args)

    Execute the executable file with argument list args, replacing the
    current process. "
                :arguments 
                  ( ("file" variable nil (reparse-symbol function_parameters) [18548 18552])
                    ("args" variable nil (reparse-symbol function_parameters) [18554 18559]))                  )
                nil [18538 18707])
            ("execle" function
               (:documentation "execle(file, *args, env)

    Execute the executable file with argument list args and
    environment env, replacing the current process. "
                :arguments 
                  ( ("file" variable nil (reparse-symbol function_parameters) [18719 18723])
                    ("args" variable nil (reparse-symbol function_parameters) [18725 18730]))                  )
                nil [18708 18934])
            ("execlp" function
               (:documentation "execlp(file, *args)

    Execute the executable file (which is searched for along $PATH)
    with argument list args, replacing the current process. "
                :arguments 
                  ( ("file" variable nil (reparse-symbol function_parameters) [18946 18950])
                    ("args" variable nil (reparse-symbol function_parameters) [18952 18957]))                  )
                nil [18935 19143])
            ("execlpe" function
               (:documentation "execlpe(file, *args, env)

    Execute the executable file (which is searched for along $PATH)
    with argument list args and environment env, replacing the current
    process. "
                :arguments 
                  ( ("file" variable nil (reparse-symbol function_parameters) [19156 19160])
                    ("args" variable nil (reparse-symbol function_parameters) [19162 19167]))                  )
                nil [19144 19413])
            ("execvp" function
               (:documentation "execvp(file, args)

    Execute the executable file (which is searched for along $PATH)
    with argument list args, replacing the current process.
    args may be a list or tuple of strings. "
                :arguments 
                  ( ("file" variable nil (reparse-symbol function_parameters) [19425 19429])
                    ("args" variable nil (reparse-symbol function_parameters) [19431 19435]))                  )
                nil [19414 19666])
            ("execvpe" function
               (:documentation "execvpe(file, args, env)

    Execute the executable file (which is searched for along $PATH)
    with argument list args and environment env , replacing the
    current process.
    args may be a list or tuple of strings. "
                :arguments 
                  ( ("file" variable nil (reparse-symbol function_parameters) [19679 19683])
                    ("args" variable nil (reparse-symbol function_parameters) [19685 19689])
                    ("env" variable nil (reparse-symbol function_parameters) [19691 19694]))                  )
                nil [19667 19961])
            ("__all__" code nil nil [19962 20034])
            ("_execvpe" function (:arguments 
              ( ("file" variable nil (reparse-symbol function_parameters) [20049 20053])
                ("args" variable nil (reparse-symbol function_parameters) [20055 20059])
                ("env" variable nil (reparse-symbol function_parameters) [20061 20064]))              ) nil [20036 20999])
            ("get_exec_path" function
               (:documentation "Returns the sequence of directories that will be searched for the
    named executable (similar to a shell) when launching a process.

    *env* must be an environment variable dict or None.  If *env* is None,
    os.environ will be used.
    "
                :arguments 
                  ( ("env" variable nil (reparse-symbol function_parameters) [21019 21022]))                  )
                nil [21001 22472])
            ("collections.abc" include nil nil [22547 22589])
            ("_Environ" type
               (:superclasses ("MutableMapping")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [22727 22753])
                            ("self" variable nil (reparse-symbol indented_block_body) [22762 22788])
                            ("self" variable nil (reparse-symbol indented_block_body) [22797 22827])
                            ("self" variable nil (reparse-symbol indented_block_body) [22836 22866])
                            ("self" variable nil (reparse-symbol indented_block_body) [22875 22895])
                            ("self" variable nil (reparse-symbol indented_block_body) [22904 22928])
                            ("self" variable nil (reparse-symbol indented_block_body) [22937 22954]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22640 22644])
                            ("data" variable nil (reparse-symbol function_parameters) [22646 22650])
                            ("encodekey" variable nil (reparse-symbol function_parameters) [22652 22661])
                            ("decodekey" variable nil (reparse-symbol function_parameters) [22663 22672])
                            ("encodevalue" variable nil (reparse-symbol function_parameters) [22674 22685])
                            ("decodevalue" variable nil (reparse-symbol function_parameters) [22687 22698])
                            ("putenv" variable nil (reparse-symbol function_parameters) [22700 22706])
                            ("unsetenv" variable nil (reparse-symbol function_parameters) [22708 22716]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [22627 22955])
                    ("__getitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22976 22980])
                            ("key" variable nil (reparse-symbol function_parameters) [22982 22985]))                          )
                        (reparse-symbol indented_block_body) [22960 23075])
                    ("__setitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23096 23100])
                            ("key" variable nil (reparse-symbol function_parameters) [23102 23105])
                            ("value" variable nil (reparse-symbol function_parameters) [23107 23112]))                          )
                        (reparse-symbol indented_block_body) [23080 23253])
                    ("__delitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23274 23278])
                            ("key" variable nil (reparse-symbol function_parameters) [23280 23283]))                          )
                        (reparse-symbol indented_block_body) [23258 23375])
                    ("__iter__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23393 23397]))                          )
                        (reparse-symbol indented_block_body) [23380 23469])
                    ("__len__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23486 23490]))                          )
                        (reparse-symbol indented_block_body) [23474 23524])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23542 23546]))                          )
                        (reparse-symbol indented_block_body) [23529 23731])
                    ("copy" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23745 23749]))                          )
                        (reparse-symbol indented_block_body) [23736 23778])
                    ("setdefault" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23798 23802])
                            ("key" variable nil (reparse-symbol function_parameters) [23804 23807])
                            ("value" variable nil (reparse-symbol function_parameters) [23809 23814]))                          )
                        (reparse-symbol indented_block_body) [23783 23900]))                  
                :type "class")
                nil [22591 23900])
            ("try" code nil nil [23901 24018])
            ("try" code nil nil [24019 24149])
            ("_createenviron" function nil nil [24150 25202])
            ("environ" variable nil nil [25221 25247])
            ("del" code nil nil [25248 25266])
            ("getenv" function
               (:documentation "Get an environment variable, return None if it doesn't exist.
    The optional second argument can specify an alternate default.
    key, default and the result are str."
                :arguments 
                  ( ("key" variable nil (reparse-symbol function_parameters) [25280 25283])
                    ("default" variable nil (reparse-symbol function_parameters) [25285 25292]))                  )
                nil [25269 25517])
            ("supports_bytes_environ" code nil nil [25518 25568])
            ("__all__" code nil nil [25569 25621])
            ("if" code nil nil [25623 26303])
            ("_fscodec" function nil nil [26304 27596])
            ("fsencode, fsdecode" code nil nil [27597 27628])
            ("del" code nil nil [27629 27641])
            ("if" code nil nil [27686 30646])
            ("if" code nil nil [30647 31644])
            ("if" code nil nil [31646 32752])
            ("copyreg" include nil nil [32753 32779])
            ("_make_stat_result" function (:arguments 
              ( ("tup" variable nil (reparse-symbol function_parameters) [32803 32806])
                ("dict" variable nil (reparse-symbol function_parameters) [32808 32812]))              ) nil [32781 32849])
            ("_pickle_stat_result" function (:arguments 
              ( ("sr" variable nil (reparse-symbol function_parameters) [32874 32876]))              ) nil [32850 32951])
            ("try" code nil nil [32952 33085])
            ("_make_statvfs_result" function (:arguments 
              ( ("tup" variable nil (reparse-symbol function_parameters) [33111 33114])
                ("dict" variable nil (reparse-symbol function_parameters) [33116 33120]))              ) nil [33086 33160])
            ("_pickle_statvfs_result" function (:arguments 
              ( ("sr" variable nil (reparse-symbol function_parameters) [33188 33190]))              ) nil [33161 33268])
            ("try" code nil nil [33269 33435])
            ("popen" function (:arguments 
              ( ("cmd" variable nil (reparse-symbol function_parameters) [33466 33469])
                ("mode" variable nil (reparse-symbol function_parameters) [33471 33475])
                ("buffering" variable nil (reparse-symbol function_parameters) [33481 33490]))              ) nil [33456 34363])
            ("_wrap_close" type
               (:members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [34506 34527])
                            ("self" variable nil (reparse-symbol indented_block_body) [34536 34553]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [34477 34481])
                            ("stream" variable nil (reparse-symbol function_parameters) [34483 34489])
                            ("proc" variable nil (reparse-symbol function_parameters) [34491 34495]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [34464 34554])
                    ("close" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [34568 34572]))                          )
                        (reparse-symbol indented_block_body) [34558 34835])
                    ("__enter__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [34853 34857]))                          )
                        (reparse-symbol indented_block_body) [34839 34880])
                    ("__exit__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [34897 34901])
                            ("args" variable nil (reparse-symbol function_parameters) [34903 34908]))                          )
                        (reparse-symbol indented_block_body) [34884 34932])
                    ("__getattr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [34952 34956])
                            ("name" variable nil (reparse-symbol function_parameters) [34958 34962]))                          )
                        (reparse-symbol indented_block_body) [34936 35008])
                    ("__iter__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [35025 35029]))                          )
                        (reparse-symbol indented_block_body) [35012 35066]))                  
                :type "class")
                nil [34441 35066])
            ("fdopen" function (:arguments 
              ( ("fd" variable nil (reparse-symbol function_parameters) [35099 35101])
                ("args" variable nil (reparse-symbol function_parameters) [35103 35108])
                ("kwargs" variable nil (reparse-symbol function_parameters) [35110 35118]))              ) nil [35088 35284]))          
    :file "os.py"
    :pointmax 35284
    :fsize 35283
    :lastmodtime '(20832 44201 0 0)
    :unmatched-syntax '((INDENT_BLOCK 20665 . 20894) (NEWLINE 20664 . 20665) (COLON 20663 . 20664) (TRY 20591 . 20594) (AS 20659 . 20661) (INDENT_BLOCK 17960 . 18056) (NEWLINE 17959 . 17960) (COLON 17958 . 17959) (TRY 17779 . 17782) (AS 17952 . 17954) (MULT 14681 . 14682) (COMMA 14682 . 14683) (INDENT_BLOCK 14021 . 14093) (NEWLINE 14020 . 14021) (COLON 14019 . 14020) (TRY 13862 . 13865) (AS 14013 . 14015) (INDENT_BLOCK 8354 . 9126) (NEWLINE 8353 . 8354) (COLON 8352 . 8353) (TRY 8298 . 8301) (AS 8348 . 8350) (INDENT_BLOCK 8035 . 8097) (NEWLINE 7975 . 7976) (COLON 7974 . 7975) (TRY 7899 . 7902) (AS 7970 . 7972))
    )
   (semanticdb-table "codecs.py"
    :major-mode 'python-mode
    :tags 
        '( ("\"\"\" codecs -- Python Codec Registry, API and helpers.


Written by Marc-Andre Lemburg (mal@lemburg.com).

(c) Copyright CNRI, All Rights Reserved. NO WARRANTY.

\"\"\"" code nil nil [1 165])
            ("builtins" include nil nil [169 189])
            ("sys" include nil nil [169 189])
            ("__all__" variable nil nil [371 783])
            ("'\\xef\\xbb\\xbf'" code nil nil [985 999])
            ("'\\xff\\xfe'" code nil nil [1050 1060])
            ("'\\xfe\\xff'" code nil nil [1108 1118])
            ("'\\xff\\xfe\\x00\\x00'" code nil nil [1160 1178])
            ("'\\x00\\x00\\xfe\\xff'" code nil nil [1217 1235])
            ("if" code nil nil [1237 1534])
            ("BOM32_LE" variable nil nil [1578 1601])
            ("BOM32_BE" variable nil nil [1602 1625])
            ("BOM64_LE" variable nil nil [1626 1649])
            ("BOM64_BE" variable nil nil [1650 1673])
            ("CodecInfo" type
               (:superclasses ("tuple")
                :members 
                  ( ("__new__" function (:arguments 
                      ( ("cls" variable nil (reparse-symbol function_parameters) [1760 1763])
                        ("encode" variable nil (reparse-symbol function_parameters) [1765 1771])
                        ("decode" variable nil (reparse-symbol function_parameters) [1773 1779])
                        ("streamreader" variable nil (reparse-symbol function_parameters) [1781 1793])
                        ("streamwriter" variable nil (reparse-symbol function_parameters) [1800 1812])
                        ("incrementalencoder" variable nil (reparse-symbol function_parameters) [1827 1845])
                        ("incrementaldecoder" variable nil (reparse-symbol function_parameters) [1852 1870])
                        ("name" variable nil (reparse-symbol function_parameters) [1877 1881]))                      ) (reparse-symbol indented_block_body) [1748 2260])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2278 2282]))                          )
                        (reparse-symbol indented_block_body) [2265 2452]))                  
                :type "class")
                nil [1719 2452])
            ("Codec" type
               (:documentation " Defines the interface for stateless encoders/decoders.

        The .encode()/.decode() methods may use different error
        handling schemes by providing the errors argument. These
        string values are predefined:

         'strict' - raise a ValueError error (or a subclass)
         'ignore' - ignore the character and continue with the next
         'replace' - replace with a suitable replacement character;
                    Python will use the official U+FFFD REPLACEMENT
                    CHARACTER for the builtin Unicode codecs on
                    decoding and '?' on encoding.
         'xmlcharrefreplace' - Replace with the appropriate XML
                               character reference (only for encoding).
         'backslashreplace'  - Replace with backslashed escape sequences
                               (only for encoding).

        The set of allowed values can be extended via register_error.

    "
                :members 
                  ( ("encode" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3434 3438])
                            ("input" variable nil (reparse-symbol function_parameters) [3440 3445])
                            ("errors" variable nil (reparse-symbol function_parameters) [3447 3453]))                          
                        :documentation " Encodes the object input and returns a tuple (output
            object, length consumed).

            errors defines the error handling to apply. It defaults to
            'strict' handling.

            The method may not store state in the Codec instance. Use
            StreamCodec for codecs which have to keep state in order to
            make encoding/decoding efficient.

            The encoder must be able to handle zero length input and
            return an empty object of the output object type in this
            situation.

        ")
                        (reparse-symbol indented_block_body) [3423 4070])
                    ("decode" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4086 4090])
                            ("input" variable nil (reparse-symbol function_parameters) [4092 4097])
                            ("errors" variable nil (reparse-symbol function_parameters) [4099 4105]))                          
                        :documentation " Decodes the object input and returns a tuple (output
            object, length consumed).

            input must be an object which provides the bf_getreadbuf
            buffer slot. Python strings, buffer objects and memory
            mapped files are examples of objects providing this slot.

            errors defines the error handling to apply. It defaults to
            'strict' handling.

            The method may not store state in the Codec instance. Use
            StreamCodec for codecs which have to keep state in order to
            make encoding/decoding efficient.

            The decoder must be able to handle zero length input and
            return an empty object of the output object type in this
            situation.

        ")
                        (reparse-symbol indented_block_body) [4075 4929]))                  
                :type "class")
                nil [2453 4929])
            ("IncrementalEncoder" type
               (:documentation "
    An IncrementalEncoder encodes an input in multiple steps. The input can
    be passed piece by piece to the encode() method. The IncrementalEncoder
    remembers the state of the encoding process between calls to encode().
    "
                :superclasses ("object")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        Creates an IncrementalEncoder instance.

        The IncrementalEncoder may use different error handling schemes by
        providing the errors keyword argument. See the module docstring
        for a list of possible values.
        \"\"\"" code nil (reparse-symbol indented_block_body) [5256 5506])
                            ("self" variable nil (reparse-symbol indented_block_body) [5515 5535])
                            ("self" variable nil (reparse-symbol indented_block_body) [5544 5560]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5224 5228])
                            ("errors" variable nil (reparse-symbol function_parameters) [5230 5236]))                          
                        :documentation "
        Creates an IncrementalEncoder instance.

        The IncrementalEncoder may use different error handling schemes by
        providing the errors keyword argument. See the module docstring
        for a list of possible values.
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [5211 5561])
                    ("encode" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5577 5581])
                            ("input" variable nil (reparse-symbol function_parameters) [5583 5588])
                            ("final" variable nil (reparse-symbol function_parameters) [5590 5595]))                          
                        :documentation "
        Encodes input and returns the resulting object.
        ")
                        (reparse-symbol indented_block_body) [5566 5718])
                    ("reset" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5733 5737]))                          
                        :documentation "
        Resets the encoder to the initial state.
        ")
                        (reparse-symbol indented_block_body) [5723 5813])
                    ("getstate" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5831 5835]))                          
                        :documentation "
        Return the current state of the encoder.
        ")
                        (reparse-symbol indented_block_body) [5818 5928])
                    ("setstate" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5946 5950])
                            ("state" variable nil (reparse-symbol function_parameters) [5952 5957]))                          
                        :documentation "
        Set the current state of the encoder. state must have been
        returned by getstate().
        ")
                        (reparse-symbol indented_block_body) [5933 6083]))                  
                :type "class")
                nil [4930 6083])
            ("BufferedIncrementalEncoder" type
               (:documentation "
    This subclass of IncrementalEncoder can be used as the baseclass for an
    incremental encoder if the encoder must keep some of the output in a
    buffer between calls to encode().
    "
                :superclasses ("IncrementalEncoder")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("IncrementalEncoder" code nil (reparse-symbol indented_block_body) [6390 6431])
                            ("self" variable nil (reparse-symbol indented_block_body) [6505 6521]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6358 6362])
                            ("errors" variable nil (reparse-symbol function_parameters) [6364 6370]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [6345 6522])
                    ("_buffer_encode" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6546 6550])
                            ("input" variable nil (reparse-symbol function_parameters) [6552 6557])
                            ("errors" variable nil (reparse-symbol function_parameters) [6559 6565])
                            ("final" variable nil (reparse-symbol function_parameters) [6567 6572]))                          )
                        (reparse-symbol indented_block_body) [6527 6733])
                    ("encode" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6749 6753])
                            ("input" variable nil (reparse-symbol function_parameters) [6755 6760])
                            ("final" variable nil (reparse-symbol function_parameters) [6762 6767]))                          )
                        (reparse-symbol indented_block_body) [6738 7053])
                    ("reset" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7068 7072]))                          )
                        (reparse-symbol indented_block_body) [7058 7139])
                    ("getstate" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7157 7161]))                          )
                        (reparse-symbol indented_block_body) [7144 7196])
                    ("setstate" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7214 7218])
                            ("state" variable nil (reparse-symbol function_parameters) [7220 7225]))                          )
                        (reparse-symbol indented_block_body) [7201 7262]))                  
                :type "class")
                nil [6084 7262])
            ("IncrementalDecoder" type
               (:documentation "
    An IncrementalDecoder decodes an input in multiple steps. The input can
    be passed piece by piece to the decode() method. The IncrementalDecoder
    remembers the state of the decoding process between calls to decode().
    "
                :superclasses ("object")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        Create a IncrementalDecoder instance.

        The IncrementalDecoder may use different error handling schemes by
        providing the errors keyword argument. See the module docstring
        for a list of possible values.
        \"\"\"" code nil (reparse-symbol indented_block_body) [7589 7837])
                            ("self" variable nil (reparse-symbol indented_block_body) [7846 7866]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7557 7561])
                            ("errors" variable nil (reparse-symbol function_parameters) [7563 7569]))                          
                        :documentation "
        Create a IncrementalDecoder instance.

        The IncrementalDecoder may use different error handling schemes by
        providing the errors keyword argument. See the module docstring
        for a list of possible values.
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [7544 7867])
                    ("decode" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7883 7887])
                            ("input" variable nil (reparse-symbol function_parameters) [7889 7894])
                            ("final" variable nil (reparse-symbol function_parameters) [7896 7901]))                          
                        :documentation "
        Decode input and returns the resulting object.
        ")
                        (reparse-symbol indented_block_body) [7872 8023])
                    ("reset" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8038 8042]))                          
                        :documentation "
        Reset the decoder to the initial state.
        ")
                        (reparse-symbol indented_block_body) [8028 8117])
                    ("getstate" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8135 8139]))                          
                        :documentation "
        Return the current state of the decoder.

        This must be a (buffered_input, additional_state_info) tuple.
        buffered_input must be a bytes object containing bytes that
        were passed to decode() that have not yet been converted.
        additional_state_info must be a non-negative integer
        representing the state of the decoder WITHOUT yet having
        processed the contents of buffered_input.  In the initial state
        and after reset(), getstate() must return (b\"\", 0).
        ")
                        (reparse-symbol indented_block_body) [8122 8702])
                    ("setstate" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8720 8724])
                            ("state" variable nil (reparse-symbol function_parameters) [8726 8731]))                          
                        :documentation "
        Set the current state of the decoder.

        state must have been returned by getstate().  The effect of
        setstate((b\"\", 0)) must be equivalent to reset().
        ")
                        (reparse-symbol indented_block_body) [8707 8931]))                  
                :type "class")
                nil [7263 8931])
            ("BufferedIncrementalDecoder" type
               (:documentation "
    This subclass of IncrementalDecoder can be used as the baseclass for an
    incremental decoder if the decoder must be able to handle incomplete
    byte sequences.
    "
                :superclasses ("IncrementalDecoder")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("IncrementalDecoder" code nil (reparse-symbol indented_block_body) [9220 9261])
                            ("\"\"" code nil (reparse-symbol indented_block_body) [9350 9352]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9188 9192])
                            ("errors" variable nil (reparse-symbol function_parameters) [9194 9200]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [9175 9353])
                    ("_buffer_decode" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9377 9381])
                            ("input" variable nil (reparse-symbol function_parameters) [9383 9388])
                            ("errors" variable nil (reparse-symbol function_parameters) [9390 9396])
                            ("final" variable nil (reparse-symbol function_parameters) [9398 9403]))                          )
                        (reparse-symbol indented_block_body) [9358 9564])
                    ("decode" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9580 9584])
                            ("input" variable nil (reparse-symbol function_parameters) [9586 9591])
                            ("final" variable nil (reparse-symbol function_parameters) [9593 9598]))                          )
                        (reparse-symbol indented_block_body) [9569 9884])
                    ("reset" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9899 9903]))                          )
                        (reparse-symbol indented_block_body) [9889 9971])
                    ("getstate" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9989 9993]))                          )
                        (reparse-symbol indented_block_body) [9976 10072])
                    ("setstate" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10090 10094])
                            ("state" variable nil (reparse-symbol function_parameters) [10096 10101]))                          )
                        (reparse-symbol indented_block_body) [10077 10174]))                  
                :type "class")
                nil [8932 10174])
            ("StreamWriter" type
               (:superclasses ("Codec")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\" Creates a StreamWriter instance.

            stream must be a file-like object open for writing
            (binary) data.

            The StreamWriter may use different error handling
            schemes by providing the errors keyword argument. These
            parameters are predefined:

             'strict' - raise a ValueError (or a subclass)
             'ignore' - ignore the character and continue with the next
             'replace'- replace with a suitable replacement character
             'xmlcharrefreplace' - Replace with the appropriate XML
                                   character reference.
             'backslashreplace'  - Replace with backslashed escape
                                   sequences (only for encoding).

            The set of allowed parameter values can be extended via
            register_error.
        \"\"\"" code nil (reparse-symbol indented_block_body) [10476 11341])
                            ("self" variable nil (reparse-symbol indented_block_body) [11350 11370])
                            ("self" variable nil (reparse-symbol indented_block_body) [11379 11399]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10435 10439])
                            ("stream" variable nil (reparse-symbol function_parameters) [10441 10447])
                            ("errors" variable nil (reparse-symbol function_parameters) [10449 10455]))                          
                        :documentation " Creates a StreamWriter instance.

            stream must be a file-like object open for writing
            (binary) data.

            The StreamWriter may use different error handling
            schemes by providing the errors keyword argument. These
            parameters are predefined:

             'strict' - raise a ValueError (or a subclass)
             'ignore' - ignore the character and continue with the next
             'replace'- replace with a suitable replacement character
             'xmlcharrefreplace' - Replace with the appropriate XML
                                   character reference.
             'backslashreplace'  - Replace with backslashed escape
                                   sequences (only for encoding).

            The set of allowed parameter values can be extended via
            register_error.
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [10422 11400])
                    ("write" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11415 11419])
                            ("object" variable nil (reparse-symbol function_parameters) [11421 11427]))                          
                        :documentation " Writes the object's contents encoded to self.stream.
        ")
                        (reparse-symbol indented_block_body) [11405 11598])
                    ("writelines" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11618 11622])
                            ("list" variable nil (reparse-symbol function_parameters) [11624 11628]))                          
                        :documentation " Writes the concatenated list of strings to the stream
            using .write().
        ")
                        (reparse-symbol indented_block_body) [11603 11772])
                    ("reset" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11787 11791]))                          
                        :documentation " Flushes and resets the codec buffers used for keeping state.

            Calling this method should ensure that the data on the
            output is put into a clean state, that allows appending
            of new fresh data without having to rescan the whole
            stream to recover state.

        ")
                        (reparse-symbol indented_block_body) [11777 12132])
                    ("seek" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12146 12150])
                            ("offset" variable nil (reparse-symbol function_parameters) [12152 12158])
                            ("whence" variable nil (reparse-symbol function_parameters) [12160 12166]))                          )
                        (reparse-symbol indented_block_body) [12137 12277])
                    ("__getattr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12298 12302])
                            ("name" variable nil (reparse-symbol function_parameters) [12304 12308])
                            ("getattr" variable nil (reparse-symbol function_parameters) [12330 12337]))                          
                        :documentation " Inherit all other methods from the underlying stream.
        ")
                        (reparse-symbol indented_block_body) [12282 12469])
                    ("__enter__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12488 12492]))                          )
                        (reparse-symbol indented_block_body) [12474 12515])
                    ("__exit__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12533 12537])
                            ("type" variable nil (reparse-symbol function_parameters) [12539 12543])
                            ("value" variable nil (reparse-symbol function_parameters) [12545 12550])
                            ("tb" variable nil (reparse-symbol function_parameters) [12552 12554]))                          )
                        (reparse-symbol indented_block_body) [12520 12585]))                  
                :type "class")
                nil [10390 12585])
            ("StreamReader" type
               (:superclasses ("Codec")
                :members 
                  ( ("charbuffertype" variable nil (reparse-symbol indented_block_body) [12623 12643])
                    ("__init__" function
                       (:suite 
                          ( ("\"\"\" Creates a StreamReader instance.

            stream must be a file-like object open for reading
            (binary) data.

            The StreamReader may use different error handling
            schemes by providing the errors keyword argument. These
            parameters are predefined:

             'strict' - raise a ValueError (or a subclass)
             'ignore' - ignore the character and continue with the next
             'replace'- replace with a suitable replacement character;

            The set of allowed parameter values can be extended via
            register_error.
        \"\"\"" code nil (reparse-symbol indented_block_body) [12703 13312])
                            ("self" variable nil (reparse-symbol indented_block_body) [13321 13341])
                            ("self" variable nil (reparse-symbol indented_block_body) [13350 13370])
                            ("\"\"" code nil (reparse-symbol indented_block_body) [13398 13400])
                            ("self" variable nil (reparse-symbol indented_block_body) [13409 13455])
                            ("self" variable nil (reparse-symbol indented_block_body) [13464 13504])
                            ("self" variable nil (reparse-symbol indented_block_body) [13513 13535]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12662 12666])
                            ("stream" variable nil (reparse-symbol function_parameters) [12668 12674])
                            ("errors" variable nil (reparse-symbol function_parameters) [12676 12682]))                          
                        :documentation " Creates a StreamReader instance.

            stream must be a file-like object open for reading
            (binary) data.

            The StreamReader may use different error handling
            schemes by providing the errors keyword argument. These
            parameters are predefined:

             'strict' - raise a ValueError (or a subclass)
             'ignore' - ignore the character and continue with the next
             'replace'- replace with a suitable replacement character;

            The set of allowed parameter values can be extended via
            register_error.
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [12649 13536])
                    ("decode" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13552 13556])
                            ("input" variable nil (reparse-symbol function_parameters) [13558 13563])
                            ("errors" variable nil (reparse-symbol function_parameters) [13565 13571]))                          )
                        (reparse-symbol indented_block_body) [13541 13617])
                    ("read" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13631 13635])
                            ("size" variable nil (reparse-symbol function_parameters) [13637 13641])
                            ("chars" variable nil (reparse-symbol function_parameters) [13646 13651])
                            ("firstline" variable nil (reparse-symbol function_parameters) [13656 13665]))                          
                        :documentation " Decodes data from the stream self.stream and returns the
            resulting object.

            chars indicates the number of characters to read from the
            stream. read() will never return more than chars
            characters, but it might return less, if there are not enough
            characters available.

            size indicates the approximate maximum number of bytes to
            read from the stream for decoding purposes. The decoder
            can modify this setting as appropriate. The default value
            -1 indicates to read and decode as much as possible.  size
            is intended to prevent having to decode huge files in one
            step.

            If firstline is true, and a UnicodeDecodeError happens
            after the first line terminator in the input only the first line
            will be returned, the rest of the input will be kept until the
            next call to read().

            The method should use a greedy read strategy meaning that
            it should read as much data as is allowed within the
            definition of the encoding and the given size, e.g.  if
            optional encoding endings or state markers are available
            on the stream, these should be read too.
        ")
                        (reparse-symbol indented_block_body) [13622 17024])
                    ("readline" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17042 17046])
                            ("size" variable nil (reparse-symbol function_parameters) [17048 17052])
                            ("keepends" variable nil (reparse-symbol function_parameters) [17059 17067]))                          
                        :documentation " Read one line from the input stream and return the
            decoded data.

            size, if given, is passed as size argument to the
            read() method.

        ")
                        (reparse-symbol indented_block_body) [17029 20200])
                    ("readlines" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20219 20223])
                            ("sizehint" variable nil (reparse-symbol function_parameters) [20225 20233])
                            ("keepends" variable nil (reparse-symbol function_parameters) [20240 20248]))                          
                        :documentation " Read all lines available on the input stream
            and return them as list of lines.

            Line breaks are implemented using the codec's decoder
            method and are included in the list entries.

            sizehint, if given, is ignored since there is no efficient
            way to finding the true end-of-line.

        ")
                        (reparse-symbol indented_block_body) [20205 20686])
                    ("reset" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20701 20705]))                          
                        :documentation " Resets the codec buffers used for keeping state.

            Note that no stream repositioning should take place.
            This method is primarily intended to be able to recover
            from decoding errors.

        ")
                        (reparse-symbol indented_block_body) [20691 21061])
                    ("seek" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [21075 21079])
                            ("offset" variable nil (reparse-symbol function_parameters) [21081 21087])
                            ("whence" variable nil (reparse-symbol function_parameters) [21089 21095]))                          
                        :documentation " Set the input stream's current position.

            Resets the codec buffers used for keeping state.
        ")
                        (reparse-symbol indented_block_body) [21066 21289])
                    ("__next__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [21307 21311]))                          
                        :documentation " Return the next decoded line from the input stream.")
                        (reparse-symbol indented_block_body) [21294 21482])
                    ("__iter__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [21500 21504]))                          )
                        (reparse-symbol indented_block_body) [21487 21527])
                    ("__getattr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [21548 21552])
                            ("name" variable nil (reparse-symbol function_parameters) [21554 21558])
                            ("getattr" variable nil (reparse-symbol function_parameters) [21580 21587]))                          
                        :documentation " Inherit all other methods from the underlying stream.
        ")
                        (reparse-symbol indented_block_body) [21532 21719])
                    ("__enter__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [21738 21742]))                          )
                        (reparse-symbol indented_block_body) [21724 21765])
                    ("__exit__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [21783 21787])
                            ("type" variable nil (reparse-symbol function_parameters) [21789 21793])
                            ("value" variable nil (reparse-symbol function_parameters) [21795 21800])
                            ("tb" variable nil (reparse-symbol function_parameters) [21802 21804]))                          )
                        (reparse-symbol indented_block_body) [21770 21835]))                  
                :type "class")
                nil [12591 21835])
            ("StreamReaderWriter" type
               (:documentation " StreamReaderWriter instances allow wrapping streams which
        work in both read and write modes.

        The design is such that one can use the factory functions
        returned by the codec.lookup() function to construct the
        instance.

    "
                :members 
                  ( ("encoding" variable nil (reparse-symbol indented_block_body) [22197 22217])
                    ("__init__" function
                       (:suite 
                          ( ("\"\"\" Creates a StreamReaderWriter instance.

            stream must be a Stream-like object.

            Reader, Writer must be factory functions or classes
            providing the StreamReader, StreamWriter interface resp.

            Error handling is done in the same way as defined for the
            StreamWriter/Readers.

        \"\"\"" code nil (reparse-symbol indented_block_body) [22293 22637])
                            ("self" variable nil (reparse-symbol indented_block_body) [22646 22666])
                            ("self" variable nil (reparse-symbol indented_block_body) [22675 22711])
                            ("self" variable nil (reparse-symbol indented_block_body) [22720 22756])
                            ("self" variable nil (reparse-symbol indented_block_body) [22765 22785]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22236 22240])
                            ("stream" variable nil (reparse-symbol function_parameters) [22242 22248])
                            ("Reader" variable nil (reparse-symbol function_parameters) [22250 22256])
                            ("Writer" variable nil (reparse-symbol function_parameters) [22258 22264])
                            ("errors" variable nil (reparse-symbol function_parameters) [22266 22272]))                          
                        :documentation " Creates a StreamReaderWriter instance.

            stream must be a Stream-like object.

            Reader, Writer must be factory functions or classes
            providing the StreamReader, StreamWriter interface resp.

            Error handling is done in the same way as defined for the
            StreamWriter/Readers.

        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [22223 22786])
                    ("read" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22800 22804])
                            ("size" variable nil (reparse-symbol function_parameters) [22806 22810]))                          )
                        (reparse-symbol indented_block_body) [22791 22855])
                    ("readline" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22873 22877])
                            ("size" variable nil (reparse-symbol function_parameters) [22879 22883]))                          )
                        (reparse-symbol indented_block_body) [22860 22934])
                    ("readlines" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22953 22957])
                            ("sizehint" variable nil (reparse-symbol function_parameters) [22959 22967]))                          )
                        (reparse-symbol indented_block_body) [22939 23023])
                    ("__next__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23041 23045]))                          
                        :documentation " Return the next decoded line from the input stream.")
                        (reparse-symbol indented_block_body) [23028 23149])
                    ("__iter__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23167 23171]))                          )
                        (reparse-symbol indented_block_body) [23154 23194])
                    ("write" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23209 23213])
                            ("data" variable nil (reparse-symbol function_parameters) [23215 23219]))                          )
                        (reparse-symbol indented_block_body) [23199 23262])
                    ("writelines" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23282 23286])
                            ("list" variable nil (reparse-symbol function_parameters) [23288 23292]))                          )
                        (reparse-symbol indented_block_body) [23267 23340])
                    ("reset" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23355 23359]))                          )
                        (reparse-symbol indented_block_body) [23345 23419])
                    ("seek" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23433 23437])
                            ("offset" variable nil (reparse-symbol function_parameters) [23439 23445])
                            ("whence" variable nil (reparse-symbol function_parameters) [23447 23453]))                          )
                        (reparse-symbol indented_block_body) [23424 23599])
                    ("__getattr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23620 23624])
                            ("name" variable nil (reparse-symbol function_parameters) [23626 23630])
                            ("getattr" variable nil (reparse-symbol function_parameters) [23652 23659]))                          
                        :documentation " Inherit all other methods from the underlying stream.
        ")
                        (reparse-symbol indented_block_body) [23604 23791])
                    ("__enter__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23880 23884]))                          )
                        (reparse-symbol indented_block_body) [23866 23907])
                    ("__exit__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23925 23929])
                            ("type" variable nil (reparse-symbol function_parameters) [23931 23935])
                            ("value" variable nil (reparse-symbol function_parameters) [23937 23942])
                            ("tb" variable nil (reparse-symbol function_parameters) [23944 23946]))                          )
                        (reparse-symbol indented_block_body) [23912 23977]))                  
                :type "class")
                nil [21841 23977])
            ("StreamRecoder" type
               (:documentation " StreamRecoder instances provide a frontend - backend
        view of encoding data.

        They use the complete set of APIs returned by the
        codecs.lookup() function to implement their task.

        Data written to the stream is first decoded into an
        intermediate format (which is dependent on the given codec
        combination) and then written to the stream using an instance
        of the provided Writer class.

        In the other direction, data is read from the stream using a
        Reader instance and then return encoded data to the caller.

    "
                :members 
                  ( ("data_encoding" variable nil (reparse-symbol indented_block_body) [24658 24683])
                    ("file_encoding" variable nil (reparse-symbol indented_block_body) [24688 24713])
                    ("__init__" function
                       (:suite 
                          ( ("\"\"\" Creates a StreamRecoder instance which implements a two-way
            conversion: encode and decode work on the frontend (the
            input to .read() and output of .write()) while
            Reader and Writer work on the backend (reading and
            writing to the stream).

            You can use these objects to do transparent direct
            recodings from e.g. latin-1 to utf-8 and back.

            stream must be a file-like object.

            encode, decode must adhere to the Codec interface, Reader,
            Writer must be factory functions or classes providing the
            StreamReader, StreamWriter interface resp.

            encode and decode are needed for the frontend translation,
            Reader and Writer for the backend translation. Unicode is
            used as intermediate encoding.

            Error handling is done in the same way as defined for the
            StreamWriter/Readers.

        \"\"\"" code nil (reparse-symbol indented_block_body) [24822 25782])
                            ("self" variable nil (reparse-symbol indented_block_body) [25791 25811])
                            ("self" variable nil (reparse-symbol indented_block_body) [25820 25840])
                            ("self" variable nil (reparse-symbol indented_block_body) [25849 25869])
                            ("self" variable nil (reparse-symbol indented_block_body) [25878 25914])
                            ("self" variable nil (reparse-symbol indented_block_body) [25923 25959])
                            ("self" variable nil (reparse-symbol indented_block_body) [25968 25988]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24732 24736])
                            ("stream" variable nil (reparse-symbol function_parameters) [24738 24744])
                            ("encode" variable nil (reparse-symbol function_parameters) [24746 24752])
                            ("decode" variable nil (reparse-symbol function_parameters) [24754 24760])
                            ("Reader" variable nil (reparse-symbol function_parameters) [24762 24768])
                            ("Writer" variable nil (reparse-symbol function_parameters) [24770 24776])
                            ("errors" variable nil (reparse-symbol function_parameters) [24795 24801]))                          
                        :documentation " Creates a StreamRecoder instance which implements a two-way
            conversion: encode and decode work on the frontend (the
            input to .read() and output of .write()) while
            Reader and Writer work on the backend (reading and
            writing to the stream).

            You can use these objects to do transparent direct
            recodings from e.g. latin-1 to utf-8 and back.

            stream must be a file-like object.

            encode, decode must adhere to the Codec interface, Reader,
            Writer must be factory functions or classes providing the
            StreamReader, StreamWriter interface resp.

            encode and decode are needed for the frontend translation,
            Reader and Writer for the backend translation. Unicode is
            used as intermediate encoding.

            Error handling is done in the same way as defined for the
            StreamWriter/Readers.

        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [24719 25989])
                    ("read" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [26003 26007])
                            ("size" variable nil (reparse-symbol function_parameters) [26009 26013]))                          )
                        (reparse-symbol indented_block_body) [25994 26138])
                    ("readline" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [26156 26160])
                            ("size" variable nil (reparse-symbol function_parameters) [26162 26166]))                          )
                        (reparse-symbol indented_block_body) [26143 26382])
                    ("readlines" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [26401 26405])
                            ("sizehint" variable nil (reparse-symbol function_parameters) [26407 26415]))                          )
                        (reparse-symbol indented_block_body) [26387 26564])
                    ("__next__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [26582 26586]))                          
                        :documentation " Return the next decoded line from the input stream.")
                        (reparse-symbol indented_block_body) [26569 26770])
                    ("__iter__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [26788 26792]))                          )
                        (reparse-symbol indented_block_body) [26775 26815])
                    ("write" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [26830 26834])
                            ("data" variable nil (reparse-symbol function_parameters) [26836 26840]))                          )
                        (reparse-symbol indented_block_body) [26820 26943])
                    ("writelines" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [26963 26967])
                            ("list" variable nil (reparse-symbol function_parameters) [26969 26973]))                          )
                        (reparse-symbol indented_block_body) [26948 27105])
                    ("reset" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [27120 27124]))                          )
                        (reparse-symbol indented_block_body) [27110 27184])
                    ("__getattr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [27205 27209])
                            ("name" variable nil (reparse-symbol function_parameters) [27211 27215])
                            ("getattr" variable nil (reparse-symbol function_parameters) [27237 27244]))                          
                        :documentation " Inherit all other methods from the underlying stream.
        ")
                        (reparse-symbol indented_block_body) [27189 27376])
                    ("__enter__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [27395 27399]))                          )
                        (reparse-symbol indented_block_body) [27381 27422])
                    ("__exit__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [27440 27444])
                            ("type" variable nil (reparse-symbol function_parameters) [27446 27450])
                            ("value" variable nil (reparse-symbol function_parameters) [27452 27457])
                            ("tb" variable nil (reparse-symbol function_parameters) [27459 27461]))                          )
                        (reparse-symbol indented_block_body) [27427 27492]))                  
                :type "class")
                nil [23983 27492])
            ("open" function
               (:documentation " Open an encoded file using the given mode and return
        a wrapped version providing transparent encoding/decoding.

        Note: The wrapped version will only accept the object format
        defined by the codecs, i.e. Unicode objects for most builtin
        codecs. Output is also codec dependent and will usually be
        Unicode as well.

        Files are always opened in binary mode, even if no binary mode
        was specified. This is done to avoid data loss due to encodings
        using 8-bit values. The default file mode is 'rb' meaning to
        open the file in binary read mode.

        encoding specifies the encoding which is to be used for the
        file.

        errors may be given to define the error handling. It defaults
        to 'strict' which causes ValueErrors to be raised in case an
        encoding error occurs.

        buffering has the same meaning as for the builtin open() API.
        It defaults to line buffered.

        The returned wrapped file object provides an extra attribute
        .encoding which allows querying the used encoding. This
        attribute is only available if an encoding was specified as
        parameter.

    "
                :arguments 
                  ( ("filename" variable nil (reparse-symbol function_parameters) [27517 27525])
                    ("mode" variable nil (reparse-symbol function_parameters) [27527 27531])
                    ("encoding" variable nil (reparse-symbol function_parameters) [27538 27546])
                    ("errors" variable nil (reparse-symbol function_parameters) [27553 27559])
                    ("buffering" variable nil (reparse-symbol function_parameters) [27570 27579]))                  )
                nil [27508 29224])
            ("EncodedFile" function
               (:documentation " Return a wrapped version of file which provides transparent
        encoding translation.

        Strings written to the wrapped file are interpreted according
        to the given data_encoding and then written to the original
        file as string using file_encoding. The intermediate encoding
        will usually be Unicode but depends on the specified codecs.

        Strings are read from the file using file_encoding and then
        passed back to the caller as string using data_encoding.

        If file_encoding is not given, it defaults to data_encoding.

        errors may be given to define the error handling. It defaults
        to 'strict' which causes ValueErrors to be raised in case an
        encoding error occurs.

        The returned wrapped file object provides two extra attributes
        .data_encoding and .file_encoding which reflect the given
        parameters of the same name. The attributes can be used for
        introspection by Python programs.

    "
                :arguments 
                  ( ("file" variable nil (reparse-symbol function_parameters) [29241 29245])
                    ("data_encoding" variable nil (reparse-symbol function_parameters) [29247 29260])
                    ("file_encoding" variable nil (reparse-symbol function_parameters) [29262 29275])
                    ("errors" variable nil (reparse-symbol function_parameters) [29282 29288]))                  )
                nil [29225 30732])
            ("getencoder" function
               (:documentation " Lookup up the codec for the given encoding and return
        its encoder function.

        Raises a LookupError in case the encoding cannot be found.

    "
                :arguments 
                  ( ("encoding" variable nil (reparse-symbol function_parameters) [30778 30786]))                  )
                nil [30763 30994])
            ("getdecoder" function
               (:documentation " Lookup up the codec for the given encoding and return
        its decoder function.

        Raises a LookupError in case the encoding cannot be found.

    "
                :arguments 
                  ( ("encoding" variable nil (reparse-symbol function_parameters) [31010 31018]))                  )
                nil [30995 31226])
            ("getincrementalencoder" function
               (:documentation " Lookup up the codec for the given encoding and return
        its IncrementalEncoder class or factory function.

        Raises a LookupError in case the encoding cannot be found
        or the codecs doesn't provide an incremental encoder.

    "
                :arguments 
                  ( ("encoding" variable nil (reparse-symbol function_parameters) [31253 31261]))                  )
                nil [31227 31652])
            ("getincrementaldecoder" function
               (:documentation " Lookup up the codec for the given encoding and return
        its IncrementalDecoder class or factory function.

        Raises a LookupError in case the encoding cannot be found
        or the codecs doesn't provide an incremental decoder.

    "
                :arguments 
                  ( ("encoding" variable nil (reparse-symbol function_parameters) [31679 31687]))                  )
                nil [31653 32078])
            ("getreader" function
               (:documentation " Lookup up the codec for the given encoding and return
        its StreamReader class or factory function.

        Raises a LookupError in case the encoding cannot be found.

    "
                :arguments 
                  ( ("encoding" variable nil (reparse-symbol function_parameters) [32093 32101]))                  )
                nil [32079 32337])
            ("getwriter" function
               (:documentation " Lookup up the codec for the given encoding and return
        its StreamWriter class or factory function.

        Raises a LookupError in case the encoding cannot be found.

    "
                :arguments 
                  ( ("encoding" variable nil (reparse-symbol function_parameters) [32352 32360]))                  )
                nil [32338 32596])
            ("iterencode" function
               (:documentation "
    Encoding iterator.

    Encodes the input strings from the iterator using a IncrementalEncoder.

    errors and kwargs are passed through to the IncrementalEncoder
    constructor.
    "
                :arguments 
                  ( ("iterator" variable nil (reparse-symbol function_parameters) [32612 32620])
                    ("encoding" variable nil (reparse-symbol function_parameters) [32622 32630])
                    ("errors" variable nil (reparse-symbol function_parameters) [32632 32638])
                    ("kwargs" variable nil (reparse-symbol function_parameters) [32649 32657]))                  )
                nil [32597 33109])
            ("iterdecode" function
               (:documentation "
    Decoding iterator.

    Decodes the input strings from the iterator using a IncrementalDecoder.

    errors and kwargs are passed through to the IncrementalDecoder
    constructor.
    "
                :arguments 
                  ( ("iterator" variable nil (reparse-symbol function_parameters) [33125 33133])
                    ("encoding" variable nil (reparse-symbol function_parameters) [33135 33143])
                    ("errors" variable nil (reparse-symbol function_parameters) [33145 33151])
                    ("kwargs" variable nil (reparse-symbol function_parameters) [33162 33170]))                  )
                nil [33110 33623])
            ("make_identity_dict" function
               (:documentation " make_identity_dict(rng) -> dict

        Return a dictionary where elements of the rng sequence are
        mapped to themselves.

    "
                :arguments 
                  ( ("rng" variable nil (reparse-symbol function_parameters) [33685 33688]))                  )
                nil [33662 33869])
            ("make_encoding_map" function
               (:documentation " Creates an encoding map from a decoding map.

        If a target mapping in the decoding map occurs multiple
        times, then that target is mapped to None (undefined mapping),
        causing an exception when encountered by the charmap codec
        during translation.

        One example where this happens is cp875.py which decodes
        multiple character to \\u001a.

    "
                :arguments 
                  ( ("decoding_map" variable nil (reparse-symbol function_parameters) [33892 33904]))                  )
                nil [33870 34448])
            ("try" code nil nil [34469 34967])
            ("_false" variable nil nil [35045 35055])
            ("if" code nil nil [35056 35088])
            ("if" code nil nil [35100 35368]))          
    :file "codecs.py"
    :pointmax 35368
    :fsize 35367
    :lastmodtime '(20832 44201 0 0)
    :unmatched-syntax '((INDENT_BLOCK 16070 . 16393) (NEWLINE 16069 . 16070) (COLON 16068 . 16069) (TRY 15947 . 15950) (AS 16062 . 16064) (INDENT_BLOCK 301 . 370) (COLON 299 . 300) (TRY 243 . 246) (AS 293 . 295))
    )
   (semanticdb-table "shutil.py"
    :major-mode 'python-mode
    :tags 
        '( ("\"\"\"Utility functions for copying and archiving files and directory trees.

XXX The functions here don't copy the resource fork or other metadata on Mac.

\"\"\"" code nil nil [1 158])
            ("os" include nil nil [160 169])
            ("sys" include nil nil [170 180])
            ("stat" include nil nil [181 192])
            ("os.path" include nil nil [193 220])
            ("fnmatch" include nil nil [221 235])
            ("collections" include nil nil [236 254])
            ("errno" include nil nil [255 267])
            ("tarfile" include nil nil [268 282])
            ("try" code nil nil [284 389])
            ("try" code nil nil [390 464])
            ("try" code nil nil [465 539])
            ("__all__" variable nil nil [540 982])
            ("Error" type
               (:superclasses ("EnvironmentError")
                :members 
                  ( ("pass" code nil (reparse-symbol indented_block_body) [1088 1092]))                  
                :type "class")
                nil [1053 1093])
            ("SpecialFileError" type
               (:documentation "Raised when trying to do a kind of operation (e.g. copying) which is
    not supported on a special file (e.g. a named pipe)"
                :superclasses ("EnvironmentError")
                :type "class")
                nil [1094 1271])
            ("ExecError" type
               (:documentation "Raised when a command could not be executed"
                :superclasses ("EnvironmentError")
                :type "class")
                nil [1272 1361])
            ("ReadError" type
               (:documentation "Raised when an archive cannot be read"
                :superclasses ("EnvironmentError")
                :type "class")
                nil [1362 1445])
            ("RegistryError" type
               (:documentation "Raised when a registery operation with the archiving
    and unpacking registeries fails"
                :superclasses ("Exception")
                :type "class")
                nil [1446 1577])
            ("try" code nil nil [1579 1643])
            ("copyfileobj" function
               (:documentation "copy data from file-like object fsrc to file-like object fdst"
                :arguments 
                  ( ("fsrc" variable nil (reparse-symbol function_parameters) [1660 1664])
                    ("fdst" variable nil (reparse-symbol function_parameters) [1666 1670])
                    ("length" variable nil (reparse-symbol function_parameters) [1672 1678]))                  )
                nil [1644 1868])
            ("_samefile" function (:arguments 
              ( ("src" variable nil (reparse-symbol function_parameters) [1883 1886])
                ("dst" variable nil (reparse-symbol function_parameters) [1888 1891]))              ) nil [1869 2221])
            ("copyfile" function
               (:documentation "Copy data from src to dst.

    If follow_symlinks is not set and src is a symbolic link, a new
    symlink will be created instead of copying the file it points to.

    "
                :arguments 
                  ( ("src" variable nil (reparse-symbol function_parameters) [2235 2238])
                    ("dst" variable nil (reparse-symbol function_parameters) [2240 2243])
                    ("follow_symlinks" variable nil (reparse-symbol function_parameters) [2248 2263]))                  )
                nil [2222 3141])
            ("copymode" function
               (:documentation "Copy mode bits from src to dst.

    If follow_symlinks is not set, symlinks aren't followed if and only
    if both `src` and `dst` are symlinks.  If `lchmod` isn't available
    (e.g. Linux) this method does nothing.

    "
                :arguments 
                  ( ("src" variable nil (reparse-symbol function_parameters) [3155 3158])
                    ("dst" variable nil (reparse-symbol function_parameters) [3160 3163])
                    ("follow_symlinks" variable nil (reparse-symbol function_parameters) [3168 3183]))                  )
                nil [3142 3802])
            ("if" code nil nil [3803 4690])
            ("copystat" function
               (:documentation "Copy all stat info (mode bits, atime, mtime, flags) from src to dst.

    If the optional flag `follow_symlinks` is not set, symlinks aren't followed if and
    only if both `src` and `dst` are symlinks.

    "
                :arguments 
                  ( ("src" variable nil (reparse-symbol function_parameters) [4704 4707])
                    ("dst" variable nil (reparse-symbol function_parameters) [4709 4712])
                    ("follow_symlinks" variable nil (reparse-symbol function_parameters) [4717 4732]))                  )
                nil [4691 6742])
            ("copy" function
               (:documentation "Copy data and mode bits (\"cp src dst\"). Return the file's destination.

    The destination may be a directory.

    If follow_symlinks is false, symlinks won't be followed. This
    resembles GNU's \"cp -P src dst\".

    "
                :arguments 
                  ( ("src" variable nil (reparse-symbol function_parameters) [6752 6755])
                    ("dst" variable nil (reparse-symbol function_parameters) [6757 6760])
                    ("follow_symlinks" variable nil (reparse-symbol function_parameters) [6765 6780]))                  )
                nil [6743 7229])
            ("copy2" function
               (:documentation "Copy data and all stat info (\"cp -p src dst\"). Return the file's
    destination.\"

    The destination may be a directory.

    If follow_symlinks is false, symlinks won't be followed. This
    resembles GNU's \"cp -P src dst\".

    "
                :arguments 
                  ( ("src" variable nil (reparse-symbol function_parameters) [7240 7243])
                    ("dst" variable nil (reparse-symbol function_parameters) [7245 7248])
                    ("follow_symlinks" variable nil (reparse-symbol function_parameters) [7253 7268]))                  )
                nil [7230 7729])
            ("ignore_patterns" function
               (:documentation "Function that can be used as copytree() ignore parameter.

    Patterns is a sequence of glob-style patterns
    that are used to exclude files"
                :arguments 
                  ( ("patterns" variable nil (reparse-symbol function_parameters) [7750 7759]))                  )
                nil [7730 8142])
            ("copytree" function
               (:documentation "Recursively copy a directory tree.

    The destination directory must not already exist.
    If exception(s) occur, an Error is raised with a list of reasons.

    If the optional symlinks flag is true, symbolic links in the
    source tree result in symbolic links in the destination tree; if
    it is false, the contents of the files pointed to by symbolic
    links are copied. If the file pointed by the symlink doesn't
    exist, an exception will be added in the list of errors raised in
    an Error exception at the end of the copy process.

    You can set the optional ignore_dangling_symlinks flag to true if you
    want to silence this exception. Notice that this has no effect on
    platforms that don't support os.symlink.

    The optional ignore argument is a callable. If given, it
    is called with the `src` parameter, which is the directory
    being visited by copytree(), and `names` which is the list of
    `src` contents, as returned by os.listdir():

        callable(src, names) -> ignored_names

    Since copytree() is called recursively, the callable will be
    called once for each directory that is copied. It returns a
    list of names relative to the `src` directory that should
    not be copied.

    The optional copy_function argument is a callable that will be used
    to copy each file. It will be called with the source path and the
    destination path as arguments. By default, copy2() is used, but any
    function that supports the same signature (like copy()) can be used.

    "
                :arguments 
                  ( ("src" variable nil (reparse-symbol function_parameters) [8156 8159])
                    ("dst" variable nil (reparse-symbol function_parameters) [8161 8164])
                    ("symlinks" variable nil (reparse-symbol function_parameters) [8166 8174])
                    ("ignore" variable nil (reparse-symbol function_parameters) [8182 8188])
                    ("copy_function" variable nil (reparse-symbol function_parameters) [8195 8208])
                    ("ignore_dangling_symlinks" variable nil (reparse-symbol function_parameters) [8229 8253]))                  )
                nil [8143 11786])
            ("_rmtree_unsafe" function (:arguments 
              ( ("path" variable nil (reparse-symbol function_parameters) [11846 11850])
                ("onerror" variable nil (reparse-symbol function_parameters) [11852 11859]))              ) nil [11827 12816])
            ("_rmtree_safe_fd" function (:arguments 
              ( ("topfd" variable nil (reparse-symbol function_parameters) [12892 12897])
                ("path" variable nil (reparse-symbol function_parameters) [12899 12903])
                ("onerror" variable nil (reparse-symbol function_parameters) [12905 12912]))              ) nil [12872 14605])
            ("_use_fd_functions" variable nil nil [14606 14828])
            ("rmtree" function
               (:documentation "Recursively delete a directory tree.

    If ignore_errors is set, errors are ignored; otherwise, if onerror
    is set, it is called to handle the error with arguments (func,
    path, exc_info) where func is platform and implementation dependent;
    path is the argument to that function that caused it to fail; and
    exc_info is a tuple returned by sys.exc_info().  If ignore_errors
    is false and onerror is None, an exception is raised.

    "
                :arguments 
                  ( ("path" variable nil (reparse-symbol function_parameters) [14841 14845])
                    ("ignore_errors" variable nil (reparse-symbol function_parameters) [14847 14860])
                    ("onerror" variable nil (reparse-symbol function_parameters) [14868 14875]))                  )
                nil [14830 16724])
            ("rmtree" variable nil nil [16842 16891])
            ("_basename" function (:arguments 
              ( ("path" variable nil (reparse-symbol function_parameters) [16907 16911]))              ) nil [16893 17125])
            ("move" function
               (:documentation "Recursively move a file or directory to another location. This is
    similar to the Unix \"mv\" command. Return the file or directory's
    destination.

    If the destination is a directory or a symlink to a directory, the source
    is moved inside the directory. The destination path must not already
    exist.

    If the destination already exists but is not a directory, it may be
    overwritten depending on os.rename() semantics.

    If the destination is on our current filesystem, then rename() is used.
    Otherwise, src is copied to the destination and then removed. Symlinks are
    recreated under the new name if os.rename() fails because of cross
    filesystem renames.

    A lot more could be done here...  A look at a mv.c shows a lot of
    the issues this implementation glosses over.

    "
                :arguments 
                  ( ("src" variable nil (reparse-symbol function_parameters) [17135 17138])
                    ("dst" variable nil (reparse-symbol function_parameters) [17140 17143]))                  )
                nil [17126 18899])
            ("_destinsrc" function (:arguments 
              ( ("src" variable nil (reparse-symbol function_parameters) [18915 18918])
                ("dst" variable nil (reparse-symbol function_parameters) [18920 18923]))              ) nil [18900 19133])
            ("_get_gid" function
               (:documentation "Returns a gid, given a group name."
                :arguments 
                  ( ("name" variable nil (reparse-symbol function_parameters) [19147 19151]))                  )
                nil [19134 19412])
            ("_get_uid" function
               (:documentation "Returns an uid, given a user name."
                :arguments 
                  ( ("name" variable nil (reparse-symbol function_parameters) [19426 19430]))                  )
                nil [19413 19691])
            ("_make_tarball" function
               (:documentation "Create a (possibly compressed) tar file from all the files under
    'base_dir'.

    'compress' must be \"gzip\" (the default), \"bzip2\", or None.

    'owner' and 'group' can be used to define an owner and a group for the
    archive that is being built. If not provided, the current owner and group
    will be used.

    The output tar file will be named 'base_name' +  \".tar\", possibly plus
    the appropriate compression extension (\".gz\", or \".bz2\").

    Returns the output filename.
    "
                :arguments 
                  ( ("base_name" variable nil (reparse-symbol function_parameters) [19710 19719])
                    ("base_dir" variable nil (reparse-symbol function_parameters) [19721 19729])
                    ("compress" variable nil (reparse-symbol function_parameters) [19731 19739])
                    ("verbose" variable nil (reparse-symbol function_parameters) [19748 19755])
                    ("dry_run" variable nil (reparse-symbol function_parameters) [19759 19766])
                    ("owner" variable nil (reparse-symbol function_parameters) [19788 19793])
                    ("group" variable nil (reparse-symbol function_parameters) [19800 19805])
                    ("logger" variable nil (reparse-symbol function_parameters) [19812 19818]))                  )
                nil [19692 21722])
            ("_call_external_zip" function (:arguments 
              ( ("base_dir" variable nil (reparse-symbol function_parameters) [21746 21754])
                ("zip_filename" variable nil (reparse-symbol function_parameters) [21756 21768])
                ("verbose" variable nil (reparse-symbol function_parameters) [21770 21777])
                ("dry_run" variable nil (reparse-symbol function_parameters) [21785 21792]))              ) nil [21723 22436])
            ("_make_zipfile" function
               (:documentation "Create a zip file from all the files under 'base_dir'.

    The output zip file will be named 'base_name' + \".zip\".  Uses either the
    \"zipfile\" Python module (if available) or the InfoZIP \"zip\" utility
    (if installed and found on the default search path).  If neither tool is
    available, raises ExecError.  Returns the name of the output zip
    file.
    "
                :arguments 
                  ( ("base_name" variable nil (reparse-symbol function_parameters) [22455 22464])
                    ("base_dir" variable nil (reparse-symbol function_parameters) [22466 22474])
                    ("verbose" variable nil (reparse-symbol function_parameters) [22476 22483])
                    ("dry_run" variable nil (reparse-symbol function_parameters) [22487 22494])
                    ("logger" variable nil (reparse-symbol function_parameters) [22498 22504]))                  )
                nil [22437 24144])
            ("_ARCHIVE_FORMATS" variable nil nil [24145 24367])
            ("if" code nil nil [24369 24514])
            ("get_archive_formats" function (:documentation "Returns a list of supported formats for archiving and unarchiving.

    Each element of the returned sequence is a tuple (name, description)
    ") nil [24515 24834])
            ("register_archive_format" function
               (:documentation "Registers an archive format.

    name is the name of the format. function is the callable that will be
    used to create archives. If provided, extra_args is a sequence of
    (name, value) tuples that will be passed as arguments to the callable.
    description can be provided to describe the format, and will be returned
    by the get_archive_formats() function.
    "
                :arguments 
                  ( ("name" variable nil (reparse-symbol function_parameters) [24863 24867])
                    ("function" variable nil (reparse-symbol function_parameters) [24869 24877])
                    ("extra_args" variable nil (reparse-symbol function_parameters) [24879 24889])
                    ("description" variable nil (reparse-symbol function_parameters) [24896 24907]))                  )
                nil [24835 25801])
            ("unregister_archive_format" function (:arguments 
              ( ("name" variable nil (reparse-symbol function_parameters) [25832 25836]))              ) nil [25802 25870])
            ("make_archive" function
               (:documentation "Create an archive file (eg. zip or tar).

    'base_name' is the name of the file to create, minus any format-specific
    extension; 'format' is the archive format: one of \"zip\", \"tar\", \"bztar\"
    or \"gztar\".

    'root_dir' is a directory that will be the root directory of the
    archive; ie. we typically chdir into 'root_dir' before creating the
    archive.  'base_dir' is the directory where we start archiving from;
    ie. 'base_dir' will be the common prefix of all files and
    directories in the archive.  'root_dir' and 'base_dir' both default
    to the current directory.  Returns the name of the archive file.

    'owner' and 'group' are used when creating a tar archive. By default,
    uses the current owner and group.
    "
                :arguments 
                  ( ("base_name" variable nil (reparse-symbol function_parameters) [25888 25897])
                    ("format" variable nil (reparse-symbol function_parameters) [25899 25905])
                    ("root_dir" variable nil (reparse-symbol function_parameters) [25907 25915])
                    ("base_dir" variable nil (reparse-symbol function_parameters) [25922 25930])
                    ("verbose" variable nil (reparse-symbol function_parameters) [25937 25944])
                    ("dry_run" variable nil (reparse-symbol function_parameters) [25965 25972])
                    ("owner" variable nil (reparse-symbol function_parameters) [25976 25981])
                    ("group" variable nil (reparse-symbol function_parameters) [25988 25993])
                    ("logger" variable nil (reparse-symbol function_parameters) [26000 26006]))                  )
                nil [25871 27708])
            ("get_unpack_formats" function (:documentation "Returns a list of supported formats for unpacking.

    Each element of the returned sequence is a tuple
    (name, extensions, description)
    ") nil [27710 28028])
            ("_check_unpack_options" function
               (:documentation "Checks what gets registered as an unpacker."
                :arguments 
                  ( ("extensions" variable nil (reparse-symbol function_parameters) [28055 28065])
                    ("function" variable nil (reparse-symbol function_parameters) [28067 28075])
                    ("extra_args" variable nil (reparse-symbol function_parameters) [28077 28087]))                  )
                nil [28029 28722])
            ("register_unpack_format" function
               (:documentation "Registers an unpack format.

    `name` is the name of the format. `extensions` is a list of extensions
    corresponding to the format.

    `function` is the callable that will be
    used to unpack archives. The callable will receive archives to unpack.
    If it's unable to handle an archive, it needs to raise a ReadError
    exception.

    If provided, `extra_args` is a sequence of
    (name, value) tuples that will be passed as arguments to the callable.
    description can be provided to describe the format, and will be returned
    by the get_unpack_formats() function.
    "
                :arguments 
                  ( ("name" variable nil (reparse-symbol function_parameters) [28751 28755])
                    ("extensions" variable nil (reparse-symbol function_parameters) [28757 28767])
                    ("function" variable nil (reparse-symbol function_parameters) [28769 28777])
                    ("extra_args" variable nil (reparse-symbol function_parameters) [28779 28789])
                    ("description" variable nil (reparse-symbol function_parameters) [28823 28834]))                  )
                nil [28724 29625])
            ("unregister_unpack_format" function
               (:documentation "Removes the pack format from the registery."
                :arguments 
                  ( ("name" variable nil (reparse-symbol function_parameters) [29655 29659]))                  )
                nil [29626 29746])
            ("_ensure_directory" function
               (:documentation "Ensure that the parent directory of `path` exists"
                :arguments 
                  ( ("path" variable nil (reparse-symbol function_parameters) [29769 29773]))                  )
                nil [29747 29936])
            ("_unpack_zipfile" function
               (:documentation "Unpack zip `filename` to `extract_dir`
    "
                :arguments 
                  ( ("filename" variable nil (reparse-symbol function_parameters) [29957 29965])
                    ("extract_dir" variable nil (reparse-symbol function_parameters) [29967 29978]))                  )
                nil [29937 31005])
            ("_unpack_tarfile" function
               (:documentation "Unpack tar/tar.gz/tar.bz2 `filename` to `extract_dir`
    "
                :arguments 
                  ( ("filename" variable nil (reparse-symbol function_parameters) [31026 31034])
                    ("extract_dir" variable nil (reparse-symbol function_parameters) [31036 31047]))                  )
                nil [31006 31380])
            ("_UNPACK_FORMATS" variable nil nil [31381 31611])
            ("if" code nil nil [31613 31748])
            ("_find_unpack_format" function (:arguments 
              ( ("filename" variable nil (reparse-symbol function_parameters) [31773 31781]))              ) nil [31749 31954])
            ("unpack_archive" function
               (:documentation "Unpack an archive.

    `filename` is the name of the archive.

    `extract_dir` is the name of the target directory, where the archive
    is unpacked. If not provided, the current working directory is used.

    `format` is the archive format: one of \"zip\", \"tar\", or \"gztar\". Or any
    other registered format. If not provided, unpack_archive will use the
    filename extension and see if an unpacker was registered for that
    extension.

    In case none is found, a ValueError is raised.
    "
                :arguments 
                  ( ("filename" variable nil (reparse-symbol function_parameters) [31974 31982])
                    ("extract_dir" variable nil (reparse-symbol function_parameters) [31984 31995])
                    ("format" variable nil (reparse-symbol function_parameters) [32002 32008]))                  )
                nil [31955 33248])
            ("if" code nil nil [33250 34390])
            ("chown" function
               (:documentation "Change owner user and group of the given path.

    user and group can be the uid/gid or the user/group names, and in that case,
    they are converted to their respective uid/gid.
    "
                :arguments 
                  ( ("path" variable nil (reparse-symbol function_parameters) [34402 34406])
                    ("user" variable nil (reparse-symbol function_parameters) [34408 34412])
                    ("group" variable nil (reparse-symbol function_parameters) [34419 34424]))                  )
                nil [34392 35307])
            ("get_terminal_size" function
               (:documentation "Get the size of the terminal window.

    For each of the two dimensions, the environment variable, COLUMNS
    and LINES respectively, is checked. If the variable is defined and
    the value is a positive integer, it is used.

    When COLUMNS or LINES is not defined, which is the common case,
    the terminal connected to sys.__stdout__ is queried
    by invoking os.get_terminal_size.

    If the terminal size cannot be successfully queried, either because
    the system doesn't support querying, or because we are not
    connected to a terminal, the value given in fallback parameter
    is used. Fallback defaults to (80, 24) which is the default
    size used by many terminal emulators.

    The value returned is a named tuple of type os.terminal_size.
    "
                :arguments 
                  ( ("fallback" variable nil (reparse-symbol function_parameters) [35330 35338]))                  )
                nil [35308 36777])
            ("which" function
               (:documentation "Given a command, mode, and a PATH string, return the path which
    conforms to the given mode on the PATH, or None if there is no such
    file.

    `mode` defaults to os.F_OK | os.X_OK. `path` defaults to the result
    of os.environ.get(\"PATH\"), or can be overridden with a custom search
    path.

    "
                :arguments 
                  ( ("cmd" variable nil (reparse-symbol function_parameters) [36788 36791])
                    ("mode" variable nil (reparse-symbol function_parameters) [36793 36797])
                    ("path" variable nil (reparse-symbol function_parameters) [36817 36821]))                  )
                nil [36778 39033]))          
    :file "shutil.py"
    :pointmax 39033
    :fsize 39032
    :lastmodtime '(20832 44201 0 0)
    :unmatched-syntax '((INDENT_BLOCK 13000 . 13078) (NEWLINE 12999 . 13000) (COLON 12998 . 12999) (TRY 12934 . 12937) (AS 12992 . 12994) (INDENT_BLOCK 11518 . 11728) (NEWLINE 11517 . 11518) (COLON 11516 . 11517) (TRY 11459 . 11462) (AS 11510 . 11512) (INDENT_BLOCK 11399 . 11455) (NEWLINE 11398 . 11399) (COLON 11397 . 11398) (AS 11391 . 11393) (EXCEPT 11367 . 11373) (INDENT_BLOCK 11320 . 11359) (NEWLINE 11319 . 11320) (COLON 11318 . 11319) (TRY 10151 . 10154) (AS 11312 . 11314) (MULT 7250 . 7251) (COMMA 7251 . 7252) (MULT 6762 . 6763) (COMMA 6763 . 6764) (INDENT_BLOCK 6502 . 6693) (NEWLINE 6501 . 6502) (COLON 6500 . 6501) (TRY 6394 . 6397) (AS 6494 . 6496) (MULT 4714 . 4715) (COMMA 4715 . 4716) (INDENT_BLOCK 4529 . 4634) (NEWLINE 4528 . 4529) (COLON 4527 . 4528) (TRY 4332 . 4335) (AS 4523 . 4525) (INDENT_BLOCK 4190 . 4293) (NEWLINE 4189 . 4190) (COLON 4188 . 4189) (TRY 4085 . 4088) (AS 4184 . 4186) (MULT 3861 . 3862) (COMMA 3862 . 3863) (MULT 3165 . 3166) (COMMA 3166 . 3167) (MULT 2245 . 2246) (COMMA 2246 . 2247))
    )
   (semanticdb-table "io.py"
    :major-mode 'python-mode
    :tags 
        '( ("\"\"\"The io module provides the Python interfaces to stream handling. The
builtin open function is defined in this module.

At the top of the I/O hierarchy is the abstract base class IOBase. It
defines the basic interface to a stream. Note, however, that there is no
separation between reading and writing to streams; implementations are
allowed to raise an IOError if they do not support a given operation.

Extending IOBase is RawIOBase which deals simply with the reading and
writing of raw bytes to a stream. FileIO subclasses RawIOBase to provide
an interface to OS files.

BufferedIOBase deals with buffering on a raw byte stream (RawIOBase). Its
subclasses, BufferedWriter, BufferedReader, and BufferedRWPair buffer
streams that are readable, writable, and both respectively.
BufferedRandom provides a buffered interface to random access
streams. BytesIO is a simple stream of in-memory bytes.

Another IOBase subclass, TextIOBase, deals with the encoding and decoding
of streams into text. TextIOWrapper, which extends it, is a buffered text
interface to a buffered raw stream (`BufferedIOBase`). Finally, StringIO
is a in-memory stream for text.

Argument names are not part of the specification, and only the arguments
of open() are intended to be used as keyword arguments.

data:

DEFAULT_BUFFER_SIZE

   An int containing the default buffer size used by the module's buffered
   I/O classes. open() uses the file's blksize (as obtained by os.stat) if
   possible.
\"\"\"" code nil nil [1 1479])
            ("__author__" variable nil nil [1523 1860])
            ("__all__" variable nil nil [1862 2180])
            ("_io" include nil nil [2183 2193])
            ("abc" include nil nil [2194 2204])
            ("" code nil nil [2222 2472])
            ("OpenWrapper" variable nil nil [2474 2496])
            ("UnsupportedOperation" variable nil nil [2572 2610])
            ("SEEK_SET" variable nil nil [2625 2637])
            ("SEEK_CUR" variable nil nil [2638 2650])
            ("SEEK_END" variable nil nil [2651 2663])
            ("IOBase" type
               (:superclasses ("_io._IOBase" "abc.ABCMeta")
                :members 
                  ( ("pass" code nil (reparse-symbol indented_block_body) [2863 2867]))                  
                :type "class")
                nil [2809 2868])
            ("RawIOBase" type
               (:superclasses ("_io._RawIOBase" "IOBase")
                :members 
                  ( ("pass" code nil (reparse-symbol indented_block_body) [2914 2918]))                  
                :type "class")
                nil [2869 2919])
            ("BufferedIOBase" type
               (:superclasses ("_io._BufferedIOBase" "IOBase")
                :members 
                  ( ("pass" code nil (reparse-symbol indented_block_body) [2975 2979]))                  
                :type "class")
                nil [2920 2980])
            ("TextIOBase" type
               (:superclasses ("_io._TextIOBase" "IOBase")
                :members 
                  ( ("pass" code nil (reparse-symbol indented_block_body) [3028 3032]))                  
                :type "class")
                nil [2981 3033])
            ("RawIOBase" code nil nil [3034 3060])
            ("for" code nil nil [3062 3199])
            ("for" code nil nil [3200 3271])
            ("del" code nil nil [3271 3280]))          
    :file "io.py"
    :pointmax 3281
    :fsize 3280
    :lastmodtime '(20832 44201 0 0)
    :unmatched-syntax '((NAME 2835 . 2844) (ASSIGN 2844 . 2845))
    )
   (semanticdb-table "traceback.py"
    :major-mode 'python-mode
    :tags 
        '( ("\"\"\"Extract, format and print information about Python stack traces.\"\"\"" code nil nil [1 71])
            ("linecache" include nil nil [73 89])
            ("sys" include nil nil [90 100])
            ("__all__" variable nil nil [102 352])
            ("_print" function (:arguments 
              ( ("file" variable nil (reparse-symbol function_parameters) [365 369])
                ("str" variable nil (reparse-symbol function_parameters) [371 374])
                ("terminator" variable nil (reparse-symbol function_parameters) [379 389]))              ) nil [354 428])
            ("print_list" function
               (:documentation "Print the list of tuples as returned by extract_tb() or
    extract_stack() as a formatted stack trace to the given file."
                :arguments 
                  ( ("extracted_list" variable nil (reparse-symbol function_parameters) [445 459])
                    ("file" variable nil (reparse-symbol function_parameters) [461 465]))                  )
                nil [430 867])
            ("format_list" function
               (:documentation "Format a list of traceback entry tuples for printing.

    Given a list of tuples as returned by extract_tb() or
    extract_stack(), return a list of strings ready for printing.
    Each string in the resulting list corresponds to the item with the
    same index in the argument list.  Each string ends in a newline;
    the strings may contain internal newlines as well, for those items
    whose source text line is not None.
    "
                :arguments 
                  ( ("extracted_list" variable nil (reparse-symbol function_parameters) [884 898]))                  )
                nil [868 1599])
            ("print_tb" function
               (:documentation "Print up to 'limit' stack trace entries from the traceback 'tb'.

    If 'limit' is omitted or None, all entries are printed.  If 'file'
    is omitted or None, the output goes to sys.stderr; otherwise
    'file' should be an open file or file-like object with a write()
    method.
    "
                :arguments 
                  ( ("tb" variable nil (reparse-symbol function_parameters) [1614 1616])
                    ("limit" variable nil (reparse-symbol function_parameters) [1618 1623])
                    ("file" variable nil (reparse-symbol function_parameters) [1630 1634]))                  )
                nil [1601 2586])
            ("format_tb" function
               (:documentation "A shorthand for 'format_list(extract_stack(f, limit))."
                :arguments 
                  ( ("tb" variable nil (reparse-symbol function_parameters) [2601 2603])
                    ("limit" variable nil (reparse-symbol function_parameters) [2605 2610]))                  )
                nil [2587 2729])
            ("extract_tb" function
               (:documentation "Return list of up to limit pre-processed entries from traceback.

    This is useful for alternate formatting of stack traces.  If
    'limit' is omitted or None, all entries are extracted.  A
    pre-processed stack trace entry is a quadruple (filename, line
    number, function name, text) representing the information that is
    usually printed for a stack trace.  The text is a string with
    leading and trailing whitespace stripped; if the source is not
    available it is None.
    "
                :arguments 
                  ( ("tb" variable nil (reparse-symbol function_parameters) [2745 2747])
                    ("limit" variable nil (reparse-symbol function_parameters) [2749 2754]))                  )
                nil [2730 3863])
            ("_cause_message" variable nil nil [3865 3970])
            ("_context_message" variable nil nil [3972 4078])
            ("_iter_chain" function (:arguments 
              ( ("exc" variable nil (reparse-symbol function_parameters) [4096 4099])
                ("custom_tb" variable nil (reparse-symbol function_parameters) [4101 4110])
                ("seen" variable nil (reparse-symbol function_parameters) [4117 4121]))              ) nil [4080 4799])
            ("print_exception" function
               (:documentation "Print exception up to 'limit' stack trace entries from 'tb' to 'file'.

    This differs from print_tb() in the following ways: (1) if
    traceback is not None, it prints a header \"Traceback (most recent
    call last):\"; (2) it prints the exception type and value after the
    stack trace; (3) if type is SyntaxError and value has the
    appropriate format, it prints the line where the syntax error
    occurred with a caret on the next line indicating the approximate
    position of the error.
    "
                :arguments 
                  ( ("etype" variable nil (reparse-symbol function_parameters) [4821 4826])
                    ("value" variable nil (reparse-symbol function_parameters) [4828 4833])
                    ("tb" variable nil (reparse-symbol function_parameters) [4835 4837])
                    ("limit" variable nil (reparse-symbol function_parameters) [4839 4844])
                    ("file" variable nil (reparse-symbol function_parameters) [4851 4855])
                    ("chain" variable nil (reparse-symbol function_parameters) [4862 4867]))                  )
                nil [4801 5886])
            ("format_exception" function
               (:documentation "Format a stack trace and the exception information.

    The arguments have the same meaning as the corresponding arguments
    to print_exception().  The return value is a list of strings, each
    ending in a newline and some containing internal newlines.  When
    these lines are concatenated and printed, exactly the same text is
    printed as does print_exception().
    "
                :arguments 
                  ( ("etype" variable nil (reparse-symbol function_parameters) [5908 5913])
                    ("value" variable nil (reparse-symbol function_parameters) [5915 5920])
                    ("tb" variable nil (reparse-symbol function_parameters) [5922 5924])
                    ("limit" variable nil (reparse-symbol function_parameters) [5926 5931])
                    ("chain" variable nil (reparse-symbol function_parameters) [5938 5943]))                  )
                nil [5887 6776])
            ("format_exception_only" function
               (:documentation "Format the exception part of a traceback.

    The arguments are the exception type and value such as given by
    sys.last_type and sys.last_value. The return value is a list of
    strings, each ending in a newline.

    Normally, the list contains a single string; however, for
    SyntaxError exceptions, it contains several lines that (when
    printed) display detailed information about where the syntax
    error occurred.

    The message indicating which exception occurred is always the last
    string in the list.

    "
                :arguments 
                  ( ("etype" variable nil (reparse-symbol function_parameters) [6803 6808])
                    ("value" variable nil (reparse-symbol function_parameters) [6810 6815]))                  )
                nil [6777 8620])
            ("_format_final_exc_line" function (:arguments 
              ( ("etype" variable nil (reparse-symbol function_parameters) [8648 8653])
                ("value" variable nil (reparse-symbol function_parameters) [8655 8660]))              ) nil [8621 8835])
            ("_some_str" function (:arguments 
              ( ("value" variable nil (reparse-symbol function_parameters) [8850 8855]))              ) nil [8836 8969])
            ("print_exc" function
               (:documentation "Shorthand for 'print_exception(*sys.exc_info(), limit, file)'."
                :arguments 
                  ( ("limit" variable nil (reparse-symbol function_parameters) [8985 8990])
                    ("file" variable nil (reparse-symbol function_parameters) [8997 9001])
                    ("chain" variable nil (reparse-symbol function_parameters) [9008 9013]))                  )
                nil [8971 9301])
            ("format_exc" function
               (:documentation "Like print_exc() but return a string."
                :arguments 
                  ( ("limit" variable nil (reparse-symbol function_parameters) [9318 9323])
                    ("chain" variable nil (reparse-symbol function_parameters) [9330 9335]))                  )
                nil [9303 9575])
            ("print_last" function
               (:documentation "This is a shorthand for 'print_exception(sys.last_type,
    sys.last_value, sys.last_traceback, limit, file)'."
                :arguments 
                  ( ("limit" variable nil (reparse-symbol function_parameters) [9592 9597])
                    ("file" variable nil (reparse-symbol function_parameters) [9604 9608])
                    ("chain" variable nil (reparse-symbol function_parameters) [9615 9620]))                  )
                nil [9577 9991])
            ("print_stack" function
               (:documentation "Print a stack trace from its invocation point.

    The optional 'f' argument can be used to specify an alternate
    stack frame at which to start. The optional 'limit' and 'file'
    arguments have the same meaning as for print_exception().
    "
                :arguments 
                  ( ("f" variable nil (reparse-symbol function_parameters) [10009 10010])
                    ("limit" variable nil (reparse-symbol function_parameters) [10017 10022])
                    ("file" variable nil (reparse-symbol function_parameters) [10029 10033]))                  )
                nil [9993 10496])
            ("format_stack" function
               (:documentation "Shorthand for 'format_list(extract_stack(f, limit))'."
                :arguments 
                  ( ("f" variable nil (reparse-symbol function_parameters) [10514 10515])
                    ("limit" variable nil (reparse-symbol function_parameters) [10522 10527]))                  )
                nil [10497 10798])
            ("extract_stack" function
               (:documentation "Extract the raw traceback from the current stack frame.

    The return value has the same format as for extract_tb().  The
    optional 'f' and 'limit' arguments have the same meaning as for
    print_stack().  Each item in the list is a quadruple (filename,
    line number, function name, text), and the entries are in order
    from oldest to newest stack frame.
    "
                :arguments 
                  ( ("f" variable nil (reparse-symbol function_parameters) [10817 10818])
                    ("limit" variable nil (reparse-symbol function_parameters) [10825 10830]))                  )
                nil [10799 11957]))          
    :file "traceback.py"
    :pointmax 11957
    :fsize 11956
    :lastmodtime '(20832 44201 0 0)
    :unmatched-syntax 'nil
    )
   (semanticdb-table "warnings.py"
    :major-mode 'python-mode
    :tags 
        '( ("\"\"\"Python part of the warnings subsystem.\"\"\"" code nil nil [1 45])
            ("linecache" include nil nil [172 188])
            ("sys" include nil nil [189 199])
            ("__all__" variable nil nil [201 315])
            ("showwarning" function
               (:documentation "Hook to write a warning to a file; replace if you like."
                :arguments 
                  ( ("message" variable nil (reparse-symbol function_parameters) [334 341])
                    ("category" variable nil (reparse-symbol function_parameters) [343 351])
                    ("filename" variable nil (reparse-symbol function_parameters) [353 361])
                    ("lineno" variable nil (reparse-symbol function_parameters) [363 369])
                    ("file" variable nil (reparse-symbol function_parameters) [371 375])
                    ("line" variable nil (reparse-symbol function_parameters) [382 386]))                  )
                nil [318 692])
            ("formatwarning" function
               (:documentation "Function to format a warning the standard way."
                :arguments 
                  ( ("message" variable nil (reparse-symbol function_parameters) [711 718])
                    ("category" variable nil (reparse-symbol function_parameters) [720 728])
                    ("filename" variable nil (reparse-symbol function_parameters) [730 738])
                    ("lineno" variable nil (reparse-symbol function_parameters) [740 746])
                    ("line" variable nil (reparse-symbol function_parameters) [748 752]))                  )
                nil [693 1049])
            ("filterwarnings" function
               (:documentation "Insert an entry into the list of warnings filters (at the front).

    'action' -- one of \"error\", \"ignore\", \"always\", \"default\", \"module\",
                or \"once\"
    'message' -- a regex that the warning message must match
    'category' -- a class that the warning must be a subclass of
    'module' -- a regex that the module name must match
    'lineno' -- an integer line number, 0 matches all warnings
    'append' -- if true, append to the list of filters
    "
                :arguments 
                  ( ("action" variable nil (reparse-symbol function_parameters) [1069 1075])
                    ("message" variable nil (reparse-symbol function_parameters) [1077 1084])
                    ("category" variable nil (reparse-symbol function_parameters) [1089 1097])
                    ("module" variable nil (reparse-symbol function_parameters) [1107 1113])
                    ("lineno" variable nil (reparse-symbol function_parameters) [1118 1124])
                    ("append" variable nil (reparse-symbol function_parameters) [1147 1153]))                  )
                nil [1050 2342])
            ("simplefilter" function
               (:documentation "Insert a simple entry into the list of warnings filters (at the front).

    A simple filter matches all modules and messages.
    'action' -- one of \"error\", \"ignore\", \"always\", \"default\", \"module\",
                or \"once\"
    'category' -- a class that the warning must be a subclass of
    'lineno' -- an integer line number, 0 matches all warnings
    'append' -- if true, append to the list of filters
    "
                :arguments 
                  ( ("action" variable nil (reparse-symbol function_parameters) [2360 2366])
                    ("category" variable nil (reparse-symbol function_parameters) [2368 2376])
                    ("lineno" variable nil (reparse-symbol function_parameters) [2386 2392])
                    ("append" variable nil (reparse-symbol function_parameters) [2396 2402]))                  )
                nil [2343 3201])
            ("resetwarnings" function (:documentation "Clear the list of warning filters, so that no filters are active.") nil [3202 3319])
            ("_OptionError" type
               (:documentation "Exception used by option processing helpers."
                :superclasses ("Exception")
                :members 
                  ( ("pass" code nil (reparse-symbol indented_block_body) [3410 3414]))                  
                :type "class")
                nil [3320 3415])
            ("_processoptions" function (:arguments 
              ( ("args" variable nil (reparse-symbol function_parameters) [3494 3498]))              ) nil [3474 3669])
            ("_setoption" function (:arguments 
              ( ("arg" variable nil (reparse-symbol function_parameters) [3716 3719]))              ) nil [3701 4527])
            ("_getaction" function (:arguments 
              ( ("action" variable nil (reparse-symbol function_parameters) [4569 4575]))              ) nil [4554 4854])
            ("_getcategory" function (:arguments 
              ( ("category" variable nil (reparse-symbol function_parameters) [4898 4906]))              ) nil [4881 5714])
            ("warn" function
               (:documentation "Issue a warning, or maybe ignore it or raise an exception."
                :arguments 
                  ( ("message" variable nil (reparse-symbol function_parameters) [5764 5771])
                    ("category" variable nil (reparse-symbol function_parameters) [5773 5781])
                    ("stacklevel" variable nil (reparse-symbol function_parameters) [5788 5798]))                  )
                nil [5755 7094])
            ("warn_explicit" function (:arguments 
              ( ("message" variable nil (reparse-symbol function_parameters) [7113 7120])
                ("category" variable nil (reparse-symbol function_parameters) [7122 7130])
                ("filename" variable nil (reparse-symbol function_parameters) [7132 7140])
                ("lineno" variable nil (reparse-symbol function_parameters) [7142 7148])
                ("module" variable nil (reparse-symbol function_parameters) [7168 7174])
                ("registry" variable nil (reparse-symbol function_parameters) [7181 7189])
                ("module_globals" variable nil (reparse-symbol function_parameters) [7196 7210]))              ) nil [7095 9252])
            ("WarningMessage" type
               (:documentation "Holds the result of a single showwarning() call."
                :superclasses ("object")
                :members 
                  ( ("_WARNING_DETAILS" variable nil (reparse-symbol indented_block_body) [9349 9453])
                    ("__init__" function
                       (:suite 
                          ( ("local_values" variable nil (reparse-symbol indented_block_body) [9566 9589])
                            ("for" code nil (reparse-symbol indented_block_body) [9598 9685])
                            ("None" code nil (reparse-symbol indented_block_body) [9750 9754]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9472 9476])
                            ("message" variable nil (reparse-symbol function_parameters) [9478 9485])
                            ("category" variable nil (reparse-symbol function_parameters) [9487 9495])
                            ("filename" variable nil (reparse-symbol function_parameters) [9497 9505])
                            ("lineno" variable nil (reparse-symbol function_parameters) [9507 9513])
                            ("file" variable nil (reparse-symbol function_parameters) [9515 9519])
                            ("line" variable nil (reparse-symbol function_parameters) [9546 9550]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [9459 9755])
                    ("__str__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9772 9776]))                          )
                        (reparse-symbol indented_block_body) [9760 10003]))                  
                :type "class")
                nil [9254 10003])
            ("catch_warnings" type
               (:documentation "A context manager that copies and restores the warnings filter upon
    exiting the context.

    The 'record' argument specifies whether warnings should be captured by a
    custom implementation of warnings.showwarning() and be appended to a list
    returned by the context manager. Otherwise None is returned by the context
    manager. The objects appended to the list are arguments whose attributes
    mirror the arguments to showwarning().

    The 'module' argument is to specify an alternative module to the module
    named 'warnings' and imported under that name. This argument is only useful
    when testing the warnings module itself.

    "
                :superclasses ("object")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"Specify whether to record warnings and if an alternative module
        should be used other than sys.modules['warnings'].

        For compatibility with Python 3.0, please consider all arguments to be
        keyword-only.

        \"\"\"" code nil (reparse-symbol indented_block_body) [10765 11005])
                            ("self" variable nil (reparse-symbol indented_block_body) [11014 11035])
                            ("module" code nil (reparse-symbol indented_block_body) [11106 11112])
                            ("self" variable nil (reparse-symbol indented_block_body) [11121 11142]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10720 10724])
                            ("record" variable nil (reparse-symbol function_parameters) [10729 10735])
                            ("module" variable nil (reparse-symbol function_parameters) [10743 10749]))                          
                        :documentation "Specify whether to record warnings and if an alternative module
        should be used other than sys.modules['warnings'].

        For compatibility with Python 3.0, please consider all arguments to be
        keyword-only.

        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [10707 11143])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11161 11165]))                          )
                        (reparse-symbol indented_block_body) [11148 11443])
                    ("__enter__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11462 11466]))                          )
                        (reparse-symbol indented_block_body) [11448 11997])
                    ("__exit__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12015 12019])
                            ("exc_info" variable nil (reparse-symbol function_parameters) [12021 12030]))                          )
                        (reparse-symbol indented_block_body) [12002 12240]))                  
                :type "class")
                nil [10005 12240])
            ("_warnings_defaults" variable nil nil [12692 12718])
            ("try" code nil nil [12719 13027])
            ("_processoptions" code nil nil [13053 13085])
            ("if" code nil nil [13086 13802])
            ("del" code nil nil [13803 13825]))          
    :file "warnings.py"
    :pointmax 13826
    :fsize 13825
    :lastmodtime '(20832 44201 0 0)
    :unmatched-syntax '((NAME 11044 . 11048) (IF 11083 . 11085) (ELSE 11101 . 11105) (MULT 10726 . 10727) (COMMA 10727 . 10728) (NAME 9693 . 9697) (IF 9733 . 9735) (ELSE 9745 . 9749) (INDENT_BLOCK 3599 . 3669) (NEWLINE 3598 . 3599) (COLON 3597 . 3598) (TRY 3530 . 3533) (AS 3591 . 3593) (NAME 897 . 901) (IF 940 . 942) (ELSE 956 . 960))
    )
   (semanticdb-table "stat.py"
    :major-mode 'python-mode
    :tags 
        '( ("\"\"\"Constants/functions for interpreting results of os.stat() and os.lstat().

Suggested usage: from stat import *
\"\"\"" code nil nil [1 118])
            ("ST_MODE" variable nil nil [190 202])
            ("ST_INO" variable nil nil [203 215])
            ("ST_DEV" variable nil nil [216 228])
            ("ST_NLINK" variable nil nil [229 241])
            ("ST_UID" variable nil nil [242 254])
            ("ST_GID" variable nil nil [255 267])
            ("ST_SIZE" variable nil nil [268 280])
            ("ST_ATIME" variable nil nil [281 293])
            ("ST_MTIME" variable nil nil [294 306])
            ("ST_CTIME" variable nil nil [307 319])
            ("S_IMODE" function
               (:documentation "Return the portion of the file's mode that can be set by
    os.chmod().
    "
                :arguments 
                  ( ("mode" variable nil (reparse-symbol function_parameters) [363 367]))                  )
                nil [351 483])
            ("S_IFMT" function
               (:documentation "Return the portion of the file's mode that describes the
    file type.
    "
                :arguments 
                  ( ("mode" variable nil (reparse-symbol function_parameters) [495 499]))                  )
                nil [484 616])
            ("S_IFDIR" variable nil nil [713 732])
            ("S_IFCHR" variable nil nil [746 765])
            ("S_IFBLK" variable nil nil [786 805])
            ("S_IFREG" variable nil nil [822 841])
            ("S_IFIFO" variable nil nil [858 877])
            ("S_IFLNK" variable nil nil [899 918])
            ("S_IFSOCK" variable nil nil [936 955])
            ("S_ISDIR" function
               (:documentation "Return True if mode is from a directory."
                :arguments 
                  ( ("mode" variable nil (reparse-symbol function_parameters) [1024 1028]))                  )
                nil [1012 1117])
            ("S_ISCHR" function
               (:documentation "Return True if mode is from a character special device file."
                :arguments 
                  ( ("mode" variable nil (reparse-symbol function_parameters) [1130 1134]))                  )
                nil [1118 1243])
            ("S_ISBLK" function
               (:documentation "Return True if mode is from a block special device file."
                :arguments 
                  ( ("mode" variable nil (reparse-symbol function_parameters) [1256 1260]))                  )
                nil [1244 1365])
            ("S_ISREG" function
               (:documentation "Return True if mode is from a regular file."
                :arguments 
                  ( ("mode" variable nil (reparse-symbol function_parameters) [1378 1382]))                  )
                nil [1366 1474])
            ("S_ISFIFO" function
               (:documentation "Return True if mode is from a FIFO (named pipe)."
                :arguments 
                  ( ("mode" variable nil (reparse-symbol function_parameters) [1488 1492]))                  )
                nil [1475 1589])
            ("S_ISLNK" function
               (:documentation "Return True if mode is from a symbolic link."
                :arguments 
                  ( ("mode" variable nil (reparse-symbol function_parameters) [1602 1606]))                  )
                nil [1590 1699])
            ("S_ISSOCK" function
               (:documentation "Return True if mode is from a socket."
                :arguments 
                  ( ("mode" variable nil (reparse-symbol function_parameters) [1713 1717]))                  )
                nil [1700 1804])
            ("S_ISUID" variable nil nil [1834 1850])
            ("S_ISGID" variable nil nil [1866 1882])
            ("S_ENFMT" variable nil nil [1898 1915])
            ("S_ISVTX" variable nil nil [1943 1959])
            ("S_IREAD" variable nil nil [1974 1990])
            ("S_IWRITE" variable nil nil [2022 2039])
            ("S_IEXEC" variable nil nil [2070 2086])
            ("S_IRWXU" variable nil nil [2118 2134])
            ("S_IRUSR" variable nil nil [2165 2181])
            ("S_IWUSR" variable nil nil [2199 2215])
            ("S_IXUSR" variable nil nil [2234 2250])
            ("S_IRWXG" variable nil nil [2271 2287])
            ("S_IRGRP" variable nil nil [2318 2334])
            ("S_IWGRP" variable nil nil [2352 2368])
            ("S_IXGRP" variable nil nil [2387 2403])
            ("S_IRWXO" variable nil nil [2424 2440])
            ("S_IROTH" variable nil nil [2487 2503])
            ("S_IWOTH" variable nil nil [2522 2538])
            ("S_IXOTH" variable nil nil [2558 2574])
            ("UF_NODUMP" variable nil nil [2621 2646])
            ("UF_IMMUTABLE" variable nil nil [2667 2692])
            ("UF_APPEND" variable nil nil [2720 2745])
            ("UF_OPAQUE" variable nil nil [2778 2803])
            ("UF_NOUNLINK" variable nil nil [2861 2886])
            ("UF_COMPRESSED" variable nil nil [2925 2951])
            ("UF_HIDDEN" variable nil nil [2983 3008])
            ("SF_ARCHIVED" variable nil nil [3047 3072])
            ("SF_IMMUTABLE" variable nil nil [3097 3122])
            ("SF_APPEND" variable nil nil [3150 3175])
            ("SF_NOUNLINK" variable nil nil [3208 3233])
            ("SF_SNAPSHOT" variable nil nil [3272 3297])
            ("_filemode_table" variable nil nil [3327 3975])
            ("filemode" function
               (:documentation "Convert a file's mode to a string of the form '-rwxrwxrwx'."
                :arguments 
                  ( ("mode" variable nil (reparse-symbol function_parameters) [3990 3994]))                  )
                nil [3977 4305]))          
    :file "stat.py"
    :pointmax 4305
    :fsize 4304
    :lastmodtime '(20832 44201 0 0)
    :unmatched-syntax 'nil
    )
   (semanticdb-table "copyreg.py"
    :major-mode 'python-mode
    :tags 
        '( ("\"\"\"Helper to provide extensibility for pickle.

This is only useful to add pickle support for extension types defined in
C, not for instances of user-defined classes.
\"\"\"" code nil nil [1 171])
            ("__all__" variable nil nil [173 281])
            ("dispatch_table" variable nil nil [283 302])
            ("pickle" function (:arguments 
              ( ("ob_type" variable nil (reparse-symbol function_parameters) [315 322])
                ("pickle_function" variable nil (reparse-symbol function_parameters) [324 339])
                ("constructor_ob" variable nil (reparse-symbol function_parameters) [341 355]))              ) nil [304 714])
            ("constructor" function (:arguments 
              ( ("object" variable nil (reparse-symbol function_parameters) [731 737]))              ) nil [715 826])
            ("try" code nil nil [885 1050])
            ("_reconstructor" function (:arguments 
              ( ("cls" variable nil (reparse-symbol function_parameters) [1112 1115])
                ("base" variable nil (reparse-symbol function_parameters) [1117 1121])
                ("state" variable nil (reparse-symbol function_parameters) [1123 1128]))              ) nil [1093 1335])
            ("_HEAPTYPE" code nil nil [1336 1352])
            ("_reduce_ex" function
               (:parent "dummy"
                :arguments 
                  ( ("self" variable nil (reparse-symbol function_parameters) [1431 1435])
                    ("proto" variable nil (reparse-symbol function_parameters) [1437 1442]))                  )
                nil [1416 2378])
            ("__newobj__" function (:arguments 
              ( ("cls" variable nil (reparse-symbol function_parameters) [2433 2436])
                ("args" variable nil (reparse-symbol function_parameters) [2438 2443]))              ) nil [2418 2481])
            ("_slotnames" function
               (:documentation "Return a list of slot names for a given class.

    This needs to find slots defined by the class and its bases, so we
    can't simply return the __slots__ attribute.  We must walk down
    the Method Resolution Order and concatenate the __slots__ of each
    class found there.  (This assumes classes don't modify their
    __slots__ attribute to misrepresent their slots after the class is
    defined.)
    "
                :arguments 
                  ( ("cls" variable nil (reparse-symbol function_parameters) [2497 2500]))                  )
                nil [2482 4156])
            ("_extension_registry" variable nil nil [4638 4662])
            ("_inverted_registry" variable nil nil [4692 4715])
            ("_extension_cache" variable nil nil [4746 4767])
            ("add_extension" function
               (:documentation "Register an extension code."
                :arguments 
                  ( ("module" variable nil (reparse-symbol function_parameters) [4943 4949])
                    ("name" variable nil (reparse-symbol function_parameters) [4951 4955])
                    ("code" variable nil (reparse-symbol function_parameters) [4957 4961]))                  )
                nil [4925 5672])
            ("remove_extension" function
               (:documentation "Unregister an extension code.  For testing only."
                :arguments 
                  ( ("module" variable nil (reparse-symbol function_parameters) [5694 5700])
                    ("name" variable nil (reparse-symbol function_parameters) [5702 5706])
                    ("code" variable nil (reparse-symbol function_parameters) [5708 5712]))                  )
                nil [5673 6132])
            ("clear_extension_cache" function nil nil [6133 6191]))          
    :file "copyreg.py"
    :pointmax 6612
    :fsize 6611
    :lastmodtime '(20832 44201 0 0)
    :unmatched-syntax 'nil
    )
   (semanticdb-table "fnmatch.py"
    :major-mode 'python-mode
    :tags 
        '( ("\"\"\"Filename matching with shell patterns.

fnmatch(FILENAME, PATTERN) matches according to the local convention.
fnmatchcase(FILENAME, PATTERN) always takes case in account.

The functions operate by translating the pattern into a regular
expression.  They cache the compiled regular expressions for speed.

The function translate(PATTERN) returns a regular expression
corresponding to PATTERN.  (It does not compile it.)
\"\"\"" code nil nil [1 426])
            ("os" include nil nil [427 436])
            ("posixpath" include nil nil [437 453])
            ("re" include nil nil [454 463])
            ("functools" include nil nil [464 480])
            ("__all__" variable nil nil [482 541])
            ("fnmatch" function
               (:documentation "Test whether FILENAME matches PATTERN.

    Patterns are Unix shell style:

    *       matches everything
    ?       matches any single character
    [seq]   matches any character in seq
    [!seq]  matches any char not in seq

    An initial period in FILENAME is not special.
    Both FILENAME and PATTERN are first case-normalized
    if the operating system requires it.
    If you don't want this, use fnmatchcase(FILENAME, PATTERN).
    "
                :arguments 
                  ( ("name" variable nil (reparse-symbol function_parameters) [555 559])
                    ("pat" variable nil (reparse-symbol function_parameters) [561 564]))                  )
                nil [543 1123])
            ("" code nil nil [1144 1169])
            ("_compile_pattern" function (:arguments 
              ( ("pat" variable nil (reparse-symbol function_parameters) [1191 1194]))              ) nil [1170 1421])
            ("filter" function
               (:documentation "Return the subset of the list NAMES that match PAT."
                :arguments 
                  ( ("names" variable nil (reparse-symbol function_parameters) [1433 1438])
                    ("pat" variable nil (reparse-symbol function_parameters) [1440 1443]))                  )
                nil [1422 1915])
            ("fnmatchcase" function
               (:documentation "Test whether FILENAME matches PATTERN, including case.

    This is a version of fnmatch() which doesn't case-normalize
    its arguments.
    "
                :arguments 
                  ( ("name" variable nil (reparse-symbol function_parameters) [1932 1936])
                    ("pat" variable nil (reparse-symbol function_parameters) [1938 1941]))                  )
                nil [1916 2167])
            ("translate" function
               (:documentation "Translate a shell PATTERN to a regular expression.

    There is no way to quote meta-characters.
    "
                :arguments 
                  ( ("pat" variable nil (reparse-symbol function_parameters) [2183 2186]))                  )
                nil [2169 3164]))          
    :file "fnmatch.py"
    :pointmax 3164
    :fsize 3163
    :lastmodtime '(20832 44201 0 0)
    :unmatched-syntax 'nil
    )
   (semanticdb-table "tarfile.py"
    :major-mode 'python-mode
    :tags 
        '( ("\"\"\"Read from and write to tar format archives.
\"\"\"" code nil nil [1392 1442])
            ("version" variable nil nil [1444 1465])
            ("__author__" variable nil nil [1466 1520])
            ("__date__" variable nil nil [1521 1590])
            ("__cvsid__" variable nil nil [1591 1670])
            ("__credits__" variable nil nil [1671 1743])
            ("sys" include nil nil [1777 1787])
            ("os" include nil nil [1788 1797])
            ("io" include nil nil [1798 1807])
            ("shutil" include nil nil [1808 1821])
            ("stat" include nil nil [1822 1833])
            ("time" include nil nil [1834 1845])
            ("struct" include nil nil [1846 1859])
            ("copy" include nil nil [1860 1871])
            ("re" include nil nil [1872 1881])
            ("try" code nil nil [1883 1949])
            ("symlink_exception" variable nil nil [2014 2071])
            ("try" code nil nil [2072 2264])
            ("__all__" variable nil nil [2289 2347])
            ("builtins" include nil nil [2349 2383])
            ("\"\\0\"" code nil nil [2557 2561])
            ("BLOCKSIZE" variable nil nil [2603 2618])
            ("RECORDSIZE" code nil nil [2665 2692])
            ("\"ustar  \\0\"" code nil nil [2730 2741])
            ("\"ustar\\x0000\"" code nil nil [2787 2800])
            ("LENGTH_NAME" variable nil nil [2830 2847])
            ("LENGTH_LINK" variable nil nil [2893 2910])
            ("LENGTH_PREFIX" variable nil nil [2956 2975])
            ("\"0\"" code nil nil [3037 3040])
            ("\"\\0\"" code nil nil [3085 3089])
            ("\"1\"" code nil nil [3131 3134])
            ("\"2\"" code nil nil [3187 3190])
            ("\"3\"" code nil nil [3235 3238])
            ("\"4\"" code nil nil [3294 3297])
            ("\"5\"" code nil nil [3349 3352])
            ("\"6\"" code nil nil [3394 3397])
            ("\"7\"" code nil nil [3448 3451])
            ("\"L\"" code nil nil [3507 3510])
            ("\"K\"" code nil nil [3558 3561])
            ("\"S\"" code nil nil [3607 3610])
            ("\"x\"" code nil nil [3655 3658])
            ("\"g\"" code nil nil [3718 3721])
            ("\"X\"" code nil nil [3787 3790])
            ("USTAR_FORMAT" variable nil nil [3827 3843])
            ("GNU_FORMAT" variable nil nil [3889 3903])
            ("PAX_FORMAT" variable nil nil [3938 3952])
            ("DEFAULT_FORMAT" variable nil nil [3998 4025])
            ("SUPPORTED_TYPES" variable nil nil [4201 4431])
            ("REGULAR_TYPES" variable nil nil [4486 4564])
            ("GNU_TYPES" variable nil nil [4616 4693])
            ("PAX_FIELDS" variable nil nil [4757 4853])
            ("PAX_NAME_FIELDS" variable nil nil [4915 4971])
            ("PAX_NUMBER_FIELDS" variable nil nil [5059 5190])
            ("S_IFLNK" variable nil nil [5358 5376])
            ("S_IFREG" variable nil nil [5400 5418])
            ("S_IFBLK" variable nil nil [5441 5459])
            ("S_IFDIR" variable nil nil [5482 5500])
            ("S_IFCHR" variable nil nil [5520 5538])
            ("S_IFIFO" variable nil nil [5565 5583])
            ("TSUID" variable nil nil [5599 5615])
            ("TSGID" variable nil nil [5648 5664])
            ("TSVTX" variable nil nil [5697 5713])
            ("TUREAD" variable nil nil [5735 5750])
            ("TUWRITE" variable nil nil [5777 5792])
            ("TUEXEC" variable nil nil [5820 5835])
            ("TGREAD" variable nil nil [5872 5887])
            ("TGWRITE" variable nil nil [5914 5929])
            ("TGEXEC" variable nil nil [5957 5972])
            ("TOREAD" variable nil nil [6009 6024])
            ("TOWRITE" variable nil nil [6051 6066])
            ("TOEXEC" variable nil nil [6094 6109])
            ("if" code nil nil [6282 6382])
            ("stn" function
               (:documentation "Convert a string to a null-terminated bytes object.
    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [6534 6535])
                    ("length" variable nil (reparse-symbol function_parameters) [6537 6543])
                    ("encoding" variable nil (reparse-symbol function_parameters) [6545 6553])
                    ("errors" variable nil (reparse-symbol function_parameters) [6555 6561]))                  )
                nil [6526 6714])
            ("nts" function
               (:documentation "Convert a null-terminated bytes object to a string.
    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [6723 6724])
                    ("encoding" variable nil (reparse-symbol function_parameters) [6726 6734])
                    ("errors" variable nil (reparse-symbol function_parameters) [6736 6742]))                  )
                nil [6715 6906])
            ("nti" function
               (:documentation "Convert a number field to a python number.
    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [6915 6916]))                  )
                nil [6907 7430])
            ("itn" function
               (:documentation "Convert a python number to a number field.
    "
                :arguments 
                  ( ("n" variable nil (reparse-symbol function_parameters) [7439 7440])
                    ("digits" variable nil (reparse-symbol function_parameters) [7442 7448])
                    ("format" variable nil (reparse-symbol function_parameters) [7452 7458]))                  )
                nil [7431 8530])
            ("calc_chksums" function
               (:documentation "Calculate the checksum for a member's header by summing up all
       characters except for the chksum field which is treated as if
       it was filled with spaces. According to the GNU tar sources,
       some tars (Sun and NeXT) calculate chksum with signed char,
       which will be different if there are chars in the buffer with
       the high bit set. So we calculate two checksums, unsigned and
       signed.
    "
                :arguments 
                  ( ("buf" variable nil (reparse-symbol function_parameters) [8548 8551]))                  )
                nil [8531 9171])
            ("copyfileobj" function
               (:documentation "Copy length bytes from fileobj src to fileobj dst.
       If length is None, copy the entire content.
    "
                :arguments 
                  ( ("src" variable nil (reparse-symbol function_parameters) [9188 9191])
                    ("dst" variable nil (reparse-symbol function_parameters) [9193 9196])
                    ("length" variable nil (reparse-symbol function_parameters) [9198 9204]))                  )
                nil [9172 9849])
            ("filemode" function
               (:documentation "Deprecated in this location; use stat.filemode."
                :arguments 
                  ( ("mode" variable nil (reparse-symbol function_parameters) [9863 9867]))                  )
                nil [9850 10078])
            ("TarError" type
               (:documentation "Base exception."
                :superclasses ("Exception")
                :members 
                  ( ("pass" code nil (reparse-symbol indented_block_body) [10137 10141]))                  
                :type "class")
                nil [10080 10142])
            ("ExtractError" type
               (:documentation "General exception for extract errors."
                :superclasses ("TarError")
                :members 
                  ( ("pass" code nil (reparse-symbol indented_block_body) [10224 10228]))                  
                :type "class")
                nil [10142 10229])
            ("ReadError" type
               (:documentation "Exception for unreadble tar archives."
                :superclasses ("TarError")
                :members 
                  ( ("pass" code nil (reparse-symbol indented_block_body) [10308 10312]))                  
                :type "class")
                nil [10229 10313])
            ("CompressionError" type
               (:documentation "Exception for unavailable compression methods."
                :superclasses ("TarError")
                :members 
                  ( ("pass" code nil (reparse-symbol indented_block_body) [10408 10412]))                  
                :type "class")
                nil [10313 10413])
            ("StreamError" type
               (:documentation "Exception for unsupported operations on stream-like TarFiles."
                :superclasses ("TarError")
                :members 
                  ( ("pass" code nil (reparse-symbol indented_block_body) [10518 10522]))                  
                :type "class")
                nil [10413 10523])
            ("HeaderError" type
               (:documentation "Base exception for header errors."
                :superclasses ("TarError")
                :members 
                  ( ("pass" code nil (reparse-symbol indented_block_body) [10600 10604]))                  
                :type "class")
                nil [10523 10605])
            ("EmptyHeaderError" type
               (:documentation "Exception for empty headers."
                :superclasses ("HeaderError")
                :members 
                  ( ("pass" code nil (reparse-symbol indented_block_body) [10685 10689]))                  
                :type "class")
                nil [10605 10690])
            ("TruncatedHeaderError" type
               (:documentation "Exception for truncated headers."
                :superclasses ("HeaderError")
                :members 
                  ( ("pass" code nil (reparse-symbol indented_block_body) [10778 10782]))                  
                :type "class")
                nil [10690 10783])
            ("EOFHeaderError" type
               (:documentation "Exception for end of file headers."
                :superclasses ("HeaderError")
                :members 
                  ( ("pass" code nil (reparse-symbol indented_block_body) [10867 10871]))                  
                :type "class")
                nil [10783 10872])
            ("InvalidHeaderError" type
               (:documentation "Exception for invalid headers."
                :superclasses ("HeaderError")
                :members 
                  ( ("pass" code nil (reparse-symbol indented_block_body) [10956 10960]))                  
                :type "class")
                nil [10872 10961])
            ("SubsequentHeaderError" type
               (:documentation "Exception for missing and invalid extended headers."
                :superclasses ("HeaderError")
                :members 
                  ( ("pass" code nil (reparse-symbol indented_block_body) [11069 11073]))                  
                :type "class")
                nil [10961 11074])
            ("_LowLevelFile" type
               (:documentation "Low-level file object. Supports reading and writing.
       It is used instead of a regular file object for streaming
       access.
    "
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("mode" variable nil (reparse-symbol indented_block_body) [11375 11485])
                            ("if" code nil (reparse-symbol indented_block_body) [11494 11554])
                            ("self" variable nil (reparse-symbol indented_block_body) [11562 11598]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11348 11352])
                            ("name" variable nil (reparse-symbol function_parameters) [11354 11358])
                            ("mode" variable nil (reparse-symbol function_parameters) [11360 11364]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [11335 11599])
                    ("close" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11614 11618]))                          )
                        (reparse-symbol indented_block_body) [11604 11647])
                    ("read" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11661 11665])
                            ("size" variable nil (reparse-symbol function_parameters) [11667 11671]))                          )
                        (reparse-symbol indented_block_body) [11652 11712])
                    ("write" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11727 11731])
                            ("s" variable nil (reparse-symbol function_parameters) [11733 11734]))                          )
                        (reparse-symbol indented_block_body) [11717 11766]))                  
                :type "class")
                nil [11161 11766])
            ("_Stream" type
               (:documentation "Class that serves as an adapter between TarFile and
       a stream-like object.  The stream-like object only
       needs to have a read() or write() method and is accessed
       blockwise.  Use of gzip or bzip2 compression is possible.
       A stream-like object could be for example: sys.stdin,
       sys.stdout, a socket, a tape device etc.

       _Stream is intended to be used only internally.
    "
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"Construct a _Stream object.
        \"\"\"" code nil (reparse-symbol indented_block_body) [12274 12316])
                            ("self" variable nil (reparse-symbol indented_block_body) [12325 12348])
                            ("if" code nil (reparse-symbol indented_block_body) [12357 12462])
                            ("if" code nil (reparse-symbol indented_block_body) [12471 12674])
                            ("self" code nil (reparse-symbol indented_block_body) [12683 12709])
                            ("self" variable nil (reparse-symbol indented_block_body) [12718 12738])
                            ("self" variable nil (reparse-symbol indented_block_body) [12747 12771])
                            ("self" variable nil (reparse-symbol indented_block_body) [12780 12803])
                            ("self" variable nil (reparse-symbol indented_block_body) [12812 12835])
                            ("\"\"" code nil (reparse-symbol indented_block_body) [12861 12863])
                            ("self" variable nil (reparse-symbol indented_block_body) [12872 12889])
                            ("self" variable nil (reparse-symbol indented_block_body) [12898 12919])
                            ("try" code nil (reparse-symbol indented_block_body) [12929 14538]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12219 12223])
                            ("name" variable nil (reparse-symbol function_parameters) [12225 12229])
                            ("mode" variable nil (reparse-symbol function_parameters) [12231 12235])
                            ("comptype" variable nil (reparse-symbol function_parameters) [12237 12245])
                            ("fileobj" variable nil (reparse-symbol function_parameters) [12247 12254])
                            ("bufsize" variable nil (reparse-symbol function_parameters) [12256 12263]))                          
                        :documentation "Construct a _Stream object.
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [12206 14538])
                    ("__del__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14555 14559]))                          )
                        (reparse-symbol indented_block_body) [14543 14643])
                    ("_init_write_gz" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14667 14671]))                          
                        :documentation "Initialize for writing with gzip compression.
        ")
                        (reparse-symbol indented_block_body) [14648 15327])
                    ("write" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15342 15346])
                            ("s" variable nil (reparse-symbol function_parameters) [15348 15349]))                          
                        :documentation "Write string s to the stream.
        ")
                        (reparse-symbol indented_block_body) [15332 15614])
                    ("__write" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15631 15635])
                            ("s" variable nil (reparse-symbol function_parameters) [15637 15638]))                          
                        :documentation "Write string s to the stream if a whole new block
           is ready to be written.
        ")
                        (reparse-symbol indented_block_body) [15619 15918])
                    ("close" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15933 15937]))                          
                        :documentation "Close the _Stream object. No operation should be
           done on it afterwards.
        ")
                        (reparse-symbol indented_block_body) [15923 17008])
                    ("_init_read_gz" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17031 17035]))                          
                        :documentation "Initialize for reading a gzip compressed fileobj.
        ")
                        (reparse-symbol indented_block_body) [17013 17967])
                    ("tell" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17981 17985]))                          
                        :documentation "Return the stream's file pointer position.
        ")
                        (reparse-symbol indented_block_body) [17972 18078])
                    ("seek" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18092 18096])
                            ("pos" variable nil (reparse-symbol function_parameters) [18098 18101]))                          
                        :documentation "Set the stream's file pointer to pos. Negative seeking
           is forbidden.
        ")
                        (reparse-symbol indented_block_body) [18083 18523])
                    ("read" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18537 18541])
                            ("size" variable nil (reparse-symbol function_parameters) [18543 18547]))                          
                        :documentation "Return the next size number of bytes from the stream.
           If size is not defined, return all bytes of the stream
           up to EOF.
        ")
                        (reparse-symbol indented_block_body) [18528 19045])
                    ("_read" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [19060 19064])
                            ("size" variable nil (reparse-symbol function_parameters) [19066 19070]))                          
                        :documentation "Return size bytes from the stream.
        ")
                        (reparse-symbol indented_block_body) [19050 19645])
                    ("__read" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [19661 19665])
                            ("size" variable nil (reparse-symbol function_parameters) [19667 19671]))                          
                        :documentation "Return size bytes from stream. If internal buffer is empty,
           read another block from the stream.
        ")
                        (reparse-symbol indented_block_body) [19650 20088]))                  
                :type "class")
                nil [11767 20088])
            ("_StreamProxy" type
               (:documentation "Small proxy class that enables transparent compression
       detection for the Stream interface (mode 'r|*').
    "
                :superclasses ("object")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [20301 20323])
                            ("self" variable nil (reparse-symbol indented_block_body) [20332 20371]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20277 20281])
                            ("fileobj" variable nil (reparse-symbol function_parameters) [20283 20290]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [20264 20372])
                    ("read" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20386 20390])
                            ("size" variable nil (reparse-symbol function_parameters) [20392 20396]))                          )
                        (reparse-symbol indented_block_body) [20377 20461])
                    ("getcomptype" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20482 20486]))                          )
                        (reparse-symbol indented_block_body) [20466 20790])
                    ("close" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20805 20809]))                          )
                        (reparse-symbol indented_block_body) [20795 20841]))                  
                :type "class")
                nil [20105 20841])
            ("_FileInFile" type
               (:documentation "A thin wrapper around an existing file object that
       provides a part of its data as an individual file
       object.
    "
                :superclasses ("object")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [21176 21198])
                            ("self" variable nil (reparse-symbol indented_block_body) [21207 21227])
                            ("self" variable nil (reparse-symbol indented_block_body) [21236 21252])
                            ("self" variable nil (reparse-symbol indented_block_body) [21261 21278])
                            ("self" variable nil (reparse-symbol indented_block_body) [21287 21329])
                            ("self" variable nil (reparse-symbol indented_block_body) [21338 21357])
                            ("if" code nil (reparse-symbol indented_block_body) [21367 21425])
                            ("self" variable nil (reparse-symbol indented_block_body) [21487 21505])
                            ("self" variable nil (reparse-symbol indented_block_body) [21514 21527])
                            ("lastpos" variable nil (reparse-symbol indented_block_body) [21536 21547])
                            ("realpos" variable nil (reparse-symbol indented_block_body) [21556 21577])
                            ("for" code nil (reparse-symbol indented_block_body) [21586 21846])
                            ("if" code nil (reparse-symbol indented_block_body) [21854 21941]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [21122 21126])
                            ("fileobj" variable nil (reparse-symbol function_parameters) [21128 21135])
                            ("offset" variable nil (reparse-symbol function_parameters) [21137 21143])
                            ("size" variable nil (reparse-symbol function_parameters) [21145 21149])
                            ("blockinfo" variable nil (reparse-symbol function_parameters) [21151 21160]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [21109 21941])
                    ("flush" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [21956 21960]))                          )
                        (reparse-symbol indented_block_body) [21946 21976])
                    ("readable" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [21994 21998]))                          )
                        (reparse-symbol indented_block_body) [21981 22021])
                    ("writable" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22039 22043]))                          )
                        (reparse-symbol indented_block_body) [22026 22067])
                    ("seekable" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22085 22089]))                          )
                        (reparse-symbol indented_block_body) [22072 22131])
                    ("tell" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22145 22149]))                          
                        :documentation "Return the current file position.
        ")
                        (reparse-symbol indented_block_body) [22136 22238])
                    ("seek" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22252 22256])
                            ("position" variable nil (reparse-symbol function_parameters) [22258 22266])
                            ("whence" variable nil (reparse-symbol function_parameters) [22268 22274]))                          
                        :documentation "Seek to a position in the file.
        ")
                        (reparse-symbol indented_block_body) [22243 22861])
                    ("read" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22875 22879])
                            ("size" variable nil (reparse-symbol function_parameters) [22881 22885]))                          
                        :documentation "Read data from the file.
        ")
                        (reparse-symbol indented_block_body) [22866 23781])
                    ("readinto" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23799 23803])
                            ("b" variable nil (reparse-symbol function_parameters) [23805 23806]))                          )
                        (reparse-symbol indented_block_body) [23786 23892])
                    ("close" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23907 23911]))                          )
                        (reparse-symbol indented_block_body) [23897 23941]))                  
                :type "class")
                nil [20939 23941])
            ("ExFileObject" type
               (:superclasses ("io.BufferedReader")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("fileobj" variable nil (reparse-symbol indented_block_body) [24051 24156])
                            ("super" code nil (reparse-symbol indented_block_body) [24165 24190]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24018 24022])
                            ("tarfile" variable nil (reparse-symbol function_parameters) [24024 24031])
                            ("tarinfo" variable nil (reparse-symbol function_parameters) [24033 24040]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [24005 24191]))                  
                :type "class")
                nil [23961 24191])
            ("TarInfo" type
               (:documentation "Informational class which holds the details about an
       archive member given by a tar header block.
       TarInfo objects are returned by TarFile.getmember(),
       TarFile.getmembers() and TarFile.gettarinfo() and are
       usually created internally.
    "
                :superclasses ("object")
                :members 
                  ( ("__slots__" variable nil (reparse-symbol indented_block_body) [24574 24869])
                    ("__init__" function
                       (:suite 
                          ( ("\"\"\"Construct a TarInfo object. name is the optional name
           of the member.
        \"\"\"" code nil (reparse-symbol indented_block_body) [24912 25006])
                            ("self" variable nil (reparse-symbol indented_block_body) [25015 25031])
                            ("self" variable nil (reparse-symbol indented_block_body) [25061 25078])
                            ("self" variable nil (reparse-symbol indented_block_body) [25112 25124])
                            ("self" variable nil (reparse-symbol indented_block_body) [25154 25166])
                            ("self" variable nil (reparse-symbol indented_block_body) [25197 25210])
                            ("self" variable nil (reparse-symbol indented_block_body) [25241 25255])
                            ("self" variable nil (reparse-symbol indented_block_body) [25293 25308])
                            ("self" variable nil (reparse-symbol indented_block_body) [25343 25362])
                            ("self" variable nil (reparse-symbol indented_block_body) [25389 25407])
                            ("self" variable nil (reparse-symbol indented_block_body) [25433 25448])
                            ("self" variable nil (reparse-symbol indented_block_body) [25477 25492])
                            ("self" variable nil (reparse-symbol indented_block_body) [25522 25539])
                            ("self" variable nil (reparse-symbol indented_block_body) [25576 25593])
                            ("self" variable nil (reparse-symbol indented_block_body) [25631 25646])
                            ("self" variable nil (reparse-symbol indented_block_body) [25692 25712])
                            ("self" variable nil (reparse-symbol indented_block_body) [25755 25773])
                            ("self" variable nil (reparse-symbol indented_block_body) [25815 25836]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24888 24892])
                            ("name" variable nil (reparse-symbol function_parameters) [24894 24898]))                          
                        :documentation "Construct a TarInfo object. name is the optional name
           of the member.
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [24875 25864])
                    ("_getpath" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25975 25979]))                          )
                        (reparse-symbol indented_block_body) [25962 26007])
                    ("_setpath" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [26024 26028])
                            ("name" variable nil (reparse-symbol function_parameters) [26030 26034]))                          )
                        (reparse-symbol indented_block_body) [26011 26062])
                    ("path" variable nil (reparse-symbol indented_block_body) [26066 26101])
                    ("_getlinkpath" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [26124 26128]))                          )
                        (reparse-symbol indented_block_body) [26107 26160])
                    ("_setlinkpath" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [26181 26185])
                            ("linkname" variable nil (reparse-symbol function_parameters) [26187 26195]))                          )
                        (reparse-symbol indented_block_body) [26164 26231])
                    ("linkpath" variable nil (reparse-symbol indented_block_body) [26235 26282])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [26301 26305]))                          )
                        (reparse-symbol indented_block_body) [26288 26387])
                    ("get_info" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [26405 26409]))                          
                        :documentation "Return the TarInfo's attributes as a dictionary.
        ")
                        (reparse-symbol indented_block_body) [26392 27114])
                    ("tobuf" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [27129 27133])
                            ("format" variable nil (reparse-symbol function_parameters) [27135 27141])
                            ("encoding" variable nil (reparse-symbol function_parameters) [27158 27166])
                            ("errors" variable nil (reparse-symbol function_parameters) [27177 27183]))                          
                        :documentation "Return a tar header as a string of 512 byte blocks.
        ")
                        (reparse-symbol indented_block_body) [27119 27669])
                    ("create_ustar_header" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [27698 27702])
                            ("info" variable nil (reparse-symbol function_parameters) [27704 27708])
                            ("encoding" variable nil (reparse-symbol function_parameters) [27710 27718])
                            ("errors" variable nil (reparse-symbol function_parameters) [27720 27726]))                          
                        :documentation "Return the object as a ustar header block.
        ")
                        (reparse-symbol indented_block_body) [27674 28132])
                    ("create_gnu_header" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [28159 28163])
                            ("info" variable nil (reparse-symbol function_parameters) [28165 28169])
                            ("encoding" variable nil (reparse-symbol function_parameters) [28171 28179])
                            ("errors" variable nil (reparse-symbol function_parameters) [28181 28187]))                          
                        :documentation "Return the object as a GNU header block sequence.
        ")
                        (reparse-symbol indented_block_body) [28137 28687])
                    ("create_pax_header" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [28714 28718])
                            ("info" variable nil (reparse-symbol function_parameters) [28720 28724])
                            ("encoding" variable nil (reparse-symbol function_parameters) [28726 28734]))                          
                        :documentation "Return the object as a ustar header block. If it cannot be
           represented this way, prepend a pax extended header sequence
           with supplement information.
        ")
                        (reparse-symbol indented_block_body) [28692 30576])
                    ("create_pax_global_header" function
                       (:documentation "Return the object as a pax global header block sequence.
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [30627 30630])
                            ("pax_headers" variable nil (reparse-symbol function_parameters) [30632 30643]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [30581 30803])
                    ("_posix_split_name" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [30830 30834])
                            ("name" variable nil (reparse-symbol function_parameters) [30836 30840]))                          
                        :documentation "Split a name longer than 100 chars into a prefix
           and a name part.
        ")
                        (reparse-symbol indented_block_body) [30808 31254])
                    ("_create_header" function
                       (:typemodifiers ("static")
                        :decorators 
                          ( ("staticmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("info" variable nil (reparse-symbol function_parameters) [31296 31300])
                            ("format" variable nil (reparse-symbol function_parameters) [31302 31308])
                            ("encoding" variable nil (reparse-symbol function_parameters) [31310 31318])
                            ("errors" variable nil (reparse-symbol function_parameters) [31320 31326]))                          
                        :documentation "Return a header block. info is a dictionary with file
           information, format must be one of the *_FORMAT constants.
        ")
                        (reparse-symbol indented_block_body) [31259 32512])
                    ("_create_payload" function
                       (:typemodifiers ("static")
                        :decorators 
                          ( ("staticmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("payload" variable nil (reparse-symbol function_parameters) [32555 32562]))                          
                        :documentation "Return the string payload filled with zero bytes
           up to the next 512 byte border.
        ")
                        (reparse-symbol indented_block_body) [32517 32842])
                    ("_create_gnu_long_header" function
                       (:documentation "Return a GNUTYPE_LONGNAME or GNUTYPE_LONGLINK sequence
           for name.
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [32892 32895])
                            ("name" variable nil (reparse-symbol function_parameters) [32897 32901])
                            ("type" variable nil (reparse-symbol function_parameters) [32903 32907])
                            ("encoding" variable nil (reparse-symbol function_parameters) [32909 32917])
                            ("errors" variable nil (reparse-symbol function_parameters) [32919 32925]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [32847 33398])
                    ("_create_pax_generic_header" function
                       (:documentation "Return a POSIX.1-2008 extended or global header sequence
           that contains a list of keyword, value pairs. The values
           must be strings.
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [33451 33454])
                            ("pax_headers" variable nil (reparse-symbol function_parameters) [33456 33467])
                            ("type" variable nil (reparse-symbol function_parameters) [33469 33473])
                            ("encoding" variable nil (reparse-symbol function_parameters) [33475 33483]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [33403 35369])
                    ("frombuf" function
                       (:documentation "Construct a TarInfo object from a 512 byte bytes object.
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [35403 35406])
                            ("buf" variable nil (reparse-symbol function_parameters) [35408 35411])
                            ("encoding" variable nil (reparse-symbol function_parameters) [35413 35421])
                            ("errors" variable nil (reparse-symbol function_parameters) [35423 35429]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [35374 37730])
                    ("fromtarfile" function
                       (:documentation "Return the next TarInfo object from TarFile object
           tarfile.
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [37768 37771])
                            ("tarfile" variable nil (reparse-symbol function_parameters) [37773 37780]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [37735 38085])
                    ("_proc_member" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [38724 38728])
                            ("tarfile" variable nil (reparse-symbol function_parameters) [38730 38737]))                          
                        :documentation "Choose the right processing method depending on
           the type and call it.
        ")
                        (reparse-symbol indented_block_body) [38707 39208])
                    ("_proc_builtin" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [39231 39235])
                            ("tarfile" variable nil (reparse-symbol function_parameters) [39237 39244]))                          
                        :documentation "Process a builtin type or an unknown type which
           will be treated as a regular file.
        ")
                        (reparse-symbol indented_block_body) [39213 39821])
                    ("_proc_gnulong" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [39844 39848])
                            ("tarfile" variable nil (reparse-symbol function_parameters) [39850 39857]))                          
                        :documentation "Process the blocks that hold a GNU longname
           or longlink member.
        ")
                        (reparse-symbol indented_block_body) [39826 40605])
                    ("_proc_sparse" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [40627 40631])
                            ("tarfile" variable nil (reparse-symbol function_parameters) [40633 40640]))                          
                        :documentation "Process a GNU sparse header plus extra headers.
        ")
                        (reparse-symbol indented_block_body) [40610 41621])
                    ("_proc_pax" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [41640 41644])
                            ("tarfile" variable nil (reparse-symbol function_parameters) [41646 41653]))                          
                        :documentation "Process an extended or global header as described in
           POSIX.1-2008.
        ")
                        (reparse-symbol indented_block_body) [41626 46055])
                    ("_proc_gnusparse_00" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [46083 46087])
                            ("next" variable nil (reparse-symbol function_parameters) [46089 46093])
                            ("pax_headers" variable nil (reparse-symbol function_parameters) [46095 46106])
                            ("buf" variable nil (reparse-symbol function_parameters) [46108 46111]))                          
                        :documentation "Process a GNU tar extended sparse header, version 0.0.
        ")
                        (reparse-symbol indented_block_body) [46060 46533])
                    ("_proc_gnusparse_01" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [46561 46565])
                            ("next" variable nil (reparse-symbol function_parameters) [46567 46571])
                            ("pax_headers" variable nil (reparse-symbol function_parameters) [46573 46584]))                          
                        :documentation "Process a GNU tar extended sparse header, version 0.1.
        ")
                        (reparse-symbol indented_block_body) [46538 46800])
                    ("_proc_gnusparse_10" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [46828 46832])
                            ("next" variable nil (reparse-symbol function_parameters) [46834 46838])
                            ("pax_headers" variable nil (reparse-symbol function_parameters) [46840 46851])
                            ("tarfile" variable nil (reparse-symbol function_parameters) [46853 46860]))                          
                        :documentation "Process a GNU tar extended sparse header, version 1.0.
        ")
                        (reparse-symbol indented_block_body) [46805 47422])
                    ("_apply_pax_info" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [47447 47451])
                            ("pax_headers" variable nil (reparse-symbol function_parameters) [47453 47464])
                            ("encoding" variable nil (reparse-symbol function_parameters) [47466 47474])
                            ("errors" variable nil (reparse-symbol function_parameters) [47476 47482]))                          
                        :documentation "Replace fields with supplemental information from a previous
           pax extended or global header.
        ")
                        (reparse-symbol indented_block_body) [47427 48380])
                    ("_decode_pax_field" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [48407 48411])
                            ("value" variable nil (reparse-symbol function_parameters) [48413 48418])
                            ("encoding" variable nil (reparse-symbol function_parameters) [48420 48428])
                            ("fallback_encoding" variable nil (reparse-symbol function_parameters) [48430 48447])
                            ("fallback_errors" variable nil (reparse-symbol function_parameters) [48449 48464]))                          
                        :documentation "Decode a single field from a pax record.
        ")
                        (reparse-symbol indented_block_body) [48385 48699])
                    ("_block" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [48715 48719])
                            ("count" variable nil (reparse-symbol function_parameters) [48721 48726]))                          
                        :documentation "Round up a byte count by BLOCKSIZE and return it,
           e.g. _block(834) => 1024.
        ")
                        (reparse-symbol indented_block_body) [48704 48972])
                    ("isreg" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [48987 48991]))                          )
                        (reparse-symbol indented_block_body) [48977 49036])
                    ("isfile" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [49051 49055]))                          )
                        (reparse-symbol indented_block_body) [49040 49086])
                    ("isdir" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [49100 49104]))                          )
                        (reparse-symbol indented_block_body) [49090 49143])
                    ("issym" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [49157 49161]))                          )
                        (reparse-symbol indented_block_body) [49147 49200])
                    ("islnk" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [49214 49218]))                          )
                        (reparse-symbol indented_block_body) [49204 49257])
                    ("ischr" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [49271 49275]))                          )
                        (reparse-symbol indented_block_body) [49261 49314])
                    ("isblk" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [49328 49332]))                          )
                        (reparse-symbol indented_block_body) [49318 49371])
                    ("isfifo" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [49386 49390]))                          )
                        (reparse-symbol indented_block_body) [49375 49430])
                    ("issparse" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [49447 49451]))                          )
                        (reparse-symbol indented_block_body) [49434 49493])
                    ("isdev" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [49507 49511]))                          )
                        (reparse-symbol indented_block_body) [49497 49571]))                  
                :type "class")
                nil [24271 49571])
            ("TarFile" type
               (:documentation "The TarFile Class provides an interface to tar archives.
    "
                :superclasses ("object")
                :members 
                  ( ("debug" variable nil (reparse-symbol indented_block_body) [49688 49697])
                    ("dereference" variable nil (reparse-symbol indented_block_body) [49767 49786])
                    ("ignore_zeros" variable nil (reparse-symbol indented_block_body) [49904 49924])
                    ("errorlevel" variable nil (reparse-symbol indented_block_body) [50038 50052])
                    ("format" variable nil (reparse-symbol indented_block_body) [50262 50285])
                    ("encoding" variable nil (reparse-symbol indented_block_body) [50341 50360])
                    ("errors" variable nil (reparse-symbol indented_block_body) [50414 50427])
                    ("tarinfo" variable nil (reparse-symbol indented_block_body) [50487 50504])
                    ("fileobject" variable nil (reparse-symbol indented_block_body) [50556 50581])
                    ("__init__" function
                       (:suite 
                          ( ("\"\"\"Open an (uncompressed) tar archive `name'. `mode' is either 'r' to
           read from an existing archive, 'a' to append data to an existing
           file or 'w' to create a new file overwriting an existing one. `mode'
           defaults to 'r'.
           If `fileobj' is given, it is used for reading or writing data. If it
           can be determined, `mode' is overridden by `fileobj's mode.
           `fileobj' is not closed, when TarFile is closed.
        \"\"\"" code nil (reparse-symbol indented_block_body) [50865 51341])
                            ("if" code nil (reparse-symbol indented_block_body) [51350 51450])
                            ("self" variable nil (reparse-symbol indented_block_body) [51458 51474])
                            ("self" variable nil (reparse-symbol indented_block_body) [51483 51536])
                            ("if" code nil (reparse-symbol indented_block_body) [51546 52063])
                            ("None" code nil (reparse-symbol indented_block_body) [52118 52122])
                            ("self" variable nil (reparse-symbol indented_block_body) [52131 52153])
                            ("if" code nil (reparse-symbol indented_block_body) [52190 52246])
                            ("if" code nil (reparse-symbol indented_block_body) [52254 52313])
                            ("if" code nil (reparse-symbol indented_block_body) [52321 52392])
                            ("if" code nil (reparse-symbol indented_block_body) [52400 52474])
                            ("if" code nil (reparse-symbol indented_block_body) [52482 52544])
                            ("self" variable nil (reparse-symbol indented_block_body) [52552 52572])
                            ("if" code nil (reparse-symbol indented_block_body) [52582 52731])
                            ("if" code nil (reparse-symbol indented_block_body) [52740 52793])
                            ("if" code nil (reparse-symbol indented_block_body) [52801 52869])
                            ("self" variable nil (reparse-symbol indented_block_body) [52909 52928])
                            ("self" variable nil (reparse-symbol indented_block_body) [52937 52954])
                            ("self" variable nil (reparse-symbol indented_block_body) [53006 53026])
                            ("self" variable nil (reparse-symbol indented_block_body) [53075 53108])
                            ("self" variable nil (reparse-symbol indented_block_body) [53188 53204])
                            ("try" code nil (reparse-symbol indented_block_body) [53320 54445]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [50639 50643])
                            ("name" variable nil (reparse-symbol function_parameters) [50645 50649])
                            ("mode" variable nil (reparse-symbol function_parameters) [50656 50660])
                            ("fileobj" variable nil (reparse-symbol function_parameters) [50666 50673])
                            ("format" variable nil (reparse-symbol function_parameters) [50680 50686])
                            ("tarinfo" variable nil (reparse-symbol function_parameters) [50705 50712])
                            ("dereference" variable nil (reparse-symbol function_parameters) [50719 50730])
                            ("ignore_zeros" variable nil (reparse-symbol function_parameters) [50737 50749])
                            ("encoding" variable nil (reparse-symbol function_parameters) [50756 50764])
                            ("errors" variable nil (reparse-symbol function_parameters) [50783 50789])
                            ("pax_headers" variable nil (reparse-symbol function_parameters) [50809 50820])
                            ("debug" variable nil (reparse-symbol function_parameters) [50827 50832])
                            ("errorlevel" variable nil (reparse-symbol function_parameters) [50839 50849]))                          
                        :documentation "Open an (uncompressed) tar archive `name'. `mode' is either 'r' to
           read from an existing archive, 'a' to append data to an existing
           file or 'w' to create a new file overwriting an existing one. `mode'
           defaults to 'r'.
           If `fileobj' is given, it is used for reading or writing data. If it
           can be determined, `mode' is overridden by `fileobj's mode.
           `fileobj' is not closed, when TarFile is closed.
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [50626 54445])
                    ("open" function
                       (:documentation "Open a tar archive for reading, writing or appending. Return
           an appropriate TarFile class.

           mode:
           'r' or 'r:*' open for reading with transparent compression
           'r:'         open for reading exclusively uncompressed
           'r:gz'       open for reading with gzip compression
           'r:bz2'      open for reading with bzip2 compression
           'r:xz'       open for reading with lzma compression
           'a' or 'a:'  open for appending, creating the file if necessary
           'w' or 'w:'  open for writing without compression
           'w:gz'       open for writing with gzip compression
           'w:bz2'      open for writing with bzip2 compression
           'w:xz'       open for writing with lzma compression

           'r|*'        open a stream of tar blocks with transparent compression
           'r|'         open an uncompressed stream of tar blocks for reading
           'r|gz'       open a gzip compressed stream of tar blocks
           'r|bz2'      open a bzip2 compressed stream of tar blocks
           'r|xz'       open an lzma compressed stream of tar blocks
           'w|'         open an uncompressed stream for writing
           'w|gz'       open a gzip compressed stream for writing
           'w|bz2'      open a bzip2 compressed stream for writing
           'w|xz'       open an lzma compressed stream for writing
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [55096 55099])
                            ("name" variable nil (reparse-symbol function_parameters) [55101 55105])
                            ("mode" variable nil (reparse-symbol function_parameters) [55112 55116])
                            ("fileobj" variable nil (reparse-symbol function_parameters) [55122 55129])
                            ("bufsize" variable nil (reparse-symbol function_parameters) [55136 55143])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [55156 55164]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [55070 58490])
                    ("taropen" function
                       (:documentation "Open uncompressed tar archive name for reading or writing.
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [58524 58527])
                            ("name" variable nil (reparse-symbol function_parameters) [58529 58533])
                            ("mode" variable nil (reparse-symbol function_parameters) [58535 58539])
                            ("fileobj" variable nil (reparse-symbol function_parameters) [58545 58552])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [58559 58567]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [58495 58810])
                    ("gzopen" function
                       (:documentation "Open gzip compressed tar archive name for reading or writing.
           Appending is not allowed.
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [58843 58846])
                            ("name" variable nil (reparse-symbol function_parameters) [58848 58852])
                            ("mode" variable nil (reparse-symbol function_parameters) [58854 58858])
                            ("fileobj" variable nil (reparse-symbol function_parameters) [58864 58871])
                            ("compresslevel" variable nil (reparse-symbol function_parameters) [58878 58891])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [58895 58903]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [58815 59884])
                    ("bz2open" function
                       (:documentation "Open bzip2 compressed tar archive name for reading or writing.
           Appending is not allowed.
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [59918 59921])
                            ("name" variable nil (reparse-symbol function_parameters) [59923 59927])
                            ("mode" variable nil (reparse-symbol function_parameters) [59929 59933])
                            ("fileobj" variable nil (reparse-symbol function_parameters) [59939 59946])
                            ("compresslevel" variable nil (reparse-symbol function_parameters) [59953 59966])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [59970 59978]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [59889 60683])
                    ("xzopen" function
                       (:documentation "Open lzma compressed tar archive name for reading or writing.
           Appending is not allowed.
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [60716 60719])
                            ("name" variable nil (reparse-symbol function_parameters) [60721 60725])
                            ("mode" variable nil (reparse-symbol function_parameters) [60727 60731])
                            ("fileobj" variable nil (reparse-symbol function_parameters) [60737 60744])
                            ("preset" variable nil (reparse-symbol function_parameters) [60751 60757])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [60764 60772]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [60688 61431])
                    ("OPEN_METH" variable nil (reparse-symbol indented_block_body) [61483 61700])
                    ("close" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [61846 61850]))                          
                        :documentation "Close the TarFile. In write-mode, two finishing zero blocks are
           appended to the archive.
        ")
                        (reparse-symbol indented_block_body) [61836 62495])
                    ("getmember" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [62514 62518])
                            ("name" variable nil (reparse-symbol function_parameters) [62520 62524]))                          
                        :documentation "Return a TarInfo object for member `name'. If `name' can not be
           found in the archive, KeyError is raised. If a member occurs more
           than once in the archive, its last occurrence is assumed to be the
           most up-to-date version.
        ")
                        (reparse-symbol indented_block_body) [62500 62955])
                    ("getmembers" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [62975 62979]))                          
                        :documentation "Return the members of the archive as a list of TarInfo objects. The
           list has the same order as the members in the archive.
        ")
                        (reparse-symbol indented_block_body) [62960 63376])
                    ("getnames" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [63394 63398]))                          
                        :documentation "Return the members of the archive as a list of their names. It has
           the same order as the list returned by getmembers().
        ")
                        (reparse-symbol indented_block_body) [63381 63618])
                    ("gettarinfo" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [63638 63642])
                            ("name" variable nil (reparse-symbol function_parameters) [63644 63648])
                            ("arcname" variable nil (reparse-symbol function_parameters) [63655 63662])
                            ("fileobj" variable nil (reparse-symbol function_parameters) [63669 63676]))                          
                        :documentation "Create a TarInfo object for either the file `name' or the file
           object `fileobj' (using os.fstat on its file descriptor). You can
           modify some of the TarInfo's attributes before you add it using
           addfile(). If given, `arcname' specifies an alternative name for the
           file in the archive.
        ")
                        (reparse-symbol indented_block_body) [63623 67093])
                    ("list" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [67107 67111])
                            ("verbose" variable nil (reparse-symbol function_parameters) [67113 67120]))                          
                        :documentation "Print a table of contents to sys.stdout. If `verbose' is False, only
           the names of the members are printed. If it is True, an `ls -l'-like
           output is produced.
        ")
                        (reparse-symbol indented_block_body) [67098 68309])
                    ("add" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [68322 68326])
                            ("name" variable nil (reparse-symbol function_parameters) [68328 68332])
                            ("arcname" variable nil (reparse-symbol function_parameters) [68334 68341])
                            ("recursive" variable nil (reparse-symbol function_parameters) [68348 68357])
                            ("exclude" variable nil (reparse-symbol function_parameters) [68364 68371])
                            ("filter" variable nil (reparse-symbol function_parameters) [68381 68387]))                          
                        :documentation "Add the file `name' to the archive. `name' may be any type of file
           (directory, fifo, symbolic link, etc.). If given, `arcname'
           specifies an alternative name for the file in the archive.
           Directories are added recursively by default. This can be avoided by
           setting `recursive' to False. `exclude' is a function that should
           return True for each filename to be excluded. `filter' is a function
           that expects a TarInfo object argument and returns the changed
           TarInfo object, if it returns None the TarInfo object will be
           excluded from the archive.
        ")
                        (reparse-symbol indented_block_body) [68314 70612])
                    ("addfile" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [70629 70633])
                            ("tarinfo" variable nil (reparse-symbol function_parameters) [70635 70642])
                            ("fileobj" variable nil (reparse-symbol function_parameters) [70644 70651]))                          
                        :documentation "Add the TarInfo object `tarinfo' to the archive. If `fileobj' is
           given, tarinfo.size bytes are read from it and added to the archive.
           You can create TarInfo objects using gettarinfo().
           On Windows platforms, `fileobj' should always be opened with mode
           'rb' to avoid irritation about the file size.
        ")
                        (reparse-symbol indented_block_body) [70617 71635])
                    ("extractall" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [71655 71659])
                            ("path" variable nil (reparse-symbol function_parameters) [71661 71665])
                            ("members" variable nil (reparse-symbol function_parameters) [71671 71678]))                          
                        :documentation "Extract all members from the archive to the current working
           directory and set owner, modification time and permissions on
           directories afterwards. `path' specifies a different directory
           to extract to. `members' is optional and must be a subset of the
           list returned by getmembers().
        ")
                        (reparse-symbol indented_block_body) [71640 73109])
                    ("extract" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [73126 73130])
                            ("member" variable nil (reparse-symbol function_parameters) [73132 73138])
                            ("path" variable nil (reparse-symbol function_parameters) [73140 73144])
                            ("set_attrs" variable nil (reparse-symbol function_parameters) [73149 73158]))                          
                        :documentation "Extract a member from the archive to the current working directory,
           using its full name. Its file information is extracted as accurately
           as possible. `member' may be a filename or a TarInfo object. You can
           specify a different directory using `path'. File attributes (owner,
           mtime, mode) are set unless `set_attrs' is False.
        ")
                        (reparse-symbol indented_block_body) [73114 74474])
                    ("extractfile" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [74495 74499])
                            ("member" variable nil (reparse-symbol function_parameters) [74501 74507]))                          
                        :documentation "Extract a member from the archive as a file object. `member' may be
           a filename or a TarInfo object. If `member' is a regular file or a
           link, an io.BufferedReader object is returned. Otherwise, None is
           returned.
        ")
                        (reparse-symbol indented_block_body) [74479 75838])
                    ("_extract_member" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [75863 75867])
                            ("tarinfo" variable nil (reparse-symbol function_parameters) [75869 75876])
                            ("targetpath" variable nil (reparse-symbol function_parameters) [75878 75888])
                            ("set_attrs" variable nil (reparse-symbol function_parameters) [75890 75899]))                          
                        :documentation "Extract the TarInfo object tarinfo to a physical
           file called targetpath.
        ")
                        (reparse-symbol indented_block_body) [75843 77520])
                    ("makedir" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [77807 77811])
                            ("tarinfo" variable nil (reparse-symbol function_parameters) [77813 77820])
                            ("targetpath" variable nil (reparse-symbol function_parameters) [77822 77832]))                          
                        :documentation "Make a directory called targetpath.
        ")
                        (reparse-symbol indented_block_body) [77795 78108])
                    ("makefile" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [78126 78130])
                            ("tarinfo" variable nil (reparse-symbol function_parameters) [78132 78139])
                            ("targetpath" variable nil (reparse-symbol function_parameters) [78141 78151]))                          
                        :documentation "Make a file called targetpath.
        ")
                        (reparse-symbol indented_block_body) [78113 78664])
                    ("makeunknown" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [78685 78689])
                            ("tarinfo" variable nil (reparse-symbol function_parameters) [78691 78698])
                            ("targetpath" variable nil (reparse-symbol function_parameters) [78700 78710]))                          
                        :documentation "Make a file from a TarInfo object with an unknown type
           at targetpath.
        ")
                        (reparse-symbol indented_block_body) [78669 78983])
                    ("makefifo" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [79001 79005])
                            ("tarinfo" variable nil (reparse-symbol function_parameters) [79007 79014])
                            ("targetpath" variable nil (reparse-symbol function_parameters) [79016 79026]))                          
                        :documentation "Make a fifo called targetpath.
        ")
                        (reparse-symbol indented_block_body) [78988 79228])
                    ("makedev" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [79245 79249])
                            ("tarinfo" variable nil (reparse-symbol function_parameters) [79251 79258])
                            ("targetpath" variable nil (reparse-symbol function_parameters) [79260 79270]))                          
                        :documentation "Make a character or block device called targetpath.
        ")
                        (reparse-symbol indented_block_body) [79233 79727])
                    ("makelink" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [79745 79749])
                            ("tarinfo" variable nil (reparse-symbol function_parameters) [79751 79758])
                            ("targetpath" variable nil (reparse-symbol function_parameters) [79760 79770]))                          
                        :documentation "Make a (symbolic) link called targetpath. If it cannot be created
          (platform limitation), we try to make a copy of the referenced file
          instead of a link.
        ")
                        (reparse-symbol indented_block_body) [79732 80729])
                    ("chown" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [80744 80748])
                            ("tarinfo" variable nil (reparse-symbol function_parameters) [80750 80757])
                            ("targetpath" variable nil (reparse-symbol function_parameters) [80759 80769]))                          
                        :documentation "Set owner of targetpath according to tarinfo.
        ")
                        (reparse-symbol indented_block_body) [80734 81559])
                    ("chmod" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [81574 81578])
                            ("tarinfo" variable nil (reparse-symbol function_parameters) [81580 81587])
                            ("targetpath" variable nil (reparse-symbol function_parameters) [81589 81599]))                          
                        :documentation "Set file permissions of targetpath according to tarinfo.
        ")
                        (reparse-symbol indented_block_body) [81564 81885])
                    ("utime" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [81900 81904])
                            ("tarinfo" variable nil (reparse-symbol function_parameters) [81906 81913])
                            ("targetpath" variable nil (reparse-symbol function_parameters) [81915 81925]))                          
                        :documentation "Set modification time of targetpath according to tarinfo.
        ")
                        (reparse-symbol indented_block_body) [81890 82250])
                    ("next" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [82344 82348]))                          
                        :documentation "Return the next member of the archive as a TarInfo object, when
           TarFile is opened for reading. Return None if there is no more
           available.
        ")
                        (reparse-symbol indented_block_body) [82335 83898])
                    ("_getmember" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [84028 84032])
                            ("name" variable nil (reparse-symbol function_parameters) [84034 84038])
                            ("tarinfo" variable nil (reparse-symbol function_parameters) [84040 84047])
                            ("normalize" variable nil (reparse-symbol function_parameters) [84054 84063]))                          
                        :documentation "Find an archive member by name from bottom to top.
           If tarinfo is given, it is used as the starting point.
        ")
                        (reparse-symbol indented_block_body) [84013 84762])
                    ("_load" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [84777 84781]))                          
                        :documentation "Read through the entire archive file and look for readable
           members.
        ")
                        (reparse-symbol indented_block_body) [84767 85022])
                    ("_check" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [85038 85042])
                            ("mode" variable nil (reparse-symbol function_parameters) [85044 85048]))                          
                        :documentation "Check if TarFile is still open, and if the operation's mode
           corresponds to TarFile's mode.
        ")
                        (reparse-symbol indented_block_body) [85027 85395])
                    ("_find_link_target" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [85422 85426])
                            ("tarinfo" variable nil (reparse-symbol function_parameters) [85428 85435]))                          
                        :documentation "Find the target member of a symlink or hardlink member in the
           archive.
        ")
                        (reparse-symbol indented_block_body) [85400 86143])
                    ("__iter__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [86161 86165]))                          
                        :documentation "Provide an iterator object.
        ")
                        (reparse-symbol indented_block_body) [86148 86329])
                    ("_dbg" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [86343 86347])
                            ("level" variable nil (reparse-symbol function_parameters) [86349 86354])
                            ("msg" variable nil (reparse-symbol function_parameters) [86356 86359]))                          
                        :documentation "Write debugging output to sys.stderr.
        ")
                        (reparse-symbol indented_block_body) [86334 86495])
                    ("__enter__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [86514 86518]))                          )
                        (reparse-symbol indented_block_body) [86500 86563])
                    ("__exit__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [86581 86585])
                            ("type" variable nil (reparse-symbol function_parameters) [86587 86591])
                            ("value" variable nil (reparse-symbol function_parameters) [86593 86598])
                            ("traceback" variable nil (reparse-symbol function_parameters) [86600 86609]))                          )
                        (reparse-symbol indented_block_body) [86568 86922]))                  
                :type "class")
                nil [49588 86922])
            ("TarIter" type
               (:documentation "Iterator Class.

       for tarinfo in TarFile(...):
           suite...
    "
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"Construct a TarIter object.
        \"\"\"" code nil (reparse-symbol indented_block_body) [87084 87126])
                            ("self" variable nil (reparse-symbol indented_block_body) [87135 87157])
                            ("self" variable nil (reparse-symbol indented_block_body) [87166 87180]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [87060 87064])
                            ("tarfile" variable nil (reparse-symbol function_parameters) [87066 87073]))                          
                        :documentation "Construct a TarIter object.
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [87047 87181])
                    ("__iter__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [87198 87202]))                          
                        :documentation "Return iterator object.
        ")
                        (reparse-symbol indented_block_body) [87185 87272])
                    ("__next__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [87289 87293]))                          
                        :documentation "Return the next item using TarFile's next() method.
           When all members have been read, set TarFile as _loaded.
        ")
                        (reparse-symbol indented_block_body) [87276 88012]))                  
                :type "class")
                nil [86939 88012])
            ("is_tarfile" function
               (:documentation "Return True if name points to a tar archive that we
       are able to handle, else return False.
    "
                :arguments 
                  ( ("name" variable nil (reparse-symbol function_parameters) [88093 88097]))                  )
                nil [88078 88325])
            ("bltn_open" variable nil nil [88326 88342])
            ("open" variable nil nil [88343 88362]))          
    :file "tarfile.py"
    :pointmax 88363
    :fsize 88362
    :lastmodtime '(20832 44201 0 0)
    :unmatched-syntax '((INDENT_BLOCK 83696 . 83736) (NEWLINE 83695 . 83696) (COLON 83694 . 83695) (AS 83690 . 83692) (EXCEPT 83661 . 83667) (INDENT_BLOCK 83568 . 83649) (NEWLINE 83567 . 83568) (COLON 83566 . 83567) (AS 83562 . 83564) (EXCEPT 83534 . 83540) (INDENT_BLOCK 83435 . 83522) (NEWLINE 83434 . 83435) (COLON 83433 . 83434) (EXCEPT 83410 . 83416) (INDENT_BLOCK 83139 . 83398) (NEWLINE 83138 . 83139) (COLON 83137 . 83138) (AS 83133 . 83135) (EXCEPT 83107 . 83113) (INDENT_BLOCK 82919 . 83095) (NEWLINE 82918 . 82919) (COLON 82917 . 82918) (TRY 82817 . 82820) (AS 82913 . 82915) (INDENT_BLOCK 82181 . 82250) (NEWLINE 82180 . 82181) (COLON 82179 . 82180) (TRY 82073 . 82076) (AS 82175 . 82177) (INDENT_BLOCK 81825 . 81885) (NEWLINE 81824 . 81825) (COLON 81823 . 81824) (TRY 81727 . 81730) (AS 81819 . 81821) (INDENT_BLOCK 81498 . 81559) (NEWLINE 81497 . 81498) (COLON 81496 . 81497) (TRY 81219 . 81222) (AS 81492 . 81494) (INDENT_BLOCK 74350 . 74474) (NEWLINE 74349 . 74350) (COLON 74348 . 74349) (AS 74344 . 74346) (EXCEPT 74324 . 74330) (INDENT_BLOCK 74040 . 74316) (NEWLINE 74039 . 74040) (COLON 74038 . 74039) (TRY 73867 . 73870) (AS 74034 . 74036) (INDENT_BLOCK 72969 . 73109) (NEWLINE 72968 . 72969) (COLON 72967 . 72968) (TRY 72791 . 72794) (AS 72963 . 72965) (MULT 68378 . 68379) (COMMA 68379 . 68380) (INDENT_BLOCK 57119 . 57240) (NEWLINE 57118 . 57119) (COLON 57117 . 57118) (TRY 56993 . 56996) (AS 57113 . 57115) (INDENT_BLOCK 53972 . 54020) (NEWLINE 53971 . 53972) (COLON 53970 . 53971) (TRY 53676 . 53679) (AS 53966 . 53968) (NAME 52071 . 52075) (IF 52105 . 52107) (ELSE 52113 . 52117) (INDENT_BLOCK 47173 . 47228) (NEWLINE 47172 . 47173) (IF 47152 . 47154) (STRING_LITERAL 47156 . 47160) (COLON 47171 . 47172) (INDENT_BLOCK 20765 . 20790) (NEWLINE 20764 . 20765) (COLON 20763 . 20764) (ELSE 20759 . 20763) (INDENT_BLOCK 20727 . 20751) (NEWLINE 20726 . 20727) (COLON 20725 . 20726) (ELIF 20665 . 20669) (INDENT_BLOCK 20632 . 20657) (NEWLINE 20631 . 20632) (IF 20497 . 20499) (STRING_LITERAL 20593 . 20598) (STRING_LITERAL 20622 . 20630) (COLON 20630 . 20631) (INDENT_BLOCK 17385 . 17454) (NEWLINE 17384 . 17385) (STRING_LITERAL 17377 . 17383) (COLON 17383 . 17384) (INDENT_BLOCK 17300 . 17347) (NEWLINE 17299 . 17300) (IF 17266 . 17268) (STRING_LITERAL 17288 . 17298) (COLON 17298 . 17299))
    )
   (semanticdb-table "abc.py"
    :major-mode 'python-mode
    :tags 
        '( ("\"\"\"Abstract Base Classes (ABCs) according to PEP 3119.\"\"\"" code nil nil [102 159])
            ("_weakrefset" include nil nil [161 192])
            ("abstractmethod" function
               (:documentation "A decorator indicating abstract methods.

    Requires that the metaclass is ABCMeta or derived from it.  A
    class that has a metaclass derived from ABCMeta cannot be
    instantiated unless all of its abstract methods are overridden.
    The abstract methods can be called using any of the normal
    'super' call mechanisms.

    Usage:

        class C(metaclass=ABCMeta):
            @abstractmethod
            def my_abstract_method(self, ...):
                ...
    "
                :arguments 
                  ( ("funcobj" variable nil (reparse-symbol function_parameters) [213 220]))                  )
                nil [194 771])
            ("abstractclassmethod" type
               (:documentation "
    A decorator indicating abstract classmethods.

    Similar to abstractmethod.

    Usage:

        class C(metaclass=ABCMeta):
            @abstractclassmethod
            def my_abstract_classmethod(cls, ...):
                ...

    'abstractclassmethod' is deprecated. Use 'classmethod' with
    'abstractmethod' instead.
    "
                :superclasses ("classmethod")
                :members 
                  ( ("__isabstractmethod__" variable nil (reparse-symbol indented_block_body) [1164 1191])
                    ("__init__" function
                       (:suite 
                          ( ("callable" variable nil (reparse-symbol indented_block_body) [1235 1271])
                            ("super" code nil (reparse-symbol indented_block_body) [1280 1306]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1210 1214])
                            ("callable" variable nil (reparse-symbol function_parameters) [1216 1224]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [1197 1307]))                  
                :type "class")
                nil [773 1307])
            ("abstractstaticmethod" type
               (:documentation "
    A decorator indicating abstract staticmethods.

    Similar to abstractmethod.

    Usage:

        class C(metaclass=ABCMeta):
            @abstractstaticmethod
            def my_abstract_staticmethod(...):
                ...

    'abstractstaticmethod' is deprecated. Use 'staticmethod' with
    'abstractmethod' instead.
    "
                :superclasses ("staticmethod")
                :members 
                  ( ("__isabstractmethod__" variable nil (reparse-symbol indented_block_body) [1702 1729])
                    ("__init__" function
                       (:suite 
                          ( ("callable" variable nil (reparse-symbol indented_block_body) [1773 1809])
                            ("super" code nil (reparse-symbol indented_block_body) [1818 1844]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1748 1752])
                            ("callable" variable nil (reparse-symbol function_parameters) [1754 1762]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [1735 1845]))                  
                :type "class")
                nil [1309 1845])
            ("abstractproperty" type
               (:documentation "
    A decorator indicating abstract properties.

    Requires that the metaclass is ABCMeta or derived from it.  A
    class that has a metaclass derived from ABCMeta cannot be
    instantiated unless all of its abstract properties are overridden.
    The abstract properties can be called using any of the normal
    'super' call mechanisms.

    Usage:

        class C(metaclass=ABCMeta):
            @abstractproperty
            def my_abstract_property(self):
                ...

    This defines a read-only property; you can also define a read-write
    abstract property using the 'long' form of property declaration:

        class C(metaclass=ABCMeta):
            def getx(self): ...
            def setx(self, value): ...
            x = abstractproperty(getx, setx)

    'abstractproperty' is deprecated. Use 'property' with 'abstractmethod'
    instead.
    "
                :superclasses ("property")
                :members 
                  ( ("__isabstractmethod__" variable nil (reparse-symbol indented_block_body) [2772 2799]))                  
                :type "class")
                nil [1847 2800])
            ("ABCMeta" type
               (:documentation "Metaclass for defining Abstract Base Classes (ABCs).

    Use this metaclass to create an ABC.  An ABC can be subclassed
    directly, and then acts as a mix-in class.  You can also register
    unrelated concrete classes (even built-in classes) and unrelated
    ABCs as 'virtual subclasses' -- these and their descendants will
    be considered subclasses of the registering ABC by the built-in
    issubclass() function, but the registering ABC won't show up in
    their MRO (Method Resolution Order) nor will method
    implementations defined by the registering ABC be callable (not
    even via super()).

    "
                :superclasses ("type")
                :members 
                  ( ("_abc_invalidation_counter" variable nil (reparse-symbol indented_block_body) [3644 3673])
                    ("__new__" function (:arguments 
                      ( ("mcls" variable nil (reparse-symbol function_parameters) [3691 3695])
                        ("name" variable nil (reparse-symbol function_parameters) [3697 3701])
                        ("bases" variable nil (reparse-symbol function_parameters) [3703 3708])
                        ("namespace" variable nil (reparse-symbol function_parameters) [3710 3719]))                      ) (reparse-symbol indented_block_body) [3679 4540])
                    ("register" function
                       (:documentation "Register a virtual subclass of an ABC.

        Returns the subclass, to allow usage as a class decorator.
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [4558 4561])
                            ("subclass" variable nil (reparse-symbol function_parameters) [4563 4571]))                          )
                        (reparse-symbol indented_block_body) [4545 5371])
                    ("_dump_registry" function
                       (:documentation "Debug helper to print the ABC registry."
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [5395 5398])
                            ("file" variable nil (reparse-symbol function_parameters) [5400 5404]))                          )
                        (reparse-symbol indented_block_body) [5376 5812])
                    ("__instancecheck__" function
                       (:documentation "Override for isinstance(instance, cls)."
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [5839 5842])
                            ("instance" variable nil (reparse-symbol function_parameters) [5844 5852]))                          )
                        (reparse-symbol indented_block_body) [5817 6471])
                    ("__subclasscheck__" function
                       (:documentation "Override for issubclass(subclass, cls)."
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [6498 6501])
                            ("subclass" variable nil (reparse-symbol function_parameters) [6503 6511]))                          )
                        (reparse-symbol indented_block_body) [6476 8058]))                  
                :type "class")
                nil [2802 8058]))          
    :file "abc.py"
    :pointmax 8058
    :fsize 8057
    :lastmodtime '(20832 44201 0 0)
    :unmatched-syntax 'nil
    )
   (semanticdb-table "linecache.py"
    :major-mode 'python-mode
    :tags nil
    :file "linecache.py"
    :pointmax 3865
    :fsize 3864
    :lastmodtime '(20832 44201 0 0)
    :unmatched-syntax 'nil
    )
   (semanticdb-table "posixpath.py"
    :major-mode 'python-mode
    :tags 
        '( ("\"\"\"Common operations on Posix pathnames.

Instead of importing this module directly, import os and refer to
this module as os.path.  The \"os.path\" name is an alias for this
module on Posix systems; on other systems (e.g. Mac, Windows),
os.path provides the same operations in a manner specific to that
platform, and is an alias to another module (e.g. macpath, ntpath).

Some of this can actually be useful on non-Posix systems too, e.g.
for manipulation of the pathname component of URLs.
\"\"\"" code nil nil [1 494])
            ("os" include nil nil [496 505])
            ("sys" include nil nil [506 516])
            ("stat" include nil nil [517 528])
            ("genericpath" include nil nil [529 547])
            ("genericpath" include nil nil [548 573])
            ("__all__" variable nil nil [575 1057])
            ("curdir" variable nil nil [1186 1198])
            ("pardir" variable nil nil [1199 1212])
            ("extsep" variable nil nil [1213 1225])
            ("sep" variable nil nil [1226 1235])
            ("pathsep" variable nil nil [1236 1249])
            ("defpath" variable nil nil [1250 1276])
            ("altsep" variable nil nil [1277 1290])
            ("devnull" variable nil nil [1291 1312])
            ("_get_sep" function (:arguments 
              ( ("path" variable nil (reparse-symbol function_parameters) [1327 1331]))              ) nil [1314 1415])
            ("normcase" function
               (:documentation "Normalize case of pathname.  Has no effect under Posix"
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [1694 1695]))                  )
                nil [1681 2012])
            ("isabs" function
               (:documentation "Test whether a path is absolute"
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [2111 2112]))                  )
                nil [2101 2208])
            ("join" function
               (:documentation "Join two or more pathname components, inserting '/' as needed.
    If any component is an absolute path, all previous path components
    will be discarded.  An empty last part will result in a path that
    ends with a separator."
                :arguments 
                  ( ("a" variable nil (reparse-symbol function_parameters) [2359 2360])
                    ("p" variable nil (reparse-symbol function_parameters) [2362 2364]))                  )
                nil [2350 3221])
            ("split" function
               (:documentation "Split a pathname.  Returns tuple \"(head, tail)\" where \"tail\" is
    everything after the final slash.  Either part may be empty."
                :arguments 
                  ( ("p" variable nil (reparse-symbol function_parameters) [3477 3478]))                  )
                nil [3467 3790])
            ("splitext" function (:arguments 
              ( ("p" variable nil (reparse-symbol function_parameters) [4011 4012]))              ) nil [3998 4189])
            ("splitext" variable nil nil [4189 4237])
            ("splitdrive" function
               (:documentation "Split a pathname into drive and path. On Posix, drive is always
    empty."
                :arguments 
                  ( ("p" variable nil (reparse-symbol function_parameters) [4392 4393]))                  )
                nil [4377 4501])
            ("basename" function
               (:documentation "Returns the final component of a pathname"
                :arguments 
                  ( ("p" variable nil (reparse-symbol function_parameters) [4586 4587]))                  )
                nil [4573 4706])
            ("dirname" function
               (:documentation "Returns the directory component of a pathname"
                :arguments 
                  ( ("p" variable nil (reparse-symbol function_parameters) [4789 4790]))                  )
                nil [4777 5000])
            ("islink" function
               (:documentation "Test whether a path is a symbolic link"
                :arguments 
                  ( ("path" variable nil (reparse-symbol function_parameters) [5116 5120]))                  )
                nil [5105 5305])
            ("lexists" function
               (:documentation "Test whether a path exists.  Returns True for broken symbolic links"
                :arguments 
                  ( ("path" variable nil (reparse-symbol function_parameters) [5376 5380]))                  )
                nil [5364 5551])
            ("samefile" function
               (:documentation "Test whether two pathnames reference the same actual file"
                :arguments 
                  ( ("f1" variable nil (reparse-symbol function_parameters) [5621 5623])
                    ("f2" variable nil (reparse-symbol function_parameters) [5625 5627]))                  )
                nil [5608 5768])
            ("sameopenfile" function
               (:documentation "Test whether two open file objects reference the same file"
                :arguments 
                  ( ("fp1" variable nil (reparse-symbol function_parameters) [5889 5892])
                    ("fp2" variable nil (reparse-symbol function_parameters) [5894 5897]))                  )
                nil [5872 6043])
            ("samestat" function
               (:documentation "Test whether two stat buffers reference the same file"
                :arguments 
                  ( ("s1" variable nil (reparse-symbol function_parameters) [6147 6149])
                    ("s2" variable nil (reparse-symbol function_parameters) [6151 6153]))                  )
                nil [6134 6294])
            ("ismount" function
               (:documentation "Test whether a path is a mount point"
                :arguments 
                  ( ("path" variable nil (reparse-symbol function_parameters) [6412 6416]))                  )
                nil [6400 7106])
            ("expanduser" function
               (:documentation "Expand ~ and ~user constructions.  If user or $HOME is unknown,
    do nothing."
                :arguments 
                  ( ("path" variable nil (reparse-symbol function_parameters) [7597 7601]))                  )
                nil [7582 8567])
            ("_varprog" variable nil nil [8728 8743])
            ("_varprogb" variable nil nil [8744 8760])
            ("expandvars" function
               (:documentation "Expand shell variables of form $var and ${var}.  Unknown variables
    are left unchanged."
                :arguments 
                  ( ("path" variable nil (reparse-symbol function_parameters) [8777 8781]))                  )
                nil [8762 10057])
            ("normpath" function
               (:documentation "Normalize path, eliminating double slashes, etc."
                :arguments 
                  ( ("path" variable nil (reparse-symbol function_parameters) [10245 10249]))                  )
                nil [10232 11287])
            ("abspath" function
               (:documentation "Return an absolute path."
                :arguments 
                  ( ("path" variable nil (reparse-symbol function_parameters) [11301 11305]))                  )
                nil [11289 11535])
            ("realpath" function
               (:documentation "Return the canonical path of the specified filename, eliminating any
symbolic links encountered in the path."
                :arguments 
                  ( ("filename" variable nil (reparse-symbol function_parameters) [11637 11645]))                  )
                nil [11624 11849])
            ("_joinrealpath" function (:arguments 
              ( ("path" variable nil (reparse-symbol function_parameters) [11967 11971])
                ("rest" variable nil (reparse-symbol function_parameters) [11973 11977])
                ("seen" variable nil (reparse-symbol function_parameters) [11979 11983]))              ) nil [11949 13424])
            ("supports_unicode_filenames" variable nil nil [13426 13481])
            ("relpath" function
               (:documentation "Return a relative version of a path"
                :arguments 
                  ( ("path" variable nil (reparse-symbol function_parameters) [13495 13499])
                    ("start" variable nil (reparse-symbol function_parameters) [13501 13506]))                  )
                nil [13483 14213]))          
    :file "posixpath.py"
    :pointmax 14213
    :fsize 14212
    :lastmodtime '(20832 44201 0 0)
    :unmatched-syntax '((INDENT_BLOCK 8977 . 9001) (NEWLINE 8976 . 8977) (IF 8956 . 8958) (STRING_LITERAL 8960 . 8963) (COLON 8975 . 8976) (RAISE 3083 . 3088) (FROM 3181 . 3185) (NEWLINE 3190 . 3191))
    )
   (semanticdb-table "re.py"
    :major-mode 'python-mode
    :tags 
        '( ("r\"\"\"Support for regular expressions (RE).

This module provides regular expression matching operations similar to
those found in Perl.  It supports both 8-bit and Unicode strings; both
the pattern and the strings being processed can contain null bytes and
characters outside the US ASCII range.

Regular expressions can contain both special and ordinary characters.
Most ordinary characters, like \"A\", \"a\", or \"0\", are the simplest
regular expressions; they simply match themselves.  You can
concatenate ordinary characters, so last matches the string 'last'.

The special characters are:
    \".\"      Matches any character except a newline.
    \"^\"      Matches the start of the string.
    \"$\"      Matches the end of the string or just before the newline at
             the end of the string.
    \"*\"      Matches 0 or more (greedy) repetitions of the preceding RE.
             Greedy means that it will match as many repetitions as possible.
    \"+\"      Matches 1 or more (greedy) repetitions of the preceding RE.
    \"?\"      Matches 0 or 1 (greedy) of the preceding RE.
    *?,+?,?? Non-greedy versions of the previous three special characters.
    {m,n}    Matches from m to n repetitions of the preceding RE.
    {m,n}?   Non-greedy version of the above.
    \"\\\\\"     Either escapes special characters or signals a special sequence.
    []       Indicates a set of characters.
             A \"^\" as the first character indicates a complementing set.
    \"|\"      A|B, creates an RE that will match either A or B.
    (...)    Matches the RE inside the parentheses.
             The contents can be retrieved or matched later in the string.
    (?aiLmsux) Set the A, I, L, M, S, U, or X flag for the RE (see below).
    (?:...)  Non-grouping version of regular parentheses.
    (?P<name>...) The substring matched by the group is accessible by name.
    (?P=name)     Matches the text matched earlier by the group named name.
    (?#...)  A comment; ignored.
    (?=...)  Matches if ... matches next, but doesn't consume the string.
    (?!...)  Matches if ... doesn't match next.
    (?<=...) Matches if preceded by ... (must be fixed length).
    (?<!...) Matches if not preceded by ... (must be fixed length).
    (?(id/name)yes|no) Matches yes pattern if the group with id/name matched,
                       the (optional) no pattern otherwise.

The special sequences consist of \"\\\\\" and a character from the list
below.  If the ordinary character is not on the list, then the
resulting RE will match the second character.
    \\number  Matches the contents of the group of the same number.
    \\A       Matches only at the start of the string.
    \\Z       Matches only at the end of the string.
    \\b       Matches the empty string, but only at the start or end of a word.
    \\B       Matches the empty string, but not at the start or end of a word.
    \\d       Matches any decimal digit; equivalent to the set [0-9] in
             bytes patterns or string patterns with the ASCII flag.
             In string patterns without the ASCII flag, it will match the whole
             range of Unicode digits.
    \\D       Matches any non-digit character; equivalent to [^\\d].
    \\s       Matches any whitespace character; equivalent to [ \\t\\n\\r\\f\\v] in
             bytes patterns or string patterns with the ASCII flag.
             In string patterns without the ASCII flag, it will match the whole
             range of Unicode whitespace characters.
    \\S       Matches any non-whitespace character; equivalent to [^\\s].
    \\w       Matches any alphanumeric character; equivalent to [a-zA-Z0-9_]
             in bytes patterns or string patterns with the ASCII flag.
             In string patterns without the ASCII flag, it will match the
             range of Unicode alphanumeric characters (letters plus digits
             plus underscore).
             With LOCALE, it will match the set [0-9_] plus characters defined
             as letters for the current locale.
    \\W       Matches the complement of \\w.
    \\\\       Matches a literal backslash.

This module exports the following functions:
    match    Match a regular expression pattern to the beginning of a string.
    search   Search a string for the presence of a pattern.
    sub      Substitute occurrences of a pattern found in a string.
    subn     Same as sub, but also return the number of substitutions made.
    split    Split a string by the occurrences of a pattern.
    findall  Find all occurrences of a pattern in a string.
    finditer Return an iterator yielding a match object for each match.
    compile  Compile a pattern into a RegexObject.
    purge    Clear the regular expression cache.
    escape   Backslash all non-alphanumerics in a string.

Some of the functions in this module takes flags as optional parameters:
    A  ASCII       For string patterns, make \\w, \\W, \\b, \\B, \\d, \\D
                   match the corresponding ASCII character categories
                   (rather than the whole Unicode categories, which is the
                   default).
                   For bytes patterns, this flag is the only available
                   behaviour and needn't be specified.
    I  IGNORECASE  Perform case-insensitive matching.
    L  LOCALE      Make \\w, \\W, \\b, \\B, dependent on the current locale.
    M  MULTILINE   \"^\" matches the beginning of lines (after a newline)
                   as well as the string.
                   \"$\" matches the end of lines (before a newline) as well
                   as the end of the string.
    S  DOTALL      \".\" matches any character at all, including the newline.
    X  VERBOSE     Ignore whitespace and comments for nicer looking RE's.
    U  UNICODE     For compatibility only. Ignored for string patterns (it
                   is the default), and forbidden for bytes patterns.

This module also defines an exception 'error'.

\"\"\"" code nil nil [501 6413])
            ("sys" include nil nil [6415 6425])
            ("sre_compile" include nil nil [6426 6444])
            ("sre_parse" include nil nil [6445 6461])
            ("functools" include nil nil [6462 6478])
            ("__all__" variable nil nil [6497 6739])
            ("__version__" variable nil nil [6741 6762])
            ("A" variable nil nil [6772 6810])
            ("I" variable nil nil [6835 6883])
            ("L" variable nil nil [6898 6938])
            ("U" variable nil nil [6969 7011])
            ("M" variable nil nil [7038 7084])
            ("S" variable nil nil [7117 7157])
            ("X" variable nil nil [7183 7225])
            ("T" variable nil nil [7313 7357])
            ("DEBUG" variable nil nil [7381 7415])
            ("error" variable nil nil [7466 7491])
            ("match" function
               (:documentation "Try to apply the pattern at the start of the string, returning
    a match object, or None if no match was found."
                :arguments 
                  ( ("pattern" variable nil (reparse-symbol function_parameters) [7594 7601])
                    ("string" variable nil (reparse-symbol function_parameters) [7603 7609])
                    ("flags" variable nil (reparse-symbol function_parameters) [7611 7616]))                  )
                nil [7584 7795])
            ("search" function
               (:documentation "Scan through string looking for a match to the pattern, returning
    a match object, or None if no match was found."
                :arguments 
                  ( ("pattern" variable nil (reparse-symbol function_parameters) [7807 7814])
                    ("string" variable nil (reparse-symbol function_parameters) [7816 7822])
                    ("flags" variable nil (reparse-symbol function_parameters) [7824 7829]))                  )
                nil [7796 8012])
            ("sub" function
               (:documentation "Return the string obtained by replacing the leftmost
    non-overlapping occurrences of the pattern in string by the
    replacement repl.  repl can be either a string or a callable;
    if a string, backslash escapes in it are processed.  If it is
    a callable, it's passed the match object and must return
    a replacement string to be used."
                :arguments 
                  ( ("pattern" variable nil (reparse-symbol function_parameters) [8021 8028])
                    ("repl" variable nil (reparse-symbol function_parameters) [8030 8034])
                    ("string" variable nil (reparse-symbol function_parameters) [8036 8042])
                    ("count" variable nil (reparse-symbol function_parameters) [8044 8049])
                    ("flags" variable nil (reparse-symbol function_parameters) [8053 8058]))                  )
                nil [8013 8481])
            ("subn" function
               (:documentation "Return a 2-tuple containing (new_string, number).
    new_string is the string obtained by replacing the leftmost
    non-overlapping occurrences of the pattern in the source
    string by the replacement repl.  number is the number of
    substitutions that were made. repl can be either a string or a
    callable; if a string, backslash escapes in it are processed.
    If it is a callable, it's passed the match object and must
    return a replacement string to be used."
                :arguments 
                  ( ("pattern" variable nil (reparse-symbol function_parameters) [8491 8498])
                    ("repl" variable nil (reparse-symbol function_parameters) [8500 8504])
                    ("string" variable nil (reparse-symbol function_parameters) [8506 8512])
                    ("count" variable nil (reparse-symbol function_parameters) [8514 8519])
                    ("flags" variable nil (reparse-symbol function_parameters) [8523 8528]))                  )
                nil [8482 9081])
            ("split" function
               (:documentation "Split the source string by the occurrences of the pattern,
    returning a list containing the resulting substrings.  If
    capturing parentheses are used in pattern, then the text of all
    groups in the pattern are also returned as part of the resulting
    list.  If maxsplit is nonzero, at most maxsplit splits occur,
    and the remainder of the string is returned as the final element
    of the list."
                :arguments 
                  ( ("pattern" variable nil (reparse-symbol function_parameters) [9092 9099])
                    ("string" variable nil (reparse-symbol function_parameters) [9101 9107])
                    ("maxsplit" variable nil (reparse-symbol function_parameters) [9109 9117])
                    ("flags" variable nil (reparse-symbol function_parameters) [9121 9126]))                  )
                nil [9082 9611])
            ("findall" function
               (:documentation "Return a list of all non-overlapping matches in the string.

    If one or more capturing groups are present in the pattern, return
    a list of groups; this will be a list of tuples if the pattern
    has more than one group.

    Empty matches are included in the result."
                :arguments 
                  ( ("pattern" variable nil (reparse-symbol function_parameters) [9624 9631])
                    ("string" variable nil (reparse-symbol function_parameters) [9633 9639])
                    ("flags" variable nil (reparse-symbol function_parameters) [9641 9646]))                  )
                nil [9612 9988])
            ("if" code nil nil [9989 10348])
            ("compile" function (:arguments 
              ( ("pattern" variable nil (reparse-symbol function_parameters) [10361 10368])
                ("flags" variable nil (reparse-symbol function_parameters) [10370 10375]))              ) nil [10349 10488])
            ("purge" function nil nil [10489 10587])
            ("template" function (:arguments 
              ( ("pattern" variable nil (reparse-symbol function_parameters) [10601 10608])
                ("flags" variable nil (reparse-symbol function_parameters) [10610 10615]))              ) nil [10588 10719])
            ("_alphanum_str" variable nil nil [10720 10818])
            ("_alphanum_bytes" variable nil nil [10819 10920])
            ("escape" function
               (:documentation "
    Escape all the characters in pattern except ASCII letters, numbers and '_'.
    "
                :arguments 
                  ( ("pattern" variable nil (reparse-symbol function_parameters) [10933 10940]))                  )
                nil [10922 11721])
            ("_cache" variable nil nil [11806 11817])
            ("_cache_repl" variable nil nil [11818 11834])
            ("_pattern_type" variable nil nil [11836 11884])
            ("_MAXCACHE" variable nil nil [11886 11901])
            ("_compile" function (:arguments 
              ( ("pattern" variable nil (reparse-symbol function_parameters) [11915 11922])
                ("flags" variable nil (reparse-symbol function_parameters) [11924 11929]))              ) nil [11902 12525])
            ("_compile_repl" function (:arguments 
              ( ("repl" variable nil (reparse-symbol function_parameters) [12544 12548])
                ("pattern" variable nil (reparse-symbol function_parameters) [12550 12557]))              ) nil [12526 12851])
            ("_expand" function (:arguments 
              ( ("pattern" variable nil (reparse-symbol function_parameters) [12864 12871])
                ("match" variable nil (reparse-symbol function_parameters) [12873 12878])
                ("template" variable nil (reparse-symbol function_parameters) [12880 12888]))              ) nil [12852 13053])
            ("_subx" function (:arguments 
              ( ("pattern" variable nil (reparse-symbol function_parameters) [13064 13071])
                ("template" variable nil (reparse-symbol function_parameters) [13073 13081]))              ) nil [13054 13415])
            ("copyreg" include nil nil [13448 13462])
            ("_pickle" function (:arguments 
              ( ("p" variable nil (reparse-symbol function_parameters) [13476 13477]))              ) nil [13464 13522])
            ("copyreg" code nil nil [13523 13571])
            ("Scanner" type
               (:members 
                  ( ("__init__" function
                       (:suite 
                          ( ("sre_constants" include nil (reparse-symbol indented_block_body) [13772 13816])
                            ("self" variable nil (reparse-symbol indented_block_body) [13825 13847])
                            ("p" variable nil (reparse-symbol indented_block_body) [13906 13912])
                            ("s" variable nil (reparse-symbol indented_block_body) [13921 13944])
                            ("s" variable nil (reparse-symbol indented_block_body) [13953 13968])
                            ("for" code nil (reparse-symbol indented_block_body) [13977 14149])
                            ("s" code nil (reparse-symbol indented_block_body) [14157 14176])
                            ("p" variable nil (reparse-symbol indented_block_body) [14185 14235])
                            ("self" variable nil (reparse-symbol indented_block_body) [14244 14281]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13739 13743])
                            ("lexicon" variable nil (reparse-symbol function_parameters) [13745 13752])
                            ("flags" variable nil (reparse-symbol function_parameters) [13754 13759]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [13726 14282])
                    ("scan" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14295 14299])
                            ("string" variable nil (reparse-symbol function_parameters) [14301 14307]))                          )
                        (reparse-symbol indented_block_body) [14286 14863]))                  
                :type "class")
                nil [13707 14863]))          
    :file "re.py"
    :pointmax 14863
    :fsize 14862
    :lastmodtime '(20832 44201 0 0)
    :unmatched-syntax 'nil
    )
   (semanticdb-table "functools.py"
    :major-mode 'python-mode
    :tags 
        '( ("\"\"\"functools.py - Tools for working with functions and callable objects
\"\"\"" code nil nil [1 76])
            ("__all__" variable nil nil [407 563])
            ("_functools" include nil nil [565 603])
            ("collections" include nil nil [604 638])
            ("try" code nil nil [639 849])
            ("WRAPPER_ASSIGNMENTS" variable nil nil [1169 1286])
            ("WRAPPER_UPDATES" variable nil nil [1287 1318])
            ("update_wrapper" function
               (:documentation "Update a wrapper function to look like the wrapped function

       wrapper is the function to be updated
       wrapped is the original function
       assigned is a tuple naming the attributes assigned directly
       from the wrapped function to the wrapper function (defaults to
       functools.WRAPPER_ASSIGNMENTS)
       updated is a tuple naming the attributes of the wrapper that
       are updated with the corresponding attribute from the wrapped
       function (defaults to functools.WRAPPER_UPDATES)
    "
                :arguments 
                  ( ("wrapper" variable nil (reparse-symbol function_parameters) [1338 1345])
                    ("wrapped" variable nil (reparse-symbol function_parameters) [1366 1373])
                    ("assigned" variable nil (reparse-symbol function_parameters) [1394 1402])
                    ("updated" variable nil (reparse-symbol function_parameters) [1445 1452]))                  )
                nil [1319 2406])
            ("wraps" function
               (:documentation "Decorator factory to apply update_wrapper() to a wrapper function

       Returns a decorator that invokes update_wrapper() with the decorated
       function as the wrapper argument and the arguments to wraps() as the
       remaining arguments. Default arguments are as for update_wrapper().
       This is a convenience function to simplify applying partial() to
       update_wrapper().
    "
                :arguments 
                  ( ("wrapped" variable nil (reparse-symbol function_parameters) [2417 2424])
                    ("assigned" variable nil (reparse-symbol function_parameters) [2436 2444])
                    ("updated" variable nil (reparse-symbol function_parameters) [2478 2485]))                  )
                nil [2407 3019])
            ("total_ordering" function
               (:documentation "Class decorator that fills in missing ordering methods"
                :arguments 
                  ( ("cls" variable nil (reparse-symbol function_parameters) [3238 3241]))                  )
                nil [3219 4868])
            ("cmp_to_key" function
               (:documentation "Convert a cmp= function into a key= function"
                :arguments 
                  ( ("mycmp" variable nil (reparse-symbol function_parameters) [5084 5089]))                  )
                nil [5069 5795])
            ("try" code nil nil [5796 5868])
            ("_CacheInfo" variable nil nil [6066 6145])
            ("_HashedSeq" type
               (:documentation " This class guarantees that hash() will be called no more than once
        per element.  This is important because the lru_cache() will hash
        the key multiple times on a cache miss.

    "
                :superclasses ("list")
                :members 
                  ( ("__slots__" variable nil (reparse-symbol indented_block_body) [6382 6405])
                    ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [6455 6468])
                            ("self" variable nil (reparse-symbol indented_block_body) [6477 6503]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6424 6428])
                            ("tup" variable nil (reparse-symbol function_parameters) [6430 6433])
                            ("hash" variable nil (reparse-symbol function_parameters) [6435 6439]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [6411 6504])
                    ("__hash__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6522 6526]))                          )
                        (reparse-symbol indented_block_body) [6509 6559]))                  
                :type "class")
                nil [6147 6559])
            ("_make_key" function
               (:documentation "Make a cache key from optionally typed positional and keyword arguments

    The key is constructed in a way that is flat as possible rather than
    as a nested structure that would take more memory.

    If there is only a single argument and its data type is known to cache
    its hash value, then that argument is returned without a wrapper.  This
    saves space and improves lookup speed.

    "
                :arguments 
                  ( ("args" variable nil (reparse-symbol function_parameters) [6574 6578])
                    ("kwds" variable nil (reparse-symbol function_parameters) [6580 6584])
                    ("typed" variable nil (reparse-symbol function_parameters) [6586 6591])
                    ("kwd_mark" variable nil (reparse-symbol function_parameters) [6606 6614])
                    ("fasttypes" variable nil (reparse-symbol function_parameters) [6643 6652])
                    ("sorted" variable nil (reparse-symbol function_parameters) [6703 6709])
                    ("tuple" variable nil (reparse-symbol function_parameters) [6718 6723])
                    ("type" variable nil (reparse-symbol function_parameters) [6731 6735])
                    ("len" variable nil (reparse-symbol function_parameters) [6742 6745]))                  )
                nil [6560 7555])
            ("lru_cache" function
               (:documentation "Least-recently-used cache decorator.

    If *maxsize* is set to None, the LRU features are disabled and the cache
    can grow without bound.

    If *typed* is True, arguments of different types will be cached separately.
    For example, f(3.0) and f(3) will be treated as distinct calls with
    distinct results.

    Arguments to the cached function must be hashable.

    View the cache statistics named tuple (hits, misses, maxsize, currsize)
    with f.cache_info().  Clear the cache and statistics with f.cache_clear().
    Access the underlying function with f.__wrapped__.

    See:  http://en.wikipedia.org/wiki/Cache_algorithms#Least_Recently_Used

    "
                :arguments 
                  ( ("maxsize" variable nil (reparse-symbol function_parameters) [7570 7577])
                    ("typed" variable nil (reparse-symbol function_parameters) [7583 7588]))                  )
                nil [7556 13597]))          
    :file "functools.py"
    :pointmax 13597
    :fsize 13596
    :lastmodtime '(20832 44201 0 0)
    :unmatched-syntax 'nil
    )
   (semanticdb-table "struct.py"
    :major-mode 'python-mode
    :tags 
        '( ("__all__" variable nil nil [1 155])
            ("_struct" include nil nil [157 178])
            ("_struct" include nil nil [179 210])
            ("_struct" include nil nil [211 238]))          
    :file "struct.py"
    :pointmax 239
    :fsize 238
    :lastmodtime '(20832 44201 0 0)
    :unmatched-syntax 'nil
    )
   (semanticdb-table "copy.py"
    :major-mode 'python-mode
    :tags 
        '( ("\"\"\"Generic (shallow and deep) copying operations.

Interface summary:

        import copy

        x = copy.copy(y)        # make a shallow copy of y
        x = copy.deepcopy(y)    # make a deep copy of y

For module specific errors, copy.Error is raised.

The difference between shallow and deep copying is only relevant for
compound objects (objects that contain other objects, like lists or
class instances).

- A shallow copy constructs a new compound object and then (to the
  extent possible) inserts *the same objects* into it that the
  original contains.

- A deep copy constructs a new compound object and then, recursively,
  inserts *copies* into it of the objects found in the original.

Two problems often exist with deep copy operations that don't exist
with shallow copy operations:

 a) recursive objects (compound objects that, directly or indirectly,
    contain a reference to themselves) may cause a recursive loop

 b) because deep copy copies *everything* it may copy too much, e.g.
    administrative data structures that should be shared even between
    copies

Python's deep copy operation avoids these problems by:

 a) keeping a table of objects already copied during the current
    copying pass

 b) letting user-defined classes override the copying operation or the
    set of components copied

This version does not copy types like module, class, function, method,
nor stack trace, stack frame, nor file, socket, window, nor array, nor
any similar types.

Classes can use the same interfaces to control copying that they use
to control pickling: they can define methods called __getinitargs__(),
__getstate__() and __setstate__().  See the documentation for module
\"pickle\" for information on these methods.
\"\"\"" code nil nil [1 1748])
            ("types" include nil nil [1750 1762])
            ("weakref" include nil nil [1763 1777])
            ("copyreg" include nil nil [1778 1812])
            ("builtins" include nil nil [1813 1828])
            ("Error" type
               (:superclasses ("Exception")
                :members 
                  ( ("pass" code nil (reparse-symbol indented_block_body) [1858 1862]))                  
                :type "class")
                nil [1830 1863])
            ("error" variable nil nil [1863 1876])
            ("try" code nil nil [1905 1997])
            ("__all__" variable nil nil [1998 2037])
            ("copy" function
               (:documentation "Shallow copy operation on arbitrary Python objects.

    See the module's __doc__ string for more info.
    "
                :arguments 
                  ( ("x" variable nil (reparse-symbol function_parameters) [2048 2049]))                  )
                nil [2039 2801])
            ("_copy_dispatch" variable nil nil [2803 2826])
            ("_copy_immutable" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [2848 2849]))              ) nil [2828 2865])
            ("for" code nil nil [2865 3075])
            ("t" variable nil nil [3075 3111])
            ("if" code nil nil [3112 3157])
            ("for" code nil nil [3157 3284])
            ("_copy_with_constructor" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [3312 3313]))              ) nil [3285 3338])
            ("for" code nil nil [3338 3400])
            ("_copy_with_copy_method" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [3428 3429]))              ) nil [3401 3452])
            ("if" code nil nil [3452 3524])
            ("del" code nil nil [3525 3530])
            ("deepcopy" function
               (:documentation "Deep copy operation on arbitrary Python objects.

    See the module's __doc__ string for more info.
    "
                :arguments 
                  ( ("x" variable nil (reparse-symbol function_parameters) [3545 3546])
                    ("memo" variable nil (reparse-symbol function_parameters) [3548 3552])
                    ("_nil" variable nil (reparse-symbol function_parameters) [3559 3563]))                  )
                nil [3532 5082])
            ("_deepcopy_dispatch" variable nil nil [5083 5110])
            ("_deepcopy_atomic" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [5133 5134])
                ("memo" variable nil (reparse-symbol function_parameters) [5136 5140]))              ) nil [5112 5156])
            ("d" variable nil nil [5156 5188])
            ("d" variable nil nil [5189 5225])
            ("d" variable nil nil [5226 5251])
            ("d" variable nil nil [5252 5279])
            ("d" variable nil nil [5280 5306])
            ("try" code nil nil [5307 5373])
            ("d" variable nil nil [5373 5400])
            ("d" variable nil nil [5401 5426])
            ("try" code nil nil [5427 5505])
            ("d" variable nil nil [5505 5531])
            ("d" variable nil nil [5532 5559])
            ("d" variable nil nil [5560 5607])
            ("d" variable nil nil [5608 5648])
            ("d" variable nil nil [5649 5682])
            ("_deepcopy_list" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [5703 5704])
                ("memo" variable nil (reparse-symbol function_parameters) [5706 5710]))              ) nil [5684 5809])
            ("d" variable nil nil [5809 5833])
            ("_deepcopy_tuple" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [5855 5856])
                ("memo" variable nil (reparse-symbol function_parameters) [5858 5862]))              ) nil [5835 6292])
            ("d" variable nil nil [6292 6318])
            ("_deepcopy_dict" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [6339 6340])
                ("memo" variable nil (reparse-symbol function_parameters) [6342 6346]))              ) nil [6320 6481])
            ("d" variable nil nil [6481 6505])
            ("if" code nil nil [6506 6570])
            ("_deepcopy_method" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [6592 6593])
                ("memo" variable nil (reparse-symbol function_parameters) [6595 6599]))              ) nil [6571 6685])
            ("_deepcopy_dispatch" variable nil nil [6685 6740])
            ("_keep_alive" function
               (:documentation "Keeps a reference to the object x in the memo.

    Because we remember objects by their id, we have
    to assure that possibly temporary objects are kept
    alive by referencing them.
    We store a reference at the id of the memo, which should
    normally not be used unless someone tries to deepcopy
    the memo itself...
    "
                :arguments 
                  ( ("x" variable nil (reparse-symbol function_parameters) [6758 6759])
                    ("memo" variable nil (reparse-symbol function_parameters) [6761 6765]))                  )
                nil [6742 7243])
            ("_reconstruct" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [7261 7262])
                ("info" variable nil (reparse-symbol function_parameters) [7264 7268])
                ("deep" variable nil (reparse-symbol function_parameters) [7270 7274])
                ("memo" variable nil (reparse-symbol function_parameters) [7276 7280]))              ) nil [7244 8685])
            ("del" code nil nil [8686 8691])
            ("del" code nil nil [8693 8702])
            ("_EmptyClass" type
               (:members 
                  ( ("pass" code nil (reparse-symbol indented_block_body) [8783 8787]))                  
                :type "class")
                nil [8760 8788]))          
    :file "copy.py"
    :pointmax 8788
    :fsize 8787
    :lastmodtime '(20832 44201 0 0)
    :unmatched-syntax 'nil
    )
   (semanticdb-table "_weakrefset.py"
    :major-mode 'python-mode
    :tags 
        '( ("_weakref" include nil nil [145 169])
            ("__all__" variable nil nil [171 192])
            ("_IterationGuard" type
               (:members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [535 574]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [475 479])
                            ("weakcontainer" variable nil (reparse-symbol function_parameters) [481 494]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [462 575])
                    ("__enter__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [594 598]))                          )
                        (reparse-symbol indented_block_body) [580 715])
                    ("__exit__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [733 737])
                            ("e" variable nil (reparse-symbol function_parameters) [739 740])
                            ("t" variable nil (reparse-symbol function_parameters) [742 743])
                            ("b" variable nil (reparse-symbol function_parameters) [745 746]))                          )
                        (reparse-symbol indented_block_body) [720 923]))                  
                :type "class")
                nil [195 923])
            ("WeakSet" type
               (:members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [983 1000])
                            ("_remove" function (:arguments 
                              ( ("item" variable nil (reparse-symbol function_parameters) [1021 1025])
                                ("selfref" variable nil (reparse-symbol function_parameters) [1027 1034]))                              ) (reparse-symbol indented_block_body) [1009 1267])
                            ("self" variable nil (reparse-symbol indented_block_body) [1275 1297])
                            ("self" variable nil (reparse-symbol indented_block_body) [1345 1372])
                            ("self" variable nil (reparse-symbol indented_block_body) [1381 1404])
                            ("if" code nil (reparse-symbol indented_block_body) [1413 1464]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [957 961])
                            ("data" variable nil (reparse-symbol function_parameters) [963 967]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [944 1464])
                    ("_commit_removals" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1490 1494]))                          )
                        (reparse-symbol indented_block_body) [1469 1614])
                    ("__iter__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1632 1636]))                          )
                        (reparse-symbol indented_block_body) [1619 1814])
                    ("__len__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1831 1835]))                          )
                        (reparse-symbol indented_block_body) [1819 1898])
                    ("__contains__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1920 1924])
                            ("item" variable nil (reparse-symbol function_parameters) [1926 1930]))                          )
                        (reparse-symbol indented_block_body) [1903 2055])
                    ("__reduce__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2075 2079]))                          )
                        (reparse-symbol indented_block_body) [2060 2178])
                    ("add" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2191 2195])
                            ("item" variable nil (reparse-symbol function_parameters) [2197 2201]))                          )
                        (reparse-symbol indented_block_body) [2183 2322])
                    ("clear" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2337 2341]))                          )
                        (reparse-symbol indented_block_body) [2327 2441])
                    ("copy" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2455 2459]))                          )
                        (reparse-symbol indented_block_body) [2446 2498])
                    ("pop" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2511 2515]))                          )
                        (reparse-symbol indented_block_body) [2503 2844])
                    ("remove" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2860 2864])
                            ("item" variable nil (reparse-symbol function_parameters) [2866 2870]))                          )
                        (reparse-symbol indented_block_body) [2849 2980])
                    ("discard" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2997 3001])
                            ("item" variable nil (reparse-symbol function_parameters) [3003 3007]))                          )
                        (reparse-symbol indented_block_body) [2985 3118])
                    ("update" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3134 3138])
                            ("other" variable nil (reparse-symbol function_parameters) [3140 3145]))                          )
                        (reparse-symbol indented_block_body) [3123 3279])
                    ("__ior__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3296 3300])
                            ("other" variable nil (reparse-symbol function_parameters) [3302 3307]))                          )
                        (reparse-symbol indented_block_body) [3284 3357])
                    ("difference" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3377 3381])
                            ("other" variable nil (reparse-symbol function_parameters) [3383 3388]))                          )
                        (reparse-symbol indented_block_body) [3362 3482])
                    ("__sub__" variable nil (reparse-symbol indented_block_body) [3486 3506])
                    ("difference_update" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3534 3538])
                            ("other" variable nil (reparse-symbol function_parameters) [3540 3545]))                          )
                        (reparse-symbol indented_block_body) [3512 3577])
                    ("__isub__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3594 3598])
                            ("other" variable nil (reparse-symbol function_parameters) [3600 3605]))                          )
                        (reparse-symbol indented_block_body) [3581 3838])
                    ("intersection" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3860 3864])
                            ("other" variable nil (reparse-symbol function_parameters) [3866 3871]))                          )
                        (reparse-symbol indented_block_body) [3843 3944])
                    ("__and__" variable nil (reparse-symbol indented_block_body) [3948 3970])
                    ("intersection_update" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4000 4004])
                            ("other" variable nil (reparse-symbol function_parameters) [4006 4011]))                          )
                        (reparse-symbol indented_block_body) [3976 4043])
                    ("__iand__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4060 4064])
                            ("other" variable nil (reparse-symbol function_parameters) [4066 4071]))                          )
                        (reparse-symbol indented_block_body) [4047 4232])
                    ("issubset" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4250 4254])
                            ("other" variable nil (reparse-symbol function_parameters) [4256 4261]))                          )
                        (reparse-symbol indented_block_body) [4237 4327])
                    ("__le__" variable nil (reparse-symbol indented_block_body) [4331 4348])
                    ("__lt__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4365 4369])
                            ("other" variable nil (reparse-symbol function_parameters) [4371 4376]))                          )
                        (reparse-symbol indented_block_body) [4354 4439])
                    ("issuperset" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4459 4463])
                            ("other" variable nil (reparse-symbol function_parameters) [4465 4470]))                          )
                        (reparse-symbol indented_block_body) [4444 4538])
                    ("__ge__" variable nil (reparse-symbol indented_block_body) [4542 4561])
                    ("__gt__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4578 4582])
                            ("other" variable nil (reparse-symbol function_parameters) [4584 4589]))                          )
                        (reparse-symbol indented_block_body) [4567 4652])
                    ("__eq__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4668 4672])
                            ("other" variable nil (reparse-symbol function_parameters) [4674 4679]))                          )
                        (reparse-symbol indented_block_body) [4657 4827])
                    ("symmetric_difference" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4857 4861])
                            ("other" variable nil (reparse-symbol function_parameters) [4863 4868]))                          )
                        (reparse-symbol indented_block_body) [4832 4972])
                    ("__xor__" variable nil (reparse-symbol indented_block_body) [4976 5006])
                    ("symmetric_difference_update" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5044 5048])
                            ("other" variable nil (reparse-symbol function_parameters) [5050 5055]))                          )
                        (reparse-symbol indented_block_body) [5012 5087])
                    ("__ixor__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5104 5108])
                            ("other" variable nil (reparse-symbol function_parameters) [5110 5115]))                          )
                        (reparse-symbol indented_block_body) [5091 5372])
                    ("union" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5387 5391])
                            ("other" variable nil (reparse-symbol function_parameters) [5393 5398]))                          )
                        (reparse-symbol indented_block_body) [5377 5468])
                    ("__or__" variable nil (reparse-symbol indented_block_body) [5472 5486])
                    ("isdisjoint" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5507 5511])
                            ("other" variable nil (reparse-symbol function_parameters) [5513 5518]))                          )
                        (reparse-symbol indented_block_body) [5492 5571]))                  
                :type "class")
                nil [925 5571]))          
    :file "_weakrefset.py"
    :pointmax 5571
    :fsize 5570
    :lastmodtime '(20832 44201 0 0)
    :unmatched-syntax 'nil
    )
   (semanticdb-table "genericpath.py"
    :major-mode 'python-mode
    :tags 
        '( ("\"\"\"
Path operations common to more than one OS
Do not use directly.  The OS specific modules import the appropriate
functions from this module themselves.
\"\"\"" code nil nil [1 159])
            ("os" include nil nil [160 169])
            ("stat" include nil nil [170 181])
            ("__all__" variable nil nil [183 296])
            ("exists" function
               (:documentation "Test whether a path exists.  Returns False for broken symbolic links"
                :arguments 
                  ( ("path" variable nil (reparse-symbol function_parameters) [405 409]))                  )
                nil [394 580])
            ("isfile" function
               (:documentation "Test whether a path is a regular file"
                :arguments 
                  ( ("path" variable nil (reparse-symbol function_parameters) [719 723]))                  )
                nil [708 888])
            ("isdir" function
               (:documentation "Return true if the pathname refers to an existing directory."
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [1050 1051]))                  )
                nil [1040 1236])
            ("getsize" function
               (:documentation "Return the size of a file, reported by os.stat()."
                :arguments 
                  ( ("filename" variable nil (reparse-symbol function_parameters) [1250 1258]))                  )
                nil [1238 1358])
            ("getmtime" function
               (:documentation "Return the last modification time of a file, reported by os.stat()."
                :arguments 
                  ( ("filename" variable nil (reparse-symbol function_parameters) [1373 1381]))                  )
                nil [1360 1500])
            ("getatime" function
               (:documentation "Return the last access time of a file, reported by os.stat()."
                :arguments 
                  ( ("filename" variable nil (reparse-symbol function_parameters) [1515 1523]))                  )
                nil [1502 1636])
            ("getctime" function
               (:documentation "Return the metadata change time of a file, reported by os.stat()."
                :arguments 
                  ( ("filename" variable nil (reparse-symbol function_parameters) [1651 1659]))                  )
                nil [1638 1776])
            ("commonprefix" function (:arguments 
              ( ("m" variable nil (reparse-symbol function_parameters) [1845 1846]))              ) nil [1828 2077])
            ("_splitext" function
               (:documentation "Split the extension from a pathname.

    Extension is everything from the last dot to the end, ignoring
    leading dots.  Returns \"(root, ext)\"; ext may be empty."
                :arguments 
                  ( ("p" variable nil (reparse-symbol function_parameters) [2377 2378])
                    ("sep" variable nil (reparse-symbol function_parameters) [2380 2383])
                    ("altsep" variable nil (reparse-symbol function_parameters) [2385 2391])
                    ("extsep" variable nil (reparse-symbol function_parameters) [2393 2399]))                  )
                nil [2363 3095]))          
    :file "genericpath.py"
    :pointmax 3095
    :fsize 3094
    :lastmodtime '(20832 44201 0 0)
    :unmatched-syntax 'nil
    )
   (semanticdb-table "sre_compile.py"
    :major-mode 'python-mode
    :tags 
        '( ("\"\"\"Internal support module for sre\"\"\"" code nil nil [225 262])
            ("_sre" include nil nil [264 280])
            ("sys" include nil nil [264 280])
            ("sre_parse" include nil nil [281 297])
            ("sre_constants" include nil nil [298 325])
            ("_sre" include nil nil [326 352])
            ("assert" code nil nil [354 403])
            ("if" code nil nil [405 479])
            ("_identityfunction" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [502 503]))              ) nil [480 519])
            ("_LITERAL_CODES" variable nil nil [520 564])
            ("_REPEATING_CODES" variable nil nil [565 621])
            ("_SUCCESS_CODES" variable nil nil [622 662])
            ("_ASSERT_CODES" variable nil nil [663 704])
            ("_compile" function (:arguments 
              ( ("code" variable nil (reparse-symbol function_parameters) [719 723])
                ("pattern" variable nil (reparse-symbol function_parameters) [725 732])
                ("flags" variable nil (reparse-symbol function_parameters) [734 739]))              ) nil [706 6036])
            ("_compile_charset" function (:arguments 
              ( ("charset" variable nil (reparse-symbol function_parameters) [6058 6065])
                ("flags" variable nil (reparse-symbol function_parameters) [6067 6072])
                ("code" variable nil (reparse-symbol function_parameters) [6074 6078])
                ("fixup" variable nil (reparse-symbol function_parameters) [6080 6085]))              ) nil [6037 6943])
            ("_optimize_charset" function (:arguments 
              ( ("charset" variable nil (reparse-symbol function_parameters) [6966 6973])
                ("fixup" variable nil (reparse-symbol function_parameters) [6975 6980]))              ) nil [6944 8361])
            ("_mk_bitmap" function (:arguments 
              ( ("bits" variable nil (reparse-symbol function_parameters) [8377 8381]))              ) nil [8362 8691])
            ("_optimize_unicode" function (:arguments 
              ( ("charset" variable nil (reparse-symbol function_parameters) [10034 10041])
                ("fixup" variable nil (reparse-symbol function_parameters) [10043 10048]))              ) nil [10012 11787])
            ("_simple" function (:arguments 
              ( ("av" variable nil (reparse-symbol function_parameters) [11800 11802]))              ) nil [11788 12008])
            ("_compile_info" function (:arguments 
              ( ("code" variable nil (reparse-symbol function_parameters) [12027 12031])
                ("pattern" variable nil (reparse-symbol function_parameters) [12033 12040])
                ("flags" variable nil (reparse-symbol function_parameters) [12042 12047]))              ) nil [12009 15406])
            ("isstring" function (:arguments 
              ( ("obj" variable nil (reparse-symbol function_parameters) [15420 15423]))              ) nil [15407 15467])
            ("_code" function (:arguments 
              ( ("p" variable nil (reparse-symbol function_parameters) [15478 15479])
                ("flags" variable nil (reparse-symbol function_parameters) [15481 15486]))              ) nil [15468 15713])
            ("compile" function (:arguments 
              ( ("p" variable nil (reparse-symbol function_parameters) [15726 15727])
                ("flags" variable nil (reparse-symbol function_parameters) [15729 15734]))              ) nil [15714 16458]))          
    :file "sre_compile.py"
    :pointmax 16458
    :fsize 16457
    :lastmodtime '(20832 44201 0 0)
    :unmatched-syntax 'nil
    )
   (semanticdb-table "sre_parse.py"
    :major-mode 'python-mode
    :tags 
        '( ("\"\"\"Internal support module for sre\"\"\"" code nil nil [240 277])
            ("sys" include nil nil [345 355])
            ("sre_constants" include nil nil [357 384])
            ("_sre" include nil nil [385 411])
            ("SPECIAL_CHARS" variable nil nil [413 444])
            ("REPEAT_CHARS" variable nil nil [445 466])
            ("DIGITS" variable nil nil [468 494])
            ("OCTDIGITS" variable nil nil [496 523])
            ("HEXDIGITS" variable nil nil [524 565])
            ("WHITESPACE" variable nil nil [567 598])
            ("ESCAPES" variable nil nil [600 876])
            ("CATEGORIES" variable nil nil [878 1354])
            ("FLAGS" variable nil nil [1356 1623])
            ("Pattern" type
               (:members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [1735 1749])
                            ("self" variable nil (reparse-symbol indented_block_body) [1758 1772])
                            ("self" variable nil (reparse-symbol indented_block_body) [1781 1796])
                            ("self" variable nil (reparse-symbol indented_block_body) [1805 1824]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1720 1724]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [1707 1825])
                    ("opengroup" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1843 1847])
                            ("name" variable nil (reparse-symbol function_parameters) [1849 1853]))                          )
                        (reparse-symbol indented_block_body) [1829 2262])
                    ("closegroup" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2281 2285])
                            ("gid" variable nil (reparse-symbol function_parameters) [2287 2290]))                          )
                        (reparse-symbol indented_block_body) [2266 2323])
                    ("checkgroup" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2342 2346])
                            ("gid" variable nil (reparse-symbol function_parameters) [2348 2351]))                          )
                        (reparse-symbol indented_block_body) [2327 2412]))                  
                :type "class")
                nil [1625 2412])
            ("SubPattern" type
               (:members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [2524 2546])
                            ("if" code nil (reparse-symbol indented_block_body) [2555 2594])
                            ("self" variable nil (reparse-symbol indented_block_body) [2602 2618])
                            ("self" variable nil (reparse-symbol indented_block_body) [2627 2644]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2489 2493])
                            ("pattern" variable nil (reparse-symbol function_parameters) [2495 2502])
                            ("data" variable nil (reparse-symbol function_parameters) [2504 2508]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [2476 2645])
                    ("dump" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2658 2662])
                            ("level" variable nil (reparse-symbol function_parameters) [2664 2669]))                          )
                        (reparse-symbol indented_block_body) [2649 3641])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3658 3662]))                          )
                        (reparse-symbol indented_block_body) [3645 3696])
                    ("__len__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3712 3716]))                          )
                        (reparse-symbol indented_block_body) [3700 3749])
                    ("__delitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3769 3773])
                            ("index" variable nil (reparse-symbol function_parameters) [3775 3780]))                          )
                        (reparse-symbol indented_block_body) [3753 3812])
                    ("__getitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3832 3836])
                            ("index" variable nil (reparse-symbol function_parameters) [3838 3843]))                          )
                        (reparse-symbol indented_block_body) [3816 3977])
                    ("__setitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3997 4001])
                            ("index" variable nil (reparse-symbol function_parameters) [4003 4008])
                            ("code" variable nil (reparse-symbol function_parameters) [4010 4014]))                          )
                        (reparse-symbol indented_block_body) [3981 4049])
                    ("insert" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4064 4068])
                            ("index" variable nil (reparse-symbol function_parameters) [4070 4075])
                            ("code" variable nil (reparse-symbol function_parameters) [4077 4081]))                          )
                        (reparse-symbol indented_block_body) [4053 4122])
                    ("append" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4137 4141])
                            ("code" variable nil (reparse-symbol function_parameters) [4143 4147]))                          )
                        (reparse-symbol indented_block_body) [4126 4181])
                    ("getwidth" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4198 4202]))                          )
                        (reparse-symbol indented_block_body) [4185 5424]))                  
                :type "class")
                nil [2413 5424])
            ("Tokenizer" type
               (:members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [5482 5519])
                            ("self" variable nil (reparse-symbol indented_block_body) [5528 5548])
                            ("self" variable nil (reparse-symbol indented_block_body) [5557 5571])
                            ("self" code nil (reparse-symbol indented_block_body) [5580 5593]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5459 5463])
                            ("string" variable nil (reparse-symbol function_parameters) [5465 5471]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [5446 5594])
                    ("p" code nil (reparse-symbol indented_block_body) [25989 25990]))                  
                :type "class")
                nil [5425 25991])
            ("parse_template" function (:arguments 
              ( ("source" variable nil (reparse-symbol function_parameters) [26011 26017])
                ("pattern" variable nil (reparse-symbol function_parameters) [26019 26026]))              ) nil [25992 29602]))          
    :file "sre_parse.py"
    :pointmax 29602
    :fsize 29601
    :lastmodtime '(20832 44201 0 0)
    :unmatched-syntax 'nil
    )
   (semanticdb-table "types.py"
    :major-mode 'python-mode
    :tags 
        '( ("\"\"\"
Define names for built-in types that aren't directly accessible as a builtin.
\"\"\"" code nil nil [1 86])
            ("sys" include nil nil [87 97])
            ("_f" function nil nil [352 367])
            ("FunctionType" variable nil nil [367 390])
            ("LambdaType" variable nil nil [391 422])
            ("CodeType" variable nil nil [454 482])
            ("MappingProxyType" variable nil nil [483 521])
            ("SimpleNamespace" variable nil nil [522 564])
            ("_g" function nil nil [566 588])
            ("GeneratorType" variable nil nil [588 614])
            ("_C" type
               (:members 
                  ( ("_m" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [637 641]))                          )
                        (reparse-symbol indented_block_body) [630 649]))                  
                :type "class")
                nil [616 649])
            ("MethodType" variable nil nil [649 675])
            ("BuiltinFunctionType" variable nil nil [677 708])
            ("BuiltinMethodType" variable nil nil [709 744])
            ("ModuleType" variable nil nil [780 802])
            ("try" code nil nil [804 959])
            ("GetSetDescriptorType" variable nil nil [1012 1062])
            ("MemberDescriptorType" variable nil nil [1063 1116])
            ("del" code nil nil [1118 1138])
            ("new_class" function
               (:documentation "Create a class object dynamically using the appropriate metaclass."
                :arguments 
                  ( ("name" variable nil (reparse-symbol function_parameters) [1261 1265])
                    ("bases" variable nil (reparse-symbol function_parameters) [1267 1272])
                    ("kwds" variable nil (reparse-symbol function_parameters) [1277 1281])
                    ("exec_body" variable nil (reparse-symbol function_parameters) [1288 1297]))                  )
                nil [1247 1529])
            ("prepare_class" function
               (:documentation "Call the __prepare__ method of the appropriate metaclass.

    Returns (metaclass, namespace, kwds) as a 3-tuple

    *metaclass* is the appropriate metaclass
    *namespace* is the prepared class namespace
    *kwds* is an updated copy of the passed in kwds argument with any
    'metaclass' entry removed. If no kwds argument is passed in, this will
    be an empty dict.
    "
                :arguments 
                  ( ("name" variable nil (reparse-symbol function_parameters) [1548 1552])
                    ("bases" variable nil (reparse-symbol function_parameters) [1554 1559])
                    ("kwds" variable nil (reparse-symbol function_parameters) [1564 1568]))                  )
                nil [1530 2593])
            ("_calculate_meta" function
               (:documentation "Calculate the most derived metaclass."
                :arguments 
                  ( ("meta" variable nil (reparse-symbol function_parameters) [2614 2618])
                    ("bases" variable nil (reparse-symbol function_parameters) [2620 2625]))                  )
                nil [2594 3168]))          
    :file "types.py"
    :pointmax 3168
    :fsize 3167
    :lastmodtime '(20832 44201 0 0)
    :unmatched-syntax 'nil
    )
   (semanticdb-table "weakref.py"
    :major-mode 'python-mode
    :tags 
        '( ("\"\"\"Weak reference support for Python.

This module is an implementation of PEP 205:

http://www.python.org/dev/peps/pep-0205/
\"\"\"" code nil nil [1 130])
            ("" code nil nil [353 476])
            ("_weakrefset" include nil nil [478 526])
            ("collections" include nil nil [528 546])
            ("ProxyTypes" variable nil nil [599 642])
            ("__all__" variable nil nil [644 857])
            ("WeakValueDictionary" type
               (:documentation "Mapping class that references values weakly.

    Entries in the dictionary will be discarded when no strong
    reference to the value exists anymore
    "
                :superclasses ("collections.MutableMapping")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("remove" function (:arguments 
                              ( ("wr" variable nil (reparse-symbol function_parameters) [1424 1426])
                                ("selfref" variable nil (reparse-symbol function_parameters) [1428 1435]))                              ) (reparse-symbol indented_block_body) [1413 1668])
                            ("self" variable nil (reparse-symbol indented_block_body) [1676 1697])
                            ("self" variable nil (reparse-symbol indented_block_body) [1745 1772])
                            ("self" variable nil (reparse-symbol indented_block_body) [1781 1804])
                            ("self" variable nil (reparse-symbol indented_block_body) [1813 1831])
                            ("self" code nil (reparse-symbol indented_block_body) [1840 1864]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1385 1389])
                            ("args" variable nil (reparse-symbol function_parameters) [1391 1396])
                            ("kw" variable nil (reparse-symbol function_parameters) [1398 1402]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [1372 1865])
                    ("_commit_removals" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1891 1895]))                          )
                        (reparse-symbol indented_block_body) [1870 2128])
                    ("__getitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2149 2153])
                            ("key" variable nil (reparse-symbol function_parameters) [2155 2158]))                          )
                        (reparse-symbol indented_block_body) [2133 2279])
                    ("__delitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2300 2304])
                            ("key" variable nil (reparse-symbol function_parameters) [2306 2309]))                          )
                        (reparse-symbol indented_block_body) [2284 2410])
                    ("__len__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2427 2431]))                          )
                        (reparse-symbol indented_block_body) [2415 2494])
                    ("__contains__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2516 2520])
                            ("key" variable nil (reparse-symbol function_parameters) [2522 2525]))                          )
                        (reparse-symbol indented_block_body) [2499 2653])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2671 2675]))                          )
                        (reparse-symbol indented_block_body) [2658 2734])
                    ("__setitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2755 2759])
                            ("key" variable nil (reparse-symbol function_parameters) [2761 2764])
                            ("value" variable nil (reparse-symbol function_parameters) [2766 2771]))                          )
                        (reparse-symbol indented_block_body) [2739 2905])
                    ("copy" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2919 2923]))                          )
                        (reparse-symbol indented_block_body) [2910 3103])
                    ("__copy__" variable nil (reparse-symbol indented_block_body) [3108 3123])
                    ("__deepcopy__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3146 3150])
                            ("memo" variable nil (reparse-symbol function_parameters) [3152 3156]))                          )
                        (reparse-symbol indented_block_body) [3129 3381])
                    ("get" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3394 3398])
                            ("key" variable nil (reparse-symbol function_parameters) [3400 3403])
                            ("default" variable nil (reparse-symbol function_parameters) [3405 3412]))                          )
                        (reparse-symbol indented_block_body) [3386 3694])
                    ("items" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3709 3713]))                          )
                        (reparse-symbol indented_block_body) [3699 3886])
                    ("keys" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3900 3904]))                          )
                        (reparse-symbol indented_block_body) [3891 4052])
                    ("__iter__" variable nil (reparse-symbol indented_block_body) [4057 4072])
                    ("itervaluerefs" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4096 4100]))                          
                        :documentation "Return an iterator that yields the weak references to the values.

        The references are not guaranteed to be 'live' at the time
        they are used, so the result of calling the references needs
        to be checked before being used.  This can be used to avoid
        creating references that will cause the garbage collector to
        keep the values around longer than needed.

        ")
                        (reparse-symbol indented_block_body) [4078 4621])
                    ("values" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4637 4641]))                          )
                        (reparse-symbol indented_block_body) [4626 4815])
                    ("popitem" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4832 4836]))                          )
                        (reparse-symbol indented_block_body) [4820 5053])
                    ("pop" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5066 5070])
                            ("key" variable nil (reparse-symbol function_parameters) [5072 5075])
                            ("args" variable nil (reparse-symbol function_parameters) [5077 5082]))                          )
                        (reparse-symbol indented_block_body) [5058 5390])
                    ("setdefault" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5410 5414])
                            ("key" variable nil (reparse-symbol function_parameters) [5416 5419])
                            ("default" variable nil (reparse-symbol function_parameters) [5421 5428]))                          )
                        (reparse-symbol indented_block_body) [5395 5716])
                    ("update" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5732 5736])
                            ("dict" variable nil (reparse-symbol function_parameters) [5738 5742])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [5749 5757]))                          )
                        (reparse-symbol indented_block_body) [5721 6115])
                    ("valuerefs" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6134 6138]))                          
                        :documentation "Return a list of weak references to the values.

        The references are not guaranteed to be 'live' at the time
        they are used, so the result of calling the references needs
        to be checked before being used.  This can be used to avoid
        creating references that will cause the garbage collector to
        keep the values around longer than needed.

        ")
                        (reparse-symbol indented_block_body) [6120 6578]))                  
                :type "class")
                nil [860 6578])
            ("KeyedRef" type
               (:documentation "Specialized reference that includes a key corresponding to the value.

    This is used in the WeakValueDictionary to avoid having to create
    a function object for each key stored in the mapping.  A shared
    callback object can use the 'key' attribute of a KeyedRef instead
    of getting a reference to the key from an enclosing scope.

    "
                :superclasses ("ref")
                :members 
                  ( ("__slots__" variable nil (reparse-symbol indented_block_body) [6964 6982])
                    ("__new__" function (:arguments 
                      ( ("type" variable nil (reparse-symbol function_parameters) [7000 7004])
                        ("ob" variable nil (reparse-symbol function_parameters) [7006 7008])
                        ("callback" variable nil (reparse-symbol function_parameters) [7010 7018])
                        ("key" variable nil (reparse-symbol function_parameters) [7020 7023]))                      ) (reparse-symbol indented_block_body) [6988 7116])
                    ("__init__" function
                       (:suite 
                          ( ("super" code nil (reparse-symbol indented_block_body) [7168 7198]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7134 7138])
                            ("ob" variable nil (reparse-symbol function_parameters) [7140 7142])
                            ("callback" variable nil (reparse-symbol function_parameters) [7144 7152])
                            ("key" variable nil (reparse-symbol function_parameters) [7154 7157]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [7121 7199]))                  
                :type "class")
                nil [6580 7199])
            ("WeakKeyDictionary" type
               (:documentation " Mapping class that references keys weakly.

    Entries in the dictionary will be discarded when there is no
    longer a strong reference to the key. This can be used to
    associate additional data with an object owned by other parts of
    an application without adding attributes to those objects. This
    can be especially useful with objects that override attribute
    accesses.
    "
                :superclasses ("collections.MutableMapping")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [7702 7716])
                            ("remove" function (:arguments 
                              ( ("k" variable nil (reparse-symbol function_parameters) [7736 7737])
                                ("selfref" variable nil (reparse-symbol function_parameters) [7739 7746]))                              ) (reparse-symbol indented_block_body) [7725 7969])
                            ("self" variable nil (reparse-symbol indented_block_body) [7977 7998])
                            ("self" variable nil (reparse-symbol indented_block_body) [8062 8089])
                            ("self" variable nil (reparse-symbol indented_block_body) [8098 8121])
                            ("if" code nil (reparse-symbol indented_block_body) [8130 8181]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7676 7680])
                            ("dict" variable nil (reparse-symbol function_parameters) [7682 7686]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [7663 8181])
                    ("_commit_removals" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8207 8211]))                          )
                        (reparse-symbol indented_block_body) [8186 8658])
                    ("__delitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8679 8683])
                            ("key" variable nil (reparse-symbol function_parameters) [8685 8688]))                          )
                        (reparse-symbol indented_block_body) [8663 8723])
                    ("__getitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8744 8748])
                            ("key" variable nil (reparse-symbol function_parameters) [8750 8753]))                          )
                        (reparse-symbol indented_block_body) [8728 8791])
                    ("__len__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8808 8812]))                          )
                        (reparse-symbol indented_block_body) [8796 8875])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8893 8897]))                          )
                        (reparse-symbol indented_block_body) [8880 8954])
                    ("__setitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8975 8979])
                            ("key" variable nil (reparse-symbol function_parameters) [8981 8984])
                            ("value" variable nil (reparse-symbol function_parameters) [8986 8991]))                          )
                        (reparse-symbol indented_block_body) [8959 9044])
                    ("copy" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9058 9062]))                          )
                        (reparse-symbol indented_block_body) [9049 9246])
                    ("__copy__" variable nil (reparse-symbol indented_block_body) [9251 9266])
                    ("__deepcopy__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9289 9293])
                            ("memo" variable nil (reparse-symbol function_parameters) [9295 9299]))                          )
                        (reparse-symbol indented_block_body) [9272 9530])
                    ("get" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9543 9547])
                            ("key" variable nil (reparse-symbol function_parameters) [9549 9552])
                            ("default" variable nil (reparse-symbol function_parameters) [9554 9561]))                          )
                        (reparse-symbol indented_block_body) [9535 9616])
                    ("__contains__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9638 9642])
                            ("key" variable nil (reparse-symbol function_parameters) [9644 9647]))                          )
                        (reparse-symbol indented_block_body) [9621 9771])
                    ("items" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9786 9790]))                          )
                        (reparse-symbol indented_block_body) [9776 9977])
                    ("keys" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9991 9995]))                          )
                        (reparse-symbol indented_block_body) [9982 10160])
                    ("__iter__" variable nil (reparse-symbol indented_block_body) [10165 10180])
                    ("values" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10197 10201]))                          )
                        (reparse-symbol indented_block_body) [10186 10357])
                    ("keyrefs" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10374 10378]))                          
                        :documentation "Return a list of weak references to the keys.

        The references are not guaranteed to be 'live' at the time
        they are used, so the result of calling the references needs
        to be checked before being used.  This can be used to avoid
        creating references that will cause the garbage collector to
        keep the keys around longer than needed.

        ")
                        (reparse-symbol indented_block_body) [10362 10805])
                    ("popitem" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10822 10826]))                          )
                        (reparse-symbol indented_block_body) [10810 10978])
                    ("pop" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10991 10995])
                            ("key" variable nil (reparse-symbol function_parameters) [10997 11000])
                            ("args" variable nil (reparse-symbol function_parameters) [11002 11007]))                          )
                        (reparse-symbol indented_block_body) [10983 11056])
                    ("setdefault" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11076 11080])
                            ("key" variable nil (reparse-symbol function_parameters) [11082 11085])
                            ("default" variable nil (reparse-symbol function_parameters) [11087 11094]))                          )
                        (reparse-symbol indented_block_body) [11061 11170])
                    ("update" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11186 11190])
                            ("dict" variable nil (reparse-symbol function_parameters) [11192 11196])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [11203 11211]))                          )
                        (reparse-symbol indented_block_body) [11175 11496]))                  
                :type "class")
                nil [7201 11496]))          
    :file "weakref.py"
    :pointmax 11496
    :fsize 11495
    :lastmodtime '(20832 44201 0 0)
    :unmatched-syntax 'nil
    )
   (semanticdb-table "sre_constants.py"
    :major-mode 'python-mode
    :tags 
        '( ("\"\"\"Internal support module for sre\"\"\"" code nil nil [296 333])
            ("MAGIC" variable nil nil [381 397])
            ("_sre" include nil nil [399 425])
            ("error" type
               (:superclasses ("Exception")
                :members 
                  ( ("pass" code nil (reparse-symbol indented_block_body) [533 537]))                  
                :type "class")
                nil [505 538])
            ("FAILURE" variable nil nil [552 571])
            ("SUCCESS" variable nil nil [572 591])
            ("ANY" variable nil nil [593 604])
            ("ANY_ALL" variable nil nil [605 624])
            ("ASSERT" variable nil nil [625 642])
            ("ASSERT_NOT" variable nil nil [643 668])
            ("AT" variable nil nil [669 678])
            ("BIGCHARSET" variable nil nil [679 704])
            ("BRANCH" variable nil nil [705 722])
            ("CALL" variable nil nil [723 736])
            ("CATEGORY" variable nil nil [737 758])
            ("CHARSET" variable nil nil [759 778])
            ("GROUPREF" variable nil nil [779 800])
            ("GROUPREF_IGNORE" variable nil nil [801 836])
            ("GROUPREF_EXISTS" variable nil nil [837 872])
            ("IN" variable nil nil [873 882])
            ("IN_IGNORE" variable nil nil [883 906])
            ("INFO" variable nil nil [907 920])
            ("JUMP" variable nil nil [921 934])
            ("LITERAL" variable nil nil [935 954])
            ("LITERAL_IGNORE" variable nil nil [955 988])
            ("MARK" variable nil nil [989 1002])
            ("MAX_REPEAT" variable nil nil [1003 1028])
            ("MAX_UNTIL" variable nil nil [1029 1052])
            ("MIN_REPEAT" variable nil nil [1053 1078])
            ("MIN_UNTIL" variable nil nil [1079 1102])
            ("NEGATE" variable nil nil [1103 1120])
            ("NOT_LITERAL" variable nil nil [1121 1148])
            ("NOT_LITERAL_IGNORE" variable nil nil [1149 1190])
            ("RANGE" variable nil nil [1191 1206])
            ("REPEAT" variable nil nil [1207 1224])
            ("REPEAT_ONE" variable nil nil [1225 1250])
            ("SUBPATTERN" variable nil nil [1251 1276])
            ("MIN_REPEAT_ONE" variable nil nil [1277 1310])
            ("AT_BEGINNING" variable nil nil [1324 1353])
            ("AT_BEGINNING_LINE" variable nil nil [1354 1393])
            ("AT_BEGINNING_STRING" variable nil nil [1394 1437])
            ("AT_BOUNDARY" variable nil nil [1438 1465])
            ("AT_NON_BOUNDARY" variable nil nil [1466 1501])
            ("AT_END" variable nil nil [1502 1519])
            ("AT_END_LINE" variable nil nil [1520 1547])
            ("AT_END_STRING" variable nil nil [1548 1579])
            ("AT_LOC_BOUNDARY" variable nil nil [1580 1615])
            ("AT_LOC_NON_BOUNDARY" variable nil nil [1616 1659])
            ("AT_UNI_BOUNDARY" variable nil nil [1660 1695])
            ("AT_UNI_NON_BOUNDARY" variable nil nil [1696 1739])
            ("CATEGORY_DIGIT" variable nil nil [1754 1787])
            ("CATEGORY_NOT_DIGIT" variable nil nil [1788 1829])
            ("CATEGORY_SPACE" variable nil nil [1830 1863])
            ("CATEGORY_NOT_SPACE" variable nil nil [1864 1905])
            ("CATEGORY_WORD" variable nil nil [1906 1937])
            ("CATEGORY_NOT_WORD" variable nil nil [1938 1977])
            ("CATEGORY_LINEBREAK" variable nil nil [1978 2019])
            ("CATEGORY_NOT_LINEBREAK" variable nil nil [2020 2069])
            ("CATEGORY_LOC_WORD" variable nil nil [2070 2109])
            ("CATEGORY_LOC_NOT_WORD" variable nil nil [2110 2157])
            ("CATEGORY_UNI_DIGIT" variable nil nil [2158 2199])
            ("CATEGORY_UNI_NOT_DIGIT" variable nil nil [2200 2249])
            ("CATEGORY_UNI_SPACE" variable nil nil [2250 2291])
            ("CATEGORY_UNI_NOT_SPACE" variable nil nil [2292 2341])
            ("CATEGORY_UNI_WORD" variable nil nil [2342 2381])
            ("CATEGORY_UNI_NOT_WORD" variable nil nil [2382 2429])
            ("CATEGORY_UNI_LINEBREAK" variable nil nil [2430 2479])
            ("CATEGORY_UNI_NOT_LINEBREAK" variable nil nil [2480 2537])
            ("OPCODES" variable nil nil [2539 3036])
            ("ATCODES" variable nil nil [3038 3262])
            ("CHCODES" variable nil nil [3264 3678])
            ("makedict" function (:arguments 
              ( ("list" variable nil (reparse-symbol function_parameters) [3693 3697]))              ) nil [3680 3794])
            ("OPCODES" variable nil nil [3795 3822])
            ("ATCODES" variable nil nil [3823 3850])
            ("CHCODES" variable nil nil [3851 3878])
            ("OP_IGNORE" variable nil nil [3928 4058])
            ("AT_MULTILINE" variable nil nil [4060 4139])
            ("AT_LOCALE" variable nil nil [4141 4231])
            ("AT_UNICODE" variable nil nil [4233 4324])
            ("CH_LOCALE" variable nil nil [4326 4680])
            ("CH_UNICODE" variable nil nil [4682 5061])
            ("SRE_FLAG_TEMPLATE" variable nil nil [5071 5092])
            ("SRE_FLAG_IGNORECASE" variable nil nil [5132 5155])
            ("SRE_FLAG_LOCALE" variable nil nil [5175 5194])
            ("SRE_FLAG_MULTILINE" variable nil nil [5218 5240])
            ("SRE_FLAG_DOTALL" variable nil nil [5276 5296])
            ("SRE_FLAG_UNICODE" variable nil nil [5331 5352])
            ("SRE_FLAG_VERBOSE" variable nil nil [5376 5397])
            ("SRE_FLAG_DEBUG" variable nil nil [5431 5451])
            ("SRE_FLAG_ASCII" variable nil nil [5464 5484])
            ("SRE_INFO_PREFIX" variable nil nil [5534 5553])
            ("SRE_INFO_LITERAL" variable nil nil [5567 5587])
            ("SRE_INFO_CHARSET" variable nil nil [5634 5654])
            ("if" code nil nil [5703 7148]))          
    :file "sre_constants.py"
    :pointmax 7148
    :fsize 7147
    :lastmodtime '(20832 44201 0 0)
    :unmatched-syntax 'nil
    )
   (semanticdb-table "threading.py"
    :major-mode 'python-mode
    :tags 
        '( ("\"\"\"Thread module emulating a subset of Java's threading model.\"\"\"" code nil nil [1 66])
            ("sys" include nil nil [68 86])
            ("_thread" include nil nil [87 101])
            ("time" include nil nil [103 135])
            ("try" code nil nil [136 236])
            ("traceback" include nil nil [236 283])
            ("_weakrefset" include nil nil [284 315])
            ("__all__" variable nil nil [831 1076])
            ("_start_new_thread" variable nil nil [1135 1179])
            ("_allocate_lock" variable nil nil [1180 1218])
            ("get_ident" variable nil nil [1219 1248])
            ("ThreadError" variable nil nil [1249 1276])
            ("try" code nil nil [1277 1352])
            ("TIMEOUT_MAX" variable nil nil [1352 1385])
            ("del" code nil nil [1386 1397])
            ("_profile_hook" variable nil nil [1439 1459])
            ("_trace_hook" variable nil nil [1460 1478])
            ("setprofile" function (:arguments 
              ( ("func" variable nil (reparse-symbol function_parameters) [1495 1499]))              ) nil [1480 1552])
            ("settrace" function (:arguments 
              ( ("func" variable nil (reparse-symbol function_parameters) [1566 1570]))              ) nil [1553 1619])
            ("Lock" variable nil nil [1647 1668])
            ("RLock" function (:arguments 
              ( ("args" variable nil (reparse-symbol function_parameters) [1680 1685])
                ("kwargs" variable nil (reparse-symbol function_parameters) [1687 1695]))              ) nil [1670 1799])
            ("_RLock" type
               (:members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [1847 1877])
                            ("self" variable nil (reparse-symbol indented_block_body) [1886 1904])
                            ("self" variable nil (reparse-symbol indented_block_body) [1913 1928]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1832 1836]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [1819 1929])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1947 1951]))                          )
                        (reparse-symbol indented_block_body) [1934 2182])
                    ("acquire" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2199 2203])
                            ("blocking" variable nil (reparse-symbol function_parameters) [2205 2213])
                            ("timeout" variable nil (reparse-symbol function_parameters) [2220 2227]))                          )
                        (reparse-symbol indented_block_body) [2187 2493])
                    ("__enter__" variable nil (reparse-symbol indented_block_body) [2498 2517])
                    ("release" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2535 2539]))                          )
                        (reparse-symbol indented_block_body) [2523 2780])
                    ("__exit__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2798 2802])
                            ("t" variable nil (reparse-symbol function_parameters) [2804 2805])
                            ("v" variable nil (reparse-symbol function_parameters) [2807 2808])
                            ("tb" variable nil (reparse-symbol function_parameters) [2810 2812]))                          )
                        (reparse-symbol indented_block_body) [2785 2838])
                    ("_acquire_restore" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2916 2920])
                            ("state" variable nil (reparse-symbol function_parameters) [2922 2927]))                          )
                        (reparse-symbol indented_block_body) [2895 3001])
                    ("_release_save" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3024 3028]))                          )
                        (reparse-symbol indented_block_body) [3006 3293])
                    ("_is_owned" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3312 3316]))                          )
                        (reparse-symbol indented_block_body) [3298 3361]))                  
                :type "class")
                nil [1800 3361])
            ("_PyRLock" variable nil nil [3362 3379])
            ("Condition" type
               (:members 
                  ( ("__init__" function
                       (:suite 
                          ( ("if" code nil (reparse-symbol indented_block_body) [3443 3487])
                            ("self" variable nil (reparse-symbol indented_block_body) [3495 3512])
                            ("self" variable nil (reparse-symbol indented_block_body) [3581 3608])
                            ("self" variable nil (reparse-symbol indented_block_body) [3617 3644])
                            ("try" code nil (reparse-symbol indented_block_body) [3868 3973])
                            ("try" code nil (reparse-symbol indented_block_body) [3981 4092])
                            ("try" code nil (reparse-symbol indented_block_body) [4100 4197])
                            ("self" variable nil (reparse-symbol indented_block_body) [4205 4223]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3417 3421])
                            ("lock" variable nil (reparse-symbol function_parameters) [3423 3427]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [3404 4224])
                    ("__enter__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4243 4247]))                          )
                        (reparse-symbol indented_block_body) [4229 4288])
                    ("__exit__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4306 4310])
                            ("args" variable nil (reparse-symbol function_parameters) [4312 4317]))                          )
                        (reparse-symbol indented_block_body) [4293 4362])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4380 4384]))                          )
                        (reparse-symbol indented_block_body) [4367 4459])
                    ("_release_save" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4482 4486]))                          )
                        (reparse-symbol indented_block_body) [4464 4547])
                    ("_acquire_restore" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4573 4577])
                            ("x" variable nil (reparse-symbol function_parameters) [4579 4580]))                          )
                        (reparse-symbol indented_block_body) [4552 4643])
                    ("_is_owned" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4662 4666]))                          )
                        (reparse-symbol indented_block_body) [4648 4930])
                    ("wait" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4944 4948])
                            ("timeout" variable nil (reparse-symbol function_parameters) [4950 4957]))                          )
                        (reparse-symbol indented_block_body) [4935 5815])
                    ("wait_for" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5833 5837])
                            ("predicate" variable nil (reparse-symbol function_parameters) [5839 5848])
                            ("timeout" variable nil (reparse-symbol function_parameters) [5850 5857]))                          )
                        (reparse-symbol indented_block_body) [5820 6318])
                    ("notify" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6334 6338])
                            ("n" variable nil (reparse-symbol function_parameters) [6340 6341]))                          )
                        (reparse-symbol indented_block_body) [6323 6726])
                    ("notify_all" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6746 6750]))                          )
                        (reparse-symbol indented_block_body) [6731 6793])
                    ("notifyAll" variable nil (reparse-symbol indented_block_body) [6798 6820]))                  
                :type "class")
                nil [3382 6821])
            ("Semaphore" type
               (:members 
                  ( ("__init__" function
                       (:suite 
                          ( ("if" code nil (reparse-symbol indented_block_body) [6960 7043])
                            ("self" variable nil (reparse-symbol indented_block_body) [7051 7081])
                            ("self" variable nil (reparse-symbol indented_block_body) [7090 7109]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6936 6940])
                            ("value" variable nil (reparse-symbol function_parameters) [6942 6947]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [6923 7110])
                    ("acquire" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7127 7131])
                            ("blocking" variable nil (reparse-symbol function_parameters) [7133 7141])
                            ("timeout" variable nil (reparse-symbol function_parameters) [7148 7155]))                          )
                        (reparse-symbol indented_block_body) [7115 7864])
                    ("__enter__" variable nil (reparse-symbol indented_block_body) [7869 7888])
                    ("release" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7906 7910]))                          )
                        (reparse-symbol indented_block_body) [7894 8037])
                    ("__exit__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8055 8059])
                            ("t" variable nil (reparse-symbol function_parameters) [8061 8062])
                            ("v" variable nil (reparse-symbol function_parameters) [8064 8065])
                            ("tb" variable nil (reparse-symbol function_parameters) [8067 8069]))                          )
                        (reparse-symbol indented_block_body) [8042 8095]))                  
                :type "class")
                nil [6823 8095])
            ("BoundedSemaphore" type
               (:documentation "Semaphore that checks that # releases is <= # acquires"
                :superclasses ("Semaphore")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("Semaphore" code nil (reparse-symbol indented_block_body) [8238 8269])
                            ("self" variable nil (reparse-symbol indented_block_body) [8278 8305]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8214 8218])
                            ("value" variable nil (reparse-symbol function_parameters) [8220 8225]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [8201 8306])
                    ("release" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8323 8327]))                          )
                        (reparse-symbol indented_block_body) [8311 8482]))                  
                :type "class")
                nil [8097 8482])
            ("Event" type
               (:members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [8589 8619])
                            ("self" variable nil (reparse-symbol indented_block_body) [8628 8646]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8574 8578]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [8561 8647])
                    ("_reset_internal_locks" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8678 8682]))                          )
                        (reparse-symbol indented_block_body) [8652 8791])
                    ("is_set" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8807 8811]))                          )
                        (reparse-symbol indented_block_body) [8796 8840])
                    ("isSet" variable nil (reparse-symbol indented_block_body) [8845 8859])
                    ("set" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8873 8877]))                          )
                        (reparse-symbol indented_block_body) [8865 9038])
                    ("clear" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9053 9057]))                          )
                        (reparse-symbol indented_block_body) [9043 9183])
                    ("wait" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9197 9201])
                            ("timeout" variable nil (reparse-symbol function_parameters) [9203 9210]))                          )
                        (reparse-symbol indented_block_body) [9188 9453]))                  
                :type "class")
                nil [8484 9453])
            ("Barrier" type
               (:documentation "
    Barrier.  Useful for synchronizing a fixed number of threads
    at known synchronization points.  Threads block on 'wait()' and are
    simultaneously once they have all made that call.
    "
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        Create a barrier, initialised to 'parties' threads.
        'action' is a callable which, when supplied, will be called
        by one of the threads after they have all entered the
        barrier and just prior to releasing them all.
        If a 'timeout' is provided, it is uses as the default for
        all subsequent 'wait()' calls.
        \"\"\"" code nil (reparse-symbol indented_block_body) [10415 10779])
                            ("self" variable nil (reparse-symbol indented_block_body) [10788 10818])
                            ("self" variable nil (reparse-symbol indented_block_body) [10827 10848])
                            ("self" variable nil (reparse-symbol indented_block_body) [10857 10880])
                            ("self" variable nil (reparse-symbol indented_block_body) [10889 10912])
                            ("self" variable nil (reparse-symbol indented_block_body) [10921 10936])
                            ("self" variable nil (reparse-symbol indented_block_body) [10994 11009]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10364 10368])
                            ("parties" variable nil (reparse-symbol function_parameters) [10370 10377])
                            ("action" variable nil (reparse-symbol function_parameters) [10379 10385])
                            ("timeout" variable nil (reparse-symbol function_parameters) [10392 10399]))                          
                        :documentation "
        Create a barrier, initialised to 'parties' threads.
        'action' is a callable which, when supplied, will be called
        by one of the threads after they have all entered the
        barrier and just prior to releasing them all.
        If a 'timeout' is provided, it is uses as the default for
        all subsequent 'wait()' calls.
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [10351 11010])
                    ("wait" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11024 11028])
                            ("timeout" variable nil (reparse-symbol function_parameters) [11030 11037]))                          
                        :documentation "
        Wait for the barrier.  When the specified number of threads have
        started waiting, they are all simultaneously awoken. If an 'action'
        was provided for the barrier, one of the threads will have executed
        that callback prior to returning.
        Returns an individual index number from 0 to 'parties-1'.
        ")
                        (reparse-symbol indented_block_body) [11015 12055])
                    ("_enter" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12163 12167]))                          )
                        (reparse-symbol indented_block_body) [12152 12443])
                    ("_release" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12549 12553]))                          )
                        (reparse-symbol indented_block_body) [12536 12861])
                    ("_wait" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12985 12989])
                            ("timeout" variable nil (reparse-symbol function_parameters) [12991 12998]))                          )
                        (reparse-symbol indented_block_body) [12975 13276])
                    ("_exit" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13403 13407]))                          )
                        (reparse-symbol indented_block_body) [13393 13589])
                    ("reset" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13604 13608]))                          
                        :documentation "
        Reset the barrier to the initial state.
        Any threads currently waiting will get the BrokenBarrier exception
        raised.
        ")
                        (reparse-symbol indented_block_body) [13594 14242])
                    ("abort" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14257 14261]))                          
                        :documentation "
        Place the barrier into a 'broken' state.
        Useful in case of error.  Any currently waiting threads and
        threads attempting to 'wait()' will have BrokenBarrierError
        raised.
        ")
                        (reparse-symbol indented_block_body) [14247 14540])
                    ("_break" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14556 14560]))                          )
                        (reparse-symbol indented_block_body) [14545 14732])
                    ("parties" function
                       (:parent "dummy"
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14763 14767]))                          
                        :documentation "
        Return the number of threads required to trip the barrier.
        ")
                        (reparse-symbol indented_block_body) [14737 14890])
                    ("n_waiting" function
                       (:parent "dummy"
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14923 14927]))                          
                        :documentation "
        Return the number of threads that are currently waiting at the barrier.
        ")
                        (reparse-symbol indented_block_body) [14895 15259])
                    ("broken" function
                       (:parent "dummy"
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15289 15293]))                          
                        :documentation "
        Return True if the barrier is in a broken state
        ")
                        (reparse-symbol indented_block_body) [15264 15409]))                  
                :type "class")
                nil [10125 15409])
            ("BrokenBarrierError" type
               (:superclasses ("RuntimeError")
                :members 
                  ( ("pass" code nil nil nil))                  
                :type "class")
                nil [15449 15494])
            ("_counter" variable nil nil [15534 15546])
            ("_newname" function (:arguments 
              ( ("template" variable nil (reparse-symbol function_parameters) [15560 15568]))              ) nil [15547 15662])
            ("_active_limbo_lock" variable nil nil [15694 15731])
            ("_active" variable nil nil [15732 15744])
            ("_limbo" variable nil nil [15782 15793])
            ("_dangling" variable nil nil [15824 15845])
            ("Thread" type
               (:members 
                  ( ("__initialized" variable nil (reparse-symbol indented_block_body) [15892 15913])
                    ("__exc_info" variable nil (reparse-symbol indented_block_body) [16164 16190])
                    ("__init__" function
                       (:suite 
                          ( ("assert" code nil (reparse-symbol indented_block_body) [16451 16510])
                            ("if" code nil (reparse-symbol indented_block_body) [16519 16562])
                            ("self" variable nil (reparse-symbol indented_block_body) [16570 16591])
                            ("self" variable nil (reparse-symbol indented_block_body) [16600 16636])
                            ("self" variable nil (reparse-symbol indented_block_body) [16645 16662])
                            ("self" variable nil (reparse-symbol indented_block_body) [16671 16692])
                            ("if" code nil (reparse-symbol indented_block_body) [16701 16827])
                            ("self" variable nil (reparse-symbol indented_block_body) [16835 16853])
                            ("self" variable nil (reparse-symbol indented_block_body) [16862 16885])
                            ("self" variable nil (reparse-symbol indented_block_body) [16894 16915])
                            ("self" variable nil (reparse-symbol indented_block_body) [16924 16955])
                            ("self" variable nil (reparse-symbol indented_block_body) [16964 16988])
                            ("self" variable nil (reparse-symbol indented_block_body) [17115 17141])
                            ("_dangling" code nil (reparse-symbol indented_block_body) [17150 17169]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16345 16349])
                            ("group" variable nil (reparse-symbol function_parameters) [16351 16356])
                            ("target" variable nil (reparse-symbol function_parameters) [16363 16369])
                            ("name" variable nil (reparse-symbol function_parameters) [16376 16380])
                            ("args" variable nil (reparse-symbol function_parameters) [16404 16408])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [16413 16419])
                            ("daemon" variable nil (reparse-symbol function_parameters) [16429 16435]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [16332 17170])
                    ("_reset_internal_locks" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17201 17205]))                          )
                        (reparse-symbol indented_block_body) [17175 17504])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17522 17526]))                          )
                        (reparse-symbol indented_block_body) [17509 17963])
                    ("start" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17978 17982]))                          )
                        (reparse-symbol indented_block_body) [17968 18457])
                    ("run" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18470 18474]))                          )
                        (reparse-symbol indented_block_body) [18462 18792])
                    ("_bootstrap" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18812 18816]))                          )
                        (reparse-symbol indented_block_body) [18797 19791])
                    ("_set_ident" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [19811 19815]))                          )
                        (reparse-symbol indented_block_body) [19796 19852])
                    ("_bootstrap_inner" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [19878 19882]))                          )
                        (reparse-symbol indented_block_body) [19857 22702])
                    ("_stop" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22717 22721]))                          )
                        (reparse-symbol indented_block_body) [22707 22846])
                    ("_delete" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22863 22867]))                          )
                        (reparse-symbol indented_block_body) [22851 24668])
                    ("join" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24682 24686])
                            ("timeout" variable nil (reparse-symbol function_parameters) [24688 24695]))                          )
                        (reparse-symbol indented_block_body) [24673 25478])
                    ("name" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25506 25510]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [25483 25604])
                    ("name" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25635 25639])
                            ("name" variable nil (reparse-symbol function_parameters) [25641 25645]))                          
                        :decorators 
                          ( ("name.setter" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [25609 25744])
                    ("ident" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25773 25777]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [25749 25872])
                    ("is_alive" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25890 25894]))                          )
                        (reparse-symbol indented_block_body) [25877 26022])
                    ("isAlive" variable nil (reparse-symbol indented_block_body) [26027 26045])
                    ("daemon" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [26076 26080]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [26051 26178])
                    ("daemon" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [26213 26217])
                            ("daemonic" variable nil (reparse-symbol function_parameters) [26219 26227]))                          
                        :decorators 
                          ( ("daemon.setter" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [26183 26473])
                    ("isDaemon" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [26491 26495]))                          )
                        (reparse-symbol indented_block_body) [26478 26525])
                    ("setDaemon" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [26544 26548])
                            ("daemonic" variable nil (reparse-symbol function_parameters) [26550 26558]))                          )
                        (reparse-symbol indented_block_body) [26530 26592])
                    ("getName" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [26609 26613]))                          )
                        (reparse-symbol indented_block_body) [26597 26641])
                    ("setName" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [26658 26662])
                            ("name" variable nil (reparse-symbol function_parameters) [26664 26668]))                          )
                        (reparse-symbol indented_block_body) [26646 26696]))                  
                :type "class")
                nil [15873 26696])
            ("Timer" type
               (:documentation "Call a function after a specified number of seconds:

    t = Timer(30.0, f, args=[], kwargs={})
    t.start()
    t.cancel() # stop the timer's action if it's still waiting
    "
                :superclasses ("Thread")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("Thread" code nil (reparse-symbol indented_block_body) [27041 27062])
                            ("self" variable nil (reparse-symbol indented_block_body) [27071 27095])
                            ("self" variable nil (reparse-symbol indented_block_body) [27104 27128])
                            ("self" variable nil (reparse-symbol indented_block_body) [27137 27153])
                            ("self" variable nil (reparse-symbol indented_block_body) [27162 27182])
                            ("self" variable nil (reparse-symbol indented_block_body) [27191 27214]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [26986 26990])
                            ("interval" variable nil (reparse-symbol function_parameters) [26992 27000])
                            ("function" variable nil (reparse-symbol function_parameters) [27002 27010])
                            ("args" variable nil (reparse-symbol function_parameters) [27012 27016])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [27021 27027]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [26973 27215])
                    ("cancel" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [27231 27235]))                          
                        :documentation "Stop the timer if it hasn't finished yet")
                        (reparse-symbol indented_block_body) [27220 27321])
                    ("run" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [27334 27338]))                          )
                        (reparse-symbol indented_block_body) [27326 27503]))                  
                :type "class")
                nil [26758 27503])
            ("_MainThread" type
               (:superclasses ("Thread")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("Thread" code nil (reparse-symbol indented_block_body) [27669 27723])
                            ("self" code nil (reparse-symbol indented_block_body) [27732 27751])
                            ("self" code nil (reparse-symbol indented_block_body) [27760 27777])
                            ("with" code nil (reparse-symbol indented_block_body) [27786 27851]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [27654 27658]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [27641 27851])
                    ("_exitfunc" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [27870 27874]))                          )
                        (reparse-symbol indented_block_body) [27856 28041]))                  
                :type "class")
                nil [27609 28041])
            ("_pickSomeNonDaemonThread" function nil nil [28042 28179])
            ("_DummyThread" type
               (:superclasses ("Thread")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("Thread" code nil (reparse-symbol indented_block_body) [28678 28739])
                            ("del" code nil (reparse-symbol indented_block_body) [28958 28973])
                            ("self" code nil (reparse-symbol indented_block_body) [28983 29002])
                            ("self" code nil (reparse-symbol indented_block_body) [29011 29028])
                            ("with" code nil (reparse-symbol indented_block_body) [29037 29102]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [28663 28667]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [28650 29102])
                    ("_stop" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [29117 29121]))                          )
                        (reparse-symbol indented_block_body) [29107 29137])
                    ("join" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [29151 29155])
                            ("timeout" variable nil (reparse-symbol function_parameters) [29157 29164]))                          )
                        (reparse-symbol indented_block_body) [29142 29223]))                  
                :type "class")
                nil [28617 29223])
            ("current_thread" function nil nil [29249 29367])
            ("currentThread" variable nil nil [29368 29398])
            ("active_count" function nil nil [29400 29491])
            ("activeCount" variable nil nil [29492 29518])
            ("_enumerate" function nil nil [29520 29664])
            ("enumerate" function nil nil [29665 29773])
            ("_thread" include nil nil [29774 29804])
            ("_shutdown" variable nil nil [29920 29955])
            ("try" code nil nil [30054 30158])
            ("_after_fork" function nil nil [30160 31462]))          
    :file "threading.py"
    :pointmax 31462
    :fsize 31461
    :lastmodtime '(20832 44201 0 0)
    :unmatched-syntax '((INDENT_BLOCK 22368 . 22389) (NEWLINE 22112 . 22113) (COLON 22111 . 22112) (FINALLY 22104 . 22111) (MULT 16426 . 16427) (COMMA 16427 . 16428))
    )
   (semanticdb-table "socket.py"
    :major-mode 'python-mode
    :tags nil
    :file "socket.py"
    :pointmax 14914
    :fsize 14913
    :lastmodtime '(20832 44201 0 0)
    :unmatched-syntax 'nil
    )
   )
  :file "!usr!lib!python3.3!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2"
  )

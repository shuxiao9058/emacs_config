;; Object emacs-lisp/
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "emacs-lisp/"
  :tables
  (list
    (semanticdb-table "cl.el.gz"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("cl-lib" include nil nil [1047 1064])
            ("macroexp" include nil nil [1065 1084])
            ("cl-unload-function" function nil nil [3580 3738])
            ("dolist" code nil nil [3775 4488])
            ("unless" code nil nil [4664 4772])
            ("unless" code nil nil [4773 4877])
            ("dolist" code nil nil [4879 10141])
            ("cl-closure-vars" variable nil nil [10301 10329])
            ("cl--function-convert-cache" variable nil nil [10330 10369])
            ("cl--function-convert" function (:arguments ("f")) nil [10371 12684])
            ("lexical-let" function (:arguments ("bindings" "body")) nil [12686 14716])
            ("lexical-let*" function (:arguments ("bindings" "body")) nil [14718 15248])
            ("flet" function (:arguments ("bindings" "body")) nil [15327 17081])
            ("labels" function (:arguments ("bindings" "body")) nil [17083 18027])
            ("cl--symbol-function" function (:arguments ("symbol")) nil [18223 18571])
            ("gv-define-setter" code nil nil [18572 18702])
            ("letf" function (:arguments ("bindings" "body")) nil [18704 19339])
            ("cl--gv-adapt" function (:arguments ("cl-gv" "do")) nil [19341 20231])
            ("define-setf-expander" function (:arguments ("name" "arglist" "body")) nil [20233 21136])
            ("defsetf" function (:arguments ("name" "arg1" "args")) nil [21138 22753])
            ("make-obsolete" code nil nil [24667 24719])
            ("define-modify-macro" function (:arguments ("name" "arglist" "func" "doc")) nil [24721 25480])
            ("define-obsolete-function-alias" code nil nil [25582 25650])
            ("define-obsolete-variable-alias" code nil nil [25651 25743])
            ("define-obsolete-function-alias" code nil nil [25744 25820])
            ("cl-not-hash-table" function (:arguments ("x" "y" "_z")) nil [25958 26107])
            ("cl-builtin-gethash" variable (:default-value (symbol-function (quote gethash))) nil [26109 26163])
            ("make-obsolete-variable" code nil nil [26164 26219])
            ("cl-builtin-remhash" variable (:default-value (symbol-function (quote remhash))) nil [26220 26274])
            ("make-obsolete-variable" code nil nil [26275 26330])
            ("cl-builtin-clrhash" variable (:default-value (symbol-function (quote clrhash))) nil [26331 26385])
            ("make-obsolete-variable" code nil nil [26386 26441])
            ("cl-builtin-maphash" variable (:default-value (symbol-function (quote maphash))) nil [26442 26496])
            ("make-obsolete-variable" code nil nil [26498 26553])
            ("define-obsolete-function-alias" code nil nil [26554 26620])
            ("define-obsolete-function-alias" code nil nil [26621 26685])
            ("define-obsolete-function-alias" code nil nil [26686 26746])
            ("define-obsolete-function-alias" code nil nil [26747 26807])
            ("define-obsolete-function-alias" code nil nil [26808 26868])
            ("define-obsolete-function-alias" code nil nil [26869 26929])
            ("define-obsolete-function-alias" code nil nil [26930 26990])
            ("define-obsolete-function-alias" code nil nil [26991 27067])
            ("define-obsolete-function-alias" code nil nil [27068 27138])
            ("define-obsolete-function-alias" code nil nil [27139 27217])
            ("define-obsolete-function-alias" code nil nil [27219 27315])
            ("define-obsolete-function-alias" code nil nil [27316 27392])
            ("define-obsolete-function-alias" code nil nil [27393 27466])
            ("define-obsolete-function-alias" code nil nil [27467 27533])
            ("cl-maclisp-member" function (:arguments ("item" "list")) nil [27535 27690])
            ("cl-struct-setf-expander" function (:arguments ("x" "name" "accessor" "pred-form" "pos")) nil [27741 28675])
            ("cl" package nil nil [28677 28690])
            ("run-hooks" code nil nil [28692 28717]))          
      :file "cl.el.gz"
      :pointmax 28739
      :fsize 8323
      :lastmodtime '(20741 50906 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "easymenu.el.gz"
      :major-mode 'emacs-lisp-mode
      :tags nil
      :file "easymenu.el.gz"
      :pointmax 28098
      :fsize 9068
      :lastmodtime '(20707 18685 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "ring.el.gz"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("ring-p" function (:arguments ("x")) nil [1713 1881])
            ("make-ring" function (:arguments ("size")) nil [1898 2013])
            ("ring-insert-at-beginning" function (:arguments ("ring" "item")) nil [2015 2378])
            ("ring-plus1" function (:arguments ("index" "veclen")) nil [2380 2525])
            ("ring-minus1" function (:arguments ("index" "veclen")) nil [2527 2638])
            ("ring-length" function (:arguments ("ring")) nil [2640 2727])
            ("ring-index" function (:arguments ("index" "head" "ringlen" "veclen")) nil [2729 3142])
            ("ring-empty-p" function (:arguments ("ring")) nil [3144 3239])
            ("ring-size" function (:arguments ("ring")) nil [3241 3364])
            ("ring-copy" function (:arguments ("ring")) nil [3366 3526])
            ("ring-insert" function (:arguments ("ring" "item")) nil [3528 3961])
            ("ring-remove" function (:arguments ("ring" "index")) nil [3963 4740])
            ("ring-ref" function (:arguments ("ring" "index")) nil [4742 5171])
            ("ring-elements" function (:arguments ("ring")) nil [5173 5437])
            ("ring-member" function (:arguments ("ring" "item")) nil [5439 5698])
            ("ring-next" function (:arguments ("ring" "item")) nil [5700 5998])
            ("ring-previous" function (:arguments ("ring" "item")) nil [6000 6308])
            ("ring-extend" function (:arguments ("ring" "x")) nil [6310 6830])
            ("ring-insert+extend" function (:arguments ("ring" "item" "grow-p")) nil [6832 7322])
            ("ring-remove+insert+extend" function (:arguments ("ring" "item" "grow-p")) nil [7324 7817])
            ("ring-convert-sequence-to-ring" function (:arguments ("seq")) nil [7819 8234])
            ("ring" package nil nil [8258 8273]))          
      :file "ring.el.gz"
      :pointmax 8297
      :fsize 2817
      :lastmodtime '(20707 18685 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "regexp-opt.el.gz"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("regexp-opt" function (:arguments ("strings" "paren")) nil [3665 4922])
            ("regexp-opt-depth" function (:arguments ("regexp")) nil [4939 5764])
            ("regexp-opt-group" function (:arguments ("strings" "paren" "lax")) nil [5793 9518])
            ("regexp-opt-charset" function (:arguments ("chars")) nil [9521 11350])
            ("regexp-opt" package nil nil [11352 11373]))          
      :file "regexp-opt.el.gz"
      :pointmax 11403
      :fsize 4192
      :lastmodtime '(20707 18685 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "cl-lib.el.gz"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("macroexp" include nil nil [3838 3857])
            ("cl-optimize-speed" variable (:default-value 1) nil [3859 3887])
            ("cl-optimize-safety" variable (:default-value 1) nil [3888 3917])
            ("define-obsolete-variable-alias" code nil nil [3934 4145])
            ("cl-custom-print-functions" variable nil nil [4162 4648])
            ("cl-incf" function (:arguments ("place" "x")) nil [4761 5134])
            ("cl-decf" function (:arguments ("place" "x")) nil [5136 5494])
            ("cl-pushnew" function (:arguments ("x" "place" "keys")) nil [5496 6646])
            ("cl--set-elt" function (:arguments ("seq" "n" "val")) nil [6648 6743])
            ("cl--set-buffer-substring" function (:arguments ("start" "end" "val")) nil [6745 6885])
            ("cl--set-substring" function (:arguments ("str" "start" "end" "val")) nil [6887 7171])
            ("defalias" code nil nil [7197 7236])
            ("defalias" code nil nil [7237 7271])
            ("cl--defalias" function (:arguments ("cl-f" "el-f" "doc")) nil [7471 7601])
            ("cl--defalias" code nil nil [7603 7790])
            ("cl--defalias" code nil nil [7792 7989])
            ("cl-multiple-value-list" function (:arguments ("expression")) nil [7991 8276])
            ("cl-multiple-value-apply" function (:arguments ("function" "expression")) nil [8278 8600])
            ("defalias" code nil nil [8602 8789])
            ("cl--defalias" code nil nil [8791 9077])
            ("cl--compiling-file" variable nil nil [9098 9129])
            ("cl--compiling-file" function nil nil [9130 9383])
            ("cl-proclaims-deferred" variable nil nil [9385 9419])
            ("cl-proclaim" function (:arguments ("spec")) nil [9421 9599])
            ("cl-declaim" function (:arguments ("specs")) nil [9601 10092])
            ("cl-random-time" function nil nil [10155 10332])
            ("cl--gensym-counter" variable (:default-value (* (logand (cl-random-time) 1023) 100)) nil [10334 10400])
            ("cl-floatp-safe" function (:arguments ("object")) nil [10417 10634])
            ("cl-plusp" function (:arguments ("number")) nil [10636 10715])
            ("cl-minusp" function (:arguments ("number")) nil [10717 10797])
            ("cl-oddp" function (:arguments ("integer")) nil [10799 10884])
            ("cl-evenp" function (:arguments ("integer")) nil [10886 10973])
            ("cl--random-state" variable (:default-value (vector (quote cl-random-state-tag) -1 30 (cl-random-time))) nil [10975 11053])
            ("cl-most-positive-float" variable (:constant-flag t) nil [11055 11300])
            ("cl-most-negative-float" variable (:constant-flag t) nil [11302 11476])
            ("cl-least-positive-float" variable (:constant-flag t) nil [11478 11720])
            ("cl-least-negative-float" variable (:constant-flag t) nil [11722 11905])
            ("cl-least-positive-normalized-float" variable (:constant-flag t) nil [11907 12319])
            ("cl-least-negative-normalized-float" variable (:constant-flag t) nil [12321 12515])
            ("cl-float-epsilon" variable (:constant-flag t) nil [12517 12772])
            ("cl-float-negative-epsilon" variable (:constant-flag t) nil [12774 12973])
            ("cl--defalias" code nil nil [13001 13043])
            ("declare-function" code nil nil [13045 13108])
            ("cl-mapcar" function (:arguments ("cl-func" "cl-x" "cl-rest")) nil [13110 13831])
            ("cl--defalias" code nil nil [13833 13863])
            ("cl--defalias" code nil nil [13886 13915])
            ("cl--defalias" code nil nil [13916 13947])
            ("cl--defalias" code nil nil [13948 13976])
            ("cl--defalias" code nil nil [13977 14006])
            ("cl--defalias" code nil nil [14008 14084])
            ("cl--defalias" code nil nil [14085 14164])
            ("cl-fifth" function (:arguments ("x")) nil [14166 14317])
            ("cl-sixth" function (:arguments ("x")) nil [14319 14470])
            ("cl-seventh" function (:arguments ("x")) nil [14472 14627])
            ("cl-eighth" function (:arguments ("x")) nil [14629 14782])
            ("cl-ninth" function (:arguments ("x")) nil [14784 14935])
            ("cl-tenth" function (:arguments ("x")) nil [14937 15088])
            ("cl-caaar" function (:arguments ("x")) nil [15090 15238])
            ("cl-caadr" function (:arguments ("x")) nil [15240 15388])
            ("cl-cadar" function (:arguments ("x")) nil [15390 15538])
            ("cl-caddr" function (:arguments ("x")) nil [15540 15688])
            ("cl-cdaar" function (:arguments ("x")) nil [15690 15838])
            ("cl-cdadr" function (:arguments ("x")) nil [15840 15988])
            ("cl-cddar" function (:arguments ("x")) nil [15990 16138])
            ("cl-cdddr" function (:arguments ("x")) nil [16140 16288])
            ("cl-caaaar" function (:arguments ("x")) nil [16290 16458])
            ("cl-caaadr" function (:arguments ("x")) nil [16460 16628])
            ("cl-caadar" function (:arguments ("x")) nil [16630 16798])
            ("cl-caaddr" function (:arguments ("x")) nil [16800 16968])
            ("cl-cadaar" function (:arguments ("x")) nil [16970 17138])
            ("cl-cadadr" function (:arguments ("x")) nil [17140 17308])
            ("cl-caddar" function (:arguments ("x")) nil [17310 17478])
            ("cl-cadddr" function (:arguments ("x")) nil [17480 17648])
            ("cl-cdaaar" function (:arguments ("x")) nil [17650 17818])
            ("cl-cdaadr" function (:arguments ("x")) nil [17820 17988])
            ("cl-cdadar" function (:arguments ("x")) nil [17990 18158])
            ("cl-cdaddr" function (:arguments ("x")) nil [18160 18328])
            ("cl-cddaar" function (:arguments ("x")) nil [18330 18498])
            ("cl-cddadr" function (:arguments ("x")) nil [18500 18668])
            ("cl-cdddar" function (:arguments ("x")) nil [18670 18838])
            ("cl-cddddr" function (:arguments ("x")) nil [18840 19008])
            ("cl-list*" function (:arguments ("arg" "rest")) nil [19339 19847])
            ("cl-ldiff" function (:arguments ("list" "sublist")) nil [19849 20059])
            ("cl-copy-list" function (:arguments ("list")) nil [20061 20357])
            ("declare-function" code nil nil [20414 20468])
            ("declare-function" code nil nil [20469 20525])
            ("declare-function" code nil nil [20526 20583])
            ("declare-function" code nil nil [20584 20638])
            ("declare-function" code nil nil [20639 20681])
            ("cl-adjoin" function (:arguments ("cl-item" "cl-list" "cl-keys")) nil [20683 21302])
            ("cl-subst" function (:arguments ("cl-new" "cl-old" "cl-tree" "cl-keys")) nil [21304 21755])
            ("cl--do-subst" function (:arguments ("cl-new" "cl-old" "cl-tree")) nil [21757 22067])
            ("cl-acons" function (:arguments ("key" "value" "alist")) nil [22069 22232])
            ("cl-pairlis" function (:arguments ("keys" "values" "alist")) nil [22234 22550])
            ("gv-define-simple-setter" code nil nil [22905 22971])
            ("gv-define-setter" code nil nil [22972 23094])
            ("gv-define-simple-setter" code nil nil [23095 23148])
            ("gv-define-setter" code nil nil [23149 23231])
            ("gv-define-simple-setter" code nil nil [23232 23299])
            ("gv-define-simple-setter" code nil nil [23300 23351])
            ("gv-define-simple-setter" code nil nil [23352 23411])
            ("gv-define-simple-setter" code nil nil [23412 23469])
            ("gv-define-simple-setter" code nil nil [23470 23531])
            ("gv-define-setter" code nil nil [23532 23627])
            ("gv-define-simple-setter" code nil nil [23628 23687])
            ("gv-define-simple-setter" code nil nil [23688 23794])
            ("gv-define-simple-setter" code nil nil [23795 23864])
            ("gv-define-simple-setter" code nil nil [23865 23917])
            ("gv-define-setter" code nil nil [23918 24004])
            ("gv-define-setter" code nil nil [24005 24105])
            ("gv-define-setter" code nil nil [24106 24178])
            ("gv-define-setter" code nil nil [24179 24265])
            ("gv-define-setter" code nil nil [24266 24352])
            ("gv-define-simple-setter" code nil nil [24353 24406])
            ("gv-define-simple-setter" code nil nil [24407 24465])
            ("gv-define-simple-setter" code nil nil [24466 24534])
            ("gv-define-simple-setter" code nil nil [24535 24600])
            ("gv-define-simple-setter" code nil nil [24601 24657])
            ("gv-define-simple-setter" code nil nil [24658 24699])
            ("gv-define-simple-setter" code nil nil [24700 24751])
            ("gv-define-simple-setter" code nil nil [24752 24811])
            ("gv-define-simple-setter" code nil nil [24812 24869])
            ("gv-define-simple-setter" code nil nil [24870 24911])
            ("gv-define-simple-setter" code nil nil [24912 24960])
            ("gv-define-simple-setter" code nil nil [24961 25015])
            ("gv-define-setter" code nil nil [25016 25154])
            ("gv-define-simple-setter" code nil nil [25155 25196])
            ("gv-define-simple-setter" code nil nil [25197 25247])
            ("gv-define-setter" code nil nil [25248 25340])
            ("gv-define-setter" code nil nil [25341 25433])
            ("gv-define-setter" code nil nil [25434 25539])
            ("gv-define-simple-setter" code nil nil [25540 25599])
            ("gv-define-simple-setter" code nil nil [25600 25657])
            ("gv-define-simple-setter" code nil nil [25658 25713])
            ("gv-define-simple-setter" code nil nil [25714 25769])
            ("gv-define-simple-setter" code nil nil [25770 25823])
            ("gv-define-simple-setter" code nil nil [25824 25893])
            ("gv-define-simple-setter" code nil nil [25894 25949])
            ("gv-define-simple-setter" code nil nil [25950 26023])
            ("gv-define-setter" code nil nil [26024 26126])
            ("gv-define-setter" code nil nil [26127 26229])
            ("gv-define-simple-setter" code nil nil [26230 26309])
            ("gv-define-simple-setter" code nil nil [26310 26369])
            ("gv-define-expander" code nil nil [26768 27107])
            ("gv-define-expander" code nil nil [27109 27500])
            ("progn" code nil nil [27537 28054])
            ("load" code nil nil [28056 28087])
            ("cl-lib" package nil nil [28089 28106]))          
      :file "cl-lib.el.gz"
      :pointmax 28188
      :fsize 8078
      :lastmodtime '(20707 18685 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "macroexp.el.gz"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("macroexpand-all-environment" variable nil nil [1230 1270])
            ("macroexp--cons" function (:arguments ("car" "cdr" "original-cons")) nil [1272 1485])
            ("macroexp--accumulate" function (:arguments ("var+list" "body")) nil [1719 2775])
            ("macroexp--all-forms" function (:arguments ("forms" "skip")) nil [2777 3118])
            ("macroexp--all-clauses" function (:arguments ("clauses" "skip")) nil [3120 3493])
            ("macroexp--compiler-macro" function (:arguments ("handler" "form")) nil [3495 3690])
            ("macroexp--funcall-if-compiled" function (:arguments ("_form")) nil [3692 4020])
            ("put" code nil nil [4021 4163])
            ("macroexp--warn-and-return" function (:arguments ("msg" "form")) nil [4165 4751])
            ("macroexp--obsolete-warning" function (:arguments ("fun" "obsolescence-data" "type")) nil [4753 5160])
            ("macroexp--expand-all" function (:arguments ("form")) nil [5162 10549])
            ("macroexpand-all" function (:arguments ("form" "environment")) nil [10566 10960])
            ("macroexp-progn" function (:arguments ("exps")) nil [11001 11131])
            ("macroexp-unprogn" function (:arguments ("exp")) nil [11133 11282])
            ("macroexp-let*" function (:arguments ("bindings" "exp")) nil [11284 11525])
            ("macroexp-if" function (:arguments ("test" "then" "else")) nil [11527 12280])
            ("macroexp-let2" function (:arguments ("test" "var" "exp" "exps")) nil [12282 13113])
            ("macroexp--maxsize" function (:arguments ("exp" "size")) nil [13115 13721])
            ("macroexp-small-p" function (:arguments ("exp")) nil [13723 13839])
            ("macroexp--const-symbol-p" function (:arguments ("symbol" "any-value")) nil [13841 14402])
            ("macroexp-const-p" function (:arguments ("exp")) nil [14404 14908])
            ("macroexp-copyable-p" function (:arguments ("exp")) nil [14910 15047])
            ("macroexp--backtrace" function nil nil [15488 15761])
            ("macroexp--trim-backtrace-frame" function (:arguments ("frame")) nil [15763 16250])
            ("macroexp--pending-eager-loads" variable nil nil [16252 16357])
            ("internal-macroexpand-for-load" function (:arguments ("form")) nil [16359 17820])
            ("add-hook" code nil nil [18253 18508])
            ("macroexp" package nil nil [18511 18530]))          
      :file "macroexp.el.gz"
      :pointmax 18558
      :fsize 6200
      :lastmodtime '(20707 18685 0 0)
      :unmatched-syntax '((close-paren 18508 . 18509) (symbol 18233 . 18250) (open-paren 18232 . 18233)))
    (semanticdb-table "timer.el.gz"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("cl-lib" include nil nil [1285 1302])
            ("cl-defstruct" code nil nil [1305 1580])
            ("timerp" function (:arguments ("object")) nil [1582 1687])
            ("timer--time" function (:arguments ("timer")) nil [1713 1856])
            ("gv-define-simple-setter" code nil nil [1858 2345])
            ("timer-set-time" function (:arguments ("timer" "time" "delta")) nil [2348 2743])
            ("timer-set-idle-time" function (:arguments ("timer" "secs" "repeat")) nil [2745 3260])
            ("timer-next-integral-multiple-of-time" function (:arguments ("time" "secs")) nil [3262 4267])
            ("timer-relative-time" function (:arguments ("time" "secs" "usecs" "psecs")) nil [4269 4709])
            ("timer--time-less-p" function (:arguments ("t1" "t2")) nil [4711 4853])
            ("timer-inc-time" function (:arguments ("timer" "secs" "usecs" "psecs")) nil [4855 5186])
            ("timer-set-time-with-usecs" function (:arguments ("timer" "time" "usecs" "delta")) nil [5188 5841])
            ("timer-set-function" function (:arguments ("timer" "function" "args")) nil [5843 6102])
            ("timer--activate" function (:arguments ("timer" "triggered-p" "reuse-cell" "idle")) nil [6105 7089])
            ("timer-activate" function (:arguments ("timer" "triggered-p" "reuse-cell")) nil [7091 7607])
            ("timer-activate-when-idle" function (:arguments ("timer" "dont-wait" "reuse-cell")) nil [7609 8487])
            ("defalias" code nil nil [8489 8530])
            ("cancel-timer" function (:arguments ("timer")) nil [8532 8765])
            ("cancel-timer-internal" function (:arguments ("timer")) nil [8767 9189])
            ("cancel-function-timers" function
               (:user-visible-flag t
                :arguments ("function"))
                nil [9191 9729])
            ("timer-event-last" variable nil nil [9778 9836])
            ("timer-event-last-1" variable nil nil [9837 9905])
            ("timer-event-last-2" variable nil nil [9906 9975])
            ("timer-max-repeats" variable (:default-value 10) nil [9977 10354])
            ("timer-until" function (:arguments ("timer" "time")) nil [10356 10613])
            ("timer-event-handler" function (:arguments ("timer")) nil [10615 12403])
            ("timeout-event-p" function (:arguments ("event")) nil [12466 12590])
            ("declare-function" code nil nil [12594 12645])
            ("run-at-time" function
               (:user-visible-flag t
                :arguments ("time" "repeat" "function" "args"))
                nil [12647 14940])
            ("run-with-timer" function
               (:user-visible-flag t
                :arguments ("secs" "repeat" "function" "args"))
                nil [14942 15428])
            ("add-timeout" function (:arguments ("secs" "function" "object" "repeat")) nil [15430 15734])
            ("run-with-idle-timer" function
               (:user-visible-flag t
                :arguments ("secs" "repeat" "function" "args"))
                nil [15736 16887])
            ("with-timeout-timers" variable nil nil [16890 16993])
            ("with-timeout" function (:arguments ("list" "body")) nil [16995 18474])
            ("with-timeout-suspend" function nil nil [18476 18939])
            ("with-timeout-unsuspend" function (:arguments ("timer-spec-list")) nil [18941 19284])
            ("y-or-n-p-with-timeout" function (:arguments ("prompt" "seconds" "default-value")) nil [19286 19526])
            ("timer-duration-words" variable
               (:constant-flag t
                :default-value (list (cons "microsec" 1e-06) (cons "microsecond" 1e-06) (cons "millisec" 0.001) (cons "millisecond" 0.001) (cons "sec" 1) (cons "second" 1) (cons "min" 60) (cons "minute" 60) (cons "hour" (* 60 60)) (cons "day" (* 24 60 60)) (cons "week" (* 7 24 60 60)) (cons "fortnight" (* 14 24 60 60)) (cons "month" (* 30 24 60 60)) (cons "year" (* 365.25 24 60 60))))
                nil [19529 20045])
            ("timer-duration" function (:arguments ("string")) nil [20047 20749])
            ("timer" package nil nil [20752 20768]))          
      :file "timer.el.gz"
      :pointmax 20793
      :fsize 6673
      :lastmodtime '(20707 18685 0 0)
      :unmatched-syntax '((close-paren 1302 . 1303) (symbol 1267 . 1284) (open-paren 1266 . 1267)))
    (semanticdb-table "syntax.el.gz"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("cl-lib" include nil nil [1629 1646])
            ("font-lock-beginning-of-syntax-function" variable nil nil [1649 1696])
            ("syntax-propertize-function" variable nil nil [1750 2999])
            ("syntax-propertize-chunk-size" variable (:default-value 500) nil [3001 3042])
            ("syntax-propertize-extend-region-functions" variable (:default-value (quote (syntax-propertize-wholelines))) nil [3044 3854])
            ("make-variable-buffer-local" code nil nil [3985 4056])
            ("syntax-propertize-wholelines" function (:arguments ("start" "end")) nil [4058 4256])
            ("syntax-propertize-multiline" function (:arguments ("beg" "end")) nil [4258 4738])
            ("syntax-propertize--done" variable (:default-value -1) nil [4740 4839])
            ("make-variable-buffer-local" code nil nil [4840 4893])
            ("syntax-propertize--shift-groups" function (:arguments ("re" "n")) nil [4895 5127])
            ("syntax-propertize-precompile-rules" function (:arguments ("rules")) nil [5129 5905])
            ("syntax-propertize-rules" function (:arguments ("rules")) nil [5907 13118])
            ("syntax-propertize-via-font-lock" function (:arguments ("keywords")) nil [13120 13634])
            ("syntax-propertize" function (:arguments ("pos")) nil [13636 15406])
            ("syntax-ppss-depth" function (:arguments ("ppss")) nil [15461 15511])
            ("syntax-ppss-toplevel-pos" function (:arguments ("ppss")) nil [15513 16438])
            ("syntax-ppss-context" function (:arguments ("ppss")) nil [16440 16550])
            ("syntax-ppss-max-span" variable (:default-value 20000) nil [16552 16771])
            ("syntax-begin-function" variable nil nil [16773 16984])
            ("syntax-ppss-cache" variable nil nil [16986 17073])
            ("make-variable-buffer-local" code nil nil [17074 17121])
            ("syntax-ppss-last" variable nil nil [17122 17188])
            ("make-variable-buffer-local" code nil nil [17189 17235])
            ("defalias" code nil nil [17237 17307])
            ("syntax-ppss-flush-cache" function (:arguments ("beg" "ignored")) nil [17308 18535])
            ("syntax-ppss-stats" variable (:default-value [(0 . 0.0) (0 . 0.0) (0 . 0.0) (0 . 0.0) (0 . 0.0) (1 . 2500.0)]) nil [18537 18630])
            ("syntax-ppss-stats" function nil nil [18631 18797])
            ("syntax-ppss" function (:arguments ("pos")) nil [18799 25129])
            ("syntax-ppss-debug" function nil nil [25155 25379])
            ("syntax" package nil nil [25963 25980]))          
      :file "syntax.el.gz"
      :pointmax 26006
      :fsize 8266
      :lastmodtime '(20707 18685 0 0)
      :unmatched-syntax '((close-paren 1646 . 1647) (symbol 1611 . 1628) (open-paren 1610 . 1611))))
  :file "!usr!share!emacs!24.3!lisp!emacs-lisp!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2")

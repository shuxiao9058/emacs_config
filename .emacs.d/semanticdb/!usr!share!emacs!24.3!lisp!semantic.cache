;; Object lisp/
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "lisp/"
  :tables
  (list
    (semanticdb-table "ansi-color.el.gz"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("comint-last-output-start" variable nil nil [2745 2778])
            ("ansi-colors" customgroup (:user-visible-flag t) nil [2798 3250])
            ("ansi-color-faces-vector" variable (:default-value [default bold default italic underline success warning error]) nil [3252 4218])
            ("ansi-color-names-vector" variable (:default-value ["black" "red" "green" "yellow" "blue" "magenta" "cyan" "white"]) nil [4220 5430])
            ("ansi-color-regexp" variable
               (:constant-flag t
                :default-value "\\[\\([0-9;]*m\\)")
                nil [5432 5531])
            ("ansi-color-drop-regexp" variable
               (:constant-flag t
                :default-value "\\[\\([ABCDsuK]\\|2J\\|=[0-9]+[hI]\\|[0-9;]*[Hf]\\)")
                nil [5533 5691])
            ("ansi-color-parameter-regexp" variable
               (:constant-flag t
                :default-value "\\([0-9]*\\)[m;]")
                nil [5693 5807])
            ("ansi-color-for-comint-mode" variable (:default-value t) nil [5871 6618])
            ("ansi-color-apply-face-function" variable (:default-value (quote ansi-color-apply-overlay-face)) nil [6620 6884])
            ("ansi-color-for-comint-mode-on" function (:user-visible-flag t) nil [6901 7038])
            ("ansi-color-for-comint-mode-off" function (:user-visible-flag t) nil [7040 7182])
            ("ansi-color-for-comint-mode-filter" function (:user-visible-flag t) nil [7184 7345])
            ("ansi-color-process-output" function (:arguments ("ignored")) nil [7362 8457])
            ("define-obsolete-function-alias" code nil nil [8459 8565])
            ("ansi-color-context" variable nil nil [8591 8945])
            ("make-variable-buffer-local" code nil nil [8946 8994])
            ("ansi-color-filter-apply" function (:arguments ("string")) nil [8996 10238])
            ("ansi-color--find-face" function (:arguments ("codes")) nil [10240 10688])
            ("ansi-color-apply" function (:arguments ("string")) nil [10690 13148])
            ("ansi-color-context-region" variable nil nil [13175 13540])
            ("make-variable-buffer-local" code nil nil [13541 13596])
            ("ansi-color-filter-region" function (:arguments ("begin" "end")) nil [13598 14700])
            ("ansi-color-apply-on-region" function (:arguments ("begin" "end")) nil [14702 17253])
            ("ansi-color-apply-overlay-face" function (:arguments ("beg" "end" "face")) nil [17255 17488])
            ("ansi-color-make-face" function (:arguments ("property" "color")) nil [18468 19130])
            ("ansi-color-make-extent" function (:arguments ("from" "to" "object")) nil [19132 19955])
            ("ansi-color-freeze-overlay" function (:arguments ("overlay" "is-after" "begin" "end" "len")) nil [19957 20369])
            ("ansi-color-set-extent-face" function (:arguments ("extent" "face")) nil [20371 20622])
            ("ansi-color-parse-sequence" function (:arguments ("escape-seq")) nil [20645 21247])
            ("ansi-color-apply-sequence" function (:arguments ("escape-sequence" "codes")) nil [21249 22739])
            ("ansi-color-make-color-map" function nil nil [22741 23958])
            ("ansi-color-map" variable (:default-value (ansi-color-make-color-map)) nil [23960 24445])
            ("ansi-color-map-update" function (:arguments ("symbol" "value")) nil [24447 24812])
            ("ansi-color-get-face-1" function (:arguments ("ansi-code")) nil [24814 25038])
            ("ansi-color" package nil nil [25040 25061]))          
      :file "ansi-color.el.gz"
      :pointmax 25091
      :fsize 7338
      :lastmodtime '(20707 18685 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "comint.el.gz"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("ring" include nil nil [4841 4856])
            ("ansi-color" include nil nil [4857 4878])
            ("regexp-opt" include nil nil [4879 4900])
            ("comint" customgroup (:user-visible-flag t) nil [6612 6704])
            ("comint-completion" customgroup (:user-visible-flag t) nil [6706 6792])
            ("comint-source" customgroup (:user-visible-flag t) nil [6794 6900])
            ("comint-prompt-regexp" variable (:default-value "^") nil [6902 7424])
            ("comint-prompt-read-only" variable nil nil [7426 8414])
            ("comint-delimiter-argument-list" variable nil nil [8416 8846])
            ("comint-input-autoexpand" variable nil nil [8848 9405])
            ("comint-highlight-input" variable
               (:default-value (quote ((t (:weight bold))))
                :type "face")
                nil [9407 9519])
            ("comint-highlight-prompt" variable
               (:default-value (quote ((t :inherit minibuffer-prompt)))
                :type "face")
                nil [9521 9645])
            ("comint-input-ignoredups" variable nil nil [9647 9865])
            ("comint-input-ring-file-name" variable nil nil [9867 10241])
            ("comint-scroll-to-bottom-on-input" variable nil nil [10243 10677])
            ("comint-move-point-for-output" variable nil nil [10679 11404])
            ("defvaralias" code nil nil [11406 11484])
            ("comint-scroll-show-maximum-output" variable (:default-value t) nil [11486 12149])
            ("comint-buffer-maximum-size" variable (:default-value 1024) nil [12151 12436])
            ("comint-input-ring-size" variable (:default-value 500) nil [12438 12581])
            ("comint-input-ring-separator" variable (:default-value "
") nil [12583 12676])
            ("comint-input-history-ignore" variable (:default-value "^#") nil [12678 12798])
            ("comint-process-echoes" variable nil nil [12800 13056])
            ("comint-password-prompt-regexp" variable (:default-value (concat "\\(^ *\\|" (regexp-opt (quote ("Enter" "enter" "Enter same" "enter same" "Enter the" "enter the" "Old" "old" "New" "new" "'s" "login" "Kerberos" "CVS" "UNIX" " SMB" "LDAP" "[sudo]" "Repeat" "Bad")) t) " +\\)" (regexp-opt (quote ("password" "Password" "passphrase" "Passphrase" "pass phrase" "Pass phrase" "Response"))) "\\(?:\\(?:, try\\)? *again\\| (empty for no passphrase)\\| (again)\\)?\\(?: for [^:]+\\)?:\\s *\\'")) nil [13648 14320])
            ("comint-get-old-input" variable (:default-value (function comint-get-old-input-default)) nil [14361 14845])
            ("comint-dynamic-complete-functions" variable (:default-value (quote (comint-c-a-p-replace-by-expanded-history comint-filename-completion))) nil [14847 15138])
            ("comint-input-filter" variable (:default-value (function (lambda (str) (not (string-match "\\`\\s *\\'" str))))) nil [15140 15441])
            ("comint-input-filter-functions" variable (:default-value (quote nil)) nil [15443 15616])
            ("comint-output-filter-functions" variable (:default-value (quote (ansi-color-process-output comint-postoutput-scroll-to-bottom comint-watch-for-password-prompt))) nil [15633 16301])
            ("comint-input-sender-no-newline" variable nil nil [16303 16424])
            ("comint-input-sender" variable (:default-value (function comint-simple-send)) nil [16426 16871])
            ("comint-eol-on-send" variable (:default-value t) nil [16873 17030])
            ("define-obsolete-variable-alias" code nil nil [17032 17143])
            ("comint-use-prompt-regexp" variable nil nil [17319 17703])
            ("comint-mode-hook" variable nil nil [17705 17856])
            ("comint-exec-hook" variable (:default-value (quote nil)) nil [17858 18256])
            ("comint-mode-map" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map "p" (quote comint-previous-input)) (define-key map "n" (quote comint-next-input)) (define-key map [C-up] (quote comint-previous-input)) (define-key map [C-down] (quote comint-next-input)) (define-key map "r" (quote comint-history-isearch-backward-regexp)) (define-key map [3 134217842] (quote comint-previous-matching-input-from-input)) (define-key map [3 134217843] (quote comint-next-matching-input-from-input)) (define-key map "" (quote comint-show-output)) (define-key map "" (quote comint-send-input)) (define-key map "" (quote comint-delchar-or-maybe-eof)) (define-key map [delete] (quote delete-char)) (define-key map [kp-delete] (quote delete-char)) (define-key map " " (quote comint-accumulate)) (define-key map "" (quote comint-get-next-from-history)) (define-key map "" (quote comint-bol-or-process-mark)) (define-key map "" (quote comint-kill-input)) (define-key map "" (quote backward-kill-word)) (define-key map "" (quote comint-interrupt-subjob)) (define-key map "" (quote comint-stop-subjob)) (define-key map "" (quote comint-quit-subjob)) (define-key map "" (quote comint-copy-old-input)) (define-key map "" (quote comint-delete-output)) (define-key map "" (quote comint-show-output)) (define-key map "" (quote comint-show-maximum-output)) (define-key map "" (quote comint-dynamic-list-input-ring)) (define-key map "" (quote comint-next-prompt)) (define-key map "" (quote comint-previous-prompt)) (define-key map "" (quote comint-send-eof)) (define-key map "" (quote comint-write-output)) (define-key map "." (quote comint-insert-previous-argument)) (define-key map [mouse-2] (quote comint-insert-input)) (define-key map [menu-bar completion] (cons "Complete" (make-sparse-keymap "Complete"))) (define-key map [menu-bar completion complete-expand] (quote ("Expand File Name" . comint-replace-by-expanded-filename))) (define-key map [menu-bar completion complete-listing] (quote ("File Completion Listing" . comint-dynamic-list-filename-completions))) (define-key map [menu-bar completion complete-file] (quote ("Complete File Name" . comint-dynamic-complete-filename))) (define-key map [menu-bar completion complete] (quote ("Complete at Point" . completion-at-point))) (define-key map [menu-bar inout] (cons "In/Out" (make-sparse-keymap "In/Out"))) (define-key map [menu-bar inout delete-output] (quote ("Delete Current Output Group" . comint-delete-output))) (define-key map [menu-bar inout append-output-to-file] (quote ("Append Current Output Group to File" . comint-append-output-to-file))) (define-key map [menu-bar inout write-output] (quote ("Write Current Output Group to File" . comint-write-output))) (define-key map [menu-bar inout next-prompt] (quote ("Forward Output Group" . comint-next-prompt))) (define-key map [menu-bar inout previous-prompt] (quote ("Backward Output Group" . comint-previous-prompt))) (define-key map [menu-bar inout show-maximum-output] (quote ("Show Maximum Output" . comint-show-maximum-output))) (define-key map [menu-bar inout show-output] (quote ("Show Current Output Group" . comint-show-output))) (define-key map [menu-bar inout kill-input] (quote ("Kill Current Input" . comint-kill-input))) (define-key map [menu-bar inout copy-input] (quote ("Copy Old Input" . comint-copy-old-input))) (define-key map [menu-bar inout history-isearch-backward-regexp] (quote ("Isearch Input Regexp Backward..." . comint-history-isearch-backward-regexp))) (define-key map [menu-bar inout history-isearch-backward] (quote ("Isearch Input String Backward..." . comint-history-isearch-backward))) (define-key map [menu-bar inout forward-matching-history] (quote ("Forward Matching Input..." . comint-forward-matching-input))) (define-key map [menu-bar inout backward-matching-history] (quote ("Backward Matching Input..." . comint-backward-matching-input))) (define-key map [menu-bar inout next-matching-history] (quote ("Next Matching Input..." . comint-next-matching-input))) (define-key map [menu-bar inout previous-matching-history] (quote ("Previous Matching Input..." . comint-previous-matching-input))) (define-key map [menu-bar inout next-matching-history-from-input] (quote ("Next Matching Current Input" . comint-next-matching-input-from-input))) (define-key map [menu-bar inout previous-matching-history-from-input] (quote ("Previous Matching Current Input" . comint-previous-matching-input-from-input))) (define-key map [menu-bar inout next-history] (quote ("Next Input" . comint-next-input))) (define-key map [menu-bar inout previous-history] (quote ("Previous Input" . comint-previous-input))) (define-key map [menu-bar inout list-history] (quote ("List Input History" . comint-dynamic-list-input-ring))) (define-key map [menu-bar inout expand-history] (quote ("Expand History Before Point" . comint-replace-by-expanded-history))) (let ((signals-map (make-sparse-keymap "Signals"))) (define-key map [menu-bar signals] (cons "Signals" signals-map)) (define-key signals-map [eof] (quote ("EOF" . comint-send-eof))) (define-key signals-map [kill] (quote ("KILL" . comint-kill-subjob))) (define-key signals-map [quit] (quote ("QUIT" . comint-quit-subjob))) (define-key signals-map [cont] (quote ("CONT" . comint-continue-subjob))) (define-key signals-map [stop] (quote ("STOP" . comint-stop-subjob))) (define-key signals-map [break] (quote ("BREAK" . comint-interrupt-subjob)))) (setq menu-bar-final-items (append (quote (completion inout signals)) menu-bar-final-items)) map)) nil [18258 24285])
            ("comint-ptyp" variable (:default-value t) nil [24321 24472])
            ("comint-input-ring" variable nil nil [24474 24504])
            ("comint-last-input-start" variable nil nil [24505 24541])
            ("comint-last-input-end" variable nil nil [24542 24576])
            ("comint-last-output-start" variable nil nil [24577 24614])
            ("comint-input-ring-index" variable nil nil [24615 24694])
            ("comint-matching-input-from-input-string" variable nil nil [24695 24796])
            ("comint-save-input-ring-index" variable nil nil [24797 24947])
            ("comint-accum-marker" variable nil nil [24949 25101])
            ("comint-stored-incomplete-input" variable nil nil [25103 25184])
            ("put" code nil nil [25186 25265])
            ("put" code nil nil [25266 25309])
            ("put" code nil nil [25310 25359])
            ("put" code nil nil [25360 25414])
            ("put" code nil nil [25415 25464])
            ("put" code nil nil [25465 25520])
            ("put" code nil nil [25521 25577])
            ("put" code nil nil [25578 25637])
            ("put" code nil nil [25638 25696])
            ("put" code nil nil [25697 25751])
            ("put" code nil nil [25752 25811])
            ("put" code nil nil [25812 25849])
            ("put" code nil nil [25851 25890])
            ("define-derived-mode" code nil nil [25892 30820])
            ("comint-check-proc" function (:arguments ("buffer")) nil [30822 31141])
            ("make-comint-in-buffer" function (:arguments ("name" "buffer" "program" "startfile" "switches")) nil [31158 32483])
            ("make-comint" function (:arguments ("name" "program" "startfile" "switches")) nil [32500 33282])
            ("comint-run" function
               (:user-visible-flag t
                :arguments ("program"))
                nil [33299 33810])
            ("comint-exec" function (:arguments ("buffer" "name" "command" "startfile" "switches")) nil [33812 35711])
            ("comint-exec-1" function (:arguments ("name" "buffer" "command" "switches")) nil [35814 37845])
            ("comint-insert-input" function
               (:user-visible-flag t
                :arguments ("event"))
                nil [37847 39651])
            ("comint-read-input-ring" function (:arguments ("silent")) nil [40783 43484])
            ("comint-write-input-ring" function nil nil [43486 44722])
            ("comint-dynamic-list-input-ring-window-conf" variable nil nil [44725 44776])
            ("comint-dynamic-list-input-ring-select" function (:user-visible-flag t) nil [44778 45563])
            ("comint-dynamic-list-input-ring" function (:user-visible-flag t) nil [45565 46901])
            ("comint-regexp-arg" function (:arguments ("prompt")) nil [46904 47465])
            ("comint-search-arg" function (:arguments ("arg")) nil [47467 47889])
            ("comint-restore-input" function (:user-visible-flag t) nil [47891 48202])
            ("comint-search-start" function (:arguments ("arg")) nil [48204 48685])
            ("comint-previous-input-string" function (:arguments ("arg")) nil [48719 49016])
            ("comint-previous-input" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [49018 49505])
            ("comint-next-input" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [49507 49635])
            ("comint-previous-matching-input-string" function (:arguments ("regexp" "arg")) nil [49637 49934])
            ("comint-previous-matching-input-string-position" function (:arguments ("regexp" "arg" "start")) nil [49936 51136])
            ("comint-delete-input" function nil nil [51138 51423])
            ("comint-previous-matching-input" function
               (:user-visible-flag t
                :arguments ("regexp" "n"))
                nil [51425 52301])
            ("comint-next-matching-input" function
               (:user-visible-flag t
                :arguments ("regexp" "n"))
                nil [52303 52696])
            ("comint-previous-matching-input-from-input" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [52698 53504])
            ("comint-next-matching-input-from-input" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [53506 53874])
            ("comint-replace-by-expanded-history" function
               (:user-visible-flag t
                :arguments ("silent" "start"))
                nil [53877 54893])
            ("comint-c-a-p-replace-by-expanded-history" function (:arguments ("silent" "start")) nil [54895 55912])
            ("comint-replace-by-expanded-history-before-point" function (:arguments ("silent" "start" "dry-run")) nil [55915 60147])
            ("comint-magic-space" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [60150 60417])
            ("comint-history-isearch" variable nil nil [60456 61158])
            ("comint-history-isearch-backward" function (:user-visible-flag t) nil [61160 61343])
            ("comint-history-isearch-backward-regexp" function (:user-visible-flag t) nil [61345 61554])
            ("comint-history-isearch-message-overlay" variable nil nil [61556 61607])
            ("make-variable-buffer-local" code nil nil [61608 61676])
            ("comint-history-isearch-setup" function nil nil [61678 62484])
            ("comint-history-isearch-end" function nil nil [62486 62980])
            ("comint-goto-input" function (:arguments ("pos")) nil [62982 63567])
            ("comint-history-isearch-search" function nil nil [63569 65922])
            ("comint-history-isearch-message" function (:arguments ("c-q-hack" "ellipsis")) nil [65924 67376])
            ("comint-history-isearch-wrap" function nil nil [67378 67967])
            ("comint-history-isearch-push-state" function nil nil [67969 68258])
            ("comint-history-isearch-pop-state" function (:arguments ("_cmd" "hist-pos")) nil [68260 68460])
            ("comint-within-quotes" function (:arguments ("beg" "end")) nil [68464 68791])
            ("comint-how-many-region" function (:arguments ("regexp" "beg" "end")) nil [68793 69058])
            ("comint-args" function (:arguments ("string" "begin" "end")) nil [69060 69835])
            ("comint-delim-arg" function (:arguments ("arg")) nil [69837 70853])
            ("comint-arguments" function (:arguments ("string" "nth" "mth")) nil [70855 73316])
            ("comint-add-to-input-history" function (:arguments ("cmd")) nil [73351 74021])
            ("comint-send-input" function
               (:user-visible-flag t
                :arguments ("no-newline" "artificial"))
                nil [74023 82039])
            ("comint-preoutput-filter-functions" variable nil nil [82041 82689])
            ("comint-inhibit-carriage-motion" variable nil nil [82691 82851])
            ("comint-last-prompt-overlay" variable nil nil [82980 83019])
            ("comint-snapshot-last-prompt" function nil nil [83021 83487])
            ("comint-carriage-motion" function (:arguments ("start" "end")) nil [83489 85739])
            ("comint-output-filter" function (:arguments ("process" "string")) nil [85882 90082])
            ("comint-preinput-scroll-to-bottom" function nil nil [90084 91185])
            ("follow-mode" variable nil nil [91187 91207])
            ("declare-function" code nil nil [91208 91285])
            ("comint-postoutput-scroll-to-bottom" function (:arguments ("_string")) nil [91287 92237])
            ("comint-adjust-point" function (:arguments ("selected")) nil [92239 92875])
            ("comint-truncate-buffer" function
               (:user-visible-flag t
                :arguments ("_string"))
                nil [92877 93316])
            ("comint-strip-ctrl-m" function
               (:user-visible-flag t
                :arguments ("_string"))
                nil [93318 93847])
            ("defalias" code nil nil [93848 93899])
            ("comint-show-maximum-output" function (:user-visible-flag t) nil [93901 94073])
            ("comint-get-old-input-default" function nil nil [94075 94793])
            ("comint-copy-old-input" function (:user-visible-flag t) nil [94795 95189])
            ("comint-skip-prompt" function nil nil [95191 95475])
            ("comint-after-pmark-p" function nil nil [95477 95678])
            ("comint-simple-send" function (:arguments ("proc" "string")) nil [95680 96255])
            ("comint-line-beginning-position" function nil nil [96257 97207])
            ("comint-bol" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [97209 97738])
            ("comint-read-noecho" function (:arguments ("prompt" "_ignore")) nil [97762 97838])
            ("send-invisible" function
               (:user-visible-flag t
                :arguments ("prompt"))
                nil [98030 98893])
            ("comint-watch-for-password-prompt" function (:arguments ("string")) nil [98895 99445])
            ("comint-send-string" function (:arguments ("process" "string")) nil [99484 99843])
            ("comint-send-region" function (:arguments ("process" "start" "end")) nil [99845 100210])
            ("comint-delete-output" function (:user-visible-flag t) nil [100239 100883])
            ("comint-write-output" function
               (:user-visible-flag t
                :arguments ("filename" "append" "mustbenew"))
                nil [100885 101986])
            ("comint-append-output-to-file" function
               (:user-visible-flag t
                :arguments ("filename"))
                nil [102123 102365])
            ("comint-show-output" function (:user-visible-flag t) nil [102367 102881])
            ("comint-interrupt-subjob" function (:user-visible-flag t) nil [102884 103145])
            ("comint-kill-subjob" function (:user-visible-flag t) nil [103147 103369])
            ("comint-quit-subjob" function (:user-visible-flag t) nil [103371 103593])
            ("comint-stop-subjob" function (:user-visible-flag t) nil [103595 104072])
            ("comint-continue-subjob" function (:user-visible-flag t) nil [104074 104274])
            ("comint-skip-input" function nil nil [104276 104769])
            ("comint-kill-input" function (:user-visible-flag t) nil [104771 105026])
            ("comint-delchar-or-maybe-eof" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [105028 105406])
            ("comint-send-eof" function (:user-visible-flag t) nil [105408 105546])
            ("comint-backward-matching-input" function
               (:user-visible-flag t
                :arguments ("regexp" "n"))
                nil [105549 106631])
            ("comint-forward-matching-input" function
               (:user-visible-flag t
                :arguments ("regexp" "n"))
                nil [106634 107107])
            ("comint-next-prompt" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [107110 108285])
            ("comint-previous-prompt" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [108288 108608])
            ("comint-insert-previous-argument-last-start-pos" variable nil nil [108675 108734])
            ("make-variable-buffer-local" code nil nil [108735 108811])
            ("comint-insert-previous-argument-last-index" variable nil nil [108812 108867])
            ("make-variable-buffer-local" code nil nil [108868 108940])
            ("comint-insert-previous-argument" function
               (:user-visible-flag t
                :arguments ("index"))
                nil [109026 111065])
            ("comint-update-fence" function nil nil [111130 112482])
            ("comint-kill-whole-line" function
               (:user-visible-flag t
                :arguments ("count"))
                nil [112484 113156])
            ("comint-kill-region" function (:arguments ("beg" "end" "yank-handler")) nil [113158 114848])
            ("comint-source-default" function (:arguments ("previous-dir/file" "source-modes")) nil [116332 118047])
            ("comint-check-source" function (:arguments ("fname")) nil [118050 118669])
            ("comint-extract-string" function nil nil [118671 118981])
            ("comint-get-source" function (:arguments ("prompt" "prev-dir/file" "source-modes" "mustmatch-p")) nil [118983 120481])
            ("comint-proc-query" function (:arguments ("proc" "str")) nil [121604 122640])
            ("comint-completion-autolist" variable nil nil [123642 123845])
            ("comint-completion-addsuffix" variable (:default-value t) nil [123847 124390])
            ("comint-completion-recexact" variable nil nil [124392 124669])
            ("comint-completion-fignore" variable nil nil [124671 124965])
            ("comint-file-name-prefix" variable (:default-value (purecopy "")) nil [124982 125202])
            ("comint-file-name-chars" variable (:default-value (if (memq system-type (quote (ms-dos windows-nt cygwin))) "~/A-Za-z0-9_^$!#%&{}@`'.,:()-" "[]~/A-Za-z0-9+@:_.$#%,={}-")) nil [125204 125561])
            ("comint-file-name-quote-list" variable nil nil [125563 125710])
            ("comint-directory" function (:arguments ("directory")) nil [125713 125947])
            ("comint-word" function (:arguments ("word-chars")) nil [125950 126993])
            ("comint-substitute-in-file-name" function (:arguments ("filename")) nil [126995 127617])
            ("comint--match-partial-filename" function nil nil [127619 127783])
            ("comint--unquote&requote-argument" function (:arguments ("qstr" "upos")) nil [127785 129078])
            ("comint--unquote-argument" function (:arguments ("str")) nil [129080 129165])
            ("define-obsolete-function-alias" code nil nil [129166 129267])
            ("comint-match-partial-filename" function nil nil [129269 129554])
            ("comint-quote-filename" function (:arguments ("filename")) nil [129556 130024])
            ("comint-unquote-filename" function (:arguments ("filename")) nil [130026 130298])
            ("comint--requote-argument" function (:arguments ("upos" "qstr")) nil [130300 130482])
            ("comint-completion-at-point" function nil nil [130484 130593])
            ("define-obsolete-function-alias" code nil nil [130595 130684])
            ("comint-dynamic-complete-filename" function (:user-visible-flag t) nil [130686 131635])
            ("comint-filename-completion" function nil nil [131637 131812])
            ("comint-completion-file-name-table" function (:arguments ("string" "pred" "action")) nil [131814 132523])
            ("comint-unquote-function" variable (:default-value (function comint--unquote-argument)) nil [132525 132702])
            ("comint-requote-function" variable (:default-value (function comint--requote-argument)) nil [132703 132880])
            ("comint--complete-file-name-data" function nil nil [132882 134180])
            ("comint-dynamic-complete-as-filename" function nil nil [134182 134517])
            ("comint-replace-by-expanded-filename" function (:user-visible-flag t) nil [134519 135122])
            ("comint-dynamic-simple-complete" function (:arguments ("stub" "candidates")) nil [135125 137411])
            ("comint-dynamic-list-filename-completions" function (:user-visible-flag t) nil [137413 137910])
            ("comint-displayed-dynamic-completions" variable nil nil [138122 138171])
            ("comint-dynamic-list-completions-config" variable nil nil [138173 138224])
            ("comint-dynamic-list-completions" function (:arguments ("completions" "common-substring")) nil [138226 141042])
            ("comint-get-next-from-history" function (:user-visible-flag t) nil [141045 141494])
            ("comint-accumulate" function (:user-visible-flag t) nil [141496 142012])
            ("comint-goto-process-mark" function (:user-visible-flag t) nil [142014 142444])
            ("comint-bol-or-process-mark" function (:user-visible-flag t) nil [142446 143201])
            ("comint-set-process-mark" function (:user-visible-flag t) nil [143203 143475])
            ("comint-redirect-verbose" variable nil nil [145723 145924])
            ("comint-redirect-filter-functions" variable nil nil [145985 146628])
            ("comint-redirect-output-buffer" variable nil nil [146653 146749])
            ("comint-redirect-finished-regexp" variable nil nil [146751 147012])
            ("comint-redirect-insert-matching-regexp" variable nil nil [147014 147331])
            ("comint-redirect-echo-input" variable nil nil [147333 147448])
            ("comint-redirect-completed" variable nil nil [147450 147552])
            ("comint-redirect-original-mode-line-process" variable nil nil [147554 147656])
            ("comint-redirect-perform-sanity-check" variable (:default-value t) nil [147658 148159])
            ("comint-redirect-original-filter-function" variable nil nil [148161 148361])
            ("comint-redirect-subvert-readonly" variable nil nil [148363 148669])
            ("comint-redirect-setup" function (:arguments ("output-buffer" "comint-buffer" "finished-regexp" "echo-input")) nil [148807 150178])
            ("comint-redirect-cleanup" function (:user-visible-flag t) nil [150180 150601])
            ("defalias" code nil nil [150702 150773])
            ("comint-redirect-filter" function (:arguments ("process" "input-string")) nil [150775 151499])
            ("comint-redirect-preoutput-filter" function (:arguments ("input-string")) nil [151502 153927])
            ("comint-redirect-send-command" function
               (:user-visible-flag t
                :arguments ("command" "output-buffer" "echo" "no-display"))
                nil [153944 154489])
            ("comint-redirect-send-command-to-process" function
               (:user-visible-flag t
                :arguments ("command" "output-buffer" "process" "echo" "no-display"))
                nil [154506 156085])
            ("comint-redirect-results-list" function (:arguments ("command" "regexp" "regexp-group")) nil [156102 156449])
            ("comint-redirect-results-list-from-process" function (:arguments ("process" "command" "regexp" "regexp-group")) nil [156466 157519])
            ("comint" package nil nil [161291 161308]))          
      :file "comint.el.gz"
      :pointmax 161334
      :fsize 43593
      :lastmodtime '(20714 7872 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "help-mode.el.gz"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("button" include nil nil [1043 1060])
            ("easymenu" include nil nil [1080 1099])
            ("help-mode-map" variable (:default-value (let ((map (make-sparse-keymap))) (set-keymap-parent map (make-composed-keymap button-buffer-map special-mode-map)) (define-key map [mouse-2] (quote help-follow-mouse)) (define-key map "" (quote help-go-back)) (define-key map "" (quote help-go-forward)) (define-key map [XF86Back] (quote help-go-back)) (define-key map [XF86Forward] (quote help-go-forward)) (define-key map "" (quote help-follow-symbol)) (define-key map "" (quote help-follow)) map)) nil [1102 1664])
            ("easy-menu-define" code nil nil [1666 2242])
            ("help-xref-stack" variable nil nil [2244 2514])
            ("put" code nil nil [2515 2556])
            ("make-variable-buffer-local" code nil nil [2557 2602])
            ("help-xref-forward-stack" variable nil nil [2604 2879])
            ("put" code nil nil [2880 2929])
            ("make-variable-buffer-local" code nil nil [2930 2983])
            ("help-xref-stack-item" variable nil nil [2985 3129])
            ("put" code nil nil [3130 3176])
            ("make-variable-buffer-local" code nil nil [3177 3227])
            ("help-xref-stack-forward-item" variable nil nil [3229 3375])
            ("put" code nil nil [3376 3430])
            ("make-variable-buffer-local" code nil nil [3431 3489])
            ("setq-default" code nil nil [3491 3550])
            ("setq-default" code nil nil [3551 3626])
            ("help-mode-hook" variable nil nil [3628 3716])
            ("define-button-type" code nil nil [3749 3828])
            ("help-button-action" function (:arguments ("button")) nil [3830 4007])
            ("define-button-type" code nil nil [4179 4337])
            ("define-button-type" code nil nil [4339 4497])
            ("define-button-type" code nil nil [4499 4645])
            ("define-button-type" code nil nil [4647 4820])
            ("define-button-type" code nil nil [4822 4992])
            ("define-button-type" code nil nil [4994 5167])
            ("define-button-type" code nil nil [5216 5372])
            ("define-button-type" code nil nil [5374 5538])
            ("define-button-type" code nil nil [5540 5711])
            ("define-button-type" code nil nil [5713 5944])
            ("define-button-type" code nil nil [5946 6085])
            ("define-button-type" code nil nil [6087 6238])
            ("define-button-type" code nil nil [6240 6426])
            ("define-button-type" code nil nil [6428 6602])
            ("define-button-type" code nil nil [6604 7241])
            ("define-button-type" code nil nil [7243 7843])
            ("define-button-type" code nil nil [7845 8313])
            ("define-button-type" code nil nil [8315 8844])
            ("define-button-type" code nil nil [8846 8996])
            ("define-button-type" code nil nil [8998 9170])
            ("define-button-type" code nil nil [9172 9317])
            ("define-button-type" code nil nil [9319 9482])
            ("define-button-type" code nil nil [9484 9786])
            ("bookmark-make-record-function" variable nil nil [9790 9828])
            ("define-derived-mode" code nil nil [9845 10233])
            ("help-mode-setup" function nil nil [10250 10320])
            ("help-mode-finish" function nil nil [10337 10729])
            ("help-back-label" variable (:default-value (purecopy "[back]")) nil [10973 11082])
            ("help-forward-label" variable (:default-value (purecopy "[forward]")) nil [11084 11202])
            ("help-xref-symbol-regexp" variable
               (:constant-flag t
                :default-value (purecopy (concat "\\(\\<\\(\\(variable\\|option\\)\\|" "\\(function\\|command\\)\\|" "\\(face\\)\\|" "\\(symbol\\|program\\|property\\)\\|" "\\(source \\(?:code \\)?\\(?:of\\|for\\)\\)\\)" "[ 	
]+\\)?" "`\\(\\sw\\(\\sw\\|\\s_\\)+\\)'")))
                nil [11204 11829])
            ("help-xref-mule-regexp" variable nil nil [11831 12104])
            ("help-xref-info-regexp" variable
               (:constant-flag t
                :default-value (purecopy "\\<[Ii]nfo[ 	
]+\\(node\\|anchor\\)[ 	
]+`\\([^']+\\)'"))
                nil [12107 12272])
            ("help-xref-url-regexp" variable
               (:constant-flag t
                :default-value (purecopy "\\<[Uu][Rr][Ll][ 	
]+`\\([^']+\\)'"))
                nil [12274 12409])
            ("help-setup-xref" function (:arguments ("item" "interactive-p")) nil [12426 13331])
            ("help-xref-following" variable nil nil [13333 13416])
            ("help-buffer" function nil nil [13433 13979])
            ("help-make-xrefs" function
               (:user-visible-flag t
                :arguments ("buffer"))
                nil [13996 23818])
            ("help-xref-button" function (:arguments ("match-number" "type" "args")) nil [23835 24419])
            ("help-insert-xref-button" function (:arguments ("string" "type" "args")) nil [24436 24798])
            ("help-xref-on-pp" function (:arguments ("from" "to")) nil [24815 25714])
            ("help-xref-interned" function (:arguments ("symbol")) nil [25783 27762])
            ("help-xref-go-back" function (:arguments ("buffer")) nil [27805 28603])
            ("help-xref-go-forward" function (:arguments ("buffer")) nil [28605 29384])
            ("help-go-back" function (:user-visible-flag t) nil [29386 29580])
            ("help-go-forward" function (:user-visible-flag t) nil [29582 29782])
            ("help-do-xref" function (:arguments ("_pos" "function" "args")) nil [29784 30090])
            ("help-follow-mouse" function (:user-visible-flag t) nil [30147 30277])
            ("help-follow" function (:user-visible-flag t) nil [30334 30501])
            ("help-follow-symbol" function
               (:user-visible-flag t
                :arguments ("pos"))
                nil [30503 31161])
            ("help-mode-revert-buffer" function (:arguments ("_ignore-auto" "noconfirm")) nil [31163 31544])
            ("help-insert-string" function (:arguments ("string")) nil [31546 32017])
            ("declare-function" code nil nil [32042 32105])
            ("declare-function" code nil nil [32106 32218])
            ("help-bookmark-make-record" function nil nil [32220 32704])
            ("help-bookmark-jump" function (:arguments ("bookmark")) nil [32721 33184])
            ("help-mode" package nil nil [33187 33207]))          
      :file "help-mode.el.gz"
      :pointmax 33236
      :fsize 8393
      :lastmodtime '(20707 18685 0 0)
      :unmatched-syntax '((close-paren 1099 . 1100) (symbol 1062 . 1079) (open-paren 1061 . 1062)))
    (semanticdb-table "mwheel.el.gz"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("custom" include nil nil [1418 1435])
            ("timer" include nil nil [1436 1452])
            ("mouse-wheel-mode" variable nil nil [1454 1479])
            ("mouse-wheel-change-button" function (:arguments ("var" "button")) nil [1656 1819])
            ("mouse-wheel-down-button" variable (:default-value 4) nil [1821 1855])
            ("make-obsolete-variable" code nil nil [1856 1963])
            ("mouse-wheel-down-event" variable (:default-value (if (or (featurep (quote w32-win)) (featurep (quote ns-win))) (quote wheel-up) (intern (format "mouse-%s" mouse-wheel-down-button)))) nil [1964 2223])
            ("mouse-wheel-up-button" variable (:default-value 5) nil [2225 2257])
            ("make-obsolete-variable" code nil nil [2258 2361])
            ("mouse-wheel-up-event" variable (:default-value (if (or (featurep (quote w32-win)) (featurep (quote ns-win))) (quote wheel-down) (intern (format "mouse-%s" mouse-wheel-up-button)))) nil [2362 2617])
            ("mouse-wheel-click-button" variable (:default-value 2) nil [2619 2654])
            ("make-obsolete-variable" code nil nil [2655 2764])
            ("mouse-wheel-click-event" variable (:default-value (intern (format "mouse-%s" mouse-wheel-click-button))) nil [2765 3256])
            ("mouse-wheel-inhibit-click-time" variable (:default-value 0.35) nil [3258 3413])
            ("mouse-wheel-scroll-amount" variable (:default-value (quote (5 ((shift) . 1) ((control))))) nil [3415 4948])
            ("mouse-wheel-progressive-speed" variable (:default-value t) nil [4950 5267])
            ("mouse-wheel-follow-mouse" variable (:default-value t) nil [5269 5480])
            ("if" code nil nil [5873 6029])
            ("if" code nil nil [5502 5869])
            ("mwheel-inhibit-click-event-timer" variable nil nil [6032 6139])
            ("mwheel-inhibit-click-timeout" function nil nil [6141 6340])
            ("mwheel-filter-click-events" function nil nil [6342 6550])
            ("mwheel-scroll-up-function" variable (:default-value (quote scroll-up)) nil [6552 6649])
            ("mwheel-scroll-down-function" variable (:default-value (quote scroll-down)) nil [6651 6754])
            ("mwheel-scroll" function
               (:user-visible-flag t
                :arguments ("event"))
                nil [6756 10076])
            ("put" code nil nil [10078 10116])
            ("mwheel-installed-bindings" variable nil nil [10118 10156])
            ("define-minor-mode" code nil nil [10158 11315])
            ("mwheel-install" function (:arguments ("uninstall")) nil [11375 11492])
            ("mwheel" package nil nil [11494 11511]))          
      :file "mwheel.el.gz"
      :pointmax 11537
      :fsize 3901
      :lastmodtime '(20707 18685 0 0)
      :unmatched-syntax '((close-paren 6029 . 6030) (symbol 5483 . 5499) (open-paren 5482 . 5483)))
    (semanticdb-table "button.el.gz"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("button" variable
               (:default-value (quote ((t :inherit link)))
                :type "face")
                nil [2216 2310])
            ("button-map" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map [(control 109)] (quote push-button)) (define-key map [mouse-2] (quote push-button)) map)) nil [2312 2631])
            ("button-buffer-map" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map [9] (quote forward-button)) (define-key map "	" (quote backward-button)) (define-key map [backtab] (quote backward-button)) map)) nil [2633 2957])
            ("put" code nil nil [2993 3028])
            ("put" code nil nil [3029 3073])
            ("put" code nil nil [3074 3114])
            ("put" code nil nil [3115 3150])
            ("put" code nil nil [3216 3253])
            ("put" code nil nil [3254 3330])
            ("put" code nil nil [3400 3434])
            ("put" code nil nil [3530 3569])
            ("put" code nil nil [3631 3684])
            ("button-category-symbol" function (:arguments ("type")) nil [4245 4515])
            ("define-button-type" function (:arguments ("name" "properties")) nil [4517 6155])
            ("button-type-put" function (:arguments ("type" "prop" "val")) nil [6157 6296])
            ("button-type-get" function (:arguments ("type" "prop")) nil [6298 6429])
            ("button-type-subtype-p" function (:arguments ("type" "supertype")) nil [6431 6659])
            ("button-start" function (:arguments ("button")) nil [6706 6952])
            ("button-end" function (:arguments ("button")) nil [6954 7185])
            ("button-get" function (:arguments ("button" "prop")) nil [7187 7401])
            ("button-put" function (:arguments ("button" "prop" "val")) nil [7403 8228])
            ("button-activate" function (:arguments ("button" "use-mouse-action")) nil [8230 8784])
            ("button-label" function (:arguments ("button")) nil [8786 8924])
            ("button-type" function (:arguments ("button")) nil [8926 9018])
            ("button-has-type-p" function (:arguments ("button" "type")) nil [9020 9188])
            ("make-button" function (:arguments ("beg" "end" "properties")) nil [9221 10149])
            ("insert-button" function (:arguments ("label" "properties")) nil [10151 10618])
            ("make-text-button" function (:arguments ("beg" "end" "properties")) nil [10657 12856])
            ("insert-text-button" function (:arguments ("label" "properties")) nil [12858 13543])
            ("button-at" function (:arguments ("pos")) nil [13579 13969])
            ("next-button" function (:arguments ("pos" "count-current")) nil [13971 14537])
            ("previous-button" function (:arguments ("pos" "count-current")) nil [14539 15546])
            ("push-button" function
               (:user-visible-flag t
                :arguments ("pos" "use-mouse-action"))
                nil [15568 16690])
            ("forward-button" function
               (:user-visible-flag t
                :arguments ("n" "wrap" "display-message"))
                nil [16692 18211])
            ("backward-button" function
               (:user-visible-flag t
                :arguments ("n" "wrap" "display-message"))
                nil [18213 18717])
            ("button" package nil nil [18720 18737]))          
      :file "button.el.gz"
      :pointmax 18763
      :fsize 5645
      :lastmodtime '(20707 18685 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "font-lock.el.gz"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("syntax" include nil nil [10464 10481])
            ("cl-lib" include nil nil [10501 10518])
            ("font-lock" customgroup
               (:user-visible-flag t
                :value (quote ((jit-lock custom-group))))
                nil [10555 10797])
            ("font-lock-faces" customgroup (:user-visible-flag t) nil [10799 10905])
            ("font-lock-extra-types" customgroup (:user-visible-flag t) nil [10907 11029])
            ("font-lock-maximum-size" variable (:default-value 256000) nil [11052 12108])
            ("make-obsolete-variable" code nil nil [12109 12168])
            ("font-lock-maximum-decoration" variable (:default-value t) nil [12170 13300])
            ("font-lock-verbose" variable nil nil [13302 13615])
            ("font-lock-comment-face" variable (:default-value (quote font-lock-comment-face)) nil [14289 14380])
            ("font-lock-comment-delimiter-face" variable (:default-value (quote font-lock-comment-delimiter-face)) nil [14382 14502])
            ("font-lock-string-face" variable (:default-value (quote font-lock-string-face)) nil [14504 14592])
            ("font-lock-doc-face" variable (:default-value (quote font-lock-doc-face)) nil [14594 14682])
            ("font-lock-keyword-face" variable (:default-value (quote font-lock-keyword-face)) nil [14684 14775])
            ("font-lock-builtin-face" variable (:default-value (quote font-lock-builtin-face)) nil [14777 14868])
            ("font-lock-function-name-face" variable (:default-value (quote font-lock-function-name-face)) nil [14870 14978])
            ("font-lock-variable-name-face" variable (:default-value (quote font-lock-variable-name-face)) nil [14980 15088])
            ("font-lock-type-face" variable (:default-value (quote font-lock-type-face)) nil [15090 15187])
            ("font-lock-constant-face" variable (:default-value (quote font-lock-constant-face)) nil [15189 15298])
            ("font-lock-warning-face" variable (:default-value (quote font-lock-warning-face)) nil [15300 15411])
            ("font-lock-negation-char-face" variable (:default-value (quote font-lock-negation-char-face)) nil [15413 15581])
            ("font-lock-preprocessor-face" variable (:default-value (quote font-lock-preprocessor-face)) nil [15583 15698])
            ("define-obsolete-variable-alias" code nil nil [15700 15792])
            ("font-lock-keywords" variable nil nil [15823 21652])
            ("font-lock-keywords-alist" variable nil nil [21654 22249])
            ("put" code nil nil [22250 22305])
            ("font-lock-removed-keywords-alist" variable nil nil [22307 22698])
            ("font-lock-keywords-only" variable nil nil [22700 22851])
            ("font-lock-keywords-case-fold-search" variable nil nil [22853 23090])
            ("make-variable-buffer-local" code nil nil [23091 23156])
            ("font-lock-syntactically-fontified" variable nil nil [23158 23377])
            ("make-variable-buffer-local" code nil nil [23378 23441])
            ("font-lock-syntactic-face-function" variable (:default-value (lambda (state) (if (nth 3 state) font-lock-string-face font-lock-comment-face))) nil [23443 23860])
            ("font-lock-syntactic-keywords" variable nil nil [23862 25087])
            ("make-obsolete-variable" code nil nil [25088 25201])
            ("font-lock-syntax-table" variable nil nil [25203 25396])
            ("font-lock-beginning-of-syntax-function" variable nil nil [25398 26020])
            ("make-obsolete-variable" code nil nil [26021 26144])
            ("font-lock-mark-block-function" variable nil nil [26146 26412])
            ("font-lock-fontify-buffer-function" variable (:default-value (quote font-lock-default-fontify-buffer)) nil [26414 26584])
            ("font-lock-unfontify-buffer-function" variable (:default-value (quote font-lock-default-unfontify-buffer)) nil [26586 26808])
            ("font-lock-fontify-region-function" variable (:default-value (quote font-lock-default-fontify-region)) nil [26810 27143])
            ("font-lock-unfontify-region-function" variable (:default-value (quote font-lock-default-unfontify-region)) nil [27145 27381])
            ("font-lock-inhibit-thing-lock" variable nil nil [27383 27631])
            ("font-lock-multiline" variable nil nil [27633 27960])
            ("font-lock-fontified" variable nil nil [27962 27994])
            ("font-lock-face-attributes" variable nil nil [28486 28520])
            ("save-buffer-state" function (:arguments ("body")) nil [28195 28446])
            ("font-lock-specified-p" function (:arguments ("mode")) nil [28556 28980])
            ("font-lock-initial-fontify" function nil nil [28982 29544])
            ("font-lock-mode-internal" function (:arguments ("arg")) nil [29546 29967])
            ("font-lock-add-keywords" function (:arguments ("mode" "keywords" "how")) nil [29969 33686])
            ("font-lock-update-removed-keyword-alist" function (:arguments ("mode" "keywords" "how")) nil [33688 34776])
            ("font-lock-remove-keywords" function (:arguments ("mode" "keywords")) nil [35597 38247])
            ("font-lock-support-mode" variable (:default-value (quote jit-lock-mode)) nil [38591 40270])
            ("fast-lock-mode" variable nil nil [40272 40295])
            ("lazy-lock-mode" variable nil nil [40296 40319])
            ("jit-lock-mode" variable nil nil [40320 40342])
            ("declare-function" code nil nil [40344 40405])
            ("declare-function" code nil nil [40406 40469])
            ("declare-function" code nil nil [40470 40515])
            ("declare-function" code nil nil [40516 40577])
            ("declare-function" code nil nil [40578 40641])
            ("declare-function" code nil nil [40642 40687])
            ("font-lock-turn-on-thing-lock" function nil nil [40689 41581])
            ("font-lock-turn-off-thing-lock" function nil nil [41583 41942])
            ("font-lock-after-fontify-buffer" function nil nil [41944 42266])
            ("font-lock-after-unfontify-buffer" function nil nil [42268 42804])
            ("font-lock-extend-after-change-region-function" variable nil nil [45456 46206])
            ("make-variable-buffer-local" code nil nil [46207 46282])
            ("font-lock-fontify-buffer" function (:user-visible-flag t) nil [46284 46587])
            ("font-lock-unfontify-buffer" function nil nil [46589 46674])
            ("font-lock-fontify-region" function (:arguments ("beg" "end" "loudly")) nil [46676 46986])
            ("font-lock-unfontify-region" function (:arguments ("beg" "end")) nil [46988 47217])
            ("font-lock-default-fontify-buffer" function nil nil [47219 47936])
            ("font-lock-default-unfontify-buffer" function nil nil [47938 48277])
            ("font-lock-dont-widen" variable nil nil [48279 48482])
            ("font-lock-beg" variable nil nil [48485 48507])
            ("font-lock-end" variable nil nil [48508 48530])
            ("font-lock-extend-region-functions" variable (:default-value (quote (font-lock-extend-region-wholelines font-lock-extend-region-multiline))) nil [48531 49838])
            ("make-variable-buffer-local" code nil nil [49969 50032])
            ("font-lock-extend-region-multiline" function nil nil [50034 50803])
            ("font-lock-extend-region-wholelines" function nil nil [50805 51232])
            ("font-lock-default-fontify-region" function (:arguments ("beg" "end" "loudly")) nil [51234 53198])
            ("font-lock-extra-managed-props" variable nil nil [53641 53854])
            ("font-lock-default-unfontify-region" function (:arguments ("beg" "end")) nil [53856 54227])
            ("font-lock-after-change-function" function (:arguments ("beg" "end" "old-len")) nil [54285 55422])
            ("jit-lock-start" variable nil nil [55424 55447])
            ("jit-lock-end" variable nil nil [55448 55469])
            ("font-lock-extend-jit-lock-region-after-change" function (:arguments ("beg" "end" "old-len")) nil [55470 58748])
            ("font-lock-fontify-block" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [58750 59902])
            ("font-lock-prepend-text-property" function (:arguments ("start" "end" "prop" "value" "object")) nil [60336 61265])
            ("font-lock-append-text-property" function (:arguments ("start" "end" "prop" "value" "object")) nil [61267 62193])
            ("font-lock-fillin-text-property" function (:arguments ("start" "end" "prop" "value" "object")) nil [62195 62828])
            ("font-lock-apply-syntactic-highlight" function (:arguments ("highlight")) nil [65182 66513])
            ("font-lock-fontify-syntactic-anchored-keywords" function (:arguments ("keywords" "limit")) nil [66515 67564])
            ("font-lock-fontify-syntactic-keywords-region" function (:arguments ("start" "end")) nil [67566 69376])
            ("font-lock-comment-start-skip" variable nil nil [69473 69588])
            ("font-lock-comment-end-skip" variable nil nil [69590 69696])
            ("font-lock-fontify-syntactically-region" function (:arguments ("start" "end" "loudly")) nil [69698 71374])
            ("font-lock-apply-highlight" function (:arguments ("highlight")) nil [71469 72993])
            ("font-lock-fontify-anchored-keywords" function (:arguments ("keywords" "limit")) nil [72995 74407])
            ("font-lock-fontify-keywords-region" function (:arguments ("start" "end" "loudly")) nil [74409 76798])
            ("font-lock-compile-keywords" function (:arguments ("keywords" "syntactic-keywords")) nil [76876 78700])
            ("font-lock-compile-keyword" function (:arguments ("keyword")) nil [78702 79557])
            ("font-lock-eval-keywords" function (:arguments ("keywords")) nil [79559 79815])
            ("font-lock-value-in-major-mode" function (:arguments ("alist")) nil [79817 80092])
            ("font-lock-choose-keywords" function (:arguments ("keywords" "level")) nil [80094 80482])
            ("font-lock-set-defaults" variable nil nil [80484 80519])
            ("font-lock-refresh-defaults" function nil nil [80556 81132])
            ("font-lock-major-mode" variable nil nil [81134 81232])
            ("make-variable-buffer-local" code nil nil [81233 81283])
            ("font-lock-set-defaults" function nil nil [81285 84210])
            ("font-lock-comment-face" variable
               (:default-value (quote ((((class grayscale) (background light)) :foreground "DimGray" :weight bold :slant italic) (((class grayscale) (background dark)) :foreground "LightGray" :weight bold :slant italic) (((class color) (min-colors 88) (background light)) :foreground "Firebrick") (((class color) (min-colors 88) (background dark)) :foreground "chocolate1") (((class color) (min-colors 16) (background light)) :foreground "red") (((class color) (min-colors 16) (background dark)) :foreground "red1") (((class color) (min-colors 8) (background light)) :foreground "red") (((class color) (min-colors 8) (background dark)) :foreground "yellow") (t :weight bold :slant italic)))
                :type "face")
                nil [84335 85172])
            ("font-lock-comment-delimiter-face" variable
               (:default-value (quote ((default :inherit font-lock-comment-face)))
                :type "face")
                nil [85174 85351])
            ("font-lock-string-face" variable
               (:default-value (quote ((((class grayscale) (background light)) :foreground "DimGray" :slant italic) (((class grayscale) (background dark)) :foreground "LightGray" :slant italic) (((class color) (min-colors 88) (background light)) :foreground "VioletRed4") (((class color) (min-colors 88) (background dark)) :foreground "LightSalmon") (((class color) (min-colors 16) (background light)) :foreground "RosyBrown") (((class color) (min-colors 16) (background dark)) :foreground "LightSalmon") (((class color) (min-colors 8)) :foreground "green") (t :slant italic)))
                :type "face")
                nil [85353 86034])
            ("font-lock-doc-face" variable
               (:default-value (quote ((t :inherit font-lock-string-face)))
                :type "face")
                nil [86036 86187])
            ("font-lock-keyword-face" variable
               (:default-value (quote ((((class grayscale) (background light)) :foreground "LightGray" :weight bold) (((class grayscale) (background dark)) :foreground "DimGray" :weight bold) (((class color) (min-colors 88) (background light)) :foreground "Purple") (((class color) (min-colors 88) (background dark)) :foreground "Cyan1") (((class color) (min-colors 16) (background light)) :foreground "Purple") (((class color) (min-colors 16) (background dark)) :foreground "Cyan") (((class color) (min-colors 8)) :foreground "cyan" :weight bold) (t :weight bold)))
                :type "face")
                nil [86189 86861])
            ("font-lock-builtin-face" variable
               (:default-value (quote ((((class grayscale) (background light)) :foreground "LightGray" :weight bold) (((class grayscale) (background dark)) :foreground "DimGray" :weight bold) (((class color) (min-colors 88) (background light)) :foreground "dark slate blue") (((class color) (min-colors 88) (background dark)) :foreground "LightSteelBlue") (((class color) (min-colors 16) (background light)) :foreground "Orchid") (((class color) (min-colors 16) (background dark)) :foreground "LightSteelBlue") (((class color) (min-colors 8)) :foreground "blue" :weight bold) (t :weight bold)))
                :type "face")
                nil [86863 87562])
            ("font-lock-function-name-face" variable
               (:default-value (quote ((((class color) (min-colors 88) (background light)) :foreground "Blue1") (((class color) (min-colors 88) (background dark)) :foreground "LightSkyBlue") (((class color) (min-colors 16) (background light)) :foreground "Blue") (((class color) (min-colors 16) (background dark)) :foreground "LightSkyBlue") (((class color) (min-colors 8)) :foreground "blue" :weight bold) (t :inverse-video t :weight bold)))
                :type "face")
                nil [87564 88115])
            ("font-lock-variable-name-face" variable
               (:default-value (quote ((((class grayscale) (background light)) :foreground "Gray90" :weight bold :slant italic) (((class grayscale) (background dark)) :foreground "DimGray" :weight bold :slant italic) (((class color) (min-colors 88) (background light)) :foreground "sienna") (((class color) (min-colors 88) (background dark)) :foreground "LightGoldenrod") (((class color) (min-colors 16) (background light)) :foreground "DarkGoldenrod") (((class color) (min-colors 16) (background dark)) :foreground "LightGoldenrod") (((class color) (min-colors 8)) :foreground "yellow" :weight light) (t :weight bold :slant italic)))
                :type "face")
                nil [88117 88878])
            ("font-lock-type-face" variable
               (:default-value (quote ((((class grayscale) (background light)) :foreground "Gray90" :weight bold) (((class grayscale) (background dark)) :foreground "DimGray" :weight bold) (((class color) (min-colors 88) (background light)) :foreground "ForestGreen") (((class color) (min-colors 88) (background dark)) :foreground "PaleGreen") (((class color) (min-colors 16) (background light)) :foreground "ForestGreen") (((class color) (min-colors 16) (background dark)) :foreground "PaleGreen") (((class color) (min-colors 8)) :foreground "green") (t :weight bold :underline t)))
                :type "face")
                nil [88880 89574])
            ("font-lock-constant-face" variable
               (:default-value (quote ((((class grayscale) (background light)) :foreground "LightGray" :weight bold :underline t) (((class grayscale) (background dark)) :foreground "Gray50" :weight bold :underline t) (((class color) (min-colors 88) (background light)) :foreground "dark cyan") (((class color) (min-colors 88) (background dark)) :foreground "Aquamarine") (((class color) (min-colors 16) (background light)) :foreground "CadetBlue") (((class color) (min-colors 16) (background dark)) :foreground "Aquamarine") (((class color) (min-colors 8)) :foreground "magenta") (t :weight bold :underline t)))
                :type "face")
                nil [89576 90315])
            ("font-lock-warning-face" variable
               (:default-value (quote ((t :inherit error)))
                :type "face")
                nil [90317 90451])
            ("font-lock-negation-char-face" variable
               (:default-value (quote ((t nil)))
                :type "face")
                nil [90453 90599])
            ("font-lock-preprocessor-face" variable
               (:default-value (quote ((t :inherit font-lock-builtin-face)))
                :type "face")
                nil [90601 90772])
            ("font-lock-regexp-grouping-backslash" variable
               (:default-value (quote ((t :inherit bold)))
                :type "face")
                nil [90774 90944])
            ("font-lock-regexp-grouping-construct" variable
               (:default-value (quote ((t :inherit bold)))
                :type "face")
                nil [90946 91119])
            ("font-lock-match-c-style-declaration-item-and-skip-to-next" function (:arguments ("limit")) nil [95959 97988])
            ("cpp-font-lock-keywords-source-directives" variable
               (:constant-flag t
                :default-value "define\\|e\\(?:l\\(?:if\\|se\\)\\|ndif\\|rror\\)\\|file\\|i\\(?:f\\(?:n?def\\)?\\|mport\\|nclude\\)\\|line\\|pragma\\|undef\\|warning")
                nil [98613 98859])
            ("cpp-font-lock-keywords-source-depth" variable (:constant-flag t) nil [99114 99296])
            ("cpp-font-lock-keywords" variable
               (:constant-flag t
                :default-value (let* ((directives cpp-font-lock-keywords-source-directives) (directives-depth cpp-font-lock-keywords-source-depth)) (list (quote ("^#[ 	]*\\(?:error\\|warning\\)[ 	]+\\(.+\\)" 1 font-lock-warning-face prepend)) (quote ("^#[ 	]*\\(?:import\\|include\\)[ 	]*\\(<[^>\"
]*>?\\)" 1 font-lock-string-face prepend)) (quote ("^#[ 	]*define[ 	]+\\([[:alpha:]_][[:alnum:]_$]*\\)(" (1 font-lock-function-name-face prepend) ((lambda (limit) (re-search-forward "\\(?:\\([[:alpha:]_][[:alnum:]_]*\\)[,]?\\)" (or (save-excursion (re-search-forward ")" limit t)) limit) t)) nil nil (1 font-lock-variable-name-face prepend)))) (quote ("^#[ 	]*\\(?:elif\\|if\\)\\>" ("\\<\\(defined\\)\\>[ 	]*(?\\([[:alpha:]_][[:alnum:]_]*\\)?" nil nil (1 font-lock-builtin-face prepend) (2 font-lock-variable-name-face prepend t)))) (list (concat "^\\(#[ 	]*\\(?:" directives "\\)\\)\\>[ 	!]*\\([[:alpha:]_][[:alnum:]_]*\\)?") (quote (1 font-lock-preprocessor-face prepend)) (list (+ 2 directives-depth) (quote font-lock-variable-name-face) nil t)))))
                nil [99298 101105])
            ("lisp-font-lock-keywords-1" variable
               (:constant-flag t
                :default-value (eval-when-compile (\` (((\, (concat "(\\(def\\(" "\\(advice\\|alias\\|generic\\|macro\\*?\\|method\\|" "setf\\|subst\\*?\\|un\\*?\\|" "ine-\\(condition\\|" "\\(?:derived\\|\\(?:global\\(?:ized\\)?-\\)?minor\\|generic\\)-mode\\|" "method-combination\\|setf-expander\\|skeleton\\|widget\\|" "function\\|\\(compiler\\|modify\\|symbol\\)-macro\\)\\)\\|" "\\(const\\(ant\\)?\\|custom\\|varalias\\|face\\|parameter\\|var\\)\\|" "\\(class\\|group\\|theme\\|package\\|struct\\|type\\)" "\\)\\)\\>" "[ 	'(]*" "\\(setf[ 	]+\\sw+\\|\\sw+\\)?")) (1 font-lock-keyword-face) (9 (cond ((match-beginning 3) font-lock-function-name-face) ((match-beginning 6) font-lock-variable-name-face) (t font-lock-type-face)) nil t)) ("^;;;###\\([-a-z]*autoload\\)" 1 font-lock-warning-face prepend) ("\\[\\(\\^\\)" 1 font-lock-negation-char-face prepend)))))
                nil [101119 102387])
            ("lisp-font-lock-keywords-2" variable
               (:constant-flag t
                :default-value (append lisp-font-lock-keywords-1 (eval-when-compile (\` (((\, (concat "(" (regexp-opt (quote ("cond" "if" "while" "while-no-input" "let" "let*" "letrec" "pcase" "pcase-let" "pcase-let*" "prog" "progn" "progv" "prog1" "prog2" "prog*" "inline" "lambda" "save-restriction" "save-excursion" "save-selected-window" "save-window-excursion" "save-match-data" "save-current-buffer" "combine-after-change-calls" "unwind-protect" "condition-case" "condition-case-unless-debug" "track-mouse" "eval-after-load" "eval-and-compile" "eval-when-compile" "eval-when" "eval-next-after-load" "with-case-table" "with-category-table" "with-current-buffer" "with-demoted-errors" "with-electric-help" "with-local-quit" "with-no-warnings" "with-output-to-string" "with-output-to-temp-buffer" "with-selected-window" "with-selected-frame" "with-silent-modifications" "with-syntax-table" "with-temp-buffer" "with-temp-file" "with-temp-message" "with-timeout" "with-timeout-handler" "with-wrapper-hook")) t) "\\>")) . 1) ((\, (concat "(" (regexp-opt (quote ("when" "unless" "case" "ecase" "typecase" "etypecase" "ccase" "ctypecase" "handler-case" "handler-bind" "restart-bind" "restart-case" "in-package" "break" "ignore-errors" "loop" "do" "do*" "dotimes" "dolist" "the" "locally" "proclaim" "declaim" "declare" "symbol-macrolet" "letf" "lexical-let" "lexical-let*" "flet" "labels" "compiler-let" "destructuring-bind" "macrolet" "tagbody" "block" "go" "multiple-value-bind" "multiple-value-prog1" "return" "return-from" "with-accessors" "with-compilation-unit" "with-condition-restarts" "with-hash-table-iterator" "with-input-from-string" "with-open-file" "with-open-stream" "with-output-to-string" "with-package-iterator" "with-simple-restart" "with-slots" "with-standard-io-syntax")) t) "\\>")) . 1) ((\, (concat "(\\(catch\\|throw\\|featurep\\|provide\\|require\\)\\>" "[ 	']*\\(\\sw+\\)?")) (1 font-lock-keyword-face) (2 font-lock-constant-face nil t)) ("(\\(abort\\|assert\\|warn\\|check-type\\|cerror\\|error\\|signal\\)\\>" 1 font-lock-warning-face) ("\\\\\\\\\\[\\(\\sw+\\)\\]" 1 font-lock-constant-face prepend) ("`\\(\\sw\\sw+\\)'" 1 font-lock-constant-face prepend) ("\\<:\\sw+\\>" 0 font-lock-builtin-face) ("\\<\\&\\sw+\\>" . font-lock-type-face) ((lambda (bound) (catch (quote found) (while (re-search-forward "\\(\\\\\\\\\\)\\(?:\\(\\\\\\\\\\)\\|\\((\\(?:\\?[0-9]*:\\)?\\|[|)]\\)\\)" bound t) (unless (match-beginning 2) (let ((face (get-text-property (1- (point)) (quote face)))) (when (or (and (listp face) (memq (quote font-lock-string-face) face)) (eq (quote font-lock-string-face) face)) (throw (quote found) t))))))) (1 (quote font-lock-regexp-grouping-backslash) prepend) (3 (quote font-lock-regexp-grouping-construct) prepend)))))))
                nil [102389 106532])
            ("lisp-font-lock-keywords" variable (:default-value lisp-font-lock-keywords-1) nil [106534 106644])
            ("font-lock" package nil nil [106647 106667]))          
      :file "font-lock.el.gz"
      :pointmax 106696
      :fsize 27964
      :lastmodtime '(20707 18685 0 0)
      :unmatched-syntax '((close-paren 28520 . 28521) (symbol 28058 . 28075) (open-paren 28057 . 28058) (close-paren 10518 . 10519) (symbol 10483 . 10500) (open-paren 10482 . 10483)))
    (semanticdb-table "ezimage.el.gz"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("condition-case" code nil nil [1309 1385])
            ("ezimage-use-images" variable (:default-value (if (featurep (quote xemacs)) (and (fboundp (quote make-image-specifier)) window-system) (and (display-images-p) (image-type-available-p (quote xpm))))) nil [1397 1689])
            ("if" code nil nil [1749 4257])
            ("ezimage-directory" variable
               (:default-value ((:type xpm :file "ezimage/dir.xpm" :ascent center))
                :type "image")
                nil [4260 4383])
            ("ezimage-directory-plus" variable
               (:default-value ((:type xpm :file "ezimage/dir-plus.xpm" :ascent center))
                :type "image")
                nil [4385 4538])
            ("ezimage-directory-minus" variable
               (:default-value ((:type xpm :file "ezimage/dir-minus.xpm" :ascent center))
                :type "image")
                nil [4540 4693])
            ("ezimage-page-plus" variable
               (:default-value ((:type xpm :file "ezimage/page-plus.xpm" :ascent center))
                :type "image")
                nil [4695 4838])
            ("ezimage-page-minus" variable
               (:default-value ((:type xpm :file "ezimage/page-minus.xpm" :ascent center))
                :type "image")
                nil [4840 4983])
            ("ezimage-page" variable
               (:default-value ((:type xpm :file "ezimage/page.xpm" :ascent center))
                :type "image")
                nil [4985 5123])
            ("ezimage-tag" variable
               (:default-value ((:type xpm :file "ezimage/tag.xpm" :ascent center))
                :type "image")
                nil [5125 5229])
            ("ezimage-tag-plus" variable
               (:default-value ((:type xpm :file "ezimage/tag-plus.xpm" :ascent center))
                :type "image")
                nil [5231 5358])
            ("ezimage-tag-minus" variable
               (:default-value ((:type xpm :file "ezimage/tag-minus.xpm" :ascent center))
                :type "image")
                nil [5360 5481])
            ("ezimage-tag-gt" variable
               (:default-value ((:type xpm :file "ezimage/tag-gt.xpm" :ascent center))
                :type "image")
                nil [5483 5619])
            ("ezimage-tag-v" variable
               (:default-value ((:type xpm :file "ezimage/tag-v.xpm" :ascent center))
                :type "image")
                nil [5621 5753])
            ("ezimage-tag-type" variable
               (:default-value ((:type xpm :file "ezimage/tag-type.xpm" :ascent center))
                :type "image")
                nil [5755 5896])
            ("ezimage-box-plus" variable
               (:default-value ((:type xpm :file "ezimage/box-plus.xpm" :ascent center))
                :type "image")
                nil [5898 6014])
            ("ezimage-box-minus" variable
               (:default-value ((:type xpm :file "ezimage/box-minus.xpm" :ascent center))
                :type "image")
                nil [6016 6133])
            ("ezimage-mail" variable
               (:default-value ((:type xpm :file "ezimage/mail.xpm" :ascent center))
                :type "image")
                nil [6135 6242])
            ("ezimage-checkout" variable
               (:default-value ((:type xpm :file "ezimage/checkmark.xpm" :ascent center))
                :type "image")
                nil [6244 6402])
            ("ezimage-object" variable
               (:default-value ((:type xpm :file "ezimage/bits.xpm" :ascent center))
                :type "image")
                nil [6404 6533])
            ("ezimage-object-out-of-date" variable
               (:default-value ((:type xpm :file "ezimage/bitsbang.xpm" :ascent center))
                :type "image")
                nil [6535 6709])
            ("ezimage-label" variable
               (:default-value ((:type xpm :file "ezimage/label.xpm" :ascent center))
                :type "image")
                nil [6711 6827])
            ("ezimage-lock" variable
               (:default-value ((:type xpm :file "ezimage/lock.xpm" :ascent center))
                :type "image")
                nil [6829 6964])
            ("ezimage-unlock" variable
               (:default-value ((:type xpm :file "ezimage/unlock.xpm" :ascent center))
                :type "image")
                nil [6966 7082])
            ("ezimage-key" variable
               (:default-value ((:type xpm :file "ezimage/key.xpm" :ascent center))
                :type "image")
                nil [7084 7183])
            ("ezimage-document-tag" variable
               (:default-value ((:type xpm :file "ezimage/doc.xpm" :ascent center))
                :type "image")
                nil [7185 7325])
            ("ezimage-document-plus" variable
               (:default-value ((:type xpm :file "ezimage/doc-plus.xpm" :ascent center))
                :type "image")
                nil [7327 7470])
            ("ezimage-document-minus" variable
               (:default-value ((:type xpm :file "ezimage/doc-minus.xpm" :ascent center))
                :type "image")
                nil [7472 7615])
            ("ezimage-info-tag" variable
               (:default-value ((:type xpm :file "ezimage/info.xpm" :ascent center))
                :type "image")
                nil [7617 7757])
            ("ezimage-expand-image-button-alist" variable (:default-value (quote (("<+>" . ezimage-directory-plus) ("<->" . ezimage-directory-minus) ("< >" . ezimage-directory) ("[+]" . ezimage-page-plus) ("[-]" . ezimage-page-minus) ("[?]" . ezimage-page) ("[ ]" . ezimage-page) ("{+}" . ezimage-box-plus) ("{-}" . ezimage-box-minus) ("*" . ezimage-checkout) ("#" . ezimage-object) ("!" . ezimage-object-out-of-date) ("%" . ezimage-lock)))) nil [7759 8351])
            ("ezimage-insert-image-button-maybe" function (:arguments ("start" "length" "string")) nil [8353 9303])
            ("ezimage-image-over-string" function (:arguments ("string" "alist")) nil [9305 9685])
            ("ezimage-insert-over-text" function (:arguments ("image" "start" "end" "string")) nil [9687 10226])
            ("ezimage-image-association-dump" function (:user-visible-flag t) nil [10228 11030])
            ("ezimage-image-dump" function (:user-visible-flag t) nil [11032 11746])
            ("ezimage-all-images" function nil nil [11748 12032])
            ("ezimage" package nil nil [12034 12052]))          
      :file "ezimage.el.gz"
      :pointmax 12080
      :fsize 3589
      :lastmodtime '(20707 18685 0 0)
      :unmatched-syntax '((close-paren 4257 . 4258) (symbol 1731 . 1747) (open-paren 1730 . 1731)))
    (semanticdb-table "custom.el.gz"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("widget" include nil nil [1232 1249])
            ("custom-define-hook" variable nil nil [1251 1400])
            ("custom-dont-initialize" variable nil nil [1402 1585])
            ("custom-current-group-alist" variable nil nil [1587 1700])
            ("custom-initialize-default" function (:arguments ("symbol" "value")) nil [1730 2238])
            ("custom-initialize-set" function (:arguments ("symbol" "value")) nil [2240 2768])
            ("custom-initialize-reset" function (:arguments ("symbol" "value")) nil [2770 3491])
            ("custom-initialize-changed" function (:arguments ("symbol" "value")) nil [3493 4072])
            ("custom-delayed-init-variables" variable nil nil [4074 4171])
            ("custom-initialize-delay" function (:arguments ("symbol" "_value")) nil [4173 5297])
            ("custom-declare-variable" function (:arguments ("symbol" "default" "doc" "args")) nil [5299 7898])
            ("defcustom" function (:arguments ("symbol" "standard" "doc" "args")) nil [7900 13974])
            ("defface" function (:arguments ("face" "spec" "doc" "args")) nil [14002 16913])
            ("custom-current-group" function nil nil [16942 17031])
            ("custom-declare-group" function (:arguments ("symbol" "members" "doc" "args")) nil [17033 18094])
            ("defgroup" function (:arguments ("symbol" "members" "doc" "args")) nil [18096 19256])
            ("custom-add-to-group" function (:arguments ("group" "option" "widget")) nil [19258 19604])
            ("custom-group-of-mode" function (:arguments ("mode")) nil [19606 20008])
            ("custom-handle-all-keywords" function (:arguments ("symbol" "args" "type")) nil [20027 20617])
            ("custom-handle-keyword" function (:arguments ("symbol" "keyword" "value" "type")) nil [20619 21330])
            ("custom-add-dependencies" function (:arguments ("symbol" "value")) nil [21332 22085])
            ("custom-add-option" function (:arguments ("symbol" "option")) nil [22087 22538])
            ("defalias" code nil nil [22539 22595])
            ("custom-add-link" function (:arguments ("symbol" "widget")) nil [22597 22833])
            ("custom-add-version" function (:arguments ("symbol" "version")) nil [22835 22985])
            ("custom-add-package-version" function (:arguments ("symbol" "version")) nil [22987 23161])
            ("custom-add-load" function (:arguments ("symbol" "load")) nil [23163 23459])
            ("custom-autoload" function (:arguments ("symbol" "load" "noset")) nil [23461 23747])
            ("custom-variable-p" function (:arguments ("variable")) nil [23749 24182])
            ("define-obsolete-function-alias" code nil nil [24184 24259])
            ("custom-note-var-changed" function (:arguments ("variable")) nil [24261 24556])
            ("custom-load-recursion" variable nil nil [24699 24775])
            ("custom-load-symbol" function (:arguments ("symbol")) nil [24777 26034])
            ("custom-local-buffer" variable nil nil [26037 26357])
            ("put" code nil nil [26358 26403])
            ("custom-set-default" function (:arguments ("variable" "value")) nil [26405 26786])
            ("custom-set-minor-mode" function (:arguments ("variable" "value")) nil [26788 27212])
            ("custom-quote" function (:arguments ("sexp")) nil [27214 27552])
            ("customize-mark-to-save" function (:arguments ("symbol")) nil [27554 28717])
            ("customize-mark-as-set" function (:arguments ("symbol")) nil [28719 29874])
            ("custom-reevaluate-setting" function (:arguments ("symbol")) nil [29876 30348])
            ("custom-known-themes" variable (:default-value (quote (user changed))) nil [32175 32563])
            ("custom-theme-p" function (:arguments ("theme")) nil [32565 32674])
            ("custom-check-theme" function (:arguments ("theme")) nil [32676 32854])
            ("custom-push-theme" function (:arguments ("prop" "symbol" "theme" "mode" "value")) nil [32856 35001])
            ("custom-fix-face-spec" function (:arguments ("spec")) nil [35003 35773])
            ("custom-set-variables" function (:arguments ("args")) nil [35776 36387])
            ("custom-theme-set-variables" function (:arguments ("theme" "args")) nil [36389 39862])
            ("deftheme" function (:arguments ("theme" "doc" "ignored")) nil [40458 41079])
            ("custom-declare-theme" function (:arguments ("theme" "feature" "doc" "ignored")) nil [41081 41569])
            ("custom-make-theme-feature" function (:arguments ("theme")) nil [41571 42076])
            ("custom-theme-directory" variable (:default-value user-emacs-directory) nil [42100 42447])
            ("custom-theme-load-path" variable (:default-value (list (quote custom-theme-directory) t)) nil [42449 43250])
            ("custom--inhibit-theme-enable" variable nil nil [43252 43538])
            ("provide-theme" function (:arguments ("theme")) nil [43540 43938])
            ("custom-safe-themes" variable (:default-value (quote (default))) nil [43940 44560])
            ("load-theme" function
               (:user-visible-flag t
                :arguments ("theme" "no-confirm" "no-enable"))
                nil [44562 47438])
            ("custom-theme-load-confirm" function (:arguments ("hash")) nil [47440 48190])
            ("custom-theme-name-valid-p" function (:arguments ("name")) nil [48192 48457])
            ("custom-available-themes" function nil nil [48459 48991])
            ("custom-theme--load-path" function nil nil [48993 49312])
            ("enable-theme" function
               (:user-visible-flag t
                :arguments ("theme"))
                nil [49359 50595])
            ("custom-enabled-themes" variable nil nil [50597 51907])
            ("custom-theme-enabled-p" function (:arguments ("theme")) nil [51909 52027])
            ("disable-theme" function
               (:user-visible-flag t
                :arguments ("theme"))
                nil [52029 53628])
            ("custom--frame-color-default" function (:arguments ("frame" "attribute" "resource-attr" "resource-class" "tty-default" "x-default")) nil [53630 53990])
            ("custom-variable-theme-value" function (:arguments ("variable")) nil [53992 54385])
            ("custom-theme-recalc-variable" function (:arguments ("variable")) nil [54387 54842])
            ("custom-theme-recalc-face" function (:arguments ("face")) nil [54844 55116])
            ("custom-theme-reset-variables" function (:arguments ("theme" "args")) nil [55333 55704])
            ("custom-reset-variables" function (:arguments ("args")) nil [55706 56047])
            ("while" code nil nil [56128 56307])
            ("custom" package nil nil [56309 56326]))          
      :file "custom.el.gz"
      :pointmax 56352
      :fsize 16330
      :lastmodtime '(20707 18685 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "widget.el.gz"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("define-widget-keywords" function (:arguments ("_keys")) nil [1399 1853])
            ("put" code nil nil [3047 3085])
            ("define-widget" function (:arguments ("name" "class" "doc" "args")) nil [3125 3681])
            ("defalias" code nil nil [3742 3787])
            ("widget" package nil nil [3803 3820]))          
      :file "widget.el.gz"
      :pointmax 3846
      :fsize 1811
      :lastmodtime '(20707 18685 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "ibuffer.el.gz"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("dired" include nil nil [1198 1214])
            ("ibuf-macs" include nil nil [1175 1195])
            ("cl-lib" include nil nil [1155 1172])
            ("font-core" include nil nil [1217 1237])
            ("ibuffer-auto-mode" variable nil nil [1369 1395])
            ("ibuffer-cached-filter-formats" variable nil nil [1396 1434])
            ("ibuffer-compiled-filter-formats" variable nil nil [1435 1475])
            ("ibuffer-filter-format-alist" variable nil nil [1476 1512])
            ("ibuffer-filter-group-kill-ring" variable nil nil [1513 1552])
            ("ibuffer-filter-groups" variable nil nil [1553 1583])
            ("ibuffer-filtering-qualifiers" variable nil nil [1584 1621])
            ("ibuffer-header-line-format" variable nil nil [1622 1657])
            ("ibuffer-hidden-filter-groups" variable nil nil [1658 1695])
            ("ibuffer-inline-columns" variable nil nil [1696 1727])
            ("ibuffer-show-empty-filter-groups" variable nil nil [1728 1769])
            ("ibuffer-tmp-hide-regexps" variable nil nil [1770 1803])
            ("ibuffer-tmp-show-regexps" variable nil nil [1804 1837])
            ("declare-function" code nil nil [1839 1946])
            ("declare-function" code nil nil [1947 2051])
            ("declare-function" code nil nil [2052 2123])
            ("ibuffer" customgroup (:user-visible-flag t) nil [2125 2392])
            ("ibuffer-formats" variable (:default-value (quote ((mark modified read-only " " (name 18 18 :left :elide) " " (size 9 -1 :right) " " (mode 16 16 :left :elide) " " filename-and-process) (mark " " (name 16 -1) " " filename)))) nil [2394 5517])
            ("ibuffer-always-compile-formats" variable (:default-value (featurep (quote bytecomp))) nil [5519 5779])
            ("ibuffer-fontification-alist" variable (:default-value (\` ((10 buffer-read-only font-lock-constant-face) (15 (and buffer-file-name (string-match ibuffer-compressed-file-name-regexp buffer-file-name)) font-lock-doc-face) (20 (string-match "^*" (buffer-name)) font-lock-keyword-face) (25 (and (string-match "^ " (buffer-name)) (null buffer-file-name)) italic) (30 (memq major-mode ibuffer-help-buffer-modes) font-lock-comment-face) (35 (eq major-mode (quote dired-mode)) font-lock-function-name-face)))) nil [5781 6882])
            ("ibuffer-use-other-window" variable nil nil [6884 7021])
            ("ibuffer-default-shrink-to-minimum-size" variable nil nil [7023 7180])
            ("ibuffer-shrink-to-minimum-size" variable nil nil [7181 7224])
            ("ibuffer-display-summary" variable (:default-value t) nil [7226 7341])
            ("ibuffer-truncate-lines" variable (:default-value t) nil [7343 7465])
            ("ibuffer-case-fold-search" variable (:default-value case-fold-search) nil [7467 7599])
            ("ibuffer-default-sorting-mode" variable (:default-value (quote recency)) nil [7601 8128])
            ("ibuffer-sorting-mode" variable nil nil [8129 8162])
            ("ibuffer-last-sorting-mode" variable nil nil [8163 8201])
            ("ibuffer-default-sorting-reversep" variable nil nil [8203 8337])
            ("ibuffer-sorting-reversep" variable nil nil [8338 8375])
            ("ibuffer-elide-long-columns" variable nil nil [8377 8527])
            ("make-obsolete-variable" code nil nil [8528 8683])
            ("ibuffer-eliding-string" variable (:default-value "...") nil [8685 8807])
            ("ibuffer-maybe-show-predicates" variable (:default-value (\` ((\, (lambda (buf) (and (string-match "^ " (buffer-name buf)) (null buffer-file-name))))))) nil [8809 9576])
            ("ibuffer-default-display-maybe-show-predicates" variable nil nil [9578 9749])
            ("ibuffer-display-maybe-show-predicates" variable nil nil [9751 9801])
            ("ibuffer-current-format" variable nil nil [9803 9838])
            ("ibuffer-movement-cycle" variable (:default-value t) nil [9840 9979])
            ("ibuffer-modified-char" variable (:default-value 42) nil [9981 10105])
            ("ibuffer-read-only-char" variable (:default-value 37) nil [10107 10233])
            ("ibuffer-marked-char" variable (:default-value 62) nil [10235 10355])
            ("ibuffer-deletion-char" variable (:default-value 68) nil [10357 10492])
            ("ibuffer-expert" variable nil nil [10494 10631])
            ("ibuffer-view-ibuffer" variable nil nil [10633 10915])
            ("ibuffer-always-show-last-buffer" variable nil nil [10917 11265])
            ("ibuffer-jump-offer-only-visible-buffers" variable nil nil [11267 11483])
            ("ibuffer-use-header-line" variable (:default-value (boundp (quote header-line-format))) nil [11485 11650])
            ("ibuffer-default-directory" variable nil nil [11652 11998])
            ("ibuffer-help-buffer-modes" variable (:default-value (quote (help-mode apropos-mode Info-mode Info-edit-mode))) nil [12000 12169])
            ("ibuffer-compressed-file-name-regexp" variable (:default-value "\\.\\(arj\\|bgz\\|bz2\\|gz\\|lzh\\|taz\\|tgz\\|xz\\|zip\\|z\\)$") nil [12171 12414])
            ("define-obsolete-variable-alias" code nil nil [12416 12484])
            ("ibuffer-hook" variable nil nil [12486 12585])
            ("define-obsolete-variable-alias" code nil nil [12587 12665])
            ("ibuffer-mode-hook" variable nil nil [12667 12777])
            ("ibuffer-load-hook" variable nil nil [12779 12881])
            ("ibuffer-marked-face" variable (:default-value (quote warning)) nil [12883 13000])
            ("ibuffer-deletion-face" variable (:default-value (quote error)) nil [13002 13132])
            ("ibuffer-title-face" variable (:default-value (quote font-lock-type-face)) nil [13134 13253])
            ("ibuffer-filter-group-name-face" variable (:default-value (quote bold)) nil [13255 13387])
            ("ibuffer-directory-abbrev-alist" variable nil nil [13389 13646])
            ("ibuffer-mode-groups-popup" variable (:default-value (let ((groups-map (make-sparse-keymap "Filter Groups"))) (define-key-after groups-map [filters-to-filter-group] (quote (menu-item "Create filter group from current filters..." ibuffer-filters-to-filter-group :enable (and (featurep (quote ibuf-ext)) ibuffer-filtering-qualifiers)))) (define-key-after groups-map [forward-filter-group] (quote (menu-item "Move point to the next filter group" ibuffer-forward-filter-group))) (define-key-after groups-map [backward-filter-group] (quote (menu-item "Move point to the previous filter group" ibuffer-backward-filter-group))) (define-key-after groups-map [jump-to-filter-group] (quote (menu-item "Move point to a specific filter group..." ibuffer-jump-to-filter-group))) (define-key-after groups-map [kill-filter-group] (quote (menu-item "Kill filter group named..." ibuffer-kill-filter-group :enable (and (featurep (quote ibuf-ext)) ibuffer-filter-groups)))) (define-key-after groups-map [yank-filter-group] (quote (menu-item "Yank last killed filter group before..." ibuffer-yank-filter-group :enable (and (featurep (quote ibuf-ext)) ibuffer-filter-group-kill-ring)))) (define-key-after groups-map [pop-filter-group] (quote (menu-item "Remove top filter group" ibuffer-pop-filter-group :enable (and (featurep (quote ibuf-ext)) ibuffer-filter-groups)))) (define-key-after groups-map [clear-filter-groups] (quote (menu-item "Remove all filter groups" ibuffer-clear-filter-groups :enable (and (featurep (quote ibuf-ext)) ibuffer-filter-groups)))) (define-key-after groups-map [pop-filter-group] (quote (menu-item "Decompose filter group..." ibuffer-pop-filter-group :help "\"Unmake\" a filter group" :enable (and (featurep (quote ibuf-ext)) ibuffer-filter-groups)))) (define-key-after groups-map [save-filter-groups] (quote (menu-item "Save current filter groups permanently..." ibuffer-save-filter-groups :enable (and (featurep (quote ibuf-ext)) ibuffer-filter-groups) :help "Use a mnemonic name to store current filter groups"))) (define-key-after groups-map [switch-to-saved-filter-groups] (quote (menu-item "Restore permanently saved filters..." ibuffer-switch-to-saved-filter-groups :enable (and (featurep (quote ibuf-ext)) ibuffer-saved-filter-groups) :help "Replace current filters with a saved stack"))) (define-key-after groups-map [delete-saved-filter-groups] (quote (menu-item "Delete permanently saved filter groups..." ibuffer-delete-saved-filter-groups :enable (and (featurep (quote ibuf-ext)) ibuffer-saved-filter-groups)))) (define-key-after groups-map [set-filter-groups-by-mode] (quote (menu-item "Set current filter groups to filter by mode" ibuffer-set-filter-groups-by-mode))) groups-map)) nil [13648 16538])
            ("ibuffer-mode-map" variable (:default-value (let ((map (make-keymap))) (define-key map (kbd "0") (quote digit-argument)) (define-key map (kbd "1") (quote digit-argument)) (define-key map (kbd "2") (quote digit-argument)) (define-key map (kbd "3") (quote digit-argument)) (define-key map (kbd "4") (quote digit-argument)) (define-key map (kbd "5") (quote digit-argument)) (define-key map (kbd "6") (quote digit-argument)) (define-key map (kbd "7") (quote digit-argument)) (define-key map (kbd "8") (quote digit-argument)) (define-key map (kbd "9") (quote digit-argument)) (define-key map (kbd "m") (quote ibuffer-mark-forward)) (define-key map (kbd "t") (quote ibuffer-toggle-marks)) (define-key map (kbd "u") (quote ibuffer-unmark-forward)) (define-key map (kbd "=") (quote ibuffer-diff-with-file)) (define-key map (kbd "j") (quote ibuffer-jump-to-buffer)) (define-key map (kbd "M-g") (quote ibuffer-jump-to-buffer)) (define-key map (kbd "M-s a C-s") (quote ibuffer-do-isearch)) (define-key map (kbd "M-s a M-C-s") (quote ibuffer-do-isearch-regexp)) (define-key map (kbd "DEL") (quote ibuffer-unmark-backward)) (define-key map (kbd "M-DEL") (quote ibuffer-unmark-all)) (define-key map (kbd "* *") (quote ibuffer-unmark-all)) (define-key map (kbd "* M") (quote ibuffer-mark-by-mode)) (define-key map (kbd "* m") (quote ibuffer-mark-modified-buffers)) (define-key map (kbd "* u") (quote ibuffer-mark-unsaved-buffers)) (define-key map (kbd "* s") (quote ibuffer-mark-special-buffers)) (define-key map (kbd "* r") (quote ibuffer-mark-read-only-buffers)) (define-key map (kbd "* /") (quote ibuffer-mark-dired-buffers)) (define-key map (kbd "* e") (quote ibuffer-mark-dissociated-buffers)) (define-key map (kbd "* h") (quote ibuffer-mark-help-buffers)) (define-key map (kbd "* z") (quote ibuffer-mark-compressed-file-buffers)) (define-key map (kbd ".") (quote ibuffer-mark-old-buffers)) (define-key map (kbd "d") (quote ibuffer-mark-for-delete)) (define-key map (kbd "C-d") (quote ibuffer-mark-for-delete-backwards)) (define-key map (kbd "k") (quote ibuffer-mark-for-delete)) (define-key map (kbd "x") (quote ibuffer-do-kill-on-deletion-marks)) (define-key map (kbd "n") (quote ibuffer-forward-line)) (define-key map (kbd "SPC") (quote forward-line)) (define-key map (kbd "p") (quote ibuffer-backward-line)) (define-key map (kbd "M-}") (quote ibuffer-forward-next-marked)) (define-key map (kbd "M-{") (quote ibuffer-backwards-next-marked)) (define-key map (kbd "l") (quote ibuffer-redisplay)) (define-key map (kbd "g") (quote ibuffer-update)) (define-key map "`" (quote ibuffer-switch-format)) (define-key map "-" (quote ibuffer-add-to-tmp-hide)) (define-key map "+" (quote ibuffer-add-to-tmp-show)) (define-key map "b" (quote ibuffer-bury-buffer)) (define-key map (kbd ",") (quote ibuffer-toggle-sorting-mode)) (define-key map (kbd "s i") (quote ibuffer-invert-sorting)) (define-key map (kbd "s a") (quote ibuffer-do-sort-by-alphabetic)) (define-key map (kbd "s v") (quote ibuffer-do-sort-by-recency)) (define-key map (kbd "s s") (quote ibuffer-do-sort-by-size)) (define-key map (kbd "s f") (quote ibuffer-do-sort-by-filename/process)) (define-key map (kbd "s m") (quote ibuffer-do-sort-by-major-mode)) (define-key map (kbd "/ m") (quote ibuffer-filter-by-used-mode)) (define-key map (kbd "/ M") (quote ibuffer-filter-by-derived-mode)) (define-key map (kbd "/ n") (quote ibuffer-filter-by-name)) (define-key map (kbd "/ c") (quote ibuffer-filter-by-content)) (define-key map (kbd "/ e") (quote ibuffer-filter-by-predicate)) (define-key map (kbd "/ f") (quote ibuffer-filter-by-filename)) (define-key map (kbd "/ >") (quote ibuffer-filter-by-size-gt)) (define-key map (kbd "/ <") (quote ibuffer-filter-by-size-lt)) (define-key map (kbd "/ r") (quote ibuffer-switch-to-saved-filters)) (define-key map (kbd "/ a") (quote ibuffer-add-saved-filters)) (define-key map (kbd "/ x") (quote ibuffer-delete-saved-filters)) (define-key map (kbd "/ d") (quote ibuffer-decompose-filter)) (define-key map (kbd "/ s") (quote ibuffer-save-filters)) (define-key map (kbd "/ p") (quote ibuffer-pop-filter)) (define-key map (kbd "/ !") (quote ibuffer-negate-filter)) (define-key map (kbd "/ t") (quote ibuffer-exchange-filters)) (define-key map (kbd "/ TAB") (quote ibuffer-exchange-filters)) (define-key map (kbd "/ o") (quote ibuffer-or-filter)) (define-key map (kbd "/ g") (quote ibuffer-filters-to-filter-group)) (define-key map (kbd "/ P") (quote ibuffer-pop-filter-group)) (define-key map (kbd "/ D") (quote ibuffer-decompose-filter-group)) (define-key map (kbd "/ /") (quote ibuffer-filter-disable)) (define-key map (kbd "M-n") (quote ibuffer-forward-filter-group)) (define-key map "	" (quote ibuffer-forward-filter-group)) (define-key map (kbd "M-p") (quote ibuffer-backward-filter-group)) (define-key map [backtab] (quote ibuffer-backward-filter-group)) (define-key map (kbd "M-j") (quote ibuffer-jump-to-filter-group)) (define-key map (kbd "C-k") (quote ibuffer-kill-line)) (define-key map (kbd "C-y") (quote ibuffer-yank)) (define-key map (kbd "/ S") (quote ibuffer-save-filter-groups)) (define-key map (kbd "/ R") (quote ibuffer-switch-to-saved-filter-groups)) (define-key map (kbd "/ X") (quote ibuffer-delete-saved-filter-groups)) (define-key map (kbd "/ \\") (quote ibuffer-clear-filter-groups)) (define-key map (kbd "q") (quote ibuffer-quit)) (define-key map (kbd "h") (quote describe-mode)) (define-key map (kbd "?") (quote describe-mode)) (define-key map (kbd "% n") (quote ibuffer-mark-by-name-regexp)) (define-key map (kbd "% m") (quote ibuffer-mark-by-mode-regexp)) (define-key map (kbd "% f") (quote ibuffer-mark-by-file-name-regexp)) (define-key map (kbd "C-t") (quote ibuffer-visit-tags-table)) (define-key map (kbd "|") (quote ibuffer-do-shell-command-pipe)) (define-key map (kbd "!") (quote ibuffer-do-shell-command-file)) (define-key map (kbd "~") (quote ibuffer-do-toggle-modified)) (define-key map (kbd "A") (quote ibuffer-do-view)) (define-key map (kbd "D") (quote ibuffer-do-delete)) (define-key map (kbd "E") (quote ibuffer-do-eval)) (define-key map (kbd "F") (quote ibuffer-do-shell-command-file)) (define-key map (kbd "I") (quote ibuffer-do-query-replace-regexp)) (define-key map (kbd "H") (quote ibuffer-do-view-other-frame)) (define-key map (kbd "N") (quote ibuffer-do-shell-command-pipe-replace)) (define-key map (kbd "M") (quote ibuffer-do-toggle-modified)) (define-key map (kbd "O") (quote ibuffer-do-occur)) (define-key map (kbd "P") (quote ibuffer-do-print)) (define-key map (kbd "Q") (quote ibuffer-do-query-replace)) (define-key map (kbd "R") (quote ibuffer-do-rename-uniquely)) (define-key map (kbd "S") (quote ibuffer-do-save)) (define-key map (kbd "T") (quote ibuffer-do-toggle-read-only)) (define-key map (kbd "U") (quote ibuffer-do-replace-regexp)) (define-key map (kbd "V") (quote ibuffer-do-revert)) (define-key map (kbd "W") (quote ibuffer-do-view-and-eval)) (define-key map (kbd "X") (quote ibuffer-do-shell-command-pipe)) (define-key map (kbd "k") (quote ibuffer-do-kill-lines)) (define-key map (kbd "w") (quote ibuffer-copy-filename-as-kill)) (define-key map (kbd "RET") (quote ibuffer-visit-buffer)) (define-key map (kbd "e") (quote ibuffer-visit-buffer)) (define-key map (kbd "f") (quote ibuffer-visit-buffer)) (define-key map (kbd "C-x C-f") (quote ibuffer-find-file)) (define-key map (kbd "o") (quote ibuffer-visit-buffer-other-window)) (define-key map (kbd "C-o") (quote ibuffer-visit-buffer-other-window-noselect)) (define-key map (kbd "M-o") (quote ibuffer-visit-buffer-1-window)) (define-key map (kbd "v") (quote ibuffer-do-view)) (define-key map (kbd "C-x v") (quote ibuffer-do-view-horizontally)) (define-key map (kbd "C-c C-a") (quote ibuffer-auto-mode)) (define-key map (kbd "C-x 4 RET") (quote ibuffer-visit-buffer-other-window)) (define-key map (kbd "C-x 5 RET") (quote ibuffer-visit-buffer-other-frame)) (define-key map [menu-bar view] (cons "View" (make-sparse-keymap "View"))) (define-key-after map [menu-bar view visit-buffer] (quote (menu-item "View this buffer" ibuffer-visit-buffer))) (define-key-after map [menu-bar view visit-buffer-other-window] (quote (menu-item "View (other window)" ibuffer-visit-buffer-other-window))) (define-key-after map [menu-bar view visit-buffer-other-frame] (quote (menu-item "View (other frame)" ibuffer-visit-buffer-other-frame))) (define-key-after map [menu-bar view ibuffer-update] (quote (menu-item "Update" ibuffer-update :help "Regenerate the list of buffers"))) (define-key-after map [menu-bar view switch-format] (quote (menu-item "Switch display format" ibuffer-switch-format :help "Toggle between available values of `ibuffer-formats'"))) (define-key-after map [menu-bar view dashes] (quote ("--"))) (define-key-after map [menu-bar view sort] (cons "Sort" (make-sparse-keymap "Sort"))) (define-key-after map [menu-bar view sort do-sort-by-major-mode] (quote (menu-item "Sort by major mode" ibuffer-do-sort-by-major-mode))) (define-key-after map [menu-bar view sort do-sort-by-size] (quote (menu-item "Sort by buffer size" ibuffer-do-sort-by-size))) (define-key-after map [menu-bar view sort do-sort-by-alphabetic] (quote (menu-item "Sort lexicographically" ibuffer-do-sort-by-alphabetic :help "Sort by the alphabetic order of buffer name"))) (define-key-after map [menu-bar view sort do-sort-by-recency] (quote (menu-item "Sort by view time" ibuffer-do-sort-by-recency :help "Sort by the last time the buffer was displayed"))) (define-key-after map [menu-bar view sort dashes] (quote ("--"))) (define-key-after map [menu-bar view sort invert-sorting] (quote (menu-item "Reverse sorting order" ibuffer-invert-sorting))) (define-key-after map [menu-bar view sort toggle-sorting-mode] (quote (menu-item "Switch sorting mode" ibuffer-toggle-sorting-mode :help "Switch between the various sorting criteria"))) (define-key-after map [menu-bar view filter] (cons "Filter" (make-sparse-keymap "Filter"))) (define-key-after map [menu-bar view filter filter-disable] (quote (menu-item "Disable all filtering" ibuffer-filter-disable :enable (and (featurep (quote ibuf-ext)) ibuffer-filtering-qualifiers)))) (define-key-after map [menu-bar view filter filter-by-mode] (quote (menu-item "Add filter by any major mode..." ibuffer-filter-by-mode))) (define-key-after map [menu-bar view filter filter-by-used-mode] (quote (menu-item "Add filter by a major mode in use..." ibuffer-filter-by-used-mode))) (define-key-after map [menu-bar view filter filter-by-derived-mode] (quote (menu-item "Add filter by derived mode..." ibuffer-filter-by-derived-mode))) (define-key-after map [menu-bar view filter filter-by-name] (quote (menu-item "Add filter by buffer name..." ibuffer-filter-by-name))) (define-key-after map [menu-bar view filter filter-by-filename] (quote (menu-item "Add filter by filename..." ibuffer-filter-by-filename))) (define-key-after map [menu-bar view filter filter-by-size-lt] (quote (menu-item "Add filter by size less than..." ibuffer-filter-by-size-lt))) (define-key-after map [menu-bar view filter filter-by-size-gt] (quote (menu-item "Add filter by size greater than..." ibuffer-filter-by-size-gt))) (define-key-after map [menu-bar view filter filter-by-content] (quote (menu-item "Add filter by content (regexp)..." ibuffer-filter-by-content))) (define-key-after map [menu-bar view filter filter-by-predicate] (quote (menu-item "Add filter by Lisp predicate..." ibuffer-filter-by-predicate))) (define-key-after map [menu-bar view filter pop-filter] (quote (menu-item "Remove top filter" ibuffer-pop-filter :enable (and (featurep (quote ibuf-ext)) ibuffer-filtering-qualifiers)))) (define-key-after map [menu-bar view filter or-filter] (quote (menu-item "OR top two filters" ibuffer-or-filter :enable (and (featurep (quote ibuf-ext)) ibuffer-filtering-qualifiers (cdr ibuffer-filtering-qualifiers)) :help "Create a new filter which is the logical OR of the top two filters"))) (define-key-after map [menu-bar view filter negate-filter] (quote (menu-item "Negate top filter" ibuffer-negate-filter :enable (and (featurep (quote ibuf-ext)) ibuffer-filtering-qualifiers)))) (define-key-after map [menu-bar view filter decompose-filter] (quote (menu-item "Decompose top filter" ibuffer-decompose-filter :enable (and (featurep (quote ibuf-ext)) (memq (car ibuffer-filtering-qualifiers) (quote (or saved not)))) :help "Break down a complex filter like OR or NOT"))) (define-key-after map [menu-bar view filter exchange-filters] (quote (menu-item "Swap top two filters" ibuffer-exchange-filters :enable (and (featurep (quote ibuf-ext)) ibuffer-filtering-qualifiers (cdr ibuffer-filtering-qualifiers))))) (define-key-after map [menu-bar view filter save-filters] (quote (menu-item "Save current filters permanently..." ibuffer-save-filters :enable (and (featurep (quote ibuf-ext)) ibuffer-filtering-qualifiers) :help "Use a mnemonic name to store current filter stack"))) (define-key-after map [menu-bar view filter switch-to-saved-filters] (quote (menu-item "Restore permanently saved filters..." ibuffer-switch-to-saved-filters :enable (and (featurep (quote ibuf-ext)) ibuffer-saved-filters) :help "Replace current filters with a saved stack"))) (define-key-after map [menu-bar view filter add-saved-filters] (quote (menu-item "Add to permanently saved filters..." ibuffer-add-saved-filters :enable (and (featurep (quote ibuf-ext)) ibuffer-filtering-qualifiers) :help "Include already saved stack with current filters"))) (define-key-after map [menu-bar view filter delete-saved-filters] (quote (menu-item "Delete permanently saved filters..." ibuffer-delete-saved-filters :enable (and (featurep (quote ibuf-ext)) ibuffer-saved-filters)))) (define-key-after map [menu-bar view filter-groups] (cons "Filter Groups" ibuffer-mode-groups-popup)) (define-key-after map [menu-bar view dashes2] (quote ("--"))) (define-key-after map [menu-bar view diff-with-file] (quote (menu-item "Diff with file" ibuffer-diff-with-file :help "View the differences between this buffer and its file"))) (define-key-after map [menu-bar view auto-mode] (quote (menu-item "Toggle Auto Mode" ibuffer-auto-mode :help "Attempt to automatically update the Ibuffer buffer"))) (define-key-after map [menu-bar view customize] (quote (menu-item "Customize Ibuffer" ibuffer-customize :help "Use Custom to customize Ibuffer"))) (define-key-after map [menu-bar mark] (cons "Mark" (make-sparse-keymap "Mark"))) (define-key-after map [menu-bar mark toggle-marks] (quote (menu-item "Toggle marks" ibuffer-toggle-marks :help "Unmark marked buffers, and mark unmarked buffers"))) (define-key-after map [menu-bar mark mark-forward] (quote (menu-item "Mark" ibuffer-mark-forward :help "Mark the buffer at point"))) (define-key-after map [menu-bar mark unmark-forward] (quote (menu-item "Unmark" ibuffer-unmark-forward :help "Unmark the buffer at point"))) (define-key-after map [menu-bar mark mark-by-mode] (quote (menu-item "Mark by mode..." ibuffer-mark-by-mode :help "Mark all buffers in a particular major mode"))) (define-key-after map [menu-bar mark mark-modified-buffers] (quote (menu-item "Mark modified buffers" ibuffer-mark-modified-buffers :help "Mark all buffers which have been modified"))) (define-key-after map [menu-bar mark mark-unsaved-buffers] (quote (menu-item "Mark unsaved buffers" ibuffer-mark-unsaved-buffers :help "Mark all buffers which have a file and are modified"))) (define-key-after map [menu-bar mark mark-read-only-buffers] (quote (menu-item "Mark read-only buffers" ibuffer-mark-read-only-buffers :help "Mark all buffers which are read-only"))) (define-key-after map [menu-bar mark mark-special-buffers] (quote (menu-item "Mark special buffers" ibuffer-mark-special-buffers :help "Mark all buffers whose name begins with a *"))) (define-key-after map [menu-bar mark mark-dired-buffers] (quote (menu-item "Mark dired buffers" ibuffer-mark-dired-buffers :help "Mark buffers in dired-mode"))) (define-key-after map [menu-bar mark mark-dissociated-buffers] (quote (menu-item "Mark dissociated buffers" ibuffer-mark-dissociated-buffers :help "Mark buffers with a non-existent associated file"))) (define-key-after map [menu-bar mark mark-help-buffers] (quote (menu-item "Mark help buffers" ibuffer-mark-help-buffers :help "Mark buffers in help-mode"))) (define-key-after map [menu-bar mark mark-compressed-file-buffers] (quote (menu-item "Mark compressed file buffers" ibuffer-mark-compressed-file-buffers :help "Mark buffers which have a file that is compressed"))) (define-key-after map [menu-bar mark mark-old-buffers] (quote (menu-item "Mark old buffers" ibuffer-mark-old-buffers :help "Mark buffers which have not been viewed recently"))) (define-key-after map [menu-bar mark unmark-all] (quote (menu-item "Unmark All" ibuffer-unmark-all))) (define-key-after map [menu-bar mark dashes] (quote ("--"))) (define-key-after map [menu-bar mark mark-by-name-regexp] (quote (menu-item "Mark by buffer name (regexp)..." ibuffer-mark-by-name-regexp :help "Mark buffers whose name matches a regexp"))) (define-key-after map [menu-bar mark mark-by-mode-regexp] (quote (menu-item "Mark by major mode (regexp)..." ibuffer-mark-by-mode-regexp :help "Mark buffers whose major mode name matches a regexp"))) (define-key-after map [menu-bar mark mark-by-file-name-regexp] (quote (menu-item "Mark by file name (regexp)..." ibuffer-mark-by-file-name-regexp :help "Mark buffers whose file name matches a regexp"))) map)) nil [16540 34210])
            ("ibuffer-mode-operate-map" variable (:default-value (let ((operate-map (make-sparse-keymap "Operate"))) (define-key-after operate-map [do-view] (quote (menu-item "View" ibuffer-do-view))) (define-key-after operate-map [do-view-other-frame] (quote (menu-item "View (separate frame)" ibuffer-do-view-other-frame))) (define-key-after operate-map [do-save] (quote (menu-item "Save" ibuffer-do-save))) (define-key-after operate-map [do-replace-regexp] (quote (menu-item "Replace (regexp)..." ibuffer-do-replace-regexp :help "Replace text inside marked buffers"))) (define-key-after operate-map [do-query-replace] (quote (menu-item "Query Replace..." ibuffer-do-query-replace :help "Replace text in marked buffers, asking each time"))) (define-key-after operate-map [do-query-replace-regexp] (quote (menu-item "Query Replace (regexp)..." ibuffer-do-query-replace-regexp :help "Replace text in marked buffers by regexp, asking each time"))) (define-key-after operate-map [do-print] (quote (menu-item "Print" ibuffer-do-print))) (define-key-after operate-map [do-toggle-modified] (quote (menu-item "Toggle modification flag" ibuffer-do-toggle-modified))) (define-key-after operate-map [do-revert] (quote (menu-item "Revert" ibuffer-do-revert :help "Revert marked buffers to their associated file"))) (define-key-after operate-map [do-rename-uniquely] (quote (menu-item "Rename Uniquely" ibuffer-do-rename-uniquely :help "Rename marked buffers to a new, unique name"))) (define-key-after operate-map [do-delete] (quote (menu-item "Kill" ibuffer-do-delete))) (define-key-after operate-map [do-occur] (quote (menu-item "List lines matching..." ibuffer-do-occur :help "View all lines in marked buffers matching a regexp"))) (define-key-after operate-map [do-shell-command-pipe] (quote (menu-item "Pipe to shell command..." ibuffer-do-shell-command-pipe :help "For each marked buffer, send its contents to a shell command"))) (define-key-after operate-map [do-shell-command-pipe-replace] (quote (menu-item "Pipe to shell command (replace)..." ibuffer-do-shell-command-pipe-replace :help "For each marked buffer, replace its contents with output of shell command"))) (define-key-after operate-map [do-shell-command-file] (quote (menu-item "Shell command on buffer's file..." ibuffer-do-shell-command-file :help "For each marked buffer, run a shell command with its file as argument"))) (define-key-after operate-map [do-eval] (quote (menu-item "Eval..." ibuffer-do-eval :help "Evaluate a Lisp form in each marked buffer"))) (define-key-after operate-map [do-view-and-eval] (quote (menu-item "Eval (viewing buffer)..." ibuffer-do-view-and-eval :help "Evaluate a Lisp form in each marked buffer while viewing it"))) operate-map)) nil [34212 37052])
            ("define-key" code nil nil [37054 37242])
            ("define-key" code nil nil [37243 37447])
            ("ibuffer-name-map" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map [(mouse-1)] (quote ibuffer-mouse-toggle-mark)) (define-key map [(mouse-2)] (quote ibuffer-mouse-visit-buffer)) (define-key map [down-mouse-3] (quote ibuffer-mouse-popup-menu)) map)) nil [37449 37702])
            ("ibuffer-filename/process-header-map" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map [(mouse-1)] (quote ibuffer-do-sort-by-filename/process)) map)) nil [37704 37863])
            ("ibuffer-mode-name-map" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map [(mouse-2)] (quote ibuffer-mouse-filter-by-mode)) (define-key map (kbd "RET") (quote ibuffer-interactive-filter-by-mode)) map)) nil [37865 38072])
            ("ibuffer-name-header-map" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map [(mouse-1)] (quote ibuffer-do-sort-by-alphabetic)) map)) nil [38074 38215])
            ("ibuffer-size-header-map" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map [(mouse-1)] (quote ibuffer-do-sort-by-size)) map)) nil [38217 38352])
            ("ibuffer-mode-header-map" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map [(mouse-1)] (quote ibuffer-do-sort-by-major-mode)) map)) nil [38354 38495])
            ("ibuffer-mode-filter-group-map" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map [(mouse-1)] (quote ibuffer-mouse-toggle-mark)) (define-key map [(mouse-2)] (quote ibuffer-mouse-toggle-filter-group)) (define-key map (kbd "RET") (quote ibuffer-toggle-filter-group)) (define-key map [down-mouse-3] (quote ibuffer-mouse-popup-menu)) map)) nil [38497 38832])
            ("ibuffer-restore-window-config-on-quit" variable nil nil [38834 38962])
            ("ibuffer-prev-window-config" variable nil nil [38964 39053])
            ("ibuffer-did-modification" variable nil nil [39055 39092])
            ("ibuffer-compiled-formats" variable nil nil [39094 39131])
            ("ibuffer-cached-formats" variable nil nil [39132 39167])
            ("ibuffer-cached-eliding-string" variable nil nil [39168 39210])
            ("ibuffer-cached-elide-long-columns" variable nil nil [39211 39255])
            ("ibuffer-sorting-functions-alist" variable nil nil [39257 39757])
            ("ibuffer-columnize-and-insert-list" function (:arguments ("list" "pad-width")) nil [39781 40468])
            ("ibuffer-current-mark" function nil nil [40470 40585])
            ("ibuffer-mouse-toggle-mark" function
               (:user-visible-flag t
                :arguments ("event"))
                nil [40587 41143])
            ("ibuffer-find-file" function
               (:user-visible-flag t
                :arguments ("file" "wildcards"))
                nil [41145 41568])
            ("ibuffer-mouse-visit-buffer" function
               (:user-visible-flag t
                :arguments ("event"))
                nil [41570 41778])
            ("ibuffer-mouse-popup-menu" function
               (:user-visible-flag t
                :arguments ("event"))
                nil [41780 42499])
            ("ibuffer-skip-properties" function (:arguments ("props" "direction")) nil [42501 42748])
            ("ibuffer-customize" function (:user-visible-flag t) nil [42750 42868])
            ("ibuffer-backward-line" function
               (:user-visible-flag t
                :arguments ("arg" "skip-group-names"))
                nil [42870 43657])
            ("ibuffer-forward-line" function
               (:user-visible-flag t
                :arguments ("arg" "skip-group-names"))
                nil [43659 44702])
            ("ibuffer-visit-buffer" function
               (:user-visible-flag t
                :arguments ("single"))
                nil [44704 45006])
            ("ibuffer-visit-buffer-other-window" function
               (:user-visible-flag t
                :arguments ("noselect"))
                nil [45008 45362])
            ("ibuffer-visit-buffer-other-window-noselect" function (:user-visible-flag t) nil [45364 45547])
            ("ibuffer-visit-buffer-other-frame" function (:user-visible-flag t) nil [45549 45777])
            ("ibuffer-visit-buffer-1-window" function (:user-visible-flag t) nil [45779 45923])
            ("ibuffer-bury-buffer" function (:user-visible-flag t) nil [45925 46192])
            ("ibuffer-visit-tags-table" function (:user-visible-flag t) nil [46194 46470])
            ("ibuffer-do-view" function
               (:user-visible-flag t
                :arguments ("other-frame"))
                nil [46472 46844])
            ("ibuffer-do-view-horizontally" function
               (:user-visible-flag t
                :arguments ("other-frame"))
                nil [46846 47046])
            ("ibuffer-do-view-1" function (:arguments ("type")) nil [47048 47985])
            ("ibuffer-do-view-other-frame" function (:user-visible-flag t) nil [47987 48120])
            ("ibuffer-map-marked-lines" function (:arguments ("func")) nil [48122 48247])
            ("ibuffer-shrink-to-fit" function (:arguments ("owin")) nil [48249 48554])
            ("ibuffer-confirm-operation-on" function (:arguments ("operation" "names")) nil [48556 50023])
            ("ibuffer-map-lines-nomodify" function (:arguments ("function")) nil [50025 50171])
            ("ibuffer-buffer-names-with-mark" function (:arguments ("mark")) nil [50173 50478])
            ("ibuffer-marked-buffer-names" function nil nil [50480 50576])
            ("ibuffer-deletion-marked-buffer-names" function nil nil [50578 50685])
            ("ibuffer-count-marked-lines" function (:arguments ("all")) nil [50687 50945])
            ("ibuffer-count-deletion-lines" function nil nil [50947 51089])
            ("ibuffer-map-deletion-lines" function (:arguments ("func")) nil [51091 51186])
            ("ibuffer-assert-ibuffer-mode" function nil nil [51188 51274])
            ("ibuffer-buffer-file-name" function nil nil [51276 51572])
            ("define-ibuffer-op" code nil nil [51574 51996])
            ("define-ibuffer-op" code nil nil [51998 52203])
            ("define-ibuffer-op" code nil nil [52205 52486])
            ("define-ibuffer-op" code nil nil [52488 52722])
            ("define-ibuffer-op" code nil nil [52724 53006])
            ("ibuffer-unmark-all" function
               (:user-visible-flag t
                :arguments ("mark"))
                nil [53008 53683])
            ("ibuffer-toggle-marks" function
               (:user-visible-flag t
                :arguments ("group"))
                nil [53685 54347])
            ("ibuffer-mark-forward" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [54349 54587])
            ("ibuffer-unmark-forward" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [54589 54815])
            ("ibuffer-unmark-backward" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [54817 55046])
            ("ibuffer-mark-interactive" function (:arguments ("arg" "mark" "movement")) nil [55048 55504])
            ("ibuffer-set-mark" function (:arguments ("mark")) nil [55506 55725])
            ("ibuffer-set-mark-1" function (:arguments ("mark")) nil [55727 55935])
            ("ibuffer-mark-for-delete" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [55937 56174])
            ("ibuffer-mark-for-delete-backwards" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [56176 56425])
            ("ibuffer-current-buffer" function (:arguments ("must-be-live")) nil [56427 56814])
            ("ibuffer-active-formats-name" function nil nil [56816 57147])
            ("ibuffer-current-formats" function (:arguments ("uncompiledp")) nil [57149 57493])
            ("ibuffer-current-format" function (:arguments ("uncompiledp")) nil [57495 57686])
            ("ibuffer-expand-format-entry" function (:arguments ("form")) nil [57688 58316])
            ("ibuffer-compile-make-eliding-form" function (:arguments ("strvar" "elide" "from-end-p")) nil [58318 58772])
            ("ibuffer-compile-make-substring-form" function (:arguments ("strvar" "maxvar" "from-end-p")) nil [58774 58943])
            ("ibuffer-compile-make-format-form" function (:arguments ("strvar" "widthform" "alignment")) nil [58945 59367])
            ("ibuffer-compile-format" function (:arguments ("format")) nil [59369 64278])
            ("ibuffer-recompile-formats" function (:user-visible-flag t) nil [64280 64727])
            ("ibuffer-clear-summary-columns" function (:arguments ("format")) nil [64729 64937])
            ("ibuffer-check-formats" function nil nil [64939 66103])
            ("ibuffer-inline-columns" variable nil nil [66105 66140])
            ("define-ibuffer-column" code nil nil [66142 66208])
            ("define-ibuffer-column" code nil nil [66210 66335])
            ("define-ibuffer-column" code nil nil [66337 66463])
            ("define-ibuffer-column" code nil nil [66465 67109])
            ("define-ibuffer-column" code nil nil [67111 67461])
            ("define-ibuffer-column" code nil nil [67463 67720])
            ("define-ibuffer-column" code nil nil [67722 68057])
            ("define-ibuffer-column" code nil nil [68059 68418])
            ("define-ibuffer-column" code nil nil [68420 69445])
            ("ibuffer-format-column" function (:arguments ("str" "width" "alignment")) nil [69447 69729])
            ("ibuffer-buffer-name-face" function (:arguments ("buf" "mark")) nil [69731 70146])
            ("ibuffer-insert-buffer-line" function (:arguments ("buffer" "mark" "format")) nil [70148 70442])
            ("ibuffer-redisplay-current" function nil nil [70552 71143])
            ("ibuffer-map-on-mark" function (:arguments ("mark" "func")) nil [71145 71295])
            ("ibuffer-map-lines" function (:arguments ("function" "nomodify" "group")) nil [71297 73516])
            ("ibuffer-get-marked-buffers" function nil nil [73518 73734])
            ("ibuffer-current-state-list" function (:arguments ("pos")) nil [73736 74497])
            ("ibuffer-current-buffers-with-marks" function (:arguments ("curbufs")) nil [74499 74767])
            ("ibuffer-buf-matches-predicates" function (:arguments ("buf" "predicates")) nil [74769 75009])
            ("ibuffer-filter-buffers" function (:arguments ("ibuffer-buf" "last" "bmarklist" "all")) nil [75011 75506])
            ("ibuffer-visible-p" function (:arguments ("buf" "all" "ibuffer-buf")) nil [75508 75748])
            ("ibuffer-do-sort-by-recency" function (:user-visible-flag t) nil [75834 76151])
            ("ibuffer-update-format" function nil nil [76153 76333])
            ("ibuffer-switch-format" function (:user-visible-flag t) nil [76335 76728])
            ("ibuffer-update-title-and-summary" function (:arguments ("format")) nil [76730 79702])
            ("ibuffer-redisplay" function
               (:user-visible-flag t
                :arguments ("silent"))
                nil [79705 80419])
            ("ibuffer-update" function
               (:user-visible-flag t
                :arguments ("arg" "silent"))
                nil [80421 82029])
            ("ibuffer-sort-bufferlist" function (:arguments ("bmarklist")) nil [82031 82544])
            ("ibuffer-insert-filter-group" function (:arguments ("name" "display-name" "filter-string" "format" "bmarklist")) nil [82546 83448])
            ("ibuffer-redisplay-engine" function (:arguments ("bmarklist" "_ignore")) nil [83450 85047])
            ("ibuffer-quit" function (:user-visible-flag t) nil [85049 85406])
            ("ibuffer-list-buffers" function
               (:user-visible-flag t
                :arguments ("files-only"))
                nil [85423 85709])
            ("ibuffer-other-window" function
               (:user-visible-flag t
                :arguments ("files-only"))
                nil [85726 86024])
            ("ibuffer" function
               (:user-visible-flag t
                :arguments ("other-window-p" "name" "qualifiers" "noselect" "shrink" "filter-groups" "formats"))
                nil [86041 88214])
            ("put" code nil nil [88216 88256])
            ("ibuffer-mode" function nil nil [88257 101143])
            ("ibuffer-auto-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [102996 103296])
            ("ibuffer-mouse-filter-by-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [103298 103436])
            ("ibuffer-interactive-filter-by-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [103438 103583])
            ("ibuffer-mouse-toggle-filter-group" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [103585 103733])
            ("ibuffer-toggle-filter-group" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [103735 103862])
            ("ibuffer-forward-filter-group" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [103864 103995])
            ("ibuffer-backward-filter-group" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [103997 104130])
            ("ibuffer-do-shell-command-pipe" function (:prototype-flag t) nil [104132 104184])
            ("ibuffer-do-shell-command-pipe-replace" function (:prototype-flag t) nil [104186 104246])
            ("ibuffer-do-shell-command-file" function (:prototype-flag t) nil [104248 104300])
            ("ibuffer-do-eval" function (:prototype-flag t) nil [104302 104340])
            ("ibuffer-do-view-and-eval" function (:prototype-flag t) nil [104342 104389])
            ("ibuffer-do-rename-uniquely" function (:prototype-flag t) nil [104391 104440])
            ("ibuffer-do-revert" function (:prototype-flag t) nil [104442 104482])
            ("ibuffer-do-isearch" function (:prototype-flag t) nil [104484 104525])
            ("ibuffer-do-isearch-regexp" function (:prototype-flag t) nil [104527 104575])
            ("ibuffer-do-replace-regexp" function (:prototype-flag t) nil [104577 104625])
            ("ibuffer-do-query-replace" function (:prototype-flag t) nil [104627 104674])
            ("ibuffer-do-query-replace-regexp" function (:prototype-flag t) nil [104676 104730])
            ("ibuffer-do-print" function (:prototype-flag t) nil [104732 104771])
            ("ibuffer-included-in-filters-p" function (:prototype-flag t) nil [104773 104857])
            ("ibuffer-filters-to-filter-group" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [104859 104984])
            ("ibuffer-set-filter-groups-by-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [104986 105108])
            ("ibuffer-pop-filter-group" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [105110 105205])
            ("ibuffer-decompose-filter-group" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [105207 105337])
            ("ibuffer-clear-filter-groups" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [105339 105432])
            ("ibuffer-jump-to-filter-group" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [105434 105558])
            ("ibuffer-kill-filter-group" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [105560 105725])
            ("ibuffer-kill-line" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [105727 105882])
            ("ibuffer-yank" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [105884 105993])
            ("ibuffer-yank-filter-group" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [105995 106124])
            ("ibuffer-save-filter-groups" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [106126 106361])
            ("ibuffer-delete-saved-filter-groups" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [106363 106533])
            ("ibuffer-switch-to-saved-filter-groups" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [106535 106731])
            ("ibuffer-filter-disable" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [106733 107009])
            ("ibuffer-pop-filter" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [107011 107107])
            ("ibuffer-decompose-filter" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [107109 107448])
            ("ibuffer-exchange-filters" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [107450 107572])
            ("ibuffer-negate-filter" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [107574 107693])
            ("ibuffer-or-filter" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [107695 107921])
            ("ibuffer-save-filters" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [107923 108128])
            ("ibuffer-delete-saved-filters" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [108130 108264])
            ("ibuffer-add-saved-filters" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [108266 108409])
            ("ibuffer-switch-to-saved-filters" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [108411 108564])
            ("ibuffer-filter-by-mode" function (:prototype-flag t) nil [108566 108611])
            ("ibuffer-filter-by-used-mode" function (:prototype-flag t) nil [108613 108663])
            ("ibuffer-filter-by-derived-mode" function (:prototype-flag t) nil [108665 108718])
            ("ibuffer-filter-by-name" function (:prototype-flag t) nil [108720 108765])
            ("ibuffer-filter-by-filename" function (:prototype-flag t) nil [108767 108816])
            ("ibuffer-filter-by-size-gt" function (:prototype-flag t) nil [108818 108867])
            ("ibuffer-filter-by-size-lt" function (:prototype-flag t) nil [108869 108918])
            ("ibuffer-filter-by-content" function (:prototype-flag t) nil [108920 108968])
            ("ibuffer-filter-by-predicate" function (:prototype-flag t) nil [108970 109020])
            ("ibuffer-toggle-sorting-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [109022 109313])
            ("ibuffer-invert-sorting" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [109315 109428])
            ("ibuffer-do-sort-by-major-mode" function (:prototype-flag t) nil [109430 109482])
            ("ibuffer-do-sort-by-mode-name" function (:prototype-flag t) nil [109484 109535])
            ("ibuffer-do-sort-by-alphabetic" function (:prototype-flag t) nil [109537 109589])
            ("ibuffer-do-sort-by-size" function (:prototype-flag t) nil [109591 109637])
            ("ibuffer-do-sort-by-filename/process" function (:prototype-flag t) nil [109639 109697])
            ("ibuffer-bs-show" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [109699 109796])
            ("ibuffer-add-to-tmp-hide" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [109798 110004])
            ("ibuffer-add-to-tmp-show" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [110006 110215])
            ("ibuffer-forward-next-marked" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [110217 110620])
            ("ibuffer-backwards-next-marked" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [110622 110887])
            ("ibuffer-do-kill-lines" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [110889 110990])
            ("ibuffer-jump-to-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [110992 111457])
            ("ibuffer-diff-with-file" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [111459 111711])
            ("ibuffer-copy-filename-as-kill" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [111713 112297])
            ("ibuffer-mark-by-name-regexp" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [112299 112417])
            ("ibuffer-mark-by-mode-regexp" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [112419 112543])
            ("ibuffer-mark-by-file-name-regexp" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [112545 112673])
            ("ibuffer-mark-by-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [112675 112787])
            ("ibuffer-mark-modified-buffers" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [112789 112885])
            ("ibuffer-mark-unsaved-buffers" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [112887 113011])
            ("ibuffer-mark-dissociated-buffers" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [113013 113140])
            ("ibuffer-mark-help-buffers" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [113142 113252])
            ("ibuffer-mark-compressed-file-buffers" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [113254 113380])
            ("ibuffer-mark-old-buffers" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [113382 113515])
            ("ibuffer-mark-special-buffers" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [113517 113639])
            ("ibuffer-mark-read-only-buffers" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [113641 113739])
            ("ibuffer-mark-dired-buffers" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [113741 113833])
            ("ibuffer-do-occur" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [113835 114056])
            ("ibuffer" package nil nil [114115 114133])
            ("run-hooks" code nil nil [114135 114165]))          
      :file "ibuffer.el.gz"
      :pointmax 114243
      :fsize 26035
      :lastmodtime '(20707 18685 0 0)
      :unmatched-syntax '((close-paren 1214 . 1215) (symbol 1135 . 1152) (open-paren 1134 . 1135)))
    (semanticdb-table "dired.el.gz"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("dired" customgroup (:user-visible-flag t) nil [1244 1343])
            ("dired-mark" customgroup (:user-visible-flag t) nil [1345 1434])
            ("dired-listing-switches" variable (:default-value (purecopy "-al")) nil [1452 1976])
            ("dired-subdir-switches" variable nil nil [1978 2252])
            ("dired-chown-program" variable (:default-value (purecopy (cond ((executable-find "chown") "chown") ((file-executable-p "/usr/sbin/chown") "/usr/sbin/chown") ((file-executable-p "/etc/chown") "/etc/chown") (t "chown")))) nil [2254 2588])
            ("dired-use-ls-dired" variable (:default-value (quote unspecified)) nil [2590 3711])
            ("dired-chmod-program" variable (:default-value "chmod") nil [3713 3827])
            ("dired-touch-program" variable (:default-value "touch") nil [3829 3945])
            ("dired-ls-F-marks-symlinks" variable nil nil [3947 4630])
            ("dired-trivial-filenames" variable (:default-value (purecopy "^\\.\\.?$\\|^#")) nil [4632 4960])
            ("dired-keep-marker-rename" variable (:default-value t) nil [4962 5563])
            ("dired-keep-marker-copy" variable (:default-value 67) nil [5565 5884])
            ("dired-keep-marker-hardlink" variable (:default-value 72) nil [5886 6201])
            ("dired-keep-marker-symlink" variable (:default-value 89) nil [6203 6521])
            ("dired-dwim-target" variable nil nil [6523 6861])
            ("dired-copy-preserve-time" variable (:default-value t) nil [6863 7041])
            ("defvaralias" code nil nil [7162 7231])
            ("defvaralias" code nil nil [7232 7295])
            ("dired-load-hook" variable nil nil [7317 7468])
            ("dired-mode-hook" variable nil nil [7470 7572])
            ("dired-before-readin-hook" variable nil nil [7574 7721])
            ("dired-after-readin-hook" variable nil nil [7723 7960])
            ("dired-dnd-protocol-alist" variable (:default-value (quote (("^file:///" . dired-dnd-handle-local-file) ("^file://" . dired-dnd-handle-file) ("^file:" . dired-dnd-handle-local-file)))) nil [8099 8623])
            ("dired-marker-char" variable (:default-value 42) nil [8648 9183])
            ("dired-del-marker" variable (:default-value 68) nil [9185 9260])
            ("dired-shrink-to-fit" variable (:default-value t) nil [9262 9453])
            ("make-obsolete-variable" code nil nil [9454 9704])
            ("dired-file-version-alist" variable nil nil [9706 9739])
            ("dired-directory" variable nil nil [9756 10059])
            ("dired-safe-switches-p" function (:arguments ("switches")) nil [10106 10381])
            ("dired-actual-switches" variable nil nil [10383 10492])
            ("put" code nil nil [10494 10566])
            ("dired-re-inode-size" variable (:default-value "[0-9 	]*") nil [10568 10683])
            ("dired-re-mark" variable (:default-value "^[^ 
]") nil [10882 10914])
            ("dired-re-maybe-mark" variable (:default-value "^. ") nil [11003 11037])
            ("dired-re-dir" variable (:default-value (concat dired-re-maybe-mark dired-re-inode-size "d[^:]")) nil [11177 11255])
            ("dired-re-sym" variable (:default-value (concat dired-re-maybe-mark dired-re-inode-size "l[^:]")) nil [11256 11334])
            ("dired-re-exe" variable (:default-value (mapconcat (function (lambda (x) (concat dired-re-maybe-mark dired-re-inode-size x))) (quote ("-[-r][-w][xs][-r][-w].[-r][-w]." "-[-r][-w].[-r][-w][xs][-r][-w]." "-[-r][-w].[-r][-w].[-r][-w][xst]")) "\\|")) nil [11335 11645])
            ("dired-re-perms" variable (:default-value "[-bcdlps][-r][-w].[-r][-w].[-r][-w].") nil [11646 11708])
            ("dired-re-dot" variable (:default-value "^.* \\.\\.?/?$") nil [11709 11747])
            ("dired-subdir-alist" variable nil nil [11811 12082])
            ("dired-switches-alist" variable nil nil [12084 12237])
            ("make-variable-buffer-local" code nil nil [12238 12288])
            ("defvaralias" code nil nil [12290 12378])
            ("dired-subdir-regexp" variable (:default-value "^. \\([^
]+\\)\\(:\\)[
]") nil [12380 12726])
            ("dired-faces" customgroup (:user-visible-flag t) nil [12728 12811])
            ("dired-header" variable
               (:default-value (quote ((t (:inherit font-lock-type-face))))
                :type "face")
                nil [12813 12952])
            ("dired-header-face" variable (:default-value (quote dired-header)) nil [12953 13035])
            ("dired-mark" variable
               (:default-value (quote ((t (:inherit font-lock-constant-face))))
                :type "face")
                nil [13037 13172])
            ("dired-mark-face" variable (:default-value (quote dired-mark)) nil [13173 13245])
            ("dired-marked" variable
               (:default-value (quote ((t (:inherit warning))))
                :type "face")
                nil [13247 13369])
            ("dired-marked-face" variable (:default-value (quote dired-marked)) nil [13370 13447])
            ("dired-flagged" variable
               (:default-value (quote ((t (:inherit error))))
                :type "face")
                nil [13449 13584])
            ("dired-flagged-face" variable (:default-value (quote dired-flagged)) nil [13585 13678])
            ("dired-warning" variable
               (:default-value (quote ((t (:inherit font-lock-warning-face))))
                :type "face")
                nil [13680 13977])
            ("dired-warning-face" variable (:default-value (quote dired-warning)) nil [13978 14089])
            ("dired-perm-write" variable
               (:default-value (quote ((((type w32 pc)) :inherit default) (t (:inherit font-lock-comment-delimiter-face))))
                :type "face")
                nil [14091 14487])
            ("dired-perm-write-face" variable (:default-value (quote dired-perm-write)) nil [14488 14607])
            ("dired-directory" variable
               (:default-value (quote ((t (:inherit font-lock-function-name-face))))
                :type "face")
                nil [14609 14757])
            ("dired-directory-face" variable (:default-value (quote dired-directory)) nil [14758 14843])
            ("dired-symlink" variable
               (:default-value (quote ((t (:inherit font-lock-keyword-face))))
                :type "face")
                nil [14845 14985])
            ("dired-symlink-face" variable (:default-value (quote dired-symlink)) nil [14986 15067])
            ("dired-ignored" variable
               (:default-value (quote ((t (:inherit shadow))))
                :type "face")
                nil [15069 15230])
            ("dired-ignored-face" variable (:default-value (quote dired-ignored)) nil [15231 15349])
            ("dired-font-lock-keywords" variable (:default-value (list (list dired-re-mark (quote (0 dired-mark-face))) (list (concat "^[" (char-to-string dired-marker-char) "]") (quote (".+" (dired-move-to-filename) nil (0 dired-marked-face)))) (list (concat "^[" (char-to-string dired-del-marker) "]") (quote (".+" (dired-move-to-filename) nil (0 dired-flagged-face)))) (list (concat dired-re-maybe-mark dired-re-inode-size "[-d]....\\(w\\)....") (quote (1 dired-perm-write-face))) (list (concat dired-re-maybe-mark dired-re-inode-size "[-d].......\\(w\\).") (quote (1 dired-perm-write-face))) (list dired-re-dir (quote (".+" (dired-move-to-filename) nil (0 dired-directory-face)))) (list dired-re-sym (quote (".+" (dired-move-to-filename) nil (0 dired-symlink-face)))) (quote (eval list (concat "\\(" (regexp-opt completion-ignored-extensions) "\\|#\\)$") (quote (".+" (dired-move-to-filename) nil (0 dired-ignored-face))))) (quote (eval list (concat "\\(" (regexp-opt completion-ignored-extensions) "\\|#\\)[*=|]$") (quote (".+" (progn (end-of-line) (unless (get-text-property (1- (point)) (quote mouse-face)) (dired-move-to-filename))) nil (0 dired-ignored-face))))) (list (concat dired-re-maybe-mark dired-re-inode-size dired-re-perms ".*:$") (quote (".+" (dired-move-to-filename) nil (0 (quote default))))) (list dired-subdir-regexp (quote (1 dired-header-face))))) nil [15351 18741])
            ("dnd-protocol-alist" variable nil nil [18743 18770])
            ("dired-mark-if" function (:arguments ("predicate" "msg")) nil [18846 20151])
            ("dired-map-over-marks" function (:arguments ("body" "arg" "show-progress" "distinguish-one-marked")) nil [20153 22965])
            ("dired-get-marked-files" function (:arguments ("localp" "arg" "filter" "distinguish-one-marked")) nil [22967 24322])
            ("dired-read-dir-and-switches" function (:arguments ("str")) nil [24347 25118])
            ("dired-file-name-at-point" function nil nil [27907 28274])
            ("dired" function
               (:user-visible-flag t
                :arguments ("dirname" "switches"))
                nil [28340 29302])
            ("dired-other-window" function
               (:user-visible-flag t
                :arguments ("dirname" "switches"))
                nil [29383 29648])
            ("dired-other-frame" function
               (:user-visible-flag t
                :arguments ("dirname" "switches"))
                nil [29728 29982])
            ("dired-noselect" function (:arguments ("dir-or-list" "switches")) nil [29999 31278])
            ("dired-directory-changed-p" function (:arguments ("dirname")) nil [31485 31721])
            ("dired-buffer-stale-p" function (:arguments ("noconfirm")) nil [31723 32322])
            ("dired-auto-revert-buffer" variable nil nil [32324 33089])
            ("dired-internal-noselect" function (:arguments ("dir-or-list" "switches" "mode")) nil [33091 35907])
            ("dired-buffers" variable nil nil [35909 36156])
            ("dired-find-subdir" variable nil nil [36158 36184])
            ("dired-find-buffer-nocreate" function (:arguments ("dirname" "mode")) nil [36246 38006])
            ("dired-readin" function nil nil [38041 40059])
            ("dired-readin-insert" function nil nil [40093 40964])
            ("dired-align-file" function (:arguments ("beg" "end")) nil [40966 45551])
            ("ls-lisp-use-insert-directory-program" variable nil nil [45554 45599])
            ("dired-switches-escape-p" function (:arguments ("switches")) nil [45601 45853])
            ("dired-insert-directory" function (:arguments ("dir" "switches" "file-list" "wildcard" "hdr")) nil [45855 50150])
            ("dired-insert-set-properties" function (:arguments ("beg" "end")) nil [50152 50644])
            ("dired-revert" function (:arguments ("_arg" "_noconfirm")) nil [50676 52639])
            ("dired-save-positions" function nil nil [52728 53418])
            ("dired-restore-positions" function (:arguments ("positions")) nil [53420 54120])
            ("dired-remember-marks" function (:arguments ("beg" "end")) nil [54122 54602])
            ("dired-mark-remembered" function (:arguments ("alist")) nil [54604 54977])
            ("dired-remember-hidden" function nil nil [54979 55338])
            ("dired-insert-old-subdirs" function (:arguments ("old-subdir-alist")) nil [55340 55806])
            ("dired-uncache" function (:arguments ("dir")) nil [55808 56005])
            ("dired-mode-map" variable (:default-value (let ((map (make-keymap))) (set-keymap-parent map special-mode-map) (define-key map [mouse-2] (quote dired-mouse-find-file-other-window)) (define-key map [follow-link] (quote mouse-face)) (define-key map "#" (quote dired-flag-auto-save-files)) (define-key map "." (quote dired-clean-directory)) (define-key map "~" (quote dired-flag-backup-files)) (define-key map "A" (quote dired-do-search)) (define-key map "C" (quote dired-do-copy)) (define-key map "B" (quote dired-do-byte-compile)) (define-key map "D" (quote dired-do-delete)) (define-key map "G" (quote dired-do-chgrp)) (define-key map "H" (quote dired-do-hardlink)) (define-key map "L" (quote dired-do-load)) (define-key map "M" (quote dired-do-chmod)) (define-key map "O" (quote dired-do-chown)) (define-key map "P" (quote dired-do-print)) (define-key map "Q" (quote dired-do-query-replace-regexp)) (define-key map "R" (quote dired-do-rename)) (define-key map "S" (quote dired-do-symlink)) (define-key map "T" (quote dired-do-touch)) (define-key map "X" (quote dired-do-shell-command)) (define-key map "Z" (quote dired-do-compress)) (define-key map "!" (quote dired-do-shell-command)) (define-key map "&" (quote dired-do-async-shell-command)) (define-key map "=" (quote dired-diff)) (define-key map "\377" (quote dired-unmark-all-files)) (define-key map "\204" (quote dired-tree-down)) (define-key map "\225" (quote dired-tree-up)) (define-key map "\216" (quote dired-next-subdir)) (define-key map "\220" (quote dired-prev-subdir)) (define-key map "\373" (quote dired-prev-marked-file)) (define-key map "\375" (quote dired-next-marked-file)) (define-key map "%" nil) (define-key map "%u" (quote dired-upcase)) (define-key map "%l" (quote dired-downcase)) (define-key map "%d" (quote dired-flag-files-regexp)) (define-key map "%g" (quote dired-mark-files-containing-regexp)) (define-key map "%m" (quote dired-mark-files-regexp)) (define-key map "%r" (quote dired-do-rename-regexp)) (define-key map "%C" (quote dired-do-copy-regexp)) (define-key map "%H" (quote dired-do-hardlink-regexp)) (define-key map "%R" (quote dired-do-rename-regexp)) (define-key map "%S" (quote dired-do-symlink-regexp)) (define-key map "%&" (quote dired-flag-garbage-files)) (define-key map "*" nil) (define-key map "**" (quote dired-mark-executables)) (define-key map "*/" (quote dired-mark-directories)) (define-key map "*@" (quote dired-mark-symlinks)) (define-key map "*%" (quote dired-mark-files-regexp)) (define-key map "*c" (quote dired-change-marks)) (define-key map "*s" (quote dired-mark-subdir-files)) (define-key map "*m" (quote dired-mark)) (define-key map "*u" (quote dired-unmark)) (define-key map "*?" (quote dired-unmark-all-files)) (define-key map "*!" (quote dired-unmark-all-marks)) (define-key map "U" (quote dired-unmark-all-marks)) (define-key map "*" (quote dired-unmark-backward)) (define-key map "*" (quote dired-next-marked-file)) (define-key map "*" (quote dired-prev-marked-file)) (define-key map "*t" (quote dired-toggle-marks)) (define-key map "a" (quote dired-find-alternate-file)) (define-key map "d" (quote dired-flag-file-deletion)) (define-key map "e" (quote dired-find-file)) (define-key map "f" (quote dired-find-file)) (define-key map "" (quote dired-find-file)) (put (quote dired-find-file) :advertised-binding "") (define-key map "g" (quote revert-buffer)) (define-key map "i" (quote dired-maybe-insert-subdir)) (define-key map "j" (quote dired-goto-file)) (define-key map "k" (quote dired-do-kill-lines)) (define-key map "l" (quote dired-do-redisplay)) (define-key map "m" (quote dired-mark)) (define-key map "n" (quote dired-next-line)) (define-key map "o" (quote dired-find-file-other-window)) (define-key map "" (quote dired-display-file)) (define-key map "p" (quote dired-previous-line)) (define-key map "s" (quote dired-sort-toggle-or-edit)) (define-key map "t" (quote dired-toggle-marks)) (define-key map "u" (quote dired-unmark)) (define-key map "v" (quote dired-view-file)) (define-key map "w" (quote dired-copy-filename-as-kill)) (define-key map "x" (quote dired-do-flagged-delete)) (define-key map "y" (quote dired-show-file-type)) (define-key map "+" (quote dired-create-directory)) (define-key map "<" (quote dired-prev-dirline)) (define-key map ">" (quote dired-next-dirline)) (define-key map "^" (quote dired-up-directory)) (define-key map " " (quote dired-next-line)) (define-key map [remap next-line] (quote dired-next-line)) (define-key map [remap previous-line] (quote dired-previous-line)) (define-key map "$" (quote dired-hide-subdir)) (define-key map "\244" (quote dired-hide-all)) (define-key map (kbd "M-s a C-s") (quote dired-do-isearch)) (define-key map (kbd "M-s a M-C-s") (quote dired-do-isearch-regexp)) (define-key map (kbd "M-s f C-s") (quote dired-isearch-filenames)) (define-key map (kbd "M-s f M-C-s") (quote dired-isearch-filenames-regexp)) (define-key map [remap read-only-mode] (quote dired-toggle-read-only)) (define-key map [remap toggle-read-only] (quote dired-toggle-read-only)) (define-key map "?" (quote dired-summary)) (define-key map "" (quote dired-unmark-backward)) (define-key map [remap undo] (quote dired-undo)) (define-key map [remap advertised-undo] (quote dired-undo)) (define-key map "d" (quote image-dired-display-thumbs)) (define-key map "t" (quote image-dired-tag-files)) (define-key map "r" (quote image-dired-delete-tag)) (define-key map "j" (quote image-dired-jump-thumbnail-buffer)) (define-key map "i" (quote image-dired-dired-display-image)) (define-key map "x" (quote image-dired-dired-display-external)) (define-key map "a" (quote image-dired-display-thumbs-append)) (define-key map "." (quote image-dired-display-thumb)) (define-key map "c" (quote image-dired-dired-comment-files)) (define-key map "f" (quote image-dired-mark-tagged-files)) (define-key map "" (quote image-dired-dired-toggle-marked-thumbs)) (define-key map "e" (quote image-dired-dired-edit-comment-and-tags)) (define-key map ":d" (quote epa-dired-do-decrypt)) (define-key map ":v" (quote epa-dired-do-verify)) (define-key map ":s" (quote epa-dired-do-sign)) (define-key map ":e" (quote epa-dired-do-encrypt)) (define-key map [menu-bar subdir] (cons "Subdir" (make-sparse-keymap "Subdir"))) (define-key map [menu-bar subdir hide-all] (quote (menu-item "Hide All" dired-hide-all :help "Hide all subdirectories, leave only header lines"))) (define-key map [menu-bar subdir hide-subdir] (quote (menu-item "Hide/UnHide Subdir" dired-hide-subdir :help "Hide or unhide current directory listing"))) (define-key map [menu-bar subdir tree-down] (quote (menu-item "Tree Down" dired-tree-down :help "Go to first subdirectory header down the tree"))) (define-key map [menu-bar subdir tree-up] (quote (menu-item "Tree Up" dired-tree-up :help "Go to first subdirectory header up the tree"))) (define-key map [menu-bar subdir up] (quote (menu-item "Up Directory" dired-up-directory :help "Edit the parent directory"))) (define-key map [menu-bar subdir prev-subdir] (quote (menu-item "Prev Subdir" dired-prev-subdir :help "Go to previous subdirectory header line"))) (define-key map [menu-bar subdir next-subdir] (quote (menu-item "Next Subdir" dired-next-subdir :help "Go to next subdirectory header line"))) (define-key map [menu-bar subdir prev-dirline] (quote (menu-item "Prev Dirline" dired-prev-dirline :help "Move to next directory-file line"))) (define-key map [menu-bar subdir next-dirline] (quote (menu-item "Next Dirline" dired-next-dirline :help "Move to previous directory-file line"))) (define-key map [menu-bar subdir insert] (quote (menu-item "Insert This Subdir" dired-maybe-insert-subdir :help "Insert contents of subdirectory" :enable (let ((f (dired-get-filename nil t))) (and f (file-directory-p f)))))) (define-key map [menu-bar immediate] (cons "Immediate" (make-sparse-keymap "Immediate"))) (define-key map [menu-bar immediate image-dired-dired-display-external] (quote (menu-item "Display Image Externally" image-dired-dired-display-external :help "Display image in external viewer"))) (define-key map [menu-bar immediate image-dired-dired-display-image] (quote (menu-item "Display Image" image-dired-dired-display-image :help "Display sized image in a separate window"))) (define-key map [menu-bar immediate image-dired-dired-toggle-marked-thumbs] (quote (menu-item "Toggle Image Thumbnails in This Buffer" image-dired-dired-toggle-marked-thumbs :help "Add or remove image thumbnails in front of marked file names"))) (define-key map [menu-bar immediate revert-buffer] (quote (menu-item "Refresh" revert-buffer :help "Update contents of shown directories"))) (define-key map [menu-bar immediate dashes] (quote ("--"))) (define-key map [menu-bar immediate isearch-filenames-regexp] (quote (menu-item "Isearch Regexp in File Names..." dired-isearch-filenames-regexp :help "Incrementally search for regexp in file names only"))) (define-key map [menu-bar immediate isearch-filenames] (quote (menu-item "Isearch in File Names..." dired-isearch-filenames :help "Incrementally search for string in file names only."))) (define-key map [menu-bar immediate compare-directories] (quote (menu-item "Compare Directories..." dired-compare-directories :help "Mark files with different attributes in two dired buffers"))) (define-key map [menu-bar immediate backup-diff] (quote (menu-item "Compare with Backup" dired-backup-diff :help "Diff file at cursor with its latest backup"))) (define-key map [menu-bar immediate diff] (quote (menu-item "Diff..." dired-diff :help "Compare file at cursor with another file"))) (define-key map [menu-bar immediate view] (quote (menu-item "View This File" dired-view-file :help "Examine file at cursor in read-only mode"))) (define-key map [menu-bar immediate display] (quote (menu-item "Display in Other Window" dired-display-file :help "Display file at cursor in other window"))) (define-key map [menu-bar immediate find-file-other-window] (quote (menu-item "Find in Other Window" dired-find-file-other-window :help "Edit file at cursor in other window"))) (define-key map [menu-bar immediate find-file] (quote (menu-item "Find This File" dired-find-file :help "Edit file at cursor"))) (define-key map [menu-bar immediate create-directory] (quote (menu-item "Create Directory..." dired-create-directory :help "Create a directory"))) (define-key map [menu-bar immediate wdired-mode] (quote (menu-item "Edit File Names" wdired-change-to-wdired-mode :help "Put a dired buffer in a mode in which filenames are editable" :keys "C-x C-q" :filter (lambda (x) (if (eq major-mode (quote dired-mode)) x))))) (define-key map [menu-bar regexp] (cons "Regexp" (make-sparse-keymap "Regexp"))) (define-key map [menu-bar regexp image-dired-mark-tagged-files] (quote (menu-item "Mark From Image Tag..." image-dired-mark-tagged-files :help "Mark files whose image tags matches regexp"))) (define-key map [menu-bar regexp dashes-1] (quote ("--"))) (define-key map [menu-bar regexp downcase] (quote (menu-item "Downcase" dired-downcase :enable (or (not (fboundp (quote msdos-long-file-names))) (msdos-long-file-names)) :help "Rename marked files to lower-case name"))) (define-key map [menu-bar regexp upcase] (quote (menu-item "Upcase" dired-upcase :enable (or (not (fboundp (quote msdos-long-file-names))) (msdos-long-file-names)) :help "Rename marked files to upper-case name"))) (define-key map [menu-bar regexp hardlink] (quote (menu-item "Hardlink..." dired-do-hardlink-regexp :help "Make hard links for files matching regexp"))) (define-key map [menu-bar regexp symlink] (quote (menu-item "Symlink..." dired-do-symlink-regexp :visible (fboundp (quote make-symbolic-link)) :help "Make symbolic links for files matching regexp"))) (define-key map [menu-bar regexp rename] (quote (menu-item "Rename..." dired-do-rename-regexp :help "Rename marked files matching regexp"))) (define-key map [menu-bar regexp copy] (quote (menu-item "Copy..." dired-do-copy-regexp :help "Copy marked files matching regexp"))) (define-key map [menu-bar regexp flag] (quote (menu-item "Flag..." dired-flag-files-regexp :help "Flag files matching regexp for deletion"))) (define-key map [menu-bar regexp mark] (quote (menu-item "Mark..." dired-mark-files-regexp :help "Mark files matching regexp for future operations"))) (define-key map [menu-bar regexp mark-cont] (quote (menu-item "Mark Containing..." dired-mark-files-containing-regexp :help "Mark files whose contents matches regexp"))) (define-key map [menu-bar mark] (cons "Mark" (make-sparse-keymap "Mark"))) (define-key map [menu-bar mark prev] (quote (menu-item "Previous Marked" dired-prev-marked-file :help "Move to previous marked file"))) (define-key map [menu-bar mark next] (quote (menu-item "Next Marked" dired-next-marked-file :help "Move to next marked file"))) (define-key map [menu-bar mark marks] (quote (menu-item "Change Marks..." dired-change-marks :help "Replace marker with another character"))) (define-key map [menu-bar mark unmark-all] (quote (menu-item "Unmark All" dired-unmark-all-marks))) (define-key map [menu-bar mark symlinks] (quote (menu-item "Mark Symlinks" dired-mark-symlinks :visible (fboundp (quote make-symbolic-link)) :help "Mark all symbolic links"))) (define-key map [menu-bar mark directories] (quote (menu-item "Mark Directories" dired-mark-directories :help "Mark all directories except `.' and `..'"))) (define-key map [menu-bar mark directory] (quote (menu-item "Mark Old Backups" dired-clean-directory :help "Flag old numbered backups for deletion"))) (define-key map [menu-bar mark executables] (quote (menu-item "Mark Executables" dired-mark-executables :help "Mark all executable files"))) (define-key map [menu-bar mark garbage-files] (quote (menu-item "Flag Garbage Files" dired-flag-garbage-files :help "Flag unneeded files for deletion"))) (define-key map [menu-bar mark backup-files] (quote (menu-item "Flag Backup Files" dired-flag-backup-files :help "Flag all backup files for deletion"))) (define-key map [menu-bar mark auto-save-files] (quote (menu-item "Flag Auto-save Files" dired-flag-auto-save-files :help "Flag auto-save files for deletion"))) (define-key map [menu-bar mark deletion] (quote (menu-item "Flag" dired-flag-file-deletion :help "Flag current line's file for deletion"))) (define-key map [menu-bar mark unmark] (quote (menu-item "Unmark" dired-unmark :help "Unmark or unflag current line's file"))) (define-key map [menu-bar mark mark] (quote (menu-item "Mark" dired-mark :help "Mark current line's file for future operations"))) (define-key map [menu-bar mark toggle-marks] (quote (menu-item "Toggle Marks" dired-toggle-marks :help "Mark unmarked files, unmark marked ones"))) (define-key map [menu-bar operate] (cons "Operate" (make-sparse-keymap "Operate"))) (define-key map [menu-bar operate image-dired-delete-tag] (quote (menu-item "Delete Image Tag..." image-dired-delete-tag :help "Delete image tag from current or marked files"))) (define-key map [menu-bar operate image-dired-tag-files] (quote (menu-item "Add Image Tags..." image-dired-tag-files :help "Add image tags to current or marked files"))) (define-key map [menu-bar operate image-dired-dired-comment-files] (quote (menu-item "Add Image Comment..." image-dired-dired-comment-files :help "Add image comment to current or marked files"))) (define-key map [menu-bar operate image-dired-display-thumbs] (quote (menu-item "Display Image Thumbnails" image-dired-display-thumbs :help "Display image thumbnails for current or marked image files"))) (define-key map [menu-bar operate dashes-4] (quote ("--"))) (define-key map [menu-bar operate epa-dired-do-decrypt] (quote (menu-item "Decrypt..." epa-dired-do-decrypt :help "Decrypt file at cursor"))) (define-key map [menu-bar operate epa-dired-do-verify] (quote (menu-item "Verify" epa-dired-do-verify :help "Verify digital signature of file at cursor"))) (define-key map [menu-bar operate epa-dired-do-sign] (quote (menu-item "Sign..." epa-dired-do-sign :help "Create digital signature of file at cursor"))) (define-key map [menu-bar operate epa-dired-do-encrypt] (quote (menu-item "Encrypt..." epa-dired-do-encrypt :help "Encrypt file at cursor"))) (define-key map [menu-bar operate dashes-3] (quote ("--"))) (define-key map [menu-bar operate query-replace] (quote (menu-item "Query Replace in Files..." dired-do-query-replace-regexp :help "Replace regexp in marked files"))) (define-key map [menu-bar operate search] (quote (menu-item "Search Files..." dired-do-search :help "Search marked files for regexp"))) (define-key map [menu-bar operate isearch-regexp] (quote (menu-item "Isearch Regexp Files..." dired-do-isearch-regexp :help "Incrementally search marked files for regexp"))) (define-key map [menu-bar operate isearch] (quote (menu-item "Isearch Files..." dired-do-isearch :help "Incrementally search marked files for string"))) (define-key map [menu-bar operate chown] (quote (menu-item "Change Owner..." dired-do-chown :visible (not (memq system-type (quote (ms-dos windows-nt)))) :help "Change the owner of marked files"))) (define-key map [menu-bar operate chgrp] (quote (menu-item "Change Group..." dired-do-chgrp :visible (not (memq system-type (quote (ms-dos windows-nt)))) :help "Change the group of marked files"))) (define-key map [menu-bar operate chmod] (quote (menu-item "Change Mode..." dired-do-chmod :help "Change mode (attributes) of marked files"))) (define-key map [menu-bar operate touch] (quote (menu-item "Change Timestamp..." dired-do-touch :help "Change timestamp of marked files"))) (define-key map [menu-bar operate load] (quote (menu-item "Load" dired-do-load :help "Load marked Emacs Lisp files"))) (define-key map [menu-bar operate compile] (quote (menu-item "Byte-compile" dired-do-byte-compile :help "Byte-compile marked Emacs Lisp files"))) (define-key map [menu-bar operate compress] (quote (menu-item "Compress" dired-do-compress :help "Compress/uncompress marked files"))) (define-key map [menu-bar operate print] (quote (menu-item "Print..." dired-do-print :help "Ask for print command and print marked files"))) (define-key map [menu-bar operate hardlink] (quote (menu-item "Hardlink to..." dired-do-hardlink :help "Make hard links for current or marked files"))) (define-key map [menu-bar operate symlink] (quote (menu-item "Symlink to..." dired-do-symlink :visible (fboundp (quote make-symbolic-link)) :help "Make symbolic links for current or marked files"))) (define-key map [menu-bar operate async-command] (quote (menu-item "Asynchronous Shell Command..." dired-do-async-shell-command :help "Run a shell command asynchronously on current or marked files"))) (define-key map [menu-bar operate command] (quote (menu-item "Shell Command..." dired-do-shell-command :help "Run a shell command on current or marked files"))) (define-key map [menu-bar operate delete] (quote (menu-item "Delete" dired-do-delete :help "Delete current file or all marked files"))) (define-key map [menu-bar operate rename] (quote (menu-item "Rename to..." dired-do-rename :help "Rename current file or move marked files"))) (define-key map [menu-bar operate copy] (quote (menu-item "Copy to..." dired-do-copy :help "Copy current file or all marked files"))) map)) nil [56055 77035])
            ("put" code nil nil [77099 77137])
            ("dired-mode" function (:arguments ("dirname" "switches")) nil [77194 81972])
            ("dired-summary" function (:user-visible-flag t) nil [82036 82334])
            ("dired-undo" function (:user-visible-flag t) nil [82336 82705])
            ("dired-toggle-read-only" function (:user-visible-flag t) nil [82707 83076])
            ("dired-next-line" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [83078 83292])
            ("dired-previous-line" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [83294 83514])
            ("dired-next-dirline" function
               (:user-visible-flag t
                :arguments ("arg" "opoint"))
                nil [83516 83920])
            ("dired-prev-dirline" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [83922 84051])
            ("dired-up-directory" function
               (:user-visible-flag t
                :arguments ("other-window"))
                nil [84053 84656])
            ("dired-get-file-for-visit" function (:user-visible-flag t) nil [84658 85224])
            ("define-obsolete-function-alias" code nil nil [85290 85374])
            ("dired-find-file" function (:user-visible-flag t) nil [85375 85674])
            ("dired-find-alternate-file" function (:user-visible-flag t) nil [85676 85881])
            ("dired-mouse-find-file-other-window" function
               (:user-visible-flag t
                :arguments ("event"))
                nil [85986 86694])
            ("dired-view-file" function (:user-visible-flag t) nil [86696 87103])
            ("dired-find-file-other-window" function (:user-visible-flag t) nil [87105 87276])
            ("dired-display-file" function (:user-visible-flag t) nil [87278 87454])
            ("dired-get-filename" function (:arguments ("localp" "no-error-if-not-filep")) nil [87533 91597])
            ("dired-string-replace-match" function (:arguments ("regexp" "string" "newtext" "literal" "global")) nil [91599 92309])
            ("dired-make-absolute" function (:arguments ("file" "dir")) nil [92311 92739])
            ("dired-make-relative" function (:arguments ("file" "dir")) nil [92741 93298])
            ("dired-permission-flags-regexp" variable (:default-value "\\([^ ]\\)[-r][-w]\\([^ ]\\)[-r][-w]\\([^ ]\\)[-r][-w]\\([^ ]\\)") nil [93366 93538])
            ("dired-move-to-filename" function (:arguments ("raise-error" "eol")) nil [93653 94587])
            ("dired-move-to-end-of-filename" function (:arguments ("no-error")) nil [94589 97042])
            ("dired-copy-filename-as-kill" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [97094 98393])
            ("dired-buffers-for-dir" function (:arguments ("dir" "file")) nil [98471 99557])
            ("dired-glob-regexp" function (:arguments ("pattern")) nil [99559 100752])
            ("dired-advertise" function nil nil [100756 101196])
            ("dired-unadvertise" function (:arguments ("dir")) nil [101198 101588])
            ("dired-in-this-tree" function (:arguments ("file" "dir")) nil [101629 101807])
            ("dired-normalize-subdir" function (:arguments ("dir")) nil [101809 102128])
            ("dired-get-subdir" function nil nil [102130 102529])
            ("defalias" code nil nil [102610 102647])
            ("dired-get-subdir-max" function (:arguments ("elt")) nil [102649 102768])
            ("dired-clear-alist" function nil nil [102770 102951])
            ("dired-subdir-index" function (:arguments ("dir")) nil [102953 103289])
            ("dired-next-subdir" function
               (:user-visible-flag t
                :arguments ("arg" "no-error-if-not-found" "no-skip"))
                nil [103291 104099])
            ("dired-build-subdir-alist" function
               (:user-visible-flag t
                :arguments ("switches"))
                nil [104101 106814])
            ("dired-alist-add-1" function (:arguments ("dir" "new-marker")) nil [106816 107012])
            ("dired-goto-next-nontrivial-file" function nil nil [107014 107406])
            ("dired-goto-next-file" function nil nil [107408 107567])
            ("dired-goto-file" function
               (:user-visible-flag t
                :arguments ("file"))
                nil [107569 109011])
            ("dired-goto-file-1" function (:arguments ("file" "full-name" "limit")) nil [109013 110441])
            ("dired-find-subdir" variable nil nil [110443 110469])
            ("dired-initial-position" function (:arguments ("dirname")) nil [110516 110820])
            ("dired-current-directory" function (:arguments ("localp")) nil [111256 111983])
            ("dired-subdir-max" function nil nil [112123 112274])
            ("dired-recursive-deletes" variable (:default-value (quote top)) nil [112296 112980])
            ("dired-re-no-dot" variable (:default-value "^\\([^.]\\|\\.\\([^.]\\|\\..\\)\\).*") nil [113018 113081])
            ("dired-delete-file" function (:arguments ("file" "recursive" "trash")) nil [113278 114283])
            ("dired-do-flagged-delete" function
               (:user-visible-flag t
                :arguments ("nomessage"))
                nil [114285 114986])
            ("dired-do-delete" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [114988 115431])
            ("dired-deletion-confirmer" variable (:default-value (quote yes-or-no-p)) nil [115433 115479])
            ("dired-internal-do-deletions" function (:arguments ("l" "arg" "trash")) nil [115496 117566])
            ("dired-fun-in-all-buffers" function (:arguments ("directory" "file" "fun" "args")) nil [117568 118176])
            ("dired-delete-entry" function (:arguments ("file")) nil [118212 118471])
            ("dired-clean-up-buffers-too" variable nil nil [118473 118508])
            ("dired-clean-up-after-deletion" function (:arguments ("fn")) nil [118510 119585])
            ("dired-marker-regexp" function nil nil [119606 119701])
            ("dired-plural-s" function (:arguments ("count")) nil [119703 119759])
            ("dired-mark-prompt" function (:arguments ("arg" "files")) nil [119761 120552])
            ("dired-pop-to-buffer" function (:arguments ("buf")) nil [120554 121430])
            ("dired-no-confirm" variable nil nil [121432 122097])
            ("dired-mark-pop-up" function (:arguments ("buffer-or-name" "op-symbol" "files" "function" "args")) nil [122099 124029])
            ("dired-format-columns-of-files" function (:arguments ("files")) nil [124031 124191])
            ("dired-repeat-over-lines" function (:arguments ("arg" "function")) nil [124256 125129])
            ("dired-between-files" function nil nil [125131 125393])
            ("dired-next-marked-file" function
               (:user-visible-flag t
                :arguments ("arg" "wrap" "opoint"))
                nil [125395 126036])
            ("dired-prev-marked-file" function
               (:user-visible-flag t
                :arguments ("arg" "wrap"))
                nil [126038 126229])
            ("dired-file-marker" function (:arguments ("file")) nil [126231 126467])
            ("dired-mark-files-in-region" function (:arguments ("start" "end")) nil [126469 126994])
            ("dired-mark" function
               (:user-visible-flag t
                :arguments ("arg" "interactive"))
                nil [126996 128093])
            ("dired-unmark" function
               (:user-visible-flag t
                :arguments ("arg" "interactive"))
                nil [128095 128583])
            ("dired-flag-file-deletion" function
               (:user-visible-flag t
                :arguments ("arg" "interactive"))
                nil [128585 129098])
            ("dired-unmark-backward" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [129100 129416])
            ("dired-toggle-marks" function (:user-visible-flag t) nil [129418 130307])
            ("dired-regexp-history" variable nil nil [130387 130484])
            ("dired-read-regexp" function (:arguments ("prompt" "default" "history")) nil [130486 130612])
            ("dired-mark-files-regexp" function
               (:user-visible-flag t
                :arguments ("regexp" "marker-char"))
                nil [130614 131366])
            ("dired-mark-files-containing-regexp" function
               (:user-visible-flag t
                :arguments ("regexp" "marker-char"))
                nil [131368 132499])
            ("dired-flag-files-regexp" function
               (:user-visible-flag t
                :arguments ("regexp"))
                nil [132501 132906])
            ("dired-mark-symlinks" function
               (:user-visible-flag t
                :arguments ("unflag-p"))
                nil [132908 133181])
            ("dired-mark-directories" function
               (:user-visible-flag t
                :arguments ("unflag-p"))
                nil [133183 133532])
            ("dired-mark-executables" function
               (:user-visible-flag t
                :arguments ("unflag-p"))
                nil [133534 133814])
            ("dired-flag-auto-save-files" function
               (:user-visible-flag t
                :arguments ("unflag-p"))
                nil [133925 135107])
            ("dired-garbage-files-regexp" variable (:default-value (concat (regexp-opt (quote (".log" ".toc" ".dvi" ".bak" ".orig" ".rej" ".aux"))) "\\'")) nil [135109 135459])
            ("dired-flag-garbage-files" function (:user-visible-flag t) nil [135461 135640])
            ("dired-flag-backup-files" function
               (:user-visible-flag t
                :arguments ("unflag-p"))
                nil [135642 136572])
            ("dired-change-marks" function
               (:user-visible-flag t
                :arguments ("old" "new"))
                nil [136574 137302])
            ("dired-unmark-all-marks" function (:user-visible-flag t) nil [137304 137441])
            ("dired-unmark-all-files" function
               (:user-visible-flag t
                :arguments ("mark" "arg"))
                nil [137443 138529])
            ("dired-log-buffer" variable (:default-value "*Dired log*") nil [138598 138637])
            ("dired-why" function (:user-visible-flag t) nil [138639 139192])
            ("dired-log" function (:arguments ("log" "args")) nil [139194 140113])
            ("dired-log-summary" function (:arguments ("string" "failures")) nil [140115 140821])
            ("dired-ls-sorting-switches" variable (:default-value "SXU") nil [141046 141488])
            ("dired-sort-by-date-regexp" variable (:default-value (concat "\\(\\`\\| \\)-[^- ]*t" "[^ " dired-ls-sorting-switches "]*" "\\(\\(\\`\\| +\\)\\(--[^ ]+\\|-[^- t" dired-ls-sorting-switches "]+\\)\\)* *$")) nil [141490 141796])
            ("dired-sort-by-name-regexp" variable (:default-value (concat "\\`\\(\\(\\`\\| +\\)\\(--[^ ]+\\|" "-[^- t" dired-ls-sorting-switches "]+\\)\\)* *$")) nil [141798 141986])
            ("dired-sort-inhibit" variable nil nil [141988 142138])
            ("dired-sort-set-mode-line" function nil nil [142140 142769])
            ("define-obsolete-function-alias" code nil nil [142771 142863])
            ("dired-sort-toggle-or-edit" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [142865 143268])
            ("dired-sort-toggle" function nil nil [143270 144623])
            ("dired-replace-in-string" function (:arguments ("regexp" "newtext" "string")) nil [144732 145199])
            ("dired-sort-other" function (:arguments ("switches" "no-revert")) nil [145201 145669])
            ("dired-subdir-alist-pre-R" variable nil nil [145671 145766])
            ("make-variable-buffer-local" code nil nil [145767 145821])
            ("dired-sort-R-check" function (:arguments ("switches")) nil [145823 147026])
            ("dired-recursive-copies" variable (:default-value (quote top)) nil [147059 147586])
            ("dired-dnd-popup-notice" function nil nil [147588 147733])
            ("declare-function" code nil nil [147735 147791])
            ("dired-dnd-do-ask-action" function (:arguments ("uri")) nil [147793 148219])
            ("declare-function" code nil nil [148221 148277])
            ("declare-function" code nil nil [148278 148326])
            ("declare-function" code nil nil [148363 148438])
            ("declare-function" code nil nil [148439 148492])
            ("dired-overwrite-confirmed" variable nil nil [148494 148528])
            ("dired-dnd-handle-local-file" function (:arguments ("uri" "action")) nil [148558 150364])
            ("dired-dnd-handle-file" function (:arguments ("uri" "action")) nil [150366 150810])
            ("desktop" include nil nil [150856 150874])
            ("dired-desktop-buffer-misc-data" function (:arguments ("dirname")) nil [150877 151495])
            ("dired-restore-desktop-buffer" function (:arguments ("_file-name" "_buffer-name" "misc-data")) nil [151497 152406])
            ("add-to-list" code nil nil [152408 152502])
            ("dired-diff" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [153829 154463])
            ("dired-backup-diff" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [154465 154836])
            ("dired-compare-directories" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [154838 156043])
            ("dired-do-chmod" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [156045 156283])
            ("dired-do-chgrp" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [156285 156485])
            ("dired-do-chown" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [156487 156687])
            ("dired-do-touch" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [156689 156911])
            ("dired-do-print" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [156913 157110])
            ("dired-clean-directory" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [157112 157532])
            ("dired-do-async-shell-command" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [157534 158298])
            ("dired-do-shell-command" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [158300 160599])
            ("dired-run-shell-command" function (:prototype-flag t) nil [160601 160676])
            ("dired-do-kill-lines" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [160678 161317])
            ("dired-compress-file" function (:prototype-flag t) nil [161319 161387])
            ("dired-query" function (:prototype-flag t) nil [161389 161895])
            ("dired-do-compress" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [161897 162020])
            ("dired-do-byte-compile" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [162022 162150])
            ("dired-do-load" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [162152 162268])
            ("dired-do-redisplay" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [162270 162994])
            ("dired-add-file" function (:prototype-flag t) nil [162996 163085])
            ("dired-remove-file" function (:prototype-flag t) nil [163087 163153])
            ("dired-relist-file" function (:prototype-flag t) nil [163155 163296])
            ("dired-copy-file" function (:prototype-flag t) nil [163298 163373])
            ("dired-rename-file" function (:prototype-flag t) nil [163375 163470])
            ("dired-create-directory" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [163472 163628])
            ("dired-do-copy" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [163630 164466])
            ("dired-do-symlink" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [164468 165003])
            ("dired-do-hardlink" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [165005 165484])
            ("dired-do-rename" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [165486 165909])
            ("dired-do-rename-regexp" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [165911 166639])
            ("dired-do-copy-regexp" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [166641 166852])
            ("dired-do-hardlink-regexp" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [166854 167073])
            ("dired-do-symlink-regexp" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [167075 167292])
            ("dired-upcase" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [167294 167414])
            ("dired-downcase" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [167416 167538])
            ("dired-maybe-insert-subdir" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [167540 168544])
            ("dired-insert-subdir" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [168546 169068])
            ("dired-prev-subdir" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [169070 169300])
            ("dired-goto-subdir" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [169302 169528])
            ("dired-mark-subdir-files" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [169530 169776])
            ("dired-kill-subdir" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [169778 169932])
            ("dired-tree-up" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [169934 170028])
            ("dired-tree-down" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [170030 170113])
            ("dired-hide-subdir" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [170115 170337])
            ("dired-hide-all" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [170339 170604])
            ("dired-isearch-filenames-setup" function (:prototype-flag t) nil [170606 170769])
            ("dired-isearch-filenames" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [170771 170909])
            ("dired-isearch-filenames-regexp" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [170911 171056])
            ("dired-do-isearch" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [171058 171175])
            ("dired-do-isearch-regexp" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [171177 171301])
            ("dired-do-search" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [171303 171525])
            ("dired-do-query-replace-regexp" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [171527 171882])
            ("dired-show-file-type" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [171884 172163])
            ("dired-jump" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [172357 172869])
            ("dired-jump-other-window" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [172871 173009])
            ("dired-do-relsymlink" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [173011 173409])
            ("dired" package nil nil [173467 173483])
            ("run-hooks" code nil nil [173485 173513]))          
      :file "dired.el.gz"
      :pointmax 173565
      :fsize 48350
      :lastmodtime '(20730 4700 0 0)
      :unmatched-syntax '((close-paren 150874 . 150875) (symbol 150838 . 150855) (open-paren 150837 . 150838)))
    (semanticdb-table "ibuf-macs.el.gz"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("cl-lib" include nil nil [991 1008])
            ("ibuffer-aif" function (:arguments ("test" "true-body" "false-body")) nil [1082 1534])
            ("ibuffer-awhen" function (:arguments ("test" "body")) nil [1536 1766])
            ("ibuffer-save-marks" function (:arguments ("body")) nil [1768 2375])
            ("cl-defmacro" code nil nil [2392 4457])
            ("cl-defmacro" code nil nil [4474 5642])
            ("cl-defmacro" code nil nil [5659 9347])
            ("cl-defmacro" code nil nil [9364 10579])
            ("ibuf-macs" package nil nil [10581 10601]))          
      :file "ibuf-macs.el.gz"
      :pointmax 10630
      :fsize 3783
      :lastmodtime '(20707 18685 0 0)
      :unmatched-syntax '((close-paren 1008 . 1009) (symbol 973 . 990) (open-paren 972 . 973)))
    (semanticdb-table "font-core.el.gz"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("font-lock-defaults" variable nil nil [1081 3605])
            ("put" code nil nil [3621 3670])
            ("make-variable-buffer-local" code nil nil [3671 3719])
            ("font-lock-function" variable (:default-value (quote font-lock-default-function)) nil [3721 3921])
            ("font-lock-major-mode" variable nil nil [3988 4017])
            ("define-minor-mode" code nil nil [4019 6891])
            ("font-lock-change-mode" function nil nil [6986 7040])
            ("font-lock-defontify" function nil nil [7042 7476])
            ("font-lock-set-defaults" variable nil nil [7478 7509])
            ("font-lock-default-function" function (:arguments ("mode")) nil [7510 8590])
            ("turn-on-font-lock" function nil nil [8592 8733])
            ("font-lock-global-modes" variable (:default-value t) nil [11658 12503])
            ("turn-on-font-lock-if-desired" function nil nil [12505 12819])
            ("define-globalized-minor-mode" code nil nil [12821 13132])
            ("font-core" package nil nil [13169 13189]))          
      :file "font-core.el.gz"
      :pointmax 13218
      :fsize 4832
      :lastmodtime '(20707 18685 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "linum.el.gz"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("linum-version" variable
               (:constant-flag t
                :default-value "0.9x")
                nil [1132 1163])
            ("linum-overlays" variable nil nil [1165 1224])
            ("linum-available" variable nil nil [1225 1285])
            ("linum-before-numbering-hook" variable nil nil [1286 1389])
            ("mapc" code nil nil [1391 1460])
            ("linum" customgroup (:user-visible-flag t) nil [1462 1546])
            ("linum-format" variable (:default-value (quote dynamic)) nil [1548 2023])
            ("linum" variable
               (:default-value (quote ((t :inherit (shadow default))))
                :type "face")
                nil [2025 2151])
            ("linum-eager" variable (:default-value t) nil [2153 2416])
            ("linum-delay" variable nil nil [2418 2538])
            ("define-minor-mode" code nil nil [2555 4397])
            ("define-globalized-minor-mode" code nil nil [4414 4482])
            ("linum-on" function nil nil [4484 4547])
            ("linum-delete-overlays" function nil nil [4549 4832])
            ("linum-update-current" function nil nil [4834 4947])
            ("linum-update" function (:arguments ("buffer")) nil [4949 5364])
            ("linum-update-window" function (:arguments ("win")) nil [5366 7424])
            ("linum-after-change" function (:arguments ("beg" "end" "_len")) nil [7426 7694])
            ("linum-after-scroll" function (:arguments ("win" "_start")) nil [7696 7772])
            ("linum-schedule" function nil nil [7837 7991])
            ("linum-unload-function" function nil nil [8106 8232])
            ("linum" package nil nil [8234 8250]))          
      :file "linum.el.gz"
      :pointmax 8275
      :fsize 2828
      :lastmodtime '(20707 18685 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "info-look.el.gz"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("info" include nil nil [1493 1508])
            ("info-lookup" customgroup (:user-visible-flag t) nil [1510 1606])
            ("info-lookup-mode" variable nil nil [1608 1814])
            ("make-variable-buffer-local" code nil nil [1815 1861])
            ("info-lookup-other-window-flag" variable (:default-value t) nil [1863 2003])
            ("info-lookup-highlight-face" variable (:default-value (quote match)) nil [2005 2184])
            ("info-lookup-highlight-overlay" variable nil nil [2186 2270])
            ("info-lookup-file-name-alist" variable (:default-value (quote (("\\`ac\\(local\\|site\\|include\\)\\.m4\\'" . autoconf-mode)))) nil [2272 2672])
            ("info-lookup-history" variable nil nil [2674 2743])
            ("info-lookup-alist" variable nil nil [2745 4280])
            ("info-lookup->topic-value" function (:arguments ("topic")) nil [4282 4365])
            ("info-lookup->mode-value" function (:arguments ("topic" "mode")) nil [4367 4462])
            ("info-lookup->regexp" function (:arguments ("topic" "mode")) nil [4464 4554])
            ("info-lookup->ignore-case" function (:arguments ("topic" "mode")) nil [4556 4651])
            ("info-lookup->doc-spec" function (:arguments ("topic" "mode")) nil [4653 4745])
            ("info-lookup->parse-rule" function (:arguments ("topic" "mode")) nil [4747 4841])
            ("info-lookup->other-modes" function (:arguments ("topic" "mode")) nil [4843 4938])
            ("info-lookup-add-help" function (:arguments ("arg")) nil [4940 5498])
            ("info-lookup-maybe-add-help" function (:arguments ("arg")) nil [5500 5713])
            ("info-lookup-add-help*" function (:arguments ("maybe" "arg")) nil [5715 7125])
            ("info-lookup-cache" variable nil nil [7127 7645])
            ("info-lookup->cache" function (:arguments ("topic")) nil [7647 7814])
            ("info-lookup->topic-cache" function (:arguments ("topic")) nil [7816 7891])
            ("info-lookup->mode-cache" function (:arguments ("topic" "mode")) nil [7893 7985])
            ("info-lookup->initialized" function (:arguments ("topic" "mode")) nil [7987 8079])
            ("info-lookup->completions" function (:arguments ("topic" "mode")) nil [8081 8260])
            ("info-lookup->refer-modes" function (:arguments ("topic" "mode")) nil [8262 8441])
            ("info-lookup->all-modes" function (:arguments ("topic" "mode")) nil [8443 8538])
            ("info-lookup-quick-all-modes" function (:arguments ("topic" "mode")) nil [8540 8640])
            ("info-lookup-reset" function (:user-visible-flag t) nil [8657 8922])
            ("info-lookup-symbol" function
               (:user-visible-flag t
                :arguments ("symbol" "mode"))
                nil [8999 9530])
            ("info-lookup-file" function
               (:user-visible-flag t
                :arguments ("file" "mode"))
                nil [9605 10088])
            ("info-lookup-interactive-arguments" function (:arguments ("topic" "query")) nil [10090 10950])
            ("info-lookup-select-mode" function nil nil [10952 11430])
            ("info-lookup-change-mode" function (:arguments ("topic")) nil [11432 11938])
            ("info-lookup" function (:arguments ("topic" "item" "mode")) nil [11940 16123])
            ("info-lookup-setup-mode" function (:arguments ("topic" "mode")) nil [16125 17413])
            ("info-lookup-make-completions" function (:arguments ("topic" "mode")) nil [17415 19387])
            ("info-lookup-guess-default" function (:arguments ("topic" "mode")) nil [19389 20032])
            ("info-lookup-guess-default*" function (:arguments ("topic" "mode")) nil [20034 20955])
            ("info-lookup-guess-c-symbol" function nil nil [20957 21924])
            ("info-lookup-guess-custom-symbol" function nil nil [21926 23297])
            ("info-complete-symbol" function
               (:user-visible-flag t
                :arguments ("mode"))
                nil [23314 23605])
            ("info-complete-file" function
               (:user-visible-flag t
                :arguments ("mode"))
                nil [23622 23903])
            ("info-lookup-completions-at-point" function (:arguments ("topic" "mode")) nil [23905 25099])
            ("info-complete" function (:arguments ("topic" "mode")) nil [25101 25423])
            ("info-lookup-maybe-add-help" code nil nil [25462 26305])
            ("info-lookup-maybe-add-help" code nil nil [26307 26427])
            ("info-lookup-maybe-add-help" code nil nil [26429 26677])
            ("info-lookup-maybe-add-help" code nil nil [26679 26903])
            ("info-lookup-maybe-add-help" code nil nil [26905 28118])
            ("info-lookup-maybe-add-help" code nil nil [28120 28465])
            ("info-lookup-maybe-add-help" code nil nil [28467 28608])
            ("info-lookup-maybe-add-help" code nil nil [28610 30730])
            ("info-lookup-maybe-add-help" code nil nil [30732 31402])
            ("info-lookup-maybe-add-help" code nil nil [31404 32263])
            ("info-lookup-maybe-add-help" code nil nil [32265 32409])
            ("info-lookup-maybe-add-help" code nil nil [32411 32573])
            ("info-lookup-maybe-add-help" code nil nil [32575 33531])
            ("info-lookup-maybe-add-help" code nil nil [33609 33754])
            ("info-lookup-maybe-add-help" code nil nil [33756 33898])
            ("info-lookup-maybe-add-help" code nil nil [33900 34028])
            ("info-lookup-maybe-add-help" code nil nil [34030 34270])
            ("info-lookup-maybe-add-help" code nil nil [34272 34889])
            ("info-lookup-maybe-add-help" code nil nil [34891 35090])
            ("info-lookup-maybe-add-help" code nil nil [35092 35204])
            ("info-lookup-maybe-add-help" code nil nil [35923 38006])
            ("info-lookup-maybe-add-help" code nil nil [38194 38618])
            ("info-lookup-maybe-add-help" code nil nil [38620 38794])
            ("info-lookup-maybe-add-help" code nil nil [38796 38906])
            ("info-look" package nil nil [38909 38929]))          
      :file "info-look.el.gz"
      :pointmax 38958
      :fsize 11185
      :lastmodtime '(20770 60415 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "info.el.gz"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("info" customgroup (:user-visible-flag t) nil [1254 1323])
            ("Info-history" variable nil nil [1326 1460])
            ("Info-history-forward" variable nil nil [1462 1637])
            ("Info-history-list" variable nil nil [1639 1770])
            ("Info-history-skip-intermediate-nodes" variable (:default-value t) nil [1772 2104])
            ("Info-enable-edit" variable nil nil [2106 2494])
            ("Info-enable-active-nodes" variable nil nil [2496 2654])
            ("put" code nil nil [2655 2710])
            ("info-node" variable
               (:default-value (quote ((((class color) (background light)) :foreground "brown" :weight bold :slant italic) (((class color) (background dark)) :foreground "white" :weight bold :slant italic) (t :weight bold :slant italic)))
                :type "face")
                nil [2712 2987])
            ("info-title-1" variable
               (:default-value (quote ((((type tty pc) (class color) (background light)) :foreground "green" :weight bold) (((type tty pc) (class color) (background dark)) :foreground "yellow" :weight bold) (t :height 1.2 :inherit info-title-2)))
                :type "face")
                nil [2989 3292])
            ("define-obsolete-face-alias" code nil nil [3293 3361])
            ("info-title-2" variable
               (:default-value (quote ((((type tty pc) (class color)) :foreground "lightblue" :weight bold) (t :height 1.2 :inherit info-title-3)))
                :type "face")
                nil [3363 3553])
            ("define-obsolete-face-alias" code nil nil [3554 3622])
            ("info-title-3" variable
               (:default-value (quote ((((type tty pc) (class color)) :weight bold) (t :height 1.2 :inherit info-title-4)))
                :type "face")
                nil [3624 3790])
            ("define-obsolete-face-alias" code nil nil [3791 3859])
            ("info-title-4" variable
               (:default-value (quote ((((type tty pc) (class color)) :weight bold) (t :weight bold :inherit variable-pitch)))
                :type "face")
                nil [3861 4030])
            ("define-obsolete-face-alias" code nil nil [4031 4099])
            ("info-menu-header" variable
               (:default-value (quote ((((type tty pc)) :underline t :weight bold) (t :inherit variable-pitch :weight bold)))
                :type "face")
                nil [4101 4292])
            ("info-menu-star" variable
               (:default-value (quote ((((class color)) :foreground "red1") (t :underline t)))
                :type "face")
                nil [4294 4442])
            ("define-obsolete-face-alias" code nil nil [4443 4507])
            ("info-xref" variable
               (:default-value (quote ((t :inherit link)))
                :type "face")
                nil [4509 4612])
            ("info-xref-visited" variable
               (:default-value (quote ((t :inherit (link-visited info-xref))))
                :type "face")
                nil [4614 4761])
            ("Info-fontify-visited-nodes" variable (:default-value t) nil [4763 4933])
            ("Info-fontify-maximum-menu-size" variable (:default-value 100000) nil [4935 5126])
            ("Info-use-header-line" variable (:default-value t) nil [5128 5331])
            ("info-header-xref" variable
               (:default-value (quote ((t :inherit info-xref)))
                :type "face")
                nil [5333 5455])
            ("info-header-node" variable
               (:default-value (quote ((t :inherit info-node)))
                :type "face")
                nil [5457 5568])
            ("progn" code nil nil [5916 8944])
            ("Info-directory-list" variable nil nil [8946 10495])
            ("Info-additional-directory-list" variable nil nil [10497 10730])
            ("Info-scroll-prefer-subnodes" variable nil nil [10732 11364])
            ("Info-hide-note-references" variable (:default-value t) nil [11366 12142])
            ("Info-refill-paragraphs" variable nil nil [12144 12509])
            ("Info-breadcrumbs-depth" variable (:default-value 4) nil [12511 12670])
            ("Info-search-whitespace-regexp" variable (:default-value "\\s-+") nil [12672 13066])
            ("Info-isearch-search" variable (:default-value t) nil [13068 13761])
            ("Info-isearch-initial-node" variable nil nil [13763 13801])
            ("Info-isearch-initial-history" variable nil nil [13802 13843])
            ("Info-isearch-initial-history-list" variable nil nil [13844 13890])
            ("Info-mode-hook" variable (:default-value (unless (and (boundp (quote Info-fontify)) (null Info-fontify)) (quote (turn-on-font-lock)))) nil [13892 14123])
            ("Info-selection-hook" variable nil nil [14125 14238])
            ("Info-edit-mode-hook" variable nil nil [14240 14319])
            ("Info-current-file" variable nil nil [14321 14547])
            ("Info-current-subfile" variable nil nil [14549 14701])
            ("Info-current-node" variable nil nil [14703 14787])
            ("Info-tag-table-marker" variable nil nil [14789 14938])
            ("Info-tag-table-buffer" variable nil nil [14940 15015])
            ("Info-current-file-completions" variable nil nil [15017 15109])
            ("Info-file-supports-index-cookies" variable nil nil [15111 15213])
            ("Info-file-supports-index-cookies-list" variable nil nil [15215 15456])
            ("Info-index-alternatives" variable nil nil [15458 15554])
            ("Info-point-loc" variable nil nil [15556 15806])
            ("Info-standalone" variable nil nil [15808 15896])
            ("Info-file-attributes" variable nil nil [15898 16038])
            ("Info-toc-nodes" variable nil nil [16040 16404])
            ("Info-index-nodes" variable nil nil [16406 16556])
            ("Info-virtual-files" variable nil nil [16558 17079])
            ("Info-virtual-nodes" variable nil nil [17081 17576])
            ("Info-current-node-virtual" variable nil nil [17578 17665])
            ("Info-virtual-file-p" function (:arguments ("filename")) nil [17667 17794])
            ("Info-virtual-fun" function (:arguments ("op" "filename" "nodename")) nil [17796 18492])
            ("Info-virtual-call" function (:arguments ("virtual-fun" "args")) nil [18494 18677])
            ("Info-suffix-list" variable (:default-value (if (eq system-type (quote ms-dos)) (quote ((".gz" . "gunzip") (".z" . "gunzip") (".bz2" "bzip2" "-dc") (".inz" . "gunzip") (".igz" . "gunzip") (".info.Z" . "gunzip") (".info.gz" . "gunzip") ("-info.Z" . "gunzip") ("-info.gz" . "gunzip") ("/index.gz" . "gunzip") ("/index.z" . "gunzip") (".inf") (".info") ("-info") ("/index") (""))) (quote ((".info.Z" . "uncompress") (".info.Y" . "unyabba") (".info.gz" . "gunzip") (".info.z" . "gunzip") (".info.bz2" "bzip2" "-dc") (".info.xz" . "unxz") (".info") ("-info.Z" . "uncompress") ("-info.Y" . "unyabba") ("-info.gz" . "gunzip") ("-info.bz2" "bzip2" "-dc") ("-info.z" . "gunzip") ("-info.xz" . "unxz") ("-info") ("/index.Z" . "uncompress") ("/index.Y" . "unyabba") ("/index.gz" . "gunzip") ("/index.z" . "gunzip") ("/index.bz2" "bzip2" "-dc") ("/index.xz" . "unxz") ("/index") (".Z" . "uncompress") (".Y" . "unyabba") (".gz" . "gunzip") (".z" . "gunzip") (".bz2" "bzip2" "-dc") (".xz" . "unxz") (""))))) nil [18681 20656])
            ("info-insert-file-contents-1" function (:arguments ("filename" "suffix" "lfn")) nil [20839 21756])
            ("info-file-exists-p" function (:arguments ("filename")) nil [21758 21869])
            ("info-insert-file-contents" function (:arguments ("filename" "visit")) nil [21871 24999])
            ("Info-file-supports-index-cookies" function (:arguments ("file")) nil [25001 26156])
            ("Info-default-dirs" function nil nil [26160 27743])
            ("info-initialize" function nil nil [27752 28811])
            ("info-other-window" function
               (:user-visible-flag t
                :arguments ("file-or-node"))
                nil [28828 29105])
            ("info" function
               (:user-visible-flag t
                :arguments ("file-or-node" "buffer"))
                nil [29179 30500])
            ("info-setup" function (:arguments ("file-or-node" "buffer")) nil [30502 31243])
            ("info-emacs-manual" function (:user-visible-flag t) nil [31260 31364])
            ("info-emacs-bug" function (:user-visible-flag t) nil [31381 31522])
            ("info-standalone" function nil nil [31539 32141])
            ("Info-node-at-bob-matching" function (:arguments ("regexp")) nil [32723 33041])
            ("Info-find-file" function (:arguments ("filename" "noerror")) nil [33043 35300])
            ("Info-find-node" function (:arguments ("filename" "nodename" "no-going-back")) nil [35302 35971])
            ("Info-on-current-buffer" function
               (:user-visible-flag t
                :arguments ("nodename"))
                nil [35988 36627])
            ("Info-revert-find-node" function (:arguments ("filename" "nodename")) nil [36629 37994])
            ("Info-revert-buffer-function" function (:arguments ("_ignore-auto" "noconfirm")) nil [37996 38224])
            ("Info-find-in-tag-table-1" function (:arguments ("marker" "regexp" "case-fold")) nil [38226 39103])
            ("Info-find-in-tag-table" function (:arguments ("marker" "regexp")) nil [39105 39858])
            ("Info-find-node-in-buffer-1" function (:arguments ("regexp" "case-fold")) nil [39860 40631])
            ("Info-find-node-in-buffer" function (:arguments ("regexp")) nil [40633 41103])
            ("Info-find-node-2" function (:arguments ("filename" "nodename" "no-going-back")) nil [41105 47658])
            ("Info-dir-contents" variable nil nil [47789 47819])
            ("Info-dir-contents-directory" variable nil nil [47919 47959])
            ("Info-dir-file-attributes" variable nil nil [48056 48093])
            ("Info-dir-file-name" variable nil nil [48095 48126])
            ("Info-insert-dir" function nil nil [48330 54534])
            ("Info-streamline-headings" variable (:default-value (quote (("Emacs" . "Emacs") ("Programming" . "Programming") ("Libraries" . "Libraries") ("World Wide Web\\|Net Utilities" . "Net Utilities")))) nil [54536 54791])
            ("Info-dir-remove-duplicates" function nil nil [54793 57023])
            ("Info-read-subfile" function (:arguments ("nodepos")) nil [57139 58729])
            ("Info-unescape-quotes" function (:arguments ("value")) nil [58731 59032])
            ("Info-split-parameter-string" function (:arguments ("parameter-string")) nil [59168 59943])
            ("Info-display-images-node" function nil nil [59945 61460])
            ("Info-hide-cookies-node" function nil nil [61642 62154])
            ("Info-select-node" function nil nil [62156 63686])
            ("Info-mode-line-node-keymap" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map [mode-line mouse-1] (quote Info-mouse-scroll-up)) (define-key map [mode-line mouse-3] (quote Info-mouse-scroll-down)) map)) nil [63688 63954])
            ("Info-set-mode-line" function nil nil [63956 64583])
            ("Info-goto-node" function
               (:user-visible-flag t
                :arguments ("nodename" "fork"))
                nil [64829 66194])
            ("Info-read-node-completion-table" variable nil nil [66196 66236])
            ("Info-read-node-name-2" function (:arguments ("dirs" "suffixes" "string" "pred" "action")) nil [66238 67903])
            ("Info-read-node-name-1" function (:arguments ("string" "predicate" "code")) nil [67905 68828])
            ("Info-read-node-name" function (:arguments ("prompt")) nil [68904 69369])
            ("Info-build-node-completions" function nil nil [69371 70627])
            ("Info-restore-point" function (:arguments ("hl")) nil [70630 71039])
            ("Info-search-history" variable nil nil [71042 71114])
            ("Info-search-case-fold" variable nil nil [71116 71223])
            ("Info-search" function
               (:user-visible-flag t
                :arguments ("regexp" "bound" "_noerror" "_count" "direction"))
                nil [71225 76550])
            ("Info-search-case-sensitively" function (:user-visible-flag t) nil [76552 76720])
            ("Info-search-next" function (:user-visible-flag t) nil [76722 76999])
            ("Info-search-backward" function
               (:user-visible-flag t
                :arguments ("regexp" "bound" "noerror" "count"))
                nil [77001 77501])
            ("Info-isearch-search" function nil nil [77503 78300])
            ("Info-isearch-wrap" function nil nil [78302 78668])
            ("Info-isearch-push-state" function nil nil [78670 78796])
            ("Info-isearch-pop-state" function (:arguments ("_cmd" "file" "node")) nil [78798 78984])
            ("Info-isearch-start" function nil nil [78986 79388])
            ("Info-isearch-end" function nil nil [79390 80008])
            ("Info-isearch-filter" function (:arguments ("beg-found" "found")) nil [80010 80902])
            ("Info-extract-pointer" function (:arguments ("name" "errorname")) nil [80906 81543])
            ("Info-following-node-name-re" function (:arguments ("allowedchars")) nil [81545 82251])
            ("Info-following-node-name" function nil nil [82342 82466])
            ("Info-next" function (:user-visible-flag t) nil [82468 82733])
            ("Info-prev" function (:user-visible-flag t) nil [82735 83022])
            ("Info-up" function
               (:user-visible-flag t
                :arguments ("same-file"))
                nil [83024 84059])
            ("Info-history-back" function (:user-visible-flag t) nil [84061 84731])
            ("defalias" code nil nil [84733 84773])
            ("Info-history-forward" function (:user-visible-flag t) nil [84775 85326])
            ("add-to-list" code nil nil [85329 85533])
            ("Info-directory-toc-nodes" function (:arguments ("filename")) nil [85535 85676])
            ("Info-directory-find-file" function (:arguments ("filename" "_noerror")) nil [85678 85810])
            ("Info-directory-find-node" function (:arguments ("_filename" "_nodename" "_no-going-back")) nil [85812 85972])
            ("Info-directory" function (:user-visible-flag t) nil [85989 86096])
            ("add-to-list" code nil nil [86099 86307])
            ("Info-history-toc-nodes" function (:arguments ("filename")) nil [86309 86446])
            ("Info-history-find-file" function (:arguments ("filename" "_noerror")) nil [86448 86576])
            ("Info-history-find-node" function (:arguments ("filename" "nodename" "_no-going-back")) nil [86578 87270])
            ("Info-history" function (:user-visible-flag t) nil [87272 87443])
            ("add-to-list" code nil nil [87446 87556])
            ("Info-toc-find-node" function (:arguments ("filename" "nodename" "_no-going-back")) nil [87558 88497])
            ("Info-toc" function (:user-visible-flag t) nil [88499 88932])
            ("Info-toc-insert" function (:arguments ("nodes" "node-list" "level" "curr-file")) nil [88934 89441])
            ("Info-toc-build" function (:arguments ("file")) nil [89443 92947])
            ("Info-toc-nodes" function (:arguments ("filename")) nil [92949 93833])
            ("Info-follow-reference" function
               (:user-visible-flag t
                :arguments ("footnotename" "fork"))
                nil [93837 97833])
            ("Info-menu-entry-name-re" variable
               (:constant-flag t
                :default-value "\\(?:[^:]\\|:[^:,.;() 	
]\\)*")
                nil [97835 98222])
            ("Info-extract-menu-node-name" function (:arguments ("multi-line" "index-node")) nil [98224 99539])
            ("Info-complete-menu-buffer" variable nil nil [99680 99714])
            ("Info-complete-next-re" variable nil nil [99715 99749])
            ("Info-complete-nodes" variable nil nil [99750 99782])
            ("Info-complete-cache" variable nil nil [99783 99815])
            ("Info-node-spec-re" variable
               (:constant-flag t
                :default-value (concat (Info-following-node-name-re "^.,:") "[,:.]"))
                nil [99817 99967])
            ("Info-complete-menu-item" function (:arguments ("string" "predicate" "action")) nil [99969 103396])
            ("Info-menu" function
               (:user-visible-flag t
                :arguments ("menu-item" "fork"))
                nil [103399 105273])
            ("Info-extract-menu-item" function (:arguments ("menu-item")) nil [105275 105813])
            ("Info-extract-menu-counting" function (:arguments ("count" "no-detail")) nil [105866 106467])
            ("Info-nth-menu-item" function (:user-visible-flag t) nil [106469 106731])
            ("Info-top-node" function (:user-visible-flag t) nil [106733 106835])
            ("Info-final-node" function (:user-visible-flag t) nil [106837 107585])
            ("Info-forward-node" function
               (:user-visible-flag t
                :arguments ("not-down" "not-up" "no-error"))
                nil [107587 108866])
            ("Info-backward-node" function (:user-visible-flag t) nil [108868 109845])
            ("Info-exit" function (:user-visible-flag t) nil [109847 110002])
            ("Info-next-menu-item" function (:user-visible-flag t) nil [110004 110417])
            ("Info-last-menu-item" function (:user-visible-flag t) nil [110419 110931])
            ("Info-no-error" function (:arguments ("body")) nil [110933 111023])
            ("Info-next-preorder" function (:user-visible-flag t) nil [111025 111714])
            ("Info-last-preorder" function (:user-visible-flag t) nil [111716 113173])
            ("Info-scroll-up" function (:user-visible-flag t) nil [113175 114533])
            ("Info-mouse-scroll-up" function
               (:user-visible-flag t
                :arguments ("e"))
                nil [114535 114781])
            ("Info-scroll-down" function (:user-visible-flag t) nil [114783 115635])
            ("Info-mouse-scroll-down" function
               (:user-visible-flag t
                :arguments ("e"))
                nil [115637 115890])
            ("Info-next-reference" function
               (:user-visible-flag t
                :arguments ("recur"))
                nil [115892 116607])
            ("Info-prev-reference" function
               (:user-visible-flag t
                :arguments ("recur"))
                nil [116609 117297])
            ("Info-index-nodes" function (:arguments ("file")) nil [117300 120353])
            ("Info-index-node" function (:arguments ("node" "file")) nil [120355 121297])
            ("Info-goto-index" function nil nil [121299 121458])
            ("Info-index" function
               (:user-visible-flag t
                :arguments ("topic"))
                nil [121475 124080])
            ("Info-index-next" function
               (:user-visible-flag t
                :arguments ("num"))
                nil [124082 125312])
            ("Info-find-index-name" function (:arguments ("name")) nil [125314 126281])
            ("add-to-list" code nil nil [126284 126427])
            ("Info-virtual-index-nodes" variable nil nil [126429 126737])
            ("Info-virtual-index-find-node" function (:arguments ("filename" "nodename" "_no-going-back")) nil [126739 128434])
            ("Info-virtual-index" function
               (:user-visible-flag t
                :arguments ("topic"))
                nil [128436 129854])
            ("add-to-list" code nil nil [129857 130084])
            ("Info-apropos-file" variable (:default-value "*Apropos*") nil [130086 130196])
            ("Info-apropos-nodes" variable nil nil [130198 130519])
            ("Info-apropos-toc-nodes" function (:arguments ("filename")) nil [130521 130788])
            ("Info-apropos-find-file" function (:arguments ("filename" "_noerror")) nil [130790 130918])
            ("Info-apropos-find-node" function (:arguments ("_filename" "nodename" "_no-going-back")) nil [130920 132277])
            ("Info-apropos-matches" function (:arguments ("string")) nil [132279 134612])
            ("info-apropos" function
               (:user-visible-flag t
                :arguments ("string"))
                nil [134629 135270])
            ("add-to-list" code nil nil [135273 135435])
            ("Info-finder-file" variable (:default-value "*Finder*") nil [135437 135535])
            ("Info-finder-find-file" function (:arguments ("filename" "_noerror")) nil [135537 135663])
            ("finder-known-keywords" variable nil nil [135665 135695])
            ("declare-function" code nil nil [135696 135754])
            ("declare-function" code nil nil [135755 135809])
            ("declare-function" code nil nil [135810 135870])
            ("finder-keywords-hash" variable nil nil [135871 135900])
            ("package--builtins" variable nil nil [135901 135927])
            ("Info-finder-find-node" function (:arguments ("_filename" "nodename" "_no-going-back")) nil [135956 139382])
            ("info-finder" function
               (:user-visible-flag t
                :arguments ("keywords"))
                nil [139399 140139])
            ("Info-undefined" function (:user-visible-flag t) nil [140143 140232])
            ("Info-help" function (:user-visible-flag t) nil [140234 140423])
            ("Info-summary" function (:user-visible-flag t) nil [140425 141053])
            ("Info-get-token" function (:arguments ("pos" "start" "all" "errorstring")) nil [141056 142550])
            ("Info-mouse-follow-nearest-node" function
               (:user-visible-flag t
                :arguments ("click"))
                nil [142552 143014])
            ("Info-follow-nearest-node" function
               (:user-visible-flag t
                :arguments ("fork"))
                nil [143016 144106])
            ("Info-try-follow-nearest-node" function (:arguments ("fork")) nil [144130 145476])
            ("Info-mouse-follow-link" function
               (:user-visible-flag t
                :arguments ("click"))
                nil [145478 146139])
            ("Info-mode-map" variable (:default-value (let ((map (make-keymap))) (suppress-keymap map) (define-key map "." (quote beginning-of-buffer)) (define-key map " " (quote Info-scroll-up)) (define-key map "" (quote Info-follow-nearest-node)) (define-key map "	" (quote Info-next-reference)) (define-key map "	" (quote Info-prev-reference)) (define-key map [backtab] (quote Info-prev-reference)) (define-key map "1" (quote Info-nth-menu-item)) (define-key map "2" (quote Info-nth-menu-item)) (define-key map "3" (quote Info-nth-menu-item)) (define-key map "4" (quote Info-nth-menu-item)) (define-key map "5" (quote Info-nth-menu-item)) (define-key map "6" (quote Info-nth-menu-item)) (define-key map "7" (quote Info-nth-menu-item)) (define-key map "8" (quote Info-nth-menu-item)) (define-key map "9" (quote Info-nth-menu-item)) (define-key map "0" (quote undefined)) (define-key map "?" (quote Info-summary)) (define-key map "]" (quote Info-forward-node)) (define-key map "[" (quote Info-backward-node)) (define-key map "<" (quote Info-top-node)) (define-key map ">" (quote Info-final-node)) (define-key map "b" (quote beginning-of-buffer)) (put (quote beginning-of-buffer) :advertised-binding "b") (define-key map "d" (quote Info-directory)) (define-key map "e" (quote end-of-buffer)) (define-key map "f" (quote Info-follow-reference)) (define-key map "g" (quote Info-goto-node)) (define-key map "h" (quote Info-help)) (define-key map "i" (quote Info-index)) (define-key map "I" (quote Info-virtual-index)) (define-key map "l" (quote Info-history-back)) (define-key map "L" (quote Info-history)) (define-key map "m" (quote Info-menu)) (define-key map "n" (quote Info-next)) (define-key map "p" (quote Info-prev)) (define-key map "q" (quote Info-exit)) (define-key map "r" (quote Info-history-forward)) (define-key map "s" (quote Info-search)) (define-key map "S" (quote Info-search-case-sensitively)) (define-key map "\356" (quote clone-buffer)) (define-key map "t" (quote Info-top-node)) (define-key map "T" (quote Info-toc)) (define-key map "u" (quote Info-up)) (define-key map "w" (quote Info-copy-current-node-name)) (define-key map "c" (quote Info-copy-current-node-name)) (define-key map "^" (quote Info-up)) (define-key map "," (quote Info-index-next)) (define-key map "" (quote Info-scroll-down)) (define-key map [mouse-2] (quote Info-mouse-follow-nearest-node)) (define-key map [follow-link] (quote mouse-face)) (define-key map [XF86Back] (quote Info-history-back)) (define-key map [XF86Forward] (quote Info-history-forward)) map)) nil [146143 148678])
            ("Info-check-pointer" function (:arguments ("item")) nil [148681 148832])
            ("easy-menu-define" code nil nil [148834 151157])
            ("info-tool-bar-map" variable (:default-value (let ((map (make-sparse-keymap))) (tool-bar-local-item-from-menu (quote Info-history-back) "left-arrow" map Info-mode-map :rtl "right-arrow" :label "Back" :vert-only t) (tool-bar-local-item-from-menu (quote Info-history-forward) "right-arrow" map Info-mode-map :rtl "left-arrow" :label "Forward" :vert-only t) (define-key-after map [separator-1] menu-bar-separator) (tool-bar-local-item-from-menu (quote Info-prev) "prev-node" map Info-mode-map :rtl "next-node") (tool-bar-local-item-from-menu (quote Info-next) "next-node" map Info-mode-map :rtl "prev-node") (tool-bar-local-item-from-menu (quote Info-up) "up-node" map Info-mode-map :vert-only t) (define-key-after map [separator-2] menu-bar-separator) (tool-bar-local-item-from-menu (quote Info-top-node) "home" map Info-mode-map :vert-only t) (tool-bar-local-item-from-menu (quote Info-goto-node) "jump-to" map Info-mode-map) (define-key-after map [separator-3] menu-bar-separator) (tool-bar-local-item-from-menu (quote Info-index) "index" map Info-mode-map :label "Index") (tool-bar-local-item-from-menu (quote Info-search) "search" map Info-mode-map :vert-only t) (tool-bar-local-item-from-menu (quote Info-exit) "exit" map Info-mode-map :vert-only t) map)) nil [151160 152478])
            ("Info-menu-last-node" variable nil nil [152480 152512])
            ("Info-menu-update" function nil nil [152596 154674])
            ("Info-copy-current-node-name" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [154678 155435])
            ("put" code nil nil [155499 155536])
            ("put" code nil nil [155537 155574])
            ("tool-bar-map" variable nil nil [155576 155597])
            ("bookmark-make-record-function" variable nil nil [155598 155636])
            ("Info-mode-syntax-table" variable (:default-value (let ((st (copy-syntax-table text-mode-syntax-table))) (modify-syntax-entry 39 "." st) st)) nil [155638 155924])
            ("define-derived-mode" code nil nil [155981 161561])
            ("Info-kill-buffer" function nil nil [161652 161786])
            ("Info-clone-buffer" function nil nil [161822 162253])
            ("Info-edit-map" variable (:default-value (let ((map (make-sparse-keymap))) (set-keymap-parent map text-mode-map) (define-key map "" (quote Info-cease-edit)) map)) nil [162255 162458])
            ("put" code nil nil [162525 162567])
            ("Info-edit-mode" function nil nil [162569 163057])
            ("Info-edit" function (:user-visible-flag t) nil [163059 163402])
            ("Info-cease-edit" function (:user-visible-flag t) nil [163404 163970])
            ("Info-file-list-for-emacs" variable (:default-value (quote ("ediff" "eudc" "forms" "gnus" "info" ("Info" . "info") ("mh" . "mh-e") "sc" "message" ("dired" . "dired-x") "viper" "vip" "idlwave" ("c" . "ccmode") ("c++" . "ccmode") ("objc" . "ccmode") ("java" . "ccmode") ("idl" . "ccmode") ("pike" . "ccmode") ("skeleton" . "autotype") ("auto-insert" . "autotype") ("copyright" . "autotype") ("executable" . "autotype") ("time-stamp" . "autotype") ("quickurl" . "autotype") ("tempo" . "autotype") ("hippie-expand" . "autotype") ("cvs" . "pcl-cvs") ("ada" . "ada-mode") "calc" ("calcAlg" . "calc") ("calcDigit" . "calc") ("calcVar" . "calc") "ebrowse" "eshell" "cl" "reftex" "speedbar" "widget" "woman" ("mail-header" . "emacs-mime") ("mail-content" . "emacs-mime") ("mail-encode" . "emacs-mime") ("mail-decode" . "emacs-mime") ("rfc2045" . "emacs-mime") ("rfc2231" . "emacs-mime") ("rfc2047" . "emacs-mime") ("rfc2045" . "emacs-mime") ("rfc1843" . "emacs-mime") ("ietf-drums" . "emacs-mime") ("quoted-printable" . "emacs-mime") ("binhex" . "emacs-mime") ("uudecode" . "emacs-mime") ("mailcap" . "emacs-mime") ("mm" . "emacs-mime") ("mml" . "emacs-mime")))) nil [163973 165442])
            ("Info-find-emacs-command-nodes" function (:arguments ("command")) nil [165444 167674])
            ("Info-goto-emacs-command-node" function
               (:user-visible-flag t
                :arguments ("command"))
                nil [167772 169520])
            ("Info-goto-emacs-key-command-node" function
               (:user-visible-flag t
                :arguments ("key"))
                nil [169622 170411])
            ("Info-link-keymap" variable (:default-value (let ((keymap (make-sparse-keymap))) (define-key keymap [header-line down-mouse-1] (quote mouse-drag-header-line)) (define-key keymap [header-line mouse-1] (quote mouse-select-window)) (define-key keymap [header-line mouse-2] (quote Info-mouse-follow-link)) (define-key keymap [mouse-2] (quote Info-mouse-follow-link)) (define-key keymap [follow-link] (quote mouse-face)) keymap)) nil [170414 170961])
            ("Info-breadcrumbs" function nil nil [170963 172646])
            ("Info-fontify-node" function nil nil [172648 190591])
            ("speedbar" include nil nil [190721 190740])
            ("Info-speedbar-key-map" variable nil nil [190743 190824])
            ("Info-install-speedbar-variables" function nil nil [190826 191463])
            ("Info-speedbar-menu-items" variable (:default-value (quote (["Browse Node" speedbar-edit-line t] ["Expand Node" speedbar-expand-line (save-excursion (beginning-of-line) (looking-at "[0-9]+: *.\\+. "))] ["Contract Node" speedbar-contract-line (save-excursion (beginning-of-line) (looking-at "[0-9]+: *.-. "))]))) nil [191465 191841])
            ("if" code nil nil [191898 192027])
            ("Info-speedbar-browser" function (:user-visible-flag t) nil [192078 192415])
            ("Info-speedbar-hierarchy-buttons" function (:arguments ("_directory" "depth" "node")) nil [192417 193630])
            ("Info-speedbar-goto-node" function (:arguments ("_text" "node" "_indent")) nil [193632 194661])
            ("Info-speedbar-expand-node" function (:arguments ("text" "token" "indent")) nil [194663 195467])
            ("Info-speedbar-fetch-file-nodes" function (:arguments ("nodespec")) nil [195469 196748])
            ("Info-speedbar-buttons" function (:arguments ("_buffer")) nil [196840 197186])
            ("add-to-list" code nil nil [197217 197267])
            ("Info-desktop-buffer-misc-data" function (:arguments ("_desktop-dirname")) nil [197292 197662])
            ("Info-restore-desktop-buffer" function (:arguments ("_desktop-buffer-file-name" "desktop-buffer-name" "desktop-buffer-misc")) nil [197664 198358])
            ("add-to-list" code nil nil [198360 198452])
            ("declare-function" code nil nil [198476 198588])
            ("declare-function" code nil nil [198589 198652])
            ("declare-function" code nil nil [198653 198713])
            ("declare-function" code nil nil [198714 198778])
            ("Info-bookmark-make-record" function nil nil [198780 199386])
            ("Info-bookmark-jump" function (:arguments ("bmk")) nil [199403 200032])
            ("info-display-manual" function
               (:user-visible-flag t
                :arguments ("manual"))
                nil [200051 200646])
            ("info" package nil nil [200648 200663]))          
      :file "info.el.gz"
      :pointmax 200687
      :fsize 50873
      :lastmodtime '(20707 18685 0 0)
      :unmatched-syntax '((close-paren 190740 . 190741) (symbol 190703 . 190720) (open-paren 190702 . 190703)))
    (semanticdb-table "loaddefs.el"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("5x5" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [298 1239])
            ("5x5-crack-randomly" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1241 1339])
            ("5x5-crack-mutating-current" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1341 1457])
            ("5x5-crack-mutating-best" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1459 1569])
            ("5x5-crack-xor-mutate" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1571 1707])
            ("5x5-crack" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1709 2079])
            ("ada-add-extensions" function (:prototype-flag t) nil [2257 2543])
            ("ada-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [2545 2642])
            ("ada-header" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [2803 2905])
            ("ada-find-file" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [3069 3205])
            ("put" code nil nil [3588 3657])
            ("add-log-current-defun-function" variable nil nil [3659 3904])
            ("custom-autoload" code nil nil [3906 3967])
            ("add-log-full-name" variable nil nil [3969 4134])
            ("custom-autoload" code nil nil [4136 4184])
            ("add-log-mailing-address" variable nil nil [4186 4547])
            ("custom-autoload" code nil nil [4549 4603])
            ("prompt-for-change-log-name" function (:prototype-flag t) nil [4605 4702])
            ("find-change-log" function (:prototype-flag t) nil [4704 5479])
            ("add-change-log-entry" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [5481 6782])
            ("add-change-log-entry-other-window" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [6784 7048])
            ("change-log-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [7050 7476])
            ("add-log-lisp-like-modes" variable (:default-value (quote (emacs-lisp-mode lisp-mode scheme-mode dsssl-mode lisp-interaction-mode))) nil [7478 7642])
            ("add-log-c-like-modes" variable (:default-value (quote (c-mode c++-mode c++-c-mode objc-mode))) nil [7644 7768])
            ("add-log-tex-like-modes" variable (:default-value (quote (TeX-mode plain-TeX-mode LaTeX-mode tex-mode))) nil [7770 7905])
            ("add-log-current-defun" function (:prototype-flag t) nil [7907 8428])
            ("change-log-merge" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [8430 8831])
            ("ad-redefinition-action" variable (:default-value (quote warn)) nil [9109 9763])
            ("custom-autoload" code nil nil [9765 9817])
            ("ad-default-compilation-action" variable (:default-value (quote maybe)) nil [9819 10368])
            ("custom-autoload" code nil nil [10370 10429])
            ("ad-enable-advice" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [10431 10557])
            ("ad-disable-advice" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [10559 10686])
            ("ad-add-advice" function (:prototype-flag t) nil [10688 11818])
            ("ad-activate" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [11820 12901])
            ("defadvice" function (:prototype-flag t) nil [12903 15558])
            ("put" code nil nil [15560 15595])
            ("align" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [15839 16661])
            ("align-regexp" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [16663 17821])
            ("align-entire" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [17823 18199])
            ("align-current" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [18201 18629])
            ("align-highlight-rule" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [18631 19091])
            ("align-unhighlight-rule" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [19093 19218])
            ("align-newline-and-indent" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [19220 19351])
            ("allout-auto-activation-helper" function (:prototype-flag t) nil [19593 19776])
            ("allout-setup" function (:prototype-flag t) nil [19778 20102])
            ("allout-auto-activation" variable nil nil [20104 20768])
            ("custom-autoload" code nil nil [20770 20824])
            ("put" code nil nil [20826 20948])
            ("put" code nil nil [20950 21042])
            ("put" code nil nil [21044 21158])
            ("put" code nil nil [21160 21217])
            ("put" code nil nil [21219 21277])
            ("put" code nil nil [21279 21343])
            ("put" code nil nil [21345 21415])
            ("put" code nil nil [21417 21558])
            ("put" code nil nil [21560 21681])
            ("put" code nil nil [21683 21802])
            ("put" code nil nil [21804 21944])
            ("put" code nil nil [21946 22087])
            ("put" code nil nil [22089 22154])
            ("put" code nil nil [22156 22257])
            ("put" code nil nil [22259 22329])
            ("put" code nil nil [22331 22397])
            ("allout-mode-p" function (:prototype-flag t) nil [22399 22505])
            ("allout-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [22507 35500])
            ("defalias" code nil nil [35502 35549])
            ("outlineify-sticky" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [35551 35827])
            ("let" code nil nil [36070 36230])
            ("allout-widgets-setup" function (:prototype-flag t) nil [36232 36457])
            ("allout-widgets-auto-activation" variable nil nil [36459 36993])
            ("custom-autoload" code nil nil [36995 37065])
            ("put" code nil nil [37067 37190])
            ("allout-widgets-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [37192 38209])
            ("defalias" code nil nil [38390 38443])
            ("ange-ftp-reread-dir" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [38445 38840])
            ("ange-ftp-hook-function" function (:prototype-flag t) nil [38842 38928])
            ("animate-string" function (:prototype-flag t) nil [39122 39513])
            ("animate-sequence" function (:prototype-flag t) nil [39515 39879])
            ("animate-birthday-present" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [39881 40196])
            ("ansi-color-for-comint-mode-on" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [40388 40498])
            ("ansi-color-process-output" function (:prototype-flag t) nil [40500 41089])
            ("antlr-show-makefile-rules" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [41305 42159])
            ("antlr-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [42161 42257])
            ("antlr-set-tabs" function (:prototype-flag t) nil [42259 42455])
            ("appt-add" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [42614 42978])
            ("appt-activate" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [42980 43176])
            ("apropos-read-pattern" function (:prototype-flag t) nil [43464 43817])
            ("apropos-variable" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [43819 44304])
            ("defalias" code nil nil [44306 44350])
            ("apropos-command" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [44352 45115])
            ("apropos-documentation-property" function (:prototype-flag t) nil [45117 45277])
            ("apropos" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [45279 45958])
            ("apropos-library" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [45960 46253])
            ("apropos-value" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [46255 46897])
            ("apropos-documentation" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [46899 47615])
            ("archive-mode" function (:prototype-flag t) nil [47758 48283])
            ("array-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [48415 51500])
            ("artist-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [51656 59339])
            ("asm-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [59498 60226])
            ("auth-source-cache-expiry" variable (:default-value 7200) nil [60400 60567])
            ("custom-autoload" code nil nil [60569 60628])
            ("autoarg-mode" variable nil nil [60784 60918])
            ("custom-autoload" code nil nil [60920 60965])
            ("autoarg-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [60967 62050])
            ("autoarg-kp-mode" variable nil nil [62052 62349])
            ("custom-autoload" code nil nil [62351 62399])
            ("autoarg-kp-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [62401 62826])
            ("autoconf-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [62990 63095])
            ("auto-insert" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [63279 63484])
            ("define-auto-insert" function (:prototype-flag t) nil [63486 63790])
            ("auto-insert-mode" variable nil nil [63792 64093])
            ("custom-autoload" code nil nil [64095 64147])
            ("auto-insert-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [64149 64567])
            ("put" code nil nil [64799 64859])
            ("put" code nil nil [64861 64926])
            ("update-file-autoloads" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [64928 65473])
            ("update-directory-autoloads" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [65475 66291])
            ("batch-update-autoloads" function (:prototype-flag t) nil [66293 66547])
            ("auto-revert-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [66809 67451])
            ("turn-on-auto-revert-mode" function (:prototype-flag t) nil [67453 67661])
            ("auto-revert-tail-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [67663 68471])
            ("turn-on-auto-revert-tail-mode" function (:prototype-flag t) nil [68473 68705])
            ("global-auto-revert-mode" variable nil nil [68707 69036])
            ("custom-autoload" code nil nil [69038 69097])
            ("global-auto-revert-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [69099 70008])
            ("mouse-avoidance-mode" variable nil nil [70171 70414])
            ("custom-autoload" code nil nil [70416 70467])
            ("mouse-avoidance-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [70469 71665])
            ("put" code nil nil [71821 71876])
            ("battery" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [71878 72108])
            ("display-battery-mode" variable nil nil [72110 72427])
            ("custom-autoload" code nil nil [72429 72482])
            ("display-battery-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [72484 72971])
            ("benchmark-run" function (:prototype-flag t) nil [73181 73615])
            ("put" code nil nil [73617 73662])
            ("benchmark-run-compiled" function (:prototype-flag t) nil [73664 74000])
            ("put" code nil nil [74002 74056])
            ("benchmark" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [74058 74318])
            ("bibtex-initialize" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [74512 75153])
            ("bibtex-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [75155 77824])
            ("bibtex-search-entry" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [77826 78571])
            ("bibtex-style-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [78751 78855])
            ("binhex-begin-line" variable
               (:constant-flag t
                :default-value "^:...............................................................$")
                nil [79078 79245])
            ("binhex-decode-region-internal" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [79247 79490])
            ("binhex-decode-region-external" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [79492 79636])
            ("binhex-decode-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [79638 79750])
            ("blackbox" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [79899 84861])
            ("define-key" code nil nil [85245 85288])
            ("define-key" code nil nil [85290 85332])
            ("define-key" code nil nil [85334 85383])
            ("bookmark-map" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map "x" (quote bookmark-set)) (define-key map "m" (quote bookmark-set)) (define-key map "j" (quote bookmark-jump)) (define-key map "g" (quote bookmark-jump)) (define-key map "o" (quote bookmark-jump-other-window)) (define-key map "i" (quote bookmark-insert)) (define-key map "e" (quote edit-bookmarks)) (define-key map "f" (quote bookmark-insert-location)) (define-key map "r" (quote bookmark-rename)) (define-key map "d" (quote bookmark-delete)) (define-key map "l" (quote bookmark-load)) (define-key map "w" (quote bookmark-write)) (define-key map "s" (quote bookmark-save)) map)) nil [85385 86225])
            ("fset" code nil nil [86227 86260])
            ("bookmark-set" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [86262 87446])
            ("bookmark-jump" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [87448 88380])
            ("bookmark-jump-other-window" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [88382 88524])
            ("bookmark-relocate" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [88526 88842])
            ("bookmark-insert-location" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [88844 89109])
            ("defalias" code nil nil [89111 89164])
            ("bookmark-rename" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [89166 89775])
            ("bookmark-insert" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [89777 90187])
            ("bookmark-delete" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [90189 90683])
            ("bookmark-write" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [90685 90872])
            ("bookmark-save" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [90874 91651])
            ("bookmark-load" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [91653 92611])
            ("bookmark-bmenu-list" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [92613 92881])
            ("defalias" code nil nil [92883 92930])
            ("defalias" code nil nil [92932 92979])
            ("bookmark-bmenu-search" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [92981 93108])
            ("menu-bar-bookmark-map" variable (:default-value (let ((map (make-sparse-keymap "Bookmark functions"))) (bindings--define-key map [load] (quote (menu-item "Load a Bookmark File..." bookmark-load :help "Load bookmarks from a bookmark file)"))) (bindings--define-key map [write] (quote (menu-item "Save Bookmarks As..." bookmark-write :help "Write bookmarks to a file (reading the file name with the minibuffer)"))) (bindings--define-key map [save] (quote (menu-item "Save Bookmarks" bookmark-save :help "Save currently defined bookmarks"))) (bindings--define-key map [edit] (quote (menu-item "Edit Bookmark List" bookmark-bmenu-list :help "Display a list of existing bookmarks"))) (bindings--define-key map [delete] (quote (menu-item "Delete Bookmark..." bookmark-delete :help "Delete a bookmark from the bookmark list"))) (bindings--define-key map [rename] (quote (menu-item "Rename Bookmark..." bookmark-rename :help "Change the name of a bookmark"))) (bindings--define-key map [locate] (quote (menu-item "Insert Location..." bookmark-locate :help "Insert the name of the file associated with a bookmark"))) (bindings--define-key map [insert] (quote (menu-item "Insert Contents..." bookmark-insert :help "Insert the text of the file pointed to by a bookmark"))) (bindings--define-key map [set] (quote (menu-item "Set Bookmark..." bookmark-set :help "Set a bookmark named inside a file."))) (bindings--define-key map [jump] (quote (menu-item "Jump to Bookmark..." bookmark-jump :help "Jump to a bookmark (a point in some file)"))) map)) nil [93110 94557])
            ("defalias" code nil nil [94559 94614])
            ("browse-url-browser-function" variable (:default-value (quote browse-url-default-browser)) nil [95314 95877])
            ("custom-autoload" code nil nil [95879 95940])
            ("browse-url-of-file" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [95942 96291])
            ("browse-url-of-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [96293 96552])
            ("browse-url-of-dired-file" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [96554 96688])
            ("browse-url-of-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [96690 96809])
            ("browse-url" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [96811 97126])
            ("browse-url-at-point" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [97128 97372])
            ("browse-url-at-mouse" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [97374 97707])
            ("browse-url-xdg-open" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [97709 97956])
            ("browse-url-netscape" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [97958 98767])
            ("browse-url-mozilla" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [98769 99572])
            ("browse-url-firefox" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [99574 100707])
            ("browse-url-chromium" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [100709 100966])
            ("browse-url-galeon" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [100968 101765])
            ("browse-url-emacs" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [101767 101917])
            ("browse-url-gnome-moz" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [101919 102563])
            ("browse-url-mosaic" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [102565 103266])
            ("browse-url-cci" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [103268 104015])
            ("browse-url-w3" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [104017 104501])
            ("browse-url-w3-gnudoit" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [104503 104805])
            ("browse-url-text-xterm" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [104807 105181])
            ("browse-url-text-emacs" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [105183 105876])
            ("browse-url-mail" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [105878 106589])
            ("browse-url-generic" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [106591 106992])
            ("browse-url-kde" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [106994 107155])
            ("browse-url-elinks" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [107157 107523])
            ("bs-cycle-next" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [107688 107890])
            ("bs-cycle-previous" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [107892 108102])
            ("bs-customize" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [108104 108203])
            ("bs-show" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [108205 108831])
            ("bubbles" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [108976 109580])
            ("put" code nil nil [109788 109922])
            ("bug-reference-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [109924 110236])
            ("bug-reference-prog-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [110238 110391])
            ("put" code nil nil [110813 110871])
            ("put" code nil nil [110872 110943])
            ("put" code nil nil [110944 111013])
            ("put" code nil nil [111015 111154])
            ("byte-compile-disable-warning" function (:prototype-flag t) nil [111156 111530])
            ("byte-compile-enable-warning" function (:prototype-flag t) nil [111532 111892])
            ("byte-force-recompile" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [111894 112093])
            ("byte-recompile-directory" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [112095 112833])
            ("put" code nil nil [112834 112887])
            ("byte-compile-file" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [112889 113286])
            ("compile-defun" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [113288 113505])
            ("byte-compile" function (:prototype-flag t) nil [113507 113688])
            ("display-call-tree" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [113690 114367])
            ("batch-byte-compile-if-not-done" function (:prototype-flag t) nil [114369 114597])
            ("batch-byte-compile" function (:prototype-flag t) nil [114599 115050])
            ("batch-byte-recompile-directory" function (:prototype-flag t) nil [115052 115496])
            ("put" code nil nil [115649 115706])
            ("put" code nil nil [115708 115765])
            ("put" code nil nil [115912 115975])
            ("put" code nil nil [115977 116038])
            ("put" code nil nil [116040 116103])
            ("calendar-hebrew-list-yahrzeits" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [116288 116572])
            ("define-obsolete-function-alias" code nil nil [116574 116666])
            ("define-key" code nil nil [116971 117012])
            ("calc-dispatch" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [117014 117149])
            ("calc" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [117151 117303])
            ("full-calc" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [117305 117427])
            ("quick-calc" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [117429 117550])
            ("calc-eval" function (:prototype-flag t) nil [117552 117836])
            ("calc-keypad" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [117838 118136])
            ("full-calc-keypad" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [118138 118302])
            ("calc-grab-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [118304 118445])
            ("calc-grab-rectangle" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [118447 118592])
            ("calc-embedded" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [118594 118730])
            ("calc-embedded-activate" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [118732 118940])
            ("defmath" function (:prototype-flag t) nil [118942 119352])
            ("put" code nil nil [119354 119387])
            ("calc-undo" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [119540 119593])
            ("calculator" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [119740 119884])
            ("calendar" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [120041 121717])
            ("canlock-insert-header" function (:prototype-flag t) nil [121891 122056])
            ("canlock-verify" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [122058 122251])
            ("capitalized-words-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [122427 123816])
            ("put" code nil nil [123970 124022])
            ("c-guess-basic-syntax" function (:prototype-flag t) nil [124196 124309])
            ("c-guess-guessed-offsets-alist" variable nil nil [124600 124679])
            ("c-guess-guessed-basic-offset" variable nil nil [124681 124758])
            ("c-guess" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [124760 125130])
            ("c-guess-no-install" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [125132 125448])
            ("c-guess-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [125450 125814])
            ("c-guess-buffer-no-install" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [125816 126126])
            ("c-guess-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [126128 126487])
            ("c-guess-region-no-install" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [126489 127378])
            ("c-guess-install" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [127380 127819])
            ("c-initialize-cc-mode" function (:prototype-flag t) nil [128059 128511])
            ("c-mode-syntax-table" variable nil nil [128513 128586])
            ("add-to-list" code nil nil [128588 128654])
            ("add-to-list" code nil nil [128656 128735])
            ("add-to-list" code nil nil [128737 128805])
            ("add-to-list" code nil nil [128807 128862])
            ("add-to-list" code nil nil [128864 128926])
            ("add-to-list" code nil nil [128928 128982])
            ("add-to-list" code nil nil [128984 129036])
            ("add-to-list" code nil nil [129038 129093])
            ("c-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [129095 129655])
            ("c++-mode-syntax-table" variable nil nil [129657 129734])
            ("c++-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [129736 130293])
            ("objc-mode-syntax-table" variable nil nil [130295 130374])
            ("add-to-list" code nil nil [130376 130431])
            ("objc-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [130433 131003])
            ("java-mode-syntax-table" variable nil nil [131005 131084])
            ("add-to-list" code nil nil [131086 131144])
            ("java-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [131146 131708])
            ("idl-mode-syntax-table" variable nil nil [131710 131787])
            ("add-to-list" code nil nil [131789 131845])
            ("idl-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [131847 132428])
            ("pike-mode-syntax-table" variable nil nil [132430 132509])
            ("add-to-list" code nil nil [132511 132602])
            ("add-to-list" code nil nil [132604 132663])
            ("pike-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [132665 133227])
            ("add-to-list" code nil nil [133229 133285])
            ("add-to-list" code nil nil [133287 133344])
            ("add-to-list" code nil nil [133346 133404])
            ("add-to-list" code nil nil [133406 133464])
            ("add-to-list" code nil nil [133466 133524])
            ("awk-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [133526 133593])
            ("awk-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [133595 134153])
            ("c-set-style" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [134343 135469])
            ("c-add-style" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [135471 136016])
            ("c-set-offset" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [136018 136356])
            ("put" code nil nil [136504 136556])
            ("put" code nil nil [136557 136613])
            ("put" code nil nil [136614 136672])
            ("ccl-compile" function (:prototype-flag t) nil [136923 137048])
            ("ccl-dump" function (:prototype-flag t) nil [137050 137135])
            ("declare-ccl-program" function (:prototype-flag t) nil [137137 137599])
            ("define-ccl-program" function (:prototype-flag t) nil [137601 144152])
            ("put" code nil nil [144154 144198])
            ("check-ccl-program" function (:prototype-flag t) nil [144200 144521])
            ("ccl-execute-with-args" function (:prototype-flag t) nil [144523 144806])
            ("cconv-closure-convert" function (:prototype-flag t) nil [144971 145276])
            ("cfengine3-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [145475 145708])
            ("cfengine2-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [145710 145943])
            ("cfengine-auto-mode" function (:prototype-flag t) nil [145945 146091])
            ("check-declare-file" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [146301 146482])
            ("check-declare-directory" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [146484 146682])
            ("put" code nil nil [147412 147480])
            ("put" code nil nil [147481 147546])
            ("put" code nil nil [147547 147623])
            ("put" code nil nil [147624 147694])
            ("put" code nil nil [147695 147772])
            ("checkdoc-list-of-strings-p" function (:prototype-flag t) nil [147774 147847])
            ("checkdoc" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [147849 148069])
            ("checkdoc-interactive" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [148071 148599])
            ("checkdoc-message-interactive" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [148601 149141])
            ("checkdoc-eval-current-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [149143 149432])
            ("checkdoc-current-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [149434 149735])
            ("checkdoc-start" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [149737 150092])
            ("checkdoc-continue" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [150094 150464])
            ("checkdoc-comments" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [150466 150755])
            ("checkdoc-rogue-spaces" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [150757 151116])
            ("checkdoc-message-text" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [151118 151333])
            ("checkdoc-eval-defun" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [151335 151676])
            ("checkdoc-defun" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [151678 152043])
            ("checkdoc-ispell" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [152045 152284])
            ("checkdoc-ispell-current-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [152286 152564])
            ("checkdoc-ispell-interactive" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [152566 152849])
            ("checkdoc-ispell-message-interactive" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [152851 153152])
            ("checkdoc-ispell-message-text" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [153154 153434])
            ("checkdoc-ispell-start" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [153436 153687])
            ("checkdoc-ispell-continue" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [153689 153961])
            ("checkdoc-ispell-comments" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [153963 154234])
            ("checkdoc-ispell-defun" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [154236 154498])
            ("checkdoc-minor-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [154500 155052])
            ("decode-hz-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [155322 155474])
            ("decode-hz-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [155476 155583])
            ("encode-hz-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [155585 155733])
            ("encode-hz-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [155735 155838])
            ("post-read-decode-hz" function (:prototype-flag t) nil [155840 155908])
            ("pre-write-encode-hz" function (:prototype-flag t) nil [155910 155982])
            ("repeat-matching-complex-command" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [156181 156586])
            ("list-command-history" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [156588 156955])
            ("command-history" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [156957 157582])
            ("common-lisp-indent-function" function (:prototype-flag t) nil [157765 161078])
            ("define-obsolete-variable-alias" code nil nil [161226 161316])
            ("cl-custom-print-functions" variable nil nil [161318 161804])
            ("cl--defsubst-expand" function (:prototype-flag t) nil [161806 161847])
            ("put" code nil nil [161849 161882])
            ("put" code nil nil [161884 161920])
            ("put" code nil nil [161922 161958])
            ("put" code nil nil [161960 161997])
            ("c-macro-expand" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [162159 162695])
            ("run-scheme" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [162839 163503])
            ("color-name-to-rgb" function (:prototype-flag t) nil [163642 164173])
            ("comint-output-filter-functions" variable (:default-value (quote (ansi-color-process-output comint-postoutput-scroll-to-bottom comint-watch-for-password-prompt))) nil [164502 165170])
            ("make-comint-in-buffer" function (:prototype-flag t) nil [165172 165967])
            ("make-comint" function (:prototype-flag t) nil [165969 166707])
            ("comint-run" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [166709 167049])
            ("comint-file-name-prefix" variable (:default-value (purecopy "")) nil [167051 167271])
            ("comint-redirect-send-command" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [167273 167571])
            ("comint-redirect-send-command-to-process" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [167573 167867])
            ("comint-redirect-results-list" function (:prototype-flag t) nil [167869 168124])
            ("comint-redirect-results-list-from-process" function (:prototype-flag t) nil [168126 168394])
            ("compare-windows" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [168549 169738])
            ("compilation-mode-hook" variable nil nil [170207 170318])
            ("custom-autoload" code nil nil [170320 170372])
            ("compilation-start-hook" variable nil nil [170374 170779])
            ("custom-autoload" code nil nil [170781 170834])
            ("compilation-window-height" variable nil nil [170836 170947])
            ("custom-autoload" code nil nil [170949 171005])
            ("compilation-process-setup-function" variable nil nil [171007 171312])
            ("compilation-buffer-name-function" variable nil nil [171314 171611])
            ("compilation-finish-function" variable nil nil [171613 171818])
            ("compilation-finish-functions" variable nil nil [171820 172038])
            ("put" code nil nil [172039 172097])
            ("compilation-ask-about-save" variable (:default-value t) nil [172099 172268])
            ("custom-autoload" code nil nil [172270 172327])
            ("compilation-search-path" variable (:default-value (quote (nil))) nil [172329 172575])
            ("custom-autoload" code nil nil [172577 172631])
            ("compile-command" variable (:default-value (purecopy "make -k ")) nil [172633 173156])
            ("custom-autoload" code nil nil [173158 173204])
            ("put" code nil nil [173205 173350])
            ("compilation-disable-input" variable nil nil [173352 173594])
            ("custom-autoload" code nil nil [173596 173652])
            ("compile" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [173654 174895])
            ("compilation-start" function (:prototype-flag t) nil [174897 175849])
            ("compilation-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [175851 176253])
            ("put" code nil nil [176255 176303])
            ("compilation-shell-minor-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [176305 176797])
            ("compilation-minor-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [176799 177211])
            ("compilation-next-error-function" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [177213 177442])
            ("dynamic-completion-mode" variable nil nil [177602 177931])
            ("custom-autoload" code nil nil [177933 177992])
            ("dynamic-completion-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [177994 178269])
            ("conf-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [178586 180013])
            ("conf-unix-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [180015 180336])
            ("conf-windows-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [180338 180810])
            ("conf-javaprop-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [180812 181236])
            ("conf-space-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [181238 181998])
            ("conf-space-keywords" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [182000 182159])
            ("conf-colon-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [182161 182487])
            ("conf-ppd-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [182489 182817])
            ("conf-xdefaults-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [182819 183136])
            ("cookie" function (:prototype-flag t) nil [183322 183533])
            ("cookie-insert" function (:prototype-flag t) nil [183535 183783])
            ("cookie-snarf" function (:prototype-flag t) nil [183785 184053])
            ("shuffle-vector" function (:prototype-flag t) nil [184055 184192])
            ("put" code nil nil [184428 184487])
            ("put" code nil nil [184488 184547])
            ("put" code nil nil [184548 184607])
            ("copyright-update" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [184609 185061])
            ("copyright-fix-years" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [185063 185330])
            ("copyright" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [185332 185454])
            ("copyright-update-directory" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [185456 185674])
            ("put" code nil nil [185884 185940])
            ("put" code nil nil [185941 185997])
            ("put" code nil nil [185998 186064])
            ("put" code nil nil [186065 186121])
            ("put" code nil nil [186122 186192])
            ("put" code nil nil [186193 186263])
            ("put" code nil nil [186264 186327])
            ("cperl-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [186329 194622])
            ("cperl-perldoc" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [194624 194707])
            ("cperl-perldoc-at-point" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [194709 194815])
            ("cpp-highlight-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [194986 195282])
            ("cpp-parse-edit" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [195284 195380])
            ("crisp-mode" variable nil nil [195543 195812])
            ("custom-autoload" code nil nil [195814 195855])
            ("crisp-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [195857 196117])
            ("defalias" code nil nil [196119 196153])
            ("completing-read-multiple" function (:prototype-flag t) nil [196315 197642])
            ("css-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [197801 197892])
            ("cua-mode" variable nil nil [198070 198339])
            ("custom-autoload" code nil nil [198341 198383])
            ("cua-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [198385 199763])
            ("cua-selection-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [199765 199891])
            ("custom-browse-sort-alphabetically" variable nil nil [200780 200902])
            ("custom-autoload" code nil nil [200904 200969])
            ("custom-buffer-sort-alphabetically" variable (:default-value t) nil [200971 201089])
            ("custom-autoload" code nil nil [201091 201156])
            ("custom-menu-sort-alphabetically" variable nil nil [201158 201273])
            ("custom-autoload" code nil nil [201275 201338])
            ("customize-set-value" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [201340 201865])
            ("customize-set-variable" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [201867 202520])
            ("customize-save-variable" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [202522 203181])
            ("customize-push-and-save" function (:prototype-flag t) nil [203183 203595])
            ("customize" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [203597 203891])
            ("customize-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [203893 204140])
            ("customize-group" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [204142 204335])
            ("customize-group-other-window" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [204337 204494])
            ("defalias" code nil nil [204496 204544])
            ("customize-option" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [204546 204656])
            ("defalias" code nil nil [204658 204732])
            ("customize-option-other-window" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [204734 204913])
            ("customize-package-emacs-version-alist" variable nil nil [204915 206248])
            ("defalias" code nil nil [206250 206306])
            ("customize-changed-options" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [206308 206771])
            ("customize-face" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [206773 207192])
            ("customize-face-other-window" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [207194 207524])
            ("customize-unsaved" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [207526 207650])
            ("customize-rogue" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [207652 207764])
            ("customize-saved" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [207766 207860])
            ("customize-apropos" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [207862 208395])
            ("customize-apropos-options" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [208397 208546])
            ("customize-apropos-faces" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [208548 208662])
            ("customize-apropos-groups" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [208664 208780])
            ("custom-buffer-create" function (:prototype-flag t) nil [208782 209105])
            ("custom-buffer-create-other-window" function (:prototype-flag t) nil [209107 209520])
            ("customize-browse" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [209522 209645])
            ("custom-file" variable nil nil [209647 211168])
            ("custom-autoload" code nil nil [211170 211213])
            ("custom-save-all" function (:prototype-flag t) nil [211215 211314])
            ("customize-save-customized" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [211316 211440])
            ("custom-menu-create" function (:prototype-flag t) nil [211442 211611])
            ("customize-menu-create" function (:prototype-flag t) nil [211613 211917])
            ("customize-create-theme" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [212138 212560])
            ("custom-theme-visit-theme" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [212562 212684])
            ("describe-theme" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [212686 212807])
            ("customize-themes" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [212809 213038])
            ("cvs-status-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [213196 213286])
            ("cwarn-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [213456 213967])
            ("define-obsolete-function-alias" code nil nil [213969 214040])
            ("global-cwarn-mode" variable nil nil [214042 214347])
            ("custom-autoload" code nil nil [214349 214397])
            ("global-cwarn-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [214399 214792])
            ("cyrillic-encode-koi8-r-char" function (:prototype-flag t) nil [215052 215190])
            ("cyrillic-encode-alternativnyj-char" function (:prototype-flag t) nil [215192 215344])
            ("standard-display-cyrillic-translit" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [215346 215935])
            ("put" code nil nil [216095 216150])
            ("put" code nil nil [216151 216202])
            ("define-key" code nil nil [216204 216244])
            ("define-key" code nil nil [216246 216294])
            ("dabbrev-completion" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [216296 216786])
            ("dabbrev-expand" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [216788 217664])
            ("data-debug-new-buffer" function (:prototype-flag t) nil [217834 217946])
            ("dbus-handle-event" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [218090 218368])
            ("dcl-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [218526 222535])
            ("setq" code nil nil [222721 222743])
            ("debug" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [222745 223167])
            ("debug-on-entry" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [223169 223881])
            ("cancel-debug-on-entry" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [223883 224206])
            ("decipher" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [224369 224490])
            ("decipher-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [224492 225219])
            ("delimit-columns-customize" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [225435 225535])
            ("delimit-columns-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [225537 225690])
            ("delimit-columns-rectangle" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [225692 225865])
            ("delphi-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [226021 228046])
            ("defalias" code nil nil [228192 228246])
            ("delete-selection-mode" variable nil nil [228248 228569])
            ("custom-autoload" code nil nil [228571 228624])
            ("delete-selection-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [228626 229116])
            ("define-derived-mode" function (:prototype-flag t) nil [229318 231426])
            ("put" code nil nil [231428 231473])
            ("derived-mode-init-mode-variables" function (:prototype-flag t) nil [231475 231759])
            ("describe-text-properties" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [231934 232352])
            ("describe-char" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [232354 233235])
            ("desktop-save-mode" variable nil nil [233557 233706])
            ("custom-autoload" code nil nil [233708 233758])
            ("desktop-save-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [233760 234197])
            ("desktop-locals-to-save" variable (:default-value (quote (desktop-locals-to-save truncate-lines case-fold-search case-replace fill-column overwrite-mode change-log-default-name line-number-mode column-number-mode size-indication-mode buffer-file-coding-system indent-tabs-mode tab-width indicate-buffer-boundaries indicate-empty-lines show-trailing-whitespace))) nil [234199 234731])
            ("custom-autoload" code nil nil [234733 234786])
            ("desktop-save-buffer" variable nil nil [234788 235423])
            ("desktop-buffer-mode-handlers" variable nil nil [235425 236591])
            ("put" code nil nil [236593 236652])
            ("desktop-minor-mode-handlers" variable nil nil [236654 237823])
            ("put" code nil nil [237825 237883])
            ("desktop-clear" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [237885 238178])
            ("desktop-save" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [238180 238458])
            ("desktop-remove" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [238460 238605])
            ("desktop-read" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [238607 239131])
            ("desktop-load-default" function (:prototype-flag t) nil [239133 239276])
            ("make-obsolete" code nil nil [239278 239341])
            ("desktop-change-dir" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [239343 239598])
            ("desktop-save-in-desktop-dir" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [239600 239715])
            ("desktop-revert" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [239717 239805])
            ("gnus-article-outlook-unwrap-lines" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [240095 240510])
            ("gnus-article-outlook-repair-attribution" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [240512 240706])
            ("gnus-outlook-deuglify-article" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [240708 240986])
            ("gnus-article-outlook-deuglify-article" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [240988 241123])
            ("diary" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [241310 241660])
            ("diary-mail-entries" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [241662 242426])
            ("diary-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [242428 242518])
            ("diff-switches" variable (:default-value (purecopy "-c")) nil [242740 242852])
            ("custom-autoload" code nil nil [242854 242895])
            ("diff-command" variable (:default-value (purecopy "diff")) nil [242897 242972])
            ("custom-autoload" code nil nil [242974 243014])
            ("diff" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [243016 243569])
            ("diff-backup" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [243571 243904])
            ("diff-latest-backup-file" function (:prototype-flag t) nil [243906 244021])
            ("diff-buffer-with-file" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [244023 244227])
            ("diff-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [244392 244972])
            ("diff-minor-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [244974 245254])
            ("dig" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [245373 245593])
            ("dired-listing-switches" variable (:default-value (purecopy "-al")) nil [245813 246302])
            ("custom-autoload" code nil nil [246304 246355])
            ("dired-directory" variable nil nil [246357 246660])
            ("define-key" code nil nil [246662 246695])
            ("dired" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [246697 247520])
            ("define-key" code nil nil [247522 247570])
            ("dired-other-window" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [247572 247727])
            ("define-key" code nil nil [247729 247776])
            ("dired-other-frame" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [247778 247924])
            ("dired-noselect" function (:prototype-flag t) nil [247926 248082])
            ("dired-mode" function (:prototype-flag t) nil [248084 251125])
            ("put" code nil nil [251127 251171])
            ("dirtrack-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [251324 251916])
            ("dirtrack" function (:prototype-flag t) nil [251918 252247])
            ("disassemble" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [252405 252773])
            ("make-display-table" function (:prototype-flag t) nil [253275 253372])
            ("display-table-slot" function (:prototype-flag t) nil [253374 253693])
            ("set-display-table-slot" function (:prototype-flag t) nil [253695 254025])
            ("describe-display-table" function (:prototype-flag t) nil [254027 254144])
            ("describe-current-display-table" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [254146 254287])
            ("standard-display-8bit" function (:prototype-flag t) nil [254289 254795])
            ("standard-display-default" function (:prototype-flag t) nil [254797 254936])
            ("standard-display-ascii" function (:prototype-flag t) nil [254938 255054])
            ("standard-display-g1" function (:prototype-flag t) nil [255056 255287])
            ("standard-display-graphic" function (:prototype-flag t) nil [255289 255507])
            ("standard-display-underline" function (:prototype-flag t) nil [255509 255638])
            ("create-glyph" function (:prototype-flag t) nil [255640 255771])
            ("make-glyph-code" function (:prototype-flag t) nil [255773 255911])
            ("glyph-char" function (:prototype-flag t) nil [255913 256015])
            ("glyph-face" function (:prototype-flag t) nil [256017 256148])
            ("standard-display-european" function (:prototype-flag t) nil [256150 257051])
            ("dissociated-press" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [257215 257602])
            ("dnd-protocol-alist" variable (:default-value (\` (((\, (purecopy "^file:///")) . dnd-open-local-file) ((\, (purecopy "^file://")) . dnd-open-file) ((\, (purecopy "^file:")) . dnd-open-local-file) ((\, (purecopy "^\\(https?\\|ftp\\|file\\|nfs\\)://")) . dnd-open-file)))) nil [257736 258679])
            ("custom-autoload" code nil nil [258681 258726])
            ("dns-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [258915 259327])
            ("defalias" code nil nil [259329 259360])
            ("dns-mode-soa-increment-serial" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [259362 259481])
            ("doc-view-mode-p" function (:prototype-flag t) nil [259712 259928])
            ("doc-view-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [259930 260275])
            ("doc-view-mode-maybe" function (:prototype-flag t) nil [260277 260464])
            ("doc-view-minor-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [260466 260833])
            ("doc-view-bookmark-jump" function (:prototype-flag t) nil [260835 260904])
            ("doctor" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [261045 261147])
            ("double-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [261283 261685])
            ("dunnet" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [261826 261913])
            ("defalias" code nil nil [262194 262253])
            ("define-minor-mode" function (:prototype-flag t) nil [262255 265477])
            ("put" code nil nil [265479 265522])
            ("defalias" code nil nil [265524 265595])
            ("defalias" code nil nil [265597 265663])
            ("define-globalized-minor-mode" function (:prototype-flag t) nil [265665 266816])
            ("put" code nil nil [266818 266872])
            ("easy-mmode-define-keymap" function (:prototype-flag t) nil [266874 267555])
            ("easy-mmode-defmap" function (:prototype-flag t) nil [267557 267807])
            ("easy-mmode-defsyntax" function (:prototype-flag t) nil [267809 268005])
            ("easy-menu-define" function (:prototype-flag t) nil [268241 271719])
            ("put" code nil nil [271721 271773])
            ("easy-menu-do-define" function (:prototype-flag t) nil [271775 271858])
            ("easy-menu-create-menu" function (:prototype-flag t) nil [271860 272158])
            ("easy-menu-change" function (:prototype-flag t) nil [272160 273051])
            ("ebnf-customize" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [273694 273777])
            ("ebnf-print-directory" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [273779 274100])
            ("ebnf-print-file" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [274102 274412])
            ("ebnf-print-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [274414 274987])
            ("ebnf-print-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [274989 275203])
            ("ebnf-spool-directory" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [275205 275526])
            ("ebnf-spool-file" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [275528 275838])
            ("ebnf-spool-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [275840 276158])
            ("ebnf-spool-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [276160 276438])
            ("ebnf-eps-directory" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [276440 276738])
            ("ebnf-eps-file" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [276740 277011])
            ("ebnf-eps-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [277013 277750])
            ("ebnf-eps-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [277752 278497])
            ("defalias" code nil nil [278499 278535])
            ("ebnf-syntax-directory" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [278537 278840])
            ("ebnf-syntax-file" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [278842 279121])
            ("ebnf-syntax-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [279123 279227])
            ("ebnf-syntax-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [279229 279331])
            ("ebnf-setup" function (:prototype-flag t) nil [279333 279418])
            ("ebnf-find-style" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [279420 279596])
            ("ebnf-insert-style" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [279598 279792])
            ("ebnf-delete-style" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [279794 279916])
            ("ebnf-merge-style" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [279918 280079])
            ("ebnf-apply-style" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [280081 280247])
            ("ebnf-reset-style" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [280249 280414])
            ("ebnf-push-style" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [280416 280659])
            ("ebnf-pop-style" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [280661 280893])
            ("ebrowse-tree-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [281844 282236])
            ("ebrowse-electric-choose-tree" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [282238 282376])
            ("ebrowse-member-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [282378 282475])
            ("ebrowse-tags-view-declaration" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [282477 282582])
            ("ebrowse-tags-find-declaration" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [282584 282689])
            ("ebrowse-tags-view-definition" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [282691 282794])
            ("ebrowse-tags-find-definition" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [282796 282899])
            ("ebrowse-tags-find-declaration-other-window" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [282901 283035])
            ("ebrowse-tags-view-definition-other-window" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [283037 283169])
            ("ebrowse-tags-find-definition-other-window" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [283171 283303])
            ("ebrowse-tags-find-declaration-other-frame" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [283305 283436])
            ("ebrowse-tags-view-definition-other-frame" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [283438 283568])
            ("ebrowse-tags-find-definition-other-frame" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [283570 283700])
            ("ebrowse-tags-complete-symbol" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [283702 283998])
            ("ebrowse-tags-loop-continue" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [284000 284271])
            ("ebrowse-tags-search" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [284273 284485])
            ("ebrowse-tags-query-replace" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [284487 284672])
            ("ebrowse-tags-search-member-use" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [284674 285011])
            ("ebrowse-back-in-position-stack" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [285013 285153])
            ("ebrowse-forward-in-position-stack" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [285155 285297])
            ("ebrowse-electric-position-menu" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [285299 285428])
            ("ebrowse-save-tree" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [285430 285537])
            ("ebrowse-save-tree-as" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [285539 285783])
            ("ebrowse-statistics" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [285785 285879])
            ("electric-buffer-list" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [286036 287415])
            ("Electric-command-history-redo-expression" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [287589 287821])
            ("ecomplete-setup" function (:prototype-flag t) nil [287980 288039])
            ("global-ede-mode" variable nil nil [288180 288477])
            ("custom-autoload" code nil nil [288479 288523])
            ("global-ede-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [288525 288900])
            ("edebug-all-defs" variable nil nil [289165 289629])
            ("custom-autoload" code nil nil [289631 289676])
            ("edebug-all-forms" variable nil nil [289678 289912])
            ("custom-autoload" code nil nil [289914 289960])
            ("edebug-basic-spec" function (:prototype-flag t) nil [289962 290168])
            ("defalias" code nil nil [290170 290222])
            ("edebug-eval-top-level-form" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [290224 291101])
            ("edebug-all-defs" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [291103 291194])
            ("edebug-all-forms" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [291196 291282])
            ("ediff-files" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [292109 292244])
            ("ediff-files3" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [292246 292394])
            ("defalias" code nil nil [292396 292428])
            ("defalias" code nil nil [292430 292460])
            ("ediff-current-file" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [292462 292683])
            ("ediff-backup" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [292685 292898])
            ("ediff-buffers" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [292900 293056])
            ("defalias" code nil nil [293058 293093])
            ("ediff-buffers3" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [293095 293268])
            ("defalias" code nil nil [293270 293307])
            ("ediff-directories" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [293309 293595])
            ("defalias" code nil nil [293597 293633])
            ("ediff-directory-revisions" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [293635 293937])
            ("defalias" code nil nil [293939 293992])
            ("ediff-directories3" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [293994 294293])
            ("defalias" code nil nil [294295 294333])
            ("ediff-merge-directories" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [294335 294655])
            ("defalias" code nil nil [294657 294705])
            ("ediff-merge-directories-with-ancestor" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [294707 295214])
            ("ediff-merge-directory-revisions" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [295216 295552])
            ("defalias" code nil nil [295554 295619])
            ("ediff-merge-directory-revisions-with-ancestor" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [295621 295985])
            ("defalias" code nil nil [295987 296080])
            ("defalias" code nil nil [296082 296158])
            ("ediff-windows-wordwise" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [296160 296502])
            ("ediff-windows-linewise" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [296504 296846])
            ("ediff-regions-wordwise" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [296848 297209])
            ("ediff-regions-linewise" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [297211 297606])
            ("defalias" code nil nil [297608 297650])
            ("ediff-merge-files" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [297652 297796])
            ("ediff-merge-files-with-ancestor" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [297798 297967])
            ("defalias" code nil nil [297969 298039])
            ("ediff-merge-buffers" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [298041 298198])
            ("ediff-merge-buffers-with-ancestor" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [298200 298384])
            ("ediff-merge-revisions" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [298386 298619])
            ("ediff-merge-revisions-with-ancestor" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [298621 298891])
            ("ediff-patch-file" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [298893 299236])
            ("ediff-patch-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [299238 299801])
            ("defalias" code nil nil [299803 299839])
            ("defalias" code nil nil [299841 299886])
            ("ediff-revision" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [299888 300204])
            ("defalias" code nil nil [300206 300243])
            ("ediff-version" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [300245 300391])
            ("ediff-documentation" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [300393 300527])
            ("ediff-customize" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [300685 300743])
            ("ediff-show-registry" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [300905 300992])
            ("defalias" code nil nil [300994 301036])
            ("ediff-toggle-multiframe" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [301227 301439])
            ("ediff-toggle-use-toolbar" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [301441 301669])
            ("edit-kbd-macro" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [301892 302314])
            ("edit-last-kbd-macro" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [302316 302438])
            ("edit-named-kbd-macro" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [302440 302592])
            ("read-kbd-macro" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [302594 303269])
            ("format-kbd-macro" function (:prototype-flag t) nil [303271 303652])
            ("edt-set-scroll-margins" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [303827 304065])
            ("edt-emulation-on" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [304067 304141])
            ("with-electric-help" function (:prototype-flag t) nil [304298 305521])
            ("electric-helpify" function (:prototype-flag t) nil [305523 305598])
            ("customize-object" function (:prototype-flag t) nil [305779 305957])
            ("eieio-browse" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [306204 306435])
            ("defalias" code nil nil [306436 306484])
            ("eieio-describe-class" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [306486 306774])
            ("eieio-describe-constructor" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [306776 306955])
            ("defalias" code nil nil [306956 307008])
            ("eieio-describe-generic" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [307010 307190])
            ("eldoc-minor-mode-string" variable (:default-value (purecopy " ElDoc")) nil [307387 307516])
            ("custom-autoload" code nil nil [307518 307570])
            ("eldoc-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [307572 308196])
            ("turn-on-eldoc-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [308198 308314])
            ("eldoc-documentation-function" variable nil nil [308316 309032])
            ("electric-indent-chars" variable (:default-value (quote (10))) nil [309223 309317])
            ("electric-indent-mode" variable nil nil [309319 309636])
            ("custom-autoload" code nil nil [309638 309692])
            ("electric-indent-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [309694 310167])
            ("electric-pair-mode" variable nil nil [310169 310478])
            ("custom-autoload" code nil nil [310480 310532])
            ("electric-pair-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [310534 311068])
            ("electric-layout-mode" variable nil nil [311070 311387])
            ("custom-autoload" code nil nil [311389 311443])
            ("electric-layout-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [311445 311809])
            ("elide-head" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [311956 312271])
            ("elint-file" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [312499 312571])
            ("elint-directory" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [312573 312725])
            ("elint-current-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [312727 312860])
            ("elint-defun" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [312862 312989])
            ("elint-initialize" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [312991 313182])
            ("elp-instrument-function" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [313406 313551])
            ("elp-instrument-list" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [313553 313783])
            ("elp-instrument-package" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [313785 314023])
            ("elp-results" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [314025 314251])
            ("emacs-lock-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [314403 315218])
            ("report-emacs-bug" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [315375 315541])
            ("emerge-files" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [315962 316099])
            ("emerge-files-with-ancestor" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [316101 316303])
            ("emerge-buffers" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [316305 316437])
            ("emerge-buffers-with-ancestor" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [316439 316640])
            ("emerge-files-command" function (:prototype-flag t) nil [316642 316703])
            ("emerge-files-with-ancestor-command" function (:prototype-flag t) nil [316705 316780])
            ("emerge-files-remote" function (:prototype-flag t) nil [316782 316865])
            ("emerge-files-with-ancestor-remote" function (:prototype-flag t) nil [316867 316973])
            ("emerge-revisions" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [316975 317131])
            ("emerge-revisions-with-ancestor" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [317133 317347])
            ("emerge-merge-directories" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [317349 317448])
            ("enriched-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [317644 318212])
            ("enriched-encode" function (:prototype-flag t) nil [318214 318289])
            ("enriched-decode" function (:prototype-flag t) nil [318291 318357])
            ("epa-list-keys" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [318872 318992])
            ("epa-list-secret-keys" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [318994 319122])
            ("epa-select-keys" function (:prototype-flag t) nil [319124 319484])
            ("epa-decrypt-file" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [319486 319556])
            ("epa-verify-file" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [319558 319626])
            ("epa-sign-file" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [319628 319730])
            ("epa-encrypt-file" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [319732 319828])
            ("epa-decrypt-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [319830 320758])
            ("epa-decrypt-armor-in-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [320760 321010])
            ("epa-verify-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [321012 321647])
            ("epa-verify-cleartext-in-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [321649 321919])
            ("epa-sign-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [321921 322570])
            ("epa-encrypt-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [322572 323245])
            ("epa-delete-keys" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [323247 323347])
            ("epa-import-keys" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [323349 323427])
            ("epa-import-keys-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [323429 323525])
            ("epa-import-armor-in-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [323527 323683])
            ("epa-export-keys" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [323685 323775])
            ("epa-insert-keys" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [323777 323870])
            ("epa-dired-do-decrypt" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [324091 324174])
            ("epa-dired-do-verify" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [324176 324257])
            ("epa-dired-do-sign" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [324259 324336])
            ("epa-dired-do-encrypt" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [324338 324421])
            ("epa-file-handler" function (:prototype-flag t) nil [324601 324681])
            ("epa-file-enable" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [324683 324739])
            ("epa-file-disable" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [324741 324798])
            ("epa-mail-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [325056 325333])
            ("epa-mail-decrypt" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [325335 325529])
            ("epa-mail-verify" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [325531 325742])
            ("epa-mail-sign" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [325744 325937])
            ("epa-mail-encrypt" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [325939 326149])
            ("epa-mail-import-keys" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [326151 326366])
            ("epa-global-mail-mode" variable nil nil [326368 326685])
            ("custom-autoload" code nil nil [326687 326741])
            ("epa-global-mail-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [326743 327013])
            ("epg-make-context" function (:prototype-flag t) nil [327145 327324])
            ("epg-configuration" function (:prototype-flag t) nil [327519 327653])
            ("epg-check-configuration" function (:prototype-flag t) nil [327655 327811])
            ("epg-expand-group" function (:prototype-flag t) nil [327813 327926])
            ("erc-select-read-args" function (:prototype-flag t) nil [328101 328222])
            ("erc" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [328224 329049])
            ("defalias" code nil nil [329051 329078])
            ("erc-tls" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [329080 329227])
            ("erc-handle-irc-url" function (:prototype-flag t) nil [329229 329501])
            ("erc-autoaway-mode" function (:prototype-flag t) nil [329653 329697])
            ("erc-button-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [329843 329889])
            ("erc-capab-identify-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [330032 330085])
            ("erc-define-minor-mode" function (:prototype-flag t) nil [330231 330277])
            ("erc-dcc-mode" function (:prototype-flag t) nil [330466 330500])
            ("erc-cmd-DCC" function (:prototype-flag t) nil [330502 330802])
            ("pcomplete/erc-mode/DCC" function (:prototype-flag t) nil [330804 330909])
            ("erc-ctcp-query-DCC-hook" variable (:default-value (quote (erc-ctcp-query-DCC))) nil [330911 331005])
            ("erc-ctcp-query-DCC" function (:prototype-flag t) nil [331007 331254])
            ("erc-notifications-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [331444 331511])
            ("erc-cmd-ezb" function (:prototype-flag t) nil [331911 332034])
            ("erc-ezb-get-login" function (:prototype-flag t) nil [332036 332297])
            ("erc-ezb-lookup-action" function (:prototype-flag t) nil [332299 332375])
            ("erc-ezb-notice-autodetect" function (:prototype-flag t) nil [332377 332497])
            ("erc-ezb-identify" function (:prototype-flag t) nil [332499 332603])
            ("erc-ezb-init-session-list" function (:prototype-flag t) nil [332605 332724])
            ("erc-ezb-end-of-session-list" function (:prototype-flag t) nil [332726 332857])
            ("erc-ezb-add-session" function (:prototype-flag t) nil [332859 332977])
            ("erc-ezb-select" function (:prototype-flag t) nil [332979 333102])
            ("erc-ezb-select-session" function (:prototype-flag t) nil [333104 333208])
            ("erc-ezb-initialize" function (:prototype-flag t) nil [333210 333318])
            ("erc-fill-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [333465 333507])
            ("erc-fill" function (:prototype-flag t) nil [333509 333703])
            ("erc-identd-mode" function (:prototype-flag t) nil [333880 333920])
            ("erc-identd-start" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [333922 334307])
            ("erc-identd-stop" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [334309 334380])
            ("erc-create-imenu-index" function (:prototype-flag t) nil [334544 334610])
            ("erc-autojoin-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [334750 334796])
            ("erc-list-mode" function (:prototype-flag t) nil [334936 334972])
            ("erc-log-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [335151 335191])
            ("erc-logging-enabled" function (:prototype-flag t) nil [335193 335549])
            ("erc-save-buffer-in-logs" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [335551 336047])
            ("erc-match-mode" function (:prototype-flag t) nil [336344 336382])
            ("erc-add-pal" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [336384 336473])
            ("erc-delete-pal" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [336475 336570])
            ("erc-add-fool" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [336572 336664])
            ("erc-delete-fool" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [336666 336764])
            ("erc-add-keyword" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [336766 336867])
            ("erc-delete-keyword" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [336869 336976])
            ("erc-add-dangerous-host" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [336978 337100])
            ("erc-delete-dangerous-host" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [337102 337230])
            ("erc-menu-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [337370 337412])
            ("erc-netsplit-mode" function (:prototype-flag t) nil [337578 337622])
            ("erc-cmd-WHOLEFT" function (:prototype-flag t) nil [337624 337702])
            ("erc-determine-network" function (:prototype-flag t) nil [337892 338145])
            ("erc-server-select" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [338147 338278])
            ("erc-notify-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [338463 338509])
            ("erc-cmd-NOTIFY" function (:prototype-flag t) nil [338511 338755])
            ("pcomplete/erc-mode/NOTIFY" function (:prototype-flag t) nil [338757 338827])
            ("erc-page-mode" function (:prototype-flag t) nil [338967 339003])
            ("erc-completion-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [339158 339211])
            ("erc-replace-mode" function (:prototype-flag t) nil [339360 339402])
            ("erc-ring-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [339542 339584])
            ("erc-services-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [339791 339841])
            ("erc-nickserv-identify-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [339843 339976])
            ("erc-nickserv-identify" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [339978 340171])
            ("erc-sound-mode" function (:prototype-flag t) nil [340314 340352])
            ("erc-speedbar-browser" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [340523 340679])
            ("erc-spelling-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [340831 340881])
            ("erc-timestamp-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [341024 341072])
            ("erc-track-minor-mode" variable nil nil [341234 341392])
            ("custom-autoload" code nil nil [341394 341449])
            ("erc-track-minor-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [341451 341992])
            ("erc-track-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [341994 342038])
            ("erc-truncate-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [342244 342294])
            ("erc-truncate-buffer-to-size" function (:prototype-flag t) nil [342296 342560])
            ("erc-truncate-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [342562 342736])
            ("erc-xdcc-mode" function (:prototype-flag t) nil [342892 342928])
            ("erc-xdcc-add-file" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [342930 343024])
            ("ert-deftest" function (:prototype-flag t) nil [343276 343852])
            ("put" code nil nil [343854 343896])
            ("put" code nil nil [343898 343937])
            ("ert-run-tests-batch" function (:prototype-flag t) nil [343939 344345])
            ("ert-run-tests-batch-and-exit" function (:prototype-flag t) nil [344347 344696])
            ("ert-run-tests-interactively" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [344698 345091])
            ("defalias" code nil nil [345093 345137])
            ("ert-describe-test" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [345139 345281])
            ("put" code nil nil [345450 345501])
            ("ert-kill-all-test-buffers" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [345503 345608])
            ("eshell-mode" function (:prototype-flag t) nil [345764 345868])
            ("eshell" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [346050 346586])
            ("eshell-command" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [346588 346770])
            ("eshell-command-result" function (:prototype-flag t) nil [346772 347136])
            ("define-obsolete-function-alias" code nil nil [347138 347214])
            ("tags-file-name" variable nil nil [347811 348047])
            ("put" code nil nil [348049 348125])
            ("put" code nil nil [348127 348178])
            ("tags-case-fold-search" variable (:default-value (quote default)) nil [348180 348408])
            ("custom-autoload" code nil nil [348410 348460])
            ("tags-table-list" variable nil nil [348462 348801])
            ("custom-autoload" code nil nil [348803 348847])
            ("tags-compression-info-list" variable (:default-value (purecopy (quote ("" ".Z" ".bz2" ".gz" ".xz" ".tgz")))) nil [348849 349060])
            ("custom-autoload" code nil nil [349062 349117])
            ("tags-add-tables" variable (:default-value (quote ask-user)) nil [349119 349397])
            ("custom-autoload" code nil nil [349399 349443])
            ("find-tag-hook" variable nil nil [349445 349658])
            ("custom-autoload" code nil nil [349660 349702])
            ("find-tag-default-function" variable nil nil [349704 349983])
            ("custom-autoload" code nil nil [349985 350039])
            ("tags-table-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [350041 350133])
            ("visit-tags-table" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [350135 350681])
            ("visit-tags-table-buffer" function (:prototype-flag t) nil [350683 351265])
            ("tags-table-files" function (:prototype-flag t) nil [351267 351544])
            ("tags-completion-at-point-function" function nil nil [351546 351714])
            ("find-tag-noselect" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [351716 352714])
            ("find-tag" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [352716 353680])
            ("define-key" code nil nil [353682 353716])
            ("find-tag-other-window" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [353718 354710])
            ("define-key" code nil nil [354712 354763])
            ("find-tag-other-frame" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [354765 355746])
            ("define-key" code nil nil [355748 355798])
            ("find-tag-regexp" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [355800 356701])
            ("define-key" code nil nil [356703 356748])
            ("define-key" code nil nil [356750 356788])
            ("pop-tag-mark" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [356790 357051])
            ("next-file" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [357053 357602])
            ("tags-loop-continue" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [357604 358202])
            ("define-key" code nil nil [358204 358248])
            ("tags-search" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [358250 358717])
            ("tags-query-replace" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [358719 359432])
            ("list-tags" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [359434 359710])
            ("tags-apropos" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [359712 359823])
            ("select-tags-table" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [359825 360090])
            ("complete-tag" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [360092 360349])
            ("setup-ethiopic-environment-internal" function (:prototype-flag t) nil [361009 361089])
            ("ethio-sera-to-fidel-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [361091 361709])
            ("ethio-sera-to-fidel-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [361711 362347])
            ("ethio-sera-to-fidel-marker" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [362349 362643])
            ("ethio-fidel-to-sera-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [362645 363353])
            ("ethio-fidel-to-sera-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [363355 364061])
            ("ethio-fidel-to-sera-marker" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [364063 364295])
            ("ethio-modify-vowel" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [364297 364413])
            ("ethio-replace-space" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [364415 364924])
            ("ethio-input-special-character" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [364926 365030])
            ("ethio-fidel-to-tex-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [365032 365177])
            ("ethio-tex-to-fidel-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [365179 365313])
            ("ethio-fidel-to-java-buffer" function (:prototype-flag t) nil [365315 365631])
            ("ethio-java-to-fidel-buffer" function (:prototype-flag t) nil [365633 365777])
            ("ethio-find-file" function (:prototype-flag t) nil [365779 365909])
            ("ethio-write-file" function (:prototype-flag t) nil [365911 366047])
            ("ethio-insert-ethio-space" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [366049 366221])
            ("ethio-composition-function" function (:prototype-flag t) nil [366223 366320])
            ("eudc-set-server" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [366550 366776])
            ("eudc-get-email" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [366778 366959])
            ("eudc-get-phone" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [366961 367142])
            ("eudc-expand-inline" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [367144 367949])
            ("eudc-query-form" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [367951 368230])
            ("eudc-load-eudc" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [368232 368386])
            ("cond" code nil nil [368388 370368])
            ("eudc-display-generic-binary" function (:prototype-flag t) nil [370649 370770])
            ("eudc-display-url" function (:prototype-flag t) nil [370772 370869])
            ("eudc-display-mail" function (:prototype-flag t) nil [370871 370981])
            ("eudc-display-sound" function (:prototype-flag t) nil [370983 371089])
            ("eudc-display-jpeg-inline" function (:prototype-flag t) nil [371091 371213])
            ("eudc-display-jpeg-as-button" function (:prototype-flag t) nil [371215 371325])
            ("eudc-insert-record-at-point-into-bbdb" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [371531 371729])
            ("eudc-try-bbdb-insert" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [371731 371855])
            ("eudc-edit-hotlist" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [372023 372147])
            ("ewoc-create" function (:prototype-flag t) nil [372299 373100])
            ("executable-command-find-posix-p" function (:prototype-flag t) nil [373421 373615])
            ("executable-interpret" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [373617 373962])
            ("executable-set-magic" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [373964 374375])
            ("executable-self-display" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [374377 374562])
            ("executable-make-buffer-file-executable-if-script-p" function (:prototype-flag t) nil [374564 374809])
            ("expand-add-abbrevs" function (:prototype-flag t) nil [375033 375935])
            ("expand-abbrev-hook" function (:prototype-flag t) nil [375937 376122])
            ("expand-jump-to-previous-slot" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [376124 376317])
            ("expand-jump-to-next-slot" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [376319 376504])
            ("define-key" code nil nil [376506 376563])
            ("define-key" code nil nil [376565 376618])
            ("f90-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [376762 379127])
            ("face-remap-add-relative" function (:prototype-flag t) nil [379498 380590])
            ("face-remap-reset-base" function (:prototype-flag t) nil [380592 380843])
            ("face-remap-set-base" function (:prototype-flag t) nil [380845 381554])
            ("text-scale-set" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [381556 381984])
            ("text-scale-increase" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [381986 382439])
            ("text-scale-decrease" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [382441 382626])
            ("define-key" code nil nil [382628 382684])
            ("define-key" code nil nil [382686 382742])
            ("define-key" code nil nil [382744 382800])
            ("define-key" code nil nil [382802 382858])
            ("text-scale-adjust" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [382860 384058])
            ("buffer-face-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [384060 384443])
            ("buffer-face-set" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [384445 384930])
            ("buffer-face-toggle" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [384932 385626])
            ("variable-pitch-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [385628 385876])
            ("feedmail-send-it" function (:prototype-flag t) nil [386167 386423])
            ("feedmail-run-the-queue-no-prompts" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [386425 386578])
            ("feedmail-run-the-queue-global-prompt" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [386580 386881])
            ("feedmail-run-the-queue" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [386883 387209])
            ("feedmail-queue-reminder" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [387211 388357])
            ("ffap-next" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [388595 388981])
            ("find-file-at-point" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [388983 389448])
            ("defalias" code nil nil [389450 389486])
            ("ffap-menu" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [389488 389845])
            ("ffap-at-mouse" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [389847 390173])
            ("dired-at-point" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [390175 390374])
            ("ffap-guess-file-name-at-point" function (:prototype-flag t) nil [390376 390543])
            ("ffap-bindings" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [390545 390642])
            ("file-cache-add-directory" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [391008 391231])
            ("file-cache-add-directory-list" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [391233 391598])
            ("file-cache-add-file" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [391600 391693])
            ("file-cache-add-directory-using-find" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [391695 391862])
            ("file-cache-add-directory-using-locate" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [391864 392061])
            ("file-cache-add-directory-recursively" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [392063 392459])
            ("file-cache-minibuffer-complete" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [392461 392897])
            ("add-file-local-variable" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [393330 393825])
            ("delete-file-local-variable" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [393827 393975])
            ("add-file-local-variable-prop-line" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [393977 394363])
            ("delete-file-local-variable-prop-line" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [394365 394511])
            ("add-dir-local-variable" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [394513 394666])
            ("delete-dir-local-variable" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [394668 394815])
            ("copy-file-locals-to-dir-locals" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [394817 394931])
            ("copy-dir-locals-to-file-locals" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [394933 395062])
            ("copy-dir-locals-to-file-locals-prop-line" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [395064 395191])
            ("filesets-init" function (:prototype-flag t) nil [395335 395487])
            ("find-cmd" function (:prototype-flag t) nil [395626 396057])
            ("find-dired" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [396236 396563])
            ("find-name-dired" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [396565 396887])
            ("find-grep-dired" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [396889 397282])
            ("ff-special-constructs" variable (:default-value (\` (((\, (purecopy "^#\\s *\\(include\\|import\\)\\s +[<\"]\\(.*\\)[>\"]")) lambda nil (buffer-substring (match-beginning 2) (match-end 2)))))) nil [397545 398062])
            ("custom-autoload" code nil nil [398064 398118])
            ("ff-get-other-file" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [398120 398390])
            ("defalias" code nil nil [398392 398444])
            ("ff-find-other-file" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [398446 400339])
            ("ff-mouse-find-other-file" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [400341 400441])
            ("ff-mouse-find-other-file-other-window" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [400443 400574])
            ("find-library" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [401132 401286])
            ("find-function-search-for-symbol" function (:prototype-flag t) nil [401288 401791])
            ("find-function-noselect" function (:prototype-flag t) nil [401793 402478])
            ("find-function" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [402480 403011])
            ("find-function-other-window" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [403013 403192])
            ("find-function-other-frame" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [403194 403371])
            ("find-variable-noselect" function (:prototype-flag t) nil [403373 403875])
            ("find-variable" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [403877 404406])
            ("find-variable-other-window" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [404408 404587])
            ("find-variable-other-frame" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [404589 404766])
            ("find-definition-noselect" function (:prototype-flag t) nil [404768 405292])
            ("find-face-definition" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [405294 405841])
            ("find-function-on-key" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [405843 406017])
            ("find-function-at-point" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [406019 406139])
            ("find-variable-at-point" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [406141 406261])
            ("find-function-setup-keys" function (:prototype-flag t) nil [406263 406398])
            ("find-lisp-find-dired" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [406624 406732])
            ("find-lisp-find-dired-subdirectories" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [406734 406846])
            ("find-lisp-find-dired-filter" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [406848 406985])
            ("finder-list-keywords" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [407166 407283])
            ("finder-commentary" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [407285 407447])
            ("finder-by-keyword" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [407449 407544])
            ("enable-flow-control" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [407720 407972])
            ("enable-flow-control-on" function (:prototype-flag t) nil [407974 408358])
            ("fill-flowed-encode" function (:prototype-flag t) nil [408532 408611])
            ("fill-flowed" function (:prototype-flag t) nil [408613 408698])
            ("flymake-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [408922 409176])
            ("flymake-mode-on" function (:prototype-flag t) nil [409178 409256])
            ("flymake-mode-off" function (:prototype-flag t) nil [409258 409338])
            ("flymake-find-file-hook" function (:prototype-flag t) nil [409340 409404])
            ("flyspell-prog-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [409680 409788])
            ("flyspell-mode" variable nil nil [409789 409854])
            ("flyspell-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [409856 411117])
            ("turn-on-flyspell" function (:prototype-flag t) nil [411119 411216])
            ("turn-off-flyspell" function (:prototype-flag t) nil [411218 411317])
            ("flyspell-mode-off" function (:prototype-flag t) nil [411319 411402])
            ("flyspell-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [411404 411502])
            ("flyspell-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [411504 411582])
            ("turn-on-follow-mode" function (:prototype-flag t) nil [411805 411925])
            ("turn-off-follow-mode" function (:prototype-flag t) nil [411927 412049])
            ("follow-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [412051 413481])
            ("follow-delete-other-windows-and-split" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [413483 414174])
            ("footnote-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [414328 414765])
            ("forms-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [414942 415746])
            ("forms-find-file" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [415748 415831])
            ("forms-find-file-other-window" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [415833 415945])
            ("fortran-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [416105 419146])
            ("fortune-add-fortune" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [419376 419602])
            ("fortune-from-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [419604 419857])
            ("fortune-compile" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [419859 420092])
            ("fortune-to-signature" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [420094 420485])
            ("fortune" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [420487 420837])
            ("gdb-enable-debug" variable nil nil [421002 421153])
            ("custom-autoload" code nil nil [421155 421203])
            ("gdb-enable-debug" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [421205 421643])
            ("gdb" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [421645 424503])
            ("generic-mode-list" variable nil nil [424742 424906])
            ("define-generic-mode" function (:prototype-flag t) nil [424908 426484])
            ("put" code nil nil [426486 426537])
            ("put" code nil nil [426539 426584])
            ("generic-mode-internal" function (:prototype-flag t) nil [426586 426739])
            ("generic-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [426741 427136])
            ("generic-make-keywords-list" function (:prototype-flag t) nil [427138 427639])
            ("glasses-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [427799 428178])
            ("gmm-regexp-concat" function (:prototype-flag t) nil [428405 428572])
            ("gmm-message" function (:prototype-flag t) nil [428574 428898])
            ("gmm-error" function (:prototype-flag t) nil [428900 429062])
            ("gmm-widget-p" function (:prototype-flag t) nil [429064 429157])
            ("gmm-tool-bar-from-list" function (:prototype-flag t) nil [429159 430006])
            ("when" code nil nil [430210 430289])
            ("gnus-slave-no-server" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [430291 430431])
            ("gnus-no-server" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [430433 430824])
            ("gnus-slave" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [430826 430908])
            ("gnus-other-frame" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [430910 431457])
            ("gnus" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [431459 431744])
            ("gnus-unplugged" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [432216 432294])
            ("gnus-plugged" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [432296 432370])
            ("gnus-slave-unplugged" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [432372 432480])
            ("gnus-agentize" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [432482 432890])
            ("gnus-agent-possibly-save-gcc" function (:prototype-flag t) nil [432892 432995])
            ("gnus-agent-rename-group" function (:prototype-flag t) nil [432997 433326])
            ("gnus-agent-delete-group" function (:prototype-flag t) nil [433328 433626])
            ("gnus-agent-get-undownloaded-list" function (:prototype-flag t) nil [433628 433762])
            ("gnus-agent-possibly-alter-active" function (:prototype-flag t) nil [433764 433954])
            ("gnus-agent-find-parameter" function (:prototype-flag t) nil [433956 434213])
            ("gnus-agent-batch-fetch" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [434215 434309])
            ("gnus-agent-batch" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [434311 434411])
            ("gnus-agent-regenerate" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [434413 434564])
            ("gnus-article-prepare-display" function (:prototype-flag t) nil [434733 434853])
            ("gnus-bookmark-set" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [435078 435173])
            ("gnus-bookmark-jump" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [435175 435293])
            ("gnus-bookmark-bmenu-list" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [435295 435583])
            ("gnus-jog-cache" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [435869 436045])
            ("gnus-cache-generate-active" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [436047 436167])
            ("gnus-cache-generate-nov-databases" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [436169 436296])
            ("gnus-cache-rename-group" function (:prototype-flag t) nil [436298 436613])
            ("gnus-cache-delete-group" function (:prototype-flag t) nil [436615 436912])
            ("gnus-delay-article" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [437121 437669])
            ("gnus-delay-send-queue" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [437671 437782])
            ("gnus-delay-initialize" function (:prototype-flag t) nil [437784 438161])
            ("gnus-user-format-function-d" function (:prototype-flag t) nil [438363 438442])
            ("gnus-user-format-function-D" function (:prototype-flag t) nil [438444 438523])
            ("turn-on-gnus-dired-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [438693 438805])
            ("gnus-draft-reminder" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [438971 439074])
            ("gnus-random-x-face" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [439374 439504])
            ("gnus-insert-random-x-face-header" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [439506 439638])
            ("gnus-x-face-from-file" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [439640 439846])
            ("gnus-face-from-file" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [439848 440047])
            ("gnus-convert-face-to-png" function (:prototype-flag t) nil [440049 440202])
            ("gnus-convert-png-to-face" function (:prototype-flag t) nil [440204 440378])
            ("gnus-treat-from-gravatar" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [440591 440758])
            ("gnus-treat-mail-gravatar" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [440760 440938])
            ("gnus-fetch-group" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [441129 441342])
            ("gnus-fetch-group-other-frame" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [441344 441452])
            ("gnus-article-html" function (:prototype-flag t) nil [441639 441717])
            ("gnus-html-prefetch-images" function (:prototype-flag t) nil [441719 441796])
            ("defalias" code nil nil [441956 442001])
            ("gnus-batch-score" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [442003 442141])
            ("turn-on-gnus-mailing-list-mode" function (:prototype-flag t) nil [442368 442440])
            ("gnus-mailing-list-insinuate" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [442442 442613])
            ("gnus-mailing-list-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [442615 442770])
            ("gnus-group-split-setup" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [443011 444147])
            ("gnus-group-split-update" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [444149 444507])
            ("gnus-group-split" function (:prototype-flag t) nil [444509 444747])
            ("gnus-group-split-fancy" function (:prototype-flag t) nil [444749 446926])
            ("gnus-msg-mail" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [447117 447480])
            ("gnus-button-mailto" function (:prototype-flag t) nil [447482 447567])
            ("gnus-button-reply" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [447569 447674])
            ("define-mail-user-agent" code nil nil [447676 447795])
            ("gnus-notifications" function (:prototype-flag t) nil [447984 448338])
            ("gnus-treat-from-picon" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [448564 448708])
            ("gnus-treat-mail-picon" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [448710 448860])
            ("gnus-treat-newsgroups-picon" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [448862 449035])
            ("gnus-sorted-difference" function (:prototype-flag t) nil [449436 449648])
            ("gnus-sorted-ndifference" function (:prototype-flag t) nil [449650 449849])
            ("gnus-sorted-complement" function (:prototype-flag t) nil [449851 450033])
            ("gnus-intersection" function (:prototype-flag t) nil [450035 450109])
            ("gnus-sorted-intersection" function (:prototype-flag t) nil [450111 450273])
            ("gnus-sorted-range-intersection" function (:prototype-flag t) nil [450275 450449])
            ("defalias" code nil nil [450451 450518])
            ("gnus-sorted-nintersection" function (:prototype-flag t) nil [450520 450718])
            ("gnus-sorted-union" function (:prototype-flag t) nil [450720 450868])
            ("gnus-sorted-nunion" function (:prototype-flag t) nil [450870 451054])
            ("gnus-add-to-sorted-list" function (:prototype-flag t) nil [451056 451173])
            ("gnus-registry-initialize" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [451389 451488])
            ("gnus-registry-install-hooks" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [451490 451590])
            ("gnus-sieve-update" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [451810 452183])
            ("gnus-sieve-generate" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [452185 452516])
            ("gnus-sieve-article-add-rule" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [452518 452588])
            ("gnus-update-format" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [452750 452857])
            ("gnus-declare-backend" function (:prototype-flag t) nil [453023 453165])
            ("gnus-summary-bookmark-jump" function (:prototype-flag t) nil [453332 453536])
            ("gnus-sync-initialize" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [453724 453820])
            ("gnus-sync-install-hooks" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [453822 453910])
            ("gnus-add-configuration" function (:prototype-flag t) nil [454073 454208])
            ("gnutls-min-prime-bits" variable (:default-value 256) nil [454362 454758])
            ("custom-autoload" code nil nil [454760 454811])
            ("gomoku" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [454952 455716])
            ("define-obsolete-function-alias" code nil nil [455940 456025])
            ("goto-address-at-point" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [456027 456319])
            ("goto-address" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [456321 456755])
            ("put" code nil nil [456756 456803])
            ("goto-address-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [456805 457104])
            ("goto-address-prog-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [457106 457244])
            ("gravatar-retrieve" function (:prototype-flag t) nil [457434 457643])
            ("gravatar-retrieve-synchronously" function (:prototype-flag t) nil [457645 457778])
            ("grep-window-height" variable nil nil [458083 458194])
            ("custom-autoload" code nil nil [458196 458242])
            ("grep-command" variable nil nil [458244 458682])
            ("custom-autoload" code nil nil [458684 458726])
            ("grep-find-command" variable nil nil [458728 458986])
            ("custom-autoload" code nil nil [458988 459035])
            ("grep-setup-hook" variable nil nil [459037 459139])
            ("custom-autoload" code nil nil [459141 459184])
            ("grep-regexp-alist" variable
               (:constant-flag t
                :default-value (quote (("^\\(.+?\\)\\(:[ 	]*\\)\\([1-9][0-9]*\\)\\2" 1 3 ((lambda nil (when grep-highlight-matches (let* ((beg (match-end 0)) (end (save-excursion (goto-char beg) (line-end-position))) (mbeg (text-property-any beg end (quote font-lock-face) (quote match)))) (when mbeg (- mbeg beg))))) lambda nil (when grep-highlight-matches (let* ((beg (match-end 0)) (end (save-excursion (goto-char beg) (line-end-position))) (mbeg (text-property-any beg end (quote font-lock-face) (quote match))) (mend (and mbeg (next-single-property-change mbeg (quote font-lock-face) nil end)))) (when mend (- mend beg)))))) ("^Binary file \\(.+\\) matches$" 1 nil nil 0 1))))
                nil [459186 459897])
            ("grep-program" variable (:default-value (purecopy "grep")) nil [459899 460086])
            ("find-program" variable (:default-value (purecopy "find")) nil [460088 460256])
            ("xargs-program" variable (:default-value (purecopy "xargs")) nil [460258 460456])
            ("grep-find-use-xargs" variable nil nil [460458 460772])
            ("grep-history" variable nil nil [460774 460826])
            ("grep-find-history" variable nil nil [460828 460890])
            ("grep-process-setup" function (:prototype-flag t) nil [460892 461069])
            ("grep-compute-defaults" function (:prototype-flag t) nil [461071 461131])
            ("grep-mode" function (:prototype-flag t) nil [461133 461237])
            ("grep" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [461239 462057])
            ("grep-find" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [462059 462418])
            ("defalias" code nil nil [462420 462452])
            ("lgrep" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [462454 463240])
            ("rgrep" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [463242 464215])
            ("zrgrep" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [464217 464516])
            ("defalias" code nil nil [464518 464544])
            ("gs-load-image" function (:prototype-flag t) nil [464670 465029])
            ("gud-gdb" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [465240 465454])
            ("sdb" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [465456 465666])
            ("dbx" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [465668 465878])
            ("xdb" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [465880 466241])
            ("perldb" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [466243 466459])
            ("pdb" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [466461 466673])
            ("jdb" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [466675 467304])
            ("gdb-script-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [467306 467392])
            ("gud-tooltip-mode" variable nil nil [467394 467695])
            ("custom-autoload" code nil nil [467697 467742])
            ("gud-tooltip-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [467744 467996])
            ("gv-get" function (:prototype-flag t) nil [468244 468734])
            ("gv-letplace" function (:prototype-flag t) nil [468736 469286])
            ("put" code nil nil [469288 469331])
            ("gv-define-expander" function (:prototype-flag t) nil [469333 469644])
            ("put" code nil nil [469646 469696])
            ("gv--defun-declaration" function (:prototype-flag t) nil [469698 469795])
            ("push" code nil nil [469797 469899])
            ("push" code nil nil [469901 469999])
            ("gv-define-setter" function (:prototype-flag t) nil [470001 470671])
            ("put" code nil nil [470673 470721])
            ("gv-define-simple-setter" function (:prototype-flag t) nil [470723 471306])
            ("setf" function (:prototype-flag t) nil [471308 471660])
            ("put" code nil nil [471662 471714])
            ("handwrite" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [471867 472293])
            ("hanoi" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [472455 472550])
            ("hanoi-unix" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [472552 472774])
            ("hanoi-unix-64" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [472776 473019])
            ("hashcash-insert-payment" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [473304 473434])
            ("hashcash-insert-payment-async" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [473436 473630])
            ("hashcash-verify-payment" function (:prototype-flag t) nil [473632 473755])
            ("mail-add-payment" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [473757 474053])
            ("mail-add-payment-async" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [474055 474297])
            ("mail-check-payment" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [474299 474473])
            ("help-at-pt-string" function (:prototype-flag t) nil [474836 475229])
            ("help-at-pt-kbd-string" function (:prototype-flag t) nil [475231 475509])
            ("display-local-help" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [475511 475992])
            ("help-at-pt-cancel-timer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [475994 476153])
            ("help-at-pt-set-timer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [476155 476318])
            ("help-at-pt-display-when-idle" variable (:default-value (quote never)) nil [476320 477696])
            ("custom-autoload" code nil nil [477698 477762])
            ("scan-buf-move-to-region" function (:prototype-flag t) nil [477764 478707])
            ("scan-buf-next-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [478709 479723])
            ("scan-buf-previous-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [479725 480101])
            ("describe-function" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [480434 480555])
            ("help-C-file-name" function (:prototype-flag t) nil [480557 480756])
            ("find-lisp-object-file-name" function (:prototype-flag t) nil [480758 481558])
            ("describe-function-1" function (:prototype-flag t) nil [481560 481631])
            ("variable-at-point" function (:prototype-flag t) nil [481633 481869])
            ("describe-variable" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [481871 482213])
            ("describe-syntax" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [482215 482465])
            ("describe-categories" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [482467 482792])
            ("doc-file-to-man" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [482794 482924])
            ("doc-file-to-info" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [482926 483055])
            ("three-step-help" variable nil nil [483207 483536])
            ("custom-autoload" code nil nil [483538 483587])
            ("help-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [483899 484101])
            ("help-mode-setup" function (:prototype-flag t) nil [484103 484162])
            ("help-mode-finish" function (:prototype-flag t) nil [484164 484224])
            ("help-setup-xref" function (:prototype-flag t) nil [484226 484820])
            ("help-buffer" function (:prototype-flag t) nil [484822 485159])
            ("help-make-xrefs" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [485161 486182])
            ("help-xref-button" function (:prototype-flag t) nil [486184 486553])
            ("help-insert-xref-button" function (:prototype-flag t) nil [486555 486856])
            ("help-xref-on-pp" function (:prototype-flag t) nil [486858 486983])
            ("help-bookmark-jump" function (:prototype-flag t) nil [486985 487211])
            ("Helper-describe-bindings" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [487394 487501])
            ("Helper-help" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [487503 487583])
            ("hexl-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [487740 491278])
            ("hexl-find-file" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [491280 491501])
            ("hexlify-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [491503 491638])
            ("hi-lock-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [491943 494625])
            ("global-hi-lock-mode" variable nil nil [494627 494940])
            ("custom-autoload" code nil nil [494942 494994])
            ("global-hi-lock-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [494996 495400])
            ("defalias" code nil nil [495402 495471])
            ("hi-lock-line-face-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [495473 495952])
            ("defalias" code nil nil [495954 496003])
            ("hi-lock-face-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [496005 496461])
            ("defalias" code nil nil [496463 496519])
            ("hi-lock-face-phrase-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [496521 497002])
            ("defalias" code nil nil [497004 497057])
            ("hi-lock-unface-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [497059 497297])
            ("hi-lock-write-interactive-patterns" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [497299 497623])
            ("hide-ifdef-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [497783 499168])
            ("hs-special-modes-alist" variable (:default-value (mapcar (quote purecopy) (quote ((c-mode "{" "}" "/[*/]" nil nil) (c++-mode "{" "}" "/[*/]" nil nil) (bibtex-mode ("@\\S(*\\(\\s(\\)" 1)) (java-mode "{" "}" "/[*/]" nil nil) (js-mode "{" "}" "/[*/]" nil))))) nil [499350 500791])
            ("hs-minor-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [500793 501696])
            ("turn-off-hideshow" function (:prototype-flag t) nil [501698 501799])
            ("highlight-changes-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [502232 503324])
            ("highlight-changes-visible-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [503326 503961])
            ("highlight-changes-remove-highlight" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [503963 504182])
            ("highlight-changes-next-change" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [504184 504326])
            ("highlight-changes-previous-change" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [504328 504478])
            ("highlight-changes-rotate-faces" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [504480 505151])
            ("highlight-compare-buffers" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [505153 505737])
            ("highlight-compare-with-file" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [505739 506357])
            ("global-highlight-changes-mode" variable nil nil [506359 506712])
            ("custom-autoload" code nil nil [506714 506778])
            ("global-highlight-changes-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [506780 507250])
            ("hippie-expand-try-functions-list" variable (:default-value (quote (try-complete-file-name-partially try-complete-file-name try-expand-all-abbrevs try-expand-list try-expand-line try-expand-dabbrev try-expand-dabbrev-all-buffers try-expand-dabbrev-from-kill try-complete-lisp-symbol-partially try-complete-lisp-symbol))) nil [507461 507932])
            ("custom-autoload" code nil nil [507934 508000])
            ("hippie-expand" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [508002 508488])
            ("make-hippie-expand-function" function (:prototype-flag t) nil [508490 508757])
            ("hl-line-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [508917 509778])
            ("global-hl-line-mode" variable nil nil [509780 510093])
            ("custom-autoload" code nil nil [510095 510147])
            ("global-hl-line-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [510149 510730])
            ("define-obsolete-variable-alias" code nil nil [511144 511227])
            ("holiday-general-holidays" variable (:default-value (mapcar (quote purecopy) (quote ((holiday-fixed 1 1 "New Year's Day") (holiday-float 1 1 3 "Martin Luther King Day") (holiday-fixed 2 2 "Groundhog Day") (holiday-fixed 2 14 "Valentine's Day") (holiday-float 2 1 3 "President's Day") (holiday-fixed 3 17 "St. Patrick's Day") (holiday-fixed 4 1 "April Fools' Day") (holiday-float 5 0 2 "Mother's Day") (holiday-float 5 1 -1 "Memorial Day") (holiday-fixed 6 14 "Flag Day") (holiday-float 6 0 3 "Father's Day") (holiday-fixed 7 4 "Independence Day") (holiday-float 9 1 1 "Labor Day") (holiday-float 10 1 2 "Columbus Day") (holiday-fixed 10 31 "Halloween") (holiday-fixed 11 11 "Veteran's Day") (holiday-float 11 4 4 "Thanksgiving"))))) nil [511229 512050])
            ("custom-autoload" code nil nil [512052 512108])
            ("put" code nil nil [512110 512165])
            ("define-obsolete-variable-alias" code nil nil [512167 512252])
            ("holiday-oriental-holidays" variable (:default-value (mapcar (quote purecopy) (quote ((holiday-chinese-new-year) (if calendar-chinese-all-holidays-flag (append (holiday-chinese 1 15 "Lantern Festival") (holiday-chinese-qingming) (holiday-chinese 5 5 "Dragon Boat Festival") (holiday-chinese 7 7 "Double Seventh Festival") (holiday-chinese 8 15 "Mid-Autumn Festival") (holiday-chinese 9 9 "Double Ninth Festival") (holiday-chinese-winter-solstice))))))) nil [512254 512755])
            ("custom-autoload" code nil nil [512757 512814])
            ("put" code nil nil [512816 512872])
            ("define-obsolete-variable-alias" code nil nil [512874 512953])
            ("holiday-local-holidays" variable nil nil [512955 513069])
            ("custom-autoload" code nil nil [513071 513125])
            ("put" code nil nil [513127 513180])
            ("define-obsolete-variable-alias" code nil nil [513182 513261])
            ("holiday-other-holidays" variable nil nil [513263 513384])
            ("custom-autoload" code nil nil [513386 513440])
            ("put" code nil nil [513442 513495])
            ("hebrew-holidays-1" variable (:default-value (mapcar (quote purecopy) (quote ((holiday-hebrew-rosh-hashanah) (if calendar-hebrew-all-holidays-flag (holiday-julian 11 (let ((m displayed-month) (y displayed-year) year) (calendar-increment-month m y -1) (setq year (calendar-extract-year (calendar-julian-from-absolute (calendar-absolute-from-gregorian (list m 1 y))))) (if (zerop (% (1+ year) 4)) 22 21)) "\"Tal Umatar\" (evening)")))))) nil [513497 513968])
            ("put" code nil nil [513970 514018])
            ("hebrew-holidays-2" variable (:default-value (mapcar (quote purecopy) (quote ((holiday-hebrew-hanukkah) (if calendar-hebrew-all-holidays-flag (holiday-hebrew 10 (let ((h-year (calendar-extract-year (calendar-hebrew-from-absolute (calendar-absolute-from-gregorian (list displayed-month 28 displayed-year)))))) (if (= 6 (% (calendar-hebrew-to-absolute (list 10 10 h-year)) 7)) 11 10)) "Tzom Teveth")) (if calendar-hebrew-all-holidays-flag (holiday-hebrew 11 15 "Tu B'Shevat")))))) nil [514020 514534])
            ("put" code nil nil [514536 514584])
            ("hebrew-holidays-3" variable (:default-value (mapcar (quote purecopy) (quote ((if calendar-hebrew-all-holidays-flag (holiday-hebrew 11 (let* ((m displayed-month) (y displayed-year) (h-year (progn (calendar-increment-month m y 1) (calendar-extract-year (calendar-hebrew-from-absolute (calendar-absolute-from-gregorian (list m (calendar-last-day-of-month m y) y)))))) (s-s (calendar-hebrew-from-absolute (if (= 6 (% (calendar-hebrew-to-absolute (list 7 1 h-year)) 7)) (calendar-dayname-on-or-before 6 (calendar-hebrew-to-absolute (list 11 17 h-year))) (calendar-dayname-on-or-before 6 (calendar-hebrew-to-absolute (list 11 16 h-year)))))) (day (calendar-extract-day s-s))) day) "Shabbat Shirah")))))) nil [514586 515320])
            ("put" code nil nil [515322 515370])
            ("hebrew-holidays-4" variable (:default-value (mapcar (quote purecopy) (quote ((holiday-hebrew-passover) (and calendar-hebrew-all-holidays-flag (let* ((m displayed-month) (y displayed-year) (year (progn (calendar-increment-month m y -1) (calendar-extract-year (calendar-julian-from-absolute (calendar-absolute-from-gregorian (list m 1 y))))))) (= 21 (% year 28))) (holiday-julian 3 26 "Kiddush HaHamah")) (if calendar-hebrew-all-holidays-flag (holiday-hebrew-tisha-b-av)))))) nil [515372 515882])
            ("put" code nil nil [515884 515932])
            ("define-obsolete-variable-alias" code nil nil [515934 516015])
            ("holiday-hebrew-holidays" variable (:default-value (mapcar (quote purecopy) (quote ((holiday-hebrew-passover) (holiday-hebrew-rosh-hashanah) (holiday-hebrew-hanukkah) (if calendar-hebrew-all-holidays-flag (append (holiday-hebrew-tisha-b-av) (holiday-hebrew-misc))))))) nil [516017 516332])
            ("custom-autoload" code nil nil [516334 516389])
            ("put" code nil nil [516391 516445])
            ("define-obsolete-variable-alias" code nil nil [516447 516534])
            ("holiday-christian-holidays" variable (:default-value (mapcar (quote purecopy) (quote ((holiday-easter-etc) (holiday-fixed 12 25 "Christmas") (if calendar-christian-all-holidays-flag (append (holiday-fixed 1 6 "Epiphany") (holiday-julian 12 25 "Christmas (Julian calendar)") (holiday-greek-orthodox-easter) (holiday-fixed 8 15 "Assumption") (holiday-advent 0 "Advent"))))))) nil [516536 516960])
            ("custom-autoload" code nil nil [516962 517020])
            ("put" code nil nil [517022 517079])
            ("define-obsolete-variable-alias" code nil nil [517081 517164])
            ("holiday-islamic-holidays" variable (:default-value (mapcar (quote purecopy) (quote ((holiday-islamic-new-year) (holiday-islamic 9 1 "Ramadan Begins") (if calendar-islamic-all-holidays-flag (append (holiday-islamic 1 10 "Ashura") (holiday-islamic 3 12 "Mulad-al-Nabi") (holiday-islamic 7 26 "Shab-e-Mi'raj") (holiday-islamic 8 15 "Shab-e-Bara't") (holiday-islamic 9 27 "Shab-e Qadr") (holiday-islamic 10 1 "Id-al-Fitr") (holiday-islamic 12 10 "Id-al-Adha"))))))) nil [517166 517676])
            ("custom-autoload" code nil nil [517678 517734])
            ("put" code nil nil [517736 517791])
            ("define-obsolete-variable-alias" code nil nil [517793 517872])
            ("holiday-bahai-holidays" variable (:default-value (mapcar (quote purecopy) (quote ((holiday-bahai-new-year) (holiday-bahai-ridvan) (holiday-fixed 5 23 "Declaration of the Báb") (holiday-fixed 5 29 "Ascension of Bahá'u'lláh") (holiday-fixed 7 9 "Martyrdom of the Báb") (holiday-fixed 10 20 "Birth of the Báb") (holiday-fixed 11 12 "Birth of Bahá'u'lláh") (if calendar-bahai-all-holidays-flag (append (holiday-fixed 11 26 "Day of the Covenant") (holiday-fixed 11 28 "Ascension of `Abdu'l-Bahá"))))))) nil [517874 518419])
            ("custom-autoload" code nil nil [518421 518475])
            ("put" code nil nil [518477 518530])
            ("define-obsolete-variable-alias" code nil nil [518532 518611])
            ("holiday-solar-holidays" variable (:default-value (mapcar (quote purecopy) (quote ((solar-equinoxes-solstices) (holiday-sexp calendar-daylight-savings-starts (format "Daylight Saving Time Begins %s" (solar-time-string (/ calendar-daylight-savings-starts-time (float 60)) calendar-standard-time-zone-name))) (holiday-sexp calendar-daylight-savings-ends (format "Daylight Saving Time Ends %s" (solar-time-string (/ calendar-daylight-savings-ends-time (float 60)) calendar-daylight-time-zone-name))))))) nil [518613 519165])
            ("custom-autoload" code nil nil [519167 519221])
            ("put" code nil nil [519223 519276])
            ("put" code nil nil [519278 519326])
            ("holidays" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [519328 519587])
            ("list-holidays" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [519589 520412])
            ("defalias" code nil nil [520414 520453])
            ("html2text" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [520606 520706])
            ("htmlfontify-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [520894 521604])
            ("htmlfontify-copy-and-link-dir" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [521606 521915])
            ("define-ibuffer-column" function (:prototype-flag t) nil [522140 523253])
            ("define-ibuffer-sorter" function (:prototype-flag t) nil [523255 523768])
            ("define-ibuffer-op" function (:prototype-flag t) nil [523770 525416])
            ("define-ibuffer-filter" function (:prototype-flag t) nil [525418 525995])
            ("ibuffer-list-buffers" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [526172 526399])
            ("ibuffer-other-window" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [526401 526642])
            ("ibuffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [526644 527511])
            ("icalendar-export-file" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [527762 528023])
            ("icalendar-export-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [528025 528499])
            ("icalendar-import-file" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [528501 528848])
            ("icalendar-import-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [528850 529554])
            ("icomplete-mode" variable nil nil [529702 529995])
            ("custom-autoload" code nil nil [529997 530046])
            ("icomplete-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [530048 530336])
            ("icon-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [530484 531910])
            ("idlwave-shell" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [532080 532930])
            ("idlwave-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [533090 538031])
            ("ido-mode" variable nil nil [538698 539197])
            ("custom-autoload" code nil nil [539199 539236])
            ("ido-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [539238 539753])
            ("ido-switch-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [539755 541448])
            ("ido-switch-buffer-other-window" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [541450 541689])
            ("ido-display-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [541691 541918])
            ("ido-kill-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [541920 542103])
            ("ido-insert-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [542105 542334])
            ("ido-switch-buffer-other-frame" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [542336 542573])
            ("ido-find-file-in-dir" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [542575 542676])
            ("ido-find-file" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [542678 545043])
            ("ido-find-file-other-window" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [545045 545272])
            ("ido-find-alternate-file" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [545274 545498])
            ("ido-find-file-read-only" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [545500 545725])
            ("ido-find-file-read-only-other-window" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [545727 545981])
            ("ido-find-file-read-only-other-frame" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [545983 546235])
            ("ido-display-file" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [546237 546454])
            ("ido-find-file-other-frame" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [546456 546681])
            ("ido-write-file" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [546683 546876])
            ("ido-insert-file" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [546878 547083])
            ("ido-dired" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [547085 547267])
            ("ido-read-buffer" function (:prototype-flag t) nil [547269 547650])
            ("ido-read-file-name" function (:prototype-flag t) nil [547652 547943])
            ("ido-read-directory-name" function (:prototype-flag t) nil [547945 548245])
            ("ido-completing-read" function (:prototype-flag t) nil [548247 549217])
            ("ielm" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [549332 549488])
            ("define-obsolete-function-alias" code nil nil [549624 549697])
            ("iimage-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [549699 550003])
            ("image-type-from-data" function (:prototype-flag t) nil [550432 550624])
            ("image-type-from-buffer" function (:prototype-flag t) nil [550626 550826])
            ("image-type-from-file-header" function (:prototype-flag t) nil [550828 551045])
            ("image-type-from-file-name" function (:prototype-flag t) nil [551047 551251])
            ("image-type" function (:prototype-flag t) nil [551253 551721])
            ("image-type-available-p" function (:prototype-flag t) nil [551723 551883])
            ("image-type-auto-detected-p" function (:prototype-flag t) nil [551885 552382])
            ("create-image" function (:prototype-flag t) nil [552384 553263])
            ("put-image" function (:prototype-flag t) nil [553265 553984])
            ("insert-image" function (:prototype-flag t) nil [553986 554836])
            ("insert-sliced-image" function (:prototype-flag t) nil [554838 555421])
            ("remove-images" function (:prototype-flag t) nil [555423 555671])
            ("find-image" function (:prototype-flag t) nil [555673 556501])
            ("defimage" function (:prototype-flag t) nil [556503 557299])
            ("put" code nil nil [557301 557335])
            ("imagemagick-register-types" function (:prototype-flag t) nil [557337 557914])
            ("image-dired-dired-toggle-marked-thumbs" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [558585 558973])
            ("image-dired-dired-with-window-configuration" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [558975 559606])
            ("image-dired-display-thumbs" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [559608 560598])
            ("image-dired-show-all-from-dir" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [560600 560880])
            ("defalias" code nil nil [560882 560936])
            ("defalias" code nil nil [560938 560986])
            ("image-dired-tag-files" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [560988 561122])
            ("image-dired-delete-tag" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [561124 561283])
            ("image-dired-jump-thumbnail-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [561285 561387])
            ("image-dired-setup-dired-keybindings" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [561389 561633])
            ("image-dired-display-thumbs-append" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [561635 561764])
            ("image-dired-display-thumb" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [561766 561899])
            ("image-dired-dired-display-external" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [561901 562026])
            ("image-dired-dired-display-image" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [562028 562278])
            ("image-dired-dired-comment-files" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [562280 562403])
            ("image-dired-mark-tagged-files" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [562405 562831])
            ("image-dired-dired-edit-comment-and-tags" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [562833 563044])
            ("image-file-name-extensions" variable (:default-value (purecopy (quote ("png" "jpeg" "jpg" "gif" "tiff" "tif" "xbm" "xpm" "pbm" "pgm" "ppm" "pnm" "svg")))) nil [563301 563839])
            ("custom-autoload" code nil nil [563841 563903])
            ("image-file-name-regexps" variable nil nil [563905 564378])
            ("custom-autoload" code nil nil [564380 564439])
            ("image-file-name-regexp" function (:prototype-flag t) nil [564441 564566])
            ("insert-image-file" function (:prototype-flag t) nil [564568 564825])
            ("auto-image-file-mode" variable nil nil [564827 565144])
            ("custom-autoload" code nil nil [565146 565202])
            ("auto-image-file-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [565204 565644])
            ("image-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [565854 566048])
            ("image-minor-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [566050 566481])
            ("image-mode-as-text" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [566483 567077])
            ("image-bookmark-jump" function (:prototype-flag t) nil [567079 567147])
            ("imenu-sort-function" variable nil nil [567352 567888])
            ("custom-autoload" code nil nil [567890 567938])
            ("imenu-generic-expression" variable nil nil [567940 569449])
            ("put" code nil nil [569450 569505])
            ("make-variable-buffer-local" code nil nil [569507 569561])
            ("imenu-create-index-function" variable (:default-value (quote imenu-default-create-index-function)) nil [569563 569929])
            ("make-variable-buffer-local" code nil nil [569931 569988])
            ("imenu-prev-index-position-function" variable (:default-value (quote beginning-of-defun)) nil [569990 570430])
            ("make-variable-buffer-local" code nil nil [570432 570496])
            ("imenu-extract-index-name-function" variable nil nil [570498 570791])
            ("make-variable-buffer-local" code nil nil [570793 570856])
            ("imenu-name-lookup-function" variable nil nil [570858 571216])
            ("make-variable-buffer-local" code nil nil [571218 571274])
            ("imenu-default-goto-function" variable (:default-value (quote imenu-default-goto-function)) nil [571276 571479])
            ("make-variable-buffer-local" code nil nil [571481 571538])
            ("put" code nil nil [571539 571588])
            ("make-variable-buffer-local" code nil nil [571590 571638])
            ("make-variable-buffer-local" code nil nil [571640 571692])
            ("imenu-add-to-menubar" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [571694 571912])
            ("imenu-add-menubar-index" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [571914 572118])
            ("imenu" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [572120 572335])
            ("indian-compose-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [572629 572760])
            ("indian-compose-string" function (:prototype-flag t) nil [572762 572833])
            ("in-is13194-post-read-conversion" function (:prototype-flag t) nil [572835 572913])
            ("in-is13194-pre-write-conversion" function (:prototype-flag t) nil [572915 572997])
            ("indian-2-column-to-ucs-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [572999 573124])
            ("inferior-lisp" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [573288 573766])
            ("defalias" code nil nil [573768 573803])
            ("Info-default-directory-list" variable (:default-value (let* ((config-dir (file-name-as-directory (or (and (featurep (quote ns)) (let ((dir (expand-file-name "../info" data-directory))) (if (file-directory-p dir) dir))) configure-info-directory))) (prefixes (prune-directory-list (quote ("/usr/local/" "/usr/" "/opt/" "/")))) (suffixes (quote ("share/" "" "gnu/" "gnu/lib/" "gnu/lib/emacs/" "emacs/" "lib/" "lib/emacs/"))) (standard-info-dirs (apply (function nconc) (mapcar (lambda (pfx) (let ((dirs (mapcar (lambda (sfx) (concat pfx sfx "info/")) suffixes))) (prune-directory-list dirs))) prefixes))) (dirs (if (member config-dir standard-info-dirs) (nconc standard-info-dirs (list config-dir)) (cons config-dir standard-info-dirs)))) (if (not (eq system-type (quote windows-nt))) dirs (let* ((instdir (file-name-directory invocation-directory)) (dir1 (expand-file-name "../info/" instdir)) (dir2 (expand-file-name "../../../info/" instdir))) (cond ((file-exists-p dir1) (append dirs (list dir1))) ((file-exists-p dir2) (append dirs (list dir2))) (t dirs)))))) nil [574232 576245])
            ("info-other-window" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [576247 576379])
            ("put" code nil nil [576381 576422])
            ("info" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [576424 577402])
            ("info-emacs-manual" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [577404 577496])
            ("info-emacs-bug" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [577498 577621])
            ("info-standalone" function (:prototype-flag t) nil [577623 577830])
            ("Info-on-current-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [577832 578059])
            ("Info-directory" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [578061 578142])
            ("Info-index" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [578144 578539])
            ("info-apropos" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [578541 578700])
            ("info-finder" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [578702 579034])
            ("Info-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [579036 582727])
            ("put" code nil nil [582729 582794])
            ("Info-goto-emacs-command-node" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [582796 583132])
            ("put" code nil nil [583134 583203])
            ("Info-goto-emacs-key-command-node" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [583205 583618])
            ("Info-speedbar-browser" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [583620 583775])
            ("Info-bookmark-jump" function (:prototype-flag t) nil [583777 583958])
            ("info-display-manual" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [583960 584098])
            ("info-lookup-reset" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [584338 584582])
            ("put" code nil nil [584584 584628])
            ("info-lookup-symbol" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [584630 585070])
            ("put" code nil nil [585072 585114])
            ("info-lookup-file" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [585116 585514])
            ("info-complete-symbol" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [585516 585638])
            ("info-complete-file" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [585640 585758])
            ("info-xref-check" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [585983 587218])
            ("info-xref-check-all" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [587220 587810])
            ("info-xref-check-all-custom" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [587812 588198])
            ("info-xref-docstrings" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [588200 589070])
            ("Info-tagify" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [589286 589436])
            ("Info-split-threshold" variable (:default-value 262144) nil [589438 589546])
            ("custom-autoload" code nil nil [589548 589600])
            ("Info-split" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [589602 590287])
            ("Info-validate" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [590289 590451])
            ("batch-info-validate" function (:prototype-flag t) nil [590453 590783])
            ("inversion-require-emacs" function (:prototype-flag t) nil [590957 591182])
            ("isearch-toggle-specified-input-method" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [591461 591600])
            ("isearch-toggle-input-method" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [591602 591713])
            ("isearch-process-search-multibyte-characters" function (:prototype-flag t) nil [591715 591812])
            ("isearchb-activate" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [591960 592225])
            ("iso-spanish" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [592566 592836])
            ("iso-german" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [592838 593097])
            ("iso-iso2tex" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [593099 593366])
            ("iso-tex2iso" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [593368 593635])
            ("iso-gtex2iso" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [593637 593913])
            ("iso-iso2gtex" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [593915 594191])
            ("iso-iso2duden" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [594193 594466])
            ("iso-iso2sgml" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [594468 594733])
            ("iso-sgml2iso" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [594735 595000])
            ("iso-cvt-read-only" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [595002 595102])
            ("iso-cvt-write-only" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [595104 595206])
            ("iso-cvt-define-menu" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [595208 595337])
            ("define-key" code nil nil [595503 595567])
            ("iso-transl-ctl-x-8-map" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [595569 595653])
            ("put" code nil nil [596102 596192])
            ("ispell-personal-dictionary" variable nil nil [596194 596509])
            ("custom-autoload" code nil nil [596511 596567])
            ("put" code nil nil [596569 596638])
            ("ispell-menu-map" variable nil nil [596640 596697])
            ("ispell-menu-xemacs" variable nil nil [596699 596865])
            ("ispell-menu-map-needed" variable (:default-value (and (not ispell-menu-map) (not (featurep (quote xemacs))) (quote reload))) nil [596867 596959])
            ("if" code nil nil [596961 598711])
            ("if" code nil nil [598713 599394])
            ("if" code nil nil [599396 600028])
            ("ispell-skip-region-alist" variable (:default-value (\` ((ispell-words-keyword forward-line) (ispell-dictionary-keyword forward-line) (ispell-pdict-keyword forward-line) (ispell-parsing-keyword forward-line) ((\, (purecopy "^---*BEGIN PGP [A-Z ]*--*")) \, (purecopy "^---*END PGP [A-Z ]*--*")) ((\, (purecopy "^begin [0-9][0-9][0-9] [^ 	]+$")) \, (purecopy "
end
")) ((\, (purecopy "^%!PS-Adobe-[123].0")) \, (purecopy "
%%EOF
")) ((\, (purecopy "^---* \\(Start of \\)?[Ff]orwarded [Mm]essage")) \, (purecopy "^---* End of [Ff]orwarded [Mm]essage")) ((\, (purecopy "\\(--+\\|_+\\|\\(/\\w\\|\\(\\(\\w\\|[-_]\\)+[.:@]\\)\\)\\(\\w\\|[-_]\\)*\\([.:/@]+\\(\\w\\|[-_~=?&]\\)+\\)+\\)")))))) nil [600030 601056])
            ("ispell-tex-skip-alists" variable (:default-value (purecopy (quote ((("\\\\addcontentsline" ispell-tex-arg-end 2) ("\\\\add\\(tocontents\\|vspace\\)" ispell-tex-arg-end) ("\\\\\\([aA]lph\\|arabic\\)" ispell-tex-arg-end) ("\\\\bibliographystyle" ispell-tex-arg-end) ("\\\\makebox" ispell-tex-arg-end 0) ("\\\\e?psfig" ispell-tex-arg-end) ("\\\\document\\(class\\|style\\)" . "\\\\begin[ 	
]*{[ 	
]*document[ 	
]*}")) (("\\(figure\\|table\\)\\*?" ispell-tex-arg-end 0) ("list" ispell-tex-arg-end 2) ("program" . "\\\\end[ 	
]*{[ 	
]*program[ 	
]*}") ("verbatim\\*?" . "\\\\end[ 	
]*{[ 	
]*verbatim\\*?[ 	
]*}")))))) nil [601058 601864])
            ("ispell-html-skip-alists" variable
               (:constant-flag t
                :default-value (quote (("<[cC][oO][dD][eE]\\>[^>]*>" "</[cC][oO][dD][eE]*>") ("<[sS][cC][rR][iI][pP][tT]\\>[^>]*>" "</[sS][cC][rR][iI][pP][tT]>") ("<[aA][pP][pP][lL][eE][tT]\\>[^>]*>" "</[aA][pP][pP][lL][eE][tT]>") ("<[vV][eE][rR][bB]\\>[^>]*>" "<[vV][eE][rR][bB]\\>[^>]*>") ("<[tT][tT]/" "/") ("<[^ 	
>]" ">") ("&[^ 	
;]" "[; 	
]"))))
                nil [601866 602411])
            ("put" code nil nil [602412 602467])
            ("define-key" code nil nil [602469 602506])
            ("ispell-word" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [602508 603883])
            ("ispell-pdict-save" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [603885 604065])
            ("ispell-help" function (:prototype-flag t) nil [604067 605160])
            ("ispell-kill-ispell" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [605162 605426])
            ("ispell-change-dictionary" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [605428 605740])
            ("ispell-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [605742 605993])
            ("ispell-comments-and-strings" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [605995 606130])
            ("ispell-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [606132 606243])
            ("ispell-continue" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [606245 606366])
            ("ispell-complete-word" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [606368 606661])
            ("ispell-complete-word-interior-frag" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [606663 606793])
            ("ispell" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [606795 607240])
            ("ispell-minor-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [607242 607890])
            ("ispell-message" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [607892 608834])
            ("iswitchb-mode" variable nil nil [608978 609267])
            ("custom-autoload" code nil nil [609269 609316])
            ("iswitchb-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [609318 609690])
            ("setup-japanese-environment-internal" function (:prototype-flag t) nil [610093 610173])
            ("japanese-katakana" function (:prototype-flag t) nil [610175 610652])
            ("japanese-hiragana" function (:prototype-flag t) nil [610654 610896])
            ("japanese-hankaku" function (:prototype-flag t) nil [610898 611236])
            ("japanese-zenkaku" function (:prototype-flag t) nil [611238 611480])
            ("japanese-katakana-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [611482 611766])
            ("japanese-hiragana-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [611768 611911])
            ("japanese-hankaku-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [611913 612257])
            ("japanese-zenkaku-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [612259 612608])
            ("read-hiragana-string" function (:prototype-flag t) nil [612610 612854])
            ("jka-compr-inhibit" variable nil nil [613025 613239])
            ("jka-compr-handler" function (:prototype-flag t) nil [613241 613323])
            ("jka-compr-uninstall" function (:prototype-flag t) nil [613325 613565])
            ("js-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [613705 613781])
            ("defalias" code nil nil [613783 613819])
            ("keypad-setup" variable nil nil [614068 614279])
            ("custom-autoload" code nil nil [614281 614325])
            ("keypad-numlock-setup" variable nil nil [614327 614545])
            ("custom-autoload" code nil nil [614547 614599])
            ("keypad-shifted-setup" variable nil nil [614601 614818])
            ("custom-autoload" code nil nil [614820 614872])
            ("keypad-numlock-shifted-setup" variable nil nil [614874 615099])
            ("custom-autoload" code nil nil [615101 615161])
            ("keypad-setup" function (:prototype-flag t) nil [615163 616198])
            ("kinsoku" function (:prototype-flag t) nil [616361 617005])
            ("kkc-after-update-conversion-functions" variable nil nil [617159 617537])
            ("kkc-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [617539 617966])
            ("global-set-key" code nil nil [618292 618336])
            ("global-set-key" code nil nil [618338 618380])
            ("global-set-key" code nil nil [618382 618433])
            ("global-set-key" code nil nil [618435 618494])
            ("global-set-key" code nil nil [618496 618543])
            ("global-set-key" code nil nil [618545 618587])
            ("kmacro-keymap" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [618589 618671])
            ("kmacro-exec-ring-item" function (:prototype-flag t) nil [618673 618782])
            ("kmacro-start-macro" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [618784 619791])
            ("kmacro-end-macro" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [619793 620256])
            ("kmacro-call-macro" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [620258 620865])
            ("kmacro-start-macro-or-insert-counter" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [620867 621616])
            ("kmacro-end-or-call-macro" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [621618 621889])
            ("kmacro-end-and-call-macro" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [621891 622275])
            ("kmacro-end-call-mouse" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [622277 622483])
            ("default-korean-keyboard" variable (:default-value (purecopy (if (string-match "3" (or (getenv "HANGUL_KEYBOARD_TYPE") "")) "3" ""))) nil [622671 622867])
            ("setup-korean-environment-internal" function (:prototype-flag t) nil [622869 622947])
            ("defalias" code nil nil [623114 623160])
            ("landmark-test-run" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [623162 623296])
            ("landmark" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [623298 623978])
            ("lao-compose-string" function (:prototype-flag t) nil [624276 624341])
            ("lao-transcribe-single-roman-syllable-to-lao" function (:prototype-flag t) nil [624343 624879])
            ("lao-transcribe-roman-to-lao-string" function (:prototype-flag t) nil [624881 625022])
            ("lao-composition-function" function (:prototype-flag t) nil [625024 625099])
            ("lao-compose-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [625101 625168])
            ("latex-inputenc-coding-alist" variable (:default-value (purecopy (quote (("ansinew" . windows-1252) ("applemac" . mac-roman) ("ascii" . us-ascii) ("cp1250" . windows-1250) ("cp1252" . windows-1252) ("cp1257" . cp1257) ("cp437de" . cp437) ("cp437" . cp437) ("cp850" . cp850) ("cp852" . cp852) ("cp858" . cp858) ("cp865" . cp865) ("latin1" . iso-8859-1) ("latin2" . iso-8859-2) ("latin3" . iso-8859-3) ("latin4" . iso-8859-4) ("latin5" . iso-8859-5) ("latin9" . iso-8859-15) ("next" . next) ("utf8" . utf-8) ("utf8x" . utf-8))))) nil [625473 626182])
            ("custom-autoload" code nil nil [626184 626243])
            ("latexenc-inputenc-to-coding-system" function (:prototype-flag t) nil [626245 626457])
            ("latexenc-coding-system-to-inputenc" function (:prototype-flag t) nil [626459 626666])
            ("latexenc-find-file-coding-system" function (:prototype-flag t) nil [626668 626960])
            ("latin1-display" variable nil nil [627193 627896])
            ("custom-autoload" code nil nil [627898 627949])
            ("latin1-display" function (:prototype-flag t) nil [627951 628292])
            ("latin1-display-ucs-per-lynx" variable nil nil [628294 628629])
            ("custom-autoload" code nil nil [628631 628695])
            ("ld-script-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [628863 628959])
            ("life" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [629092 629357])
            ("linum-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [629507 629830])
            ("global-linum-mode" variable nil nil [629832 630137])
            ("custom-autoload" code nil nil [630139 630187])
            ("global-linum-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [630189 630561])
            ("unload-feature" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [630706 631880])
            ("locate-ls-subdir-switches" variable (:default-value (purecopy "-al")) nil [632056 632255])
            ("custom-autoload" code nil nil [632257 632312])
            ("locate" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [632314 633378])
            ("locate-with-filter" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [633380 634140])
            ("log-edit" function (:prototype-flag t) nil [634285 635525])
            ("log-view-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [635675 635768])
            ("longlines-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [635916 636667])
            ("lpr-windows-system" variable (:default-value (memq system-type (quote (ms-dos windows-nt)))) nil [636876 636991])
            ("lpr-lp-system" variable (:default-value (memq system-type (quote (usg-unix-v hpux irix)))) nil [636993 637128])
            ("printer-name" variable (:default-value (and (eq system-type (quote ms-dos)) "PRN")) nil [637130 637944])
            ("custom-autoload" code nil nil [637946 637985])
            ("lpr-switches" variable nil nil [637987 638195])
            ("custom-autoload" code nil nil [638197 638236])
            ("lpr-command" variable (:default-value (purecopy (cond (lpr-windows-system "") (lpr-lp-system "lp") (t "lpr")))) nil [638238 638804])
            ("custom-autoload" code nil nil [638806 638844])
            ("lpr-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [638846 639042])
            ("print-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [639044 639610])
            ("lpr-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [639612 639818])
            ("print-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [639820 640400])
            ("ls-lisp-support-shell-wildcards" variable (:default-value t) nil [640559 640742])
            ("custom-autoload" code nil nil [640744 640806])
            ("lunar-phases" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [640958 641231])
            ("define-obsolete-function-alias" code nil nil [641233 641302])
            ("m4-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [641457 641540])
            ("name-last-kbd-macro" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [641753 642056])
            ("insert-kbd-macro" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [642058 642721])
            ("kbd-macro-query" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [642723 643382])
            ("apply-macro-to-region-lines" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [643384 644851])
            ("define-key" code nil nil [644853 644896])
            ("mail-extract-address-components" function (:prototype-flag t) nil [645083 646006])
            ("what-domain" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [646008 646128])
            ("mail-hist-define-keys" function (:prototype-flag t) nil [646376 646506])
            ("mail-hist-enable" function (:prototype-flag t) nil [646508 646568])
            ("mail-hist-keep-history" variable (:default-value t) nil [646570 646675])
            ("custom-autoload" code nil nil [646677 646732])
            ("mail-hist-put-headers-into-history" function (:prototype-flag t) nil [646734 647022])
            ("mail-use-rfc822" variable nil nil [647362 647540])
            ("custom-autoload" code nil nil [647542 647591])
            ("mail-dont-reply-to-names" variable nil nil [647593 647934])
            ("custom-autoload" code nil nil [647936 647994])
            ("mail-file-babyl-p" function (:prototype-flag t) nil [647996 648102])
            ("mail-quote-printable" function (:prototype-flag t) nil [648104 648458])
            ("mail-quote-printable-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [648460 648712])
            ("mail-unquote-printable" function (:prototype-flag t) nil [648714 648965])
            ("mail-unquote-printable-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [648967 649613])
            ("mail-fetch-field" function (:prototype-flag t) nil [649615 650091])
            ("mail-abbrevs-mode" variable nil nil [650320 650625])
            ("custom-autoload" code nil nil [650627 650680])
            ("mail-abbrevs-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [650682 651211])
            ("mail-abbrevs-setup" function (:prototype-flag t) nil [651213 651319])
            ("build-mail-abbrevs" function (:prototype-flag t) nil [651321 651550])
            ("define-mail-abbrev" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [651552 651994])
            ("mail-complete-style" variable (:default-value (quote angles)) nil [652251 652567])
            ("custom-autoload" code nil nil [652569 652621])
            ("expand-mail-aliases" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [652623 653034])
            ("define-mail-alias" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [653036 653495])
            ("mail-completion-at-point-function" function (:prototype-flag t) nil [653497 653659])
            ("mail-complete" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [653661 653933])
            ("make-obsolete" code nil nil [653935 654007])
            ("mailclient-send-it" function (:prototype-flag t) nil [654172 654386])
            ("makefile-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [654666 657967])
            ("makefile-automake-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [657969 658086])
            ("makefile-gmake-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [658088 658199])
            ("makefile-makepp-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [658201 658314])
            ("makefile-bsdmake-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [658316 658432])
            ("makefile-imake-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [658434 658545])
            ("make-command-summary" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [658693 658867])
            ("defalias" code nil nil [659015 659044])
            ("man" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [659046 660235])
            ("man-follow" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [660237 660362])
            ("Man-bookmark-jump" function (:prototype-flag t) nil [660364 660469])
            ("master-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [660605 661160])
            ("minibuffer-depth-indicate-mode" variable nil nil [661321 661678])
            ("custom-autoload" code nil nil [661680 661744])
            ("minibuffer-depth-indicate-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [661746 662281])
            ("define-mail-user-agent" code nil nil [662873 662994])
            ("message-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [662996 665410])
            ("message-mail" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [665412 665821])
            ("message-news" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [665823 665944])
            ("message-reply" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [665946 666100])
            ("message-wide-reply" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [666102 666240])
            ("message-followup" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [666242 666424])
            ("message-cancel-news" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [666426 666579])
            ("message-supersede" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [666581 666804])
            ("message-recover" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [666806 666924])
            ("message-forward" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [666926 667140])
            ("message-forward-make-body" function (:prototype-flag t) nil [667142 667241])
            ("message-forward-rmail-make-body" function (:prototype-flag t) nil [667243 667331])
            ("message-insinuate-rmail" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [667333 667429])
            ("message-resend" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [667431 667531])
            ("message-bounce" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [667533 667757])
            ("message-mail-other-window" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [667759 667916])
            ("message-mail-other-frame" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [667918 668073])
            ("message-news-other-window" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [668075 668209])
            ("message-news-other-frame" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [668211 668344])
            ("message-bold-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [668346 668586])
            ("message-unbold-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [668588 668811])
            ("metafont-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [668992 669087])
            ("metapost-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [669089 669184])
            ("metamail-interpret-header" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [669414 669581])
            ("metamail-interpret-body" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [669583 669977])
            ("metamail-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [669979 670391])
            ("metamail-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [670393 670813])
            ("mh-smail" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [671061 671201])
            ("mh-smail-other-window" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [671203 671372])
            ("mh-smail-batch" function (:prototype-flag t) nil [671374 671932])
            ("define-mail-user-agent" code nil nil [671934 672063])
            ("mh-user-agent-compose" function (:prototype-flag t) nil [672065 672865])
            ("mh-send-letter" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [672867 673950])
            ("mh-fully-kill-draft" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [673952 674262])
            ("put" code nil nil [674401 674440])
            ("put" code nil nil [674442 674479])
            ("put" code nil nil [674481 674524])
            ("mh-version" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [674526 674644])
            ("mh-rmail" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [674820 675035])
            ("mh-nmail" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [675037 675258])
            ("mh-folder-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [675260 677001])
            ("clean-buffer-list" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [677168 677790])
            ("midnight-delay-set" function (:prototype-flag t) nil [677792 678011])
            ("minibuffer-electric-default-mode" variable nil nil [678189 678554])
            ("custom-autoload" code nil nil [678556 678627])
            ("minibuffer-electric-default-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [678629 679304])
            ("butterfly" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [679455 680029])
            ("list-dynamic-libraries" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [680031 680475])
            ("add-hook" code nil nil [680731 680781])
            ("multi-isearch-next-buffer-function" variable nil nil [680783 681815])
            ("multi-isearch-next-buffer-current-function" variable nil nil [681817 682015])
            ("multi-isearch-current-buffer" variable nil nil [682017 682179])
            ("multi-isearch-setup" function (:prototype-flag t) nil [682181 682330])
            ("multi-isearch-buffers" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [682332 682676])
            ("multi-isearch-buffers-regexp" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [682678 683036])
            ("multi-isearch-files" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [683038 683463])
            ("multi-isearch-files-regexp" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [683465 683904])
            ("mixal-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [684071 684162])
            ("mm-default-file-encoding" function (:prototype-flag t) nil [684330 684438])
            ("mm-extern-cache-contents" function (:prototype-flag t) nil [684630 684757])
            ("mm-inline-external-body" function (:prototype-flag t) nil [684759 685052])
            ("mm-inline-partial" function (:prototype-flag t) nil [685216 685498])
            ("mm-url-insert-file-contents" function (:prototype-flag t) nil [685697 685856])
            ("mm-url-insert-file-contents-external" function (:prototype-flag t) nil [685858 685990])
            ("mm-uu-dissect" function (:prototype-flag t) nil [686160 686466])
            ("mm-uu-dissect-text-parts" function (:prototype-flag t) nil [686468 686659])
            ("mml-to-mime" function (:prototype-flag t) nil [686812 686907])
            ("mml-attach-file" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [686909 687606])
            ("mml1991-encrypt" function (:prototype-flag t) nil [687772 687849])
            ("mml1991-sign" function (:prototype-flag t) nil [687851 687910])
            ("mml2015-decrypt" function (:prototype-flag t) nil [688177 688245])
            ("mml2015-decrypt-test" function (:prototype-flag t) nil [688247 688320])
            ("mml2015-verify" function (:prototype-flag t) nil [688322 688389])
            ("mml2015-verify-test" function (:prototype-flag t) nil [688391 688463])
            ("mml2015-encrypt" function (:prototype-flag t) nil [688465 688542])
            ("mml2015-sign" function (:prototype-flag t) nil [688544 688603])
            ("mml2015-self-encrypt" function (:prototype-flag t) nil [688605 688667])
            ("put" code nil nil [688817 688870])
            ("defalias" code nil nil [689025 689059])
            ("m2-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [689061 690207])
            ("morse-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [690392 690499])
            ("unmorse-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [690501 690619])
            ("nato-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [690621 690739])
            ("denato-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [690741 690864])
            ("mouse-drag-throw" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [691033 691970])
            ("mouse-drag-drag" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [691972 692589])
            ("mpc" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [692700 692764])
            ("mpuz" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [692897 692975])
            ("msb-mode" variable nil nil [693091 693360])
            ("custom-autoload" code nil nil [693362 693399])
            ("msb-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [693401 693749])
            ("list-character-sets" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [694241 694735])
            ("read-charset" function (:prototype-flag t) nil [694737 695267])
            ("list-charset-chars" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [695269 695391])
            ("describe-character-set" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [695393 695522])
            ("describe-coding-system" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [695524 695642])
            ("describe-current-coding-system-briefly" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [695644 696818])
            ("describe-current-coding-system" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [696820 696941])
            ("list-coding-systems" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [696943 697249])
            ("list-coding-categories" function (:prototype-flag t) nil [697251 697357])
            ("describe-font" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [697359 697519])
            ("describe-fontset" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [697521 697675])
            ("list-fontsets" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [697677 697949])
            ("list-input-methods" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [697951 698055])
            ("mule-diag" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [698057 698390])
            ("font-show-log" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [698392 698631])
            ("string-to-list" function (:arguments ("string")) nil [699166 699263])
            ("string-to-vector" function (:arguments ("string")) nil [699265 699363])
            ("store-substring" function (:prototype-flag t) nil [699365 699494])
            ("truncate-string-to-width" function (:prototype-flag t) nil [699496 700743])
            ("nested-alist-p" function (:arguments ("obj")) nil [700745 701200])
            ("set-nested-alist" function (:prototype-flag t) nil [701202 701580])
            ("lookup-nested-alist" function (:prototype-flag t) nil [701582 702225])
            ("coding-system-post-read-conversion" function (:prototype-flag t) nil [702227 702387])
            ("coding-system-pre-write-conversion" function (:prototype-flag t) nil [702389 702549])
            ("coding-system-translation-table-for-decode" function (:prototype-flag t) nil [702551 702723])
            ("coding-system-translation-table-for-encode" function (:prototype-flag t) nil [702725 702897])
            ("with-coding-priority" function (:prototype-flag t) nil [702899 703264])
            ("put" code nil nil [703265 703316])
            ("detect-coding-with-priority" function (:prototype-flag t) nil [703318 703587])
            ("make-obsolete" code nil nil [703589 703662])
            ("detect-coding-with-language-environment" function (:prototype-flag t) nil [703664 703935])
            ("char-displayable-p" function (:prototype-flag t) nil [703937 704289])
            ("ifconfig" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [704640 704733])
            ("iwconfig" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [704735 704828])
            ("netstat" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [704830 704921])
            ("arp" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [704923 705006])
            ("route" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [705008 705095])
            ("traceroute" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [705097 705190])
            ("ping" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [705192 705348])
            ("nslookup-host" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [705350 705446])
            ("nslookup" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [705448 705519])
            ("dns-lookup-host" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [705521 705640])
            ("run-dig" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [705642 705712])
            ("ftp" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [705714 705780])
            ("finger" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [705782 705860])
            ("whois" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [705862 706135])
            ("whois-reverse-lookup" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [706137 706199])
            ("network-connection-to-service" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [706201 706330])
            ("network-connection" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [706332 706444])
            ("netrc-credentials" function (:prototype-flag t) nil [706591 706789])
            ("open-network-stream" function (:prototype-flag t) nil [706970 710727])
            ("defalias" code nil nil [710729 710782])
            ("newsticker-running-p" function (:prototype-flag t) nil [710973 711210])
            ("newsticker-start" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [711212 711575])
            ("newsticker-plainview" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [711755 711850])
            ("newsticker-show-news" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [712021 712142])
            ("newsticker-ticker-running-p" function (:prototype-flag t) nil [712352 712607])
            ("newsticker-start-ticker" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [712609 712809])
            ("newsticker-treeview" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [712985 713077])
            ("nndiary-generate-nov-databases" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [713245 713382])
            ("nndoc-add-type" function (:prototype-flag t) nil [713528 713876])
            ("nnfolder-generate-active-file" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [714046 714247])
            ("nnml-generate-nov-databases" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [714403 714531])
            ("define-obsolete-variable-alias" code nil nil [714712 714801])
            ("disabled-command-function" variable (:default-value (quote disabled-command-function)) nil [714803 714981])
            ("disabled-command-function" function (:prototype-flag t) nil [714983 715068])
            ("enable-command" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [715070 715314])
            ("disable-command" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [715316 715547])
            ("nroff-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [715714 716035])
            ("nxml-glyph-display-string" function (:prototype-flag t) nil [716207 716468])
            ("nxml-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [716620 719168])
            ("defalias" code nil nil [719170 719201])
            ("nxml-enable-unicode-char-name-sets" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [719382 719623])
            ("inferior-octave" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [719795 720366])
            ("defalias" code nil nil [720368 720407])
            ("octave-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [720575 723224])
            ("org-babel-do-load-languages" function (:prototype-flag t) nil [723759 723891])
            ("org-version" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [723893 724171])
            ("turn-on-orgtbl" function (:prototype-flag t) nil [724173 724263])
            ("org-clock-persistence-insinuate" function (:prototype-flag t) nil [724265 724369])
            ("org-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [724371 725250])
            ("org-cycle" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [725252 727579])
            ("org-global-cycle" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [727581 727835])
            ("orgstruct-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [727837 728631])
            ("turn-on-orgstruct" function (:prototype-flag t) nil [728633 728729])
            ("turn-on-orgstruct++" function (:prototype-flag t) nil [728731 728831])
            ("org-run-like-in-org-mode" function (:prototype-flag t) nil [728833 729114])
            ("org-store-link" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [729116 729519])
            ("org-insert-link-global" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [729521 729688])
            ("org-open-at-point-global" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [729690 729865])
            ("org-open-link-from-string" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [729867 730015])
            ("org-switchb" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [730017 730348])
            ("defalias" code nil nil [730350 730390])
            ("defalias" code nil nil [730392 730429])
            ("org-cycle-agenda-files" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [730431 730671])
            ("org-submit-bug-report" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [730673 731030])
            ("org-reload" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [731032 731183])
            ("org-customize" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [731185 731283])
            ("org-toggle-sticky-agenda" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [731730 731838])
            ("org-agenda" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [731840 733618])
            ("org-batch-agenda" function (:prototype-flag t) nil [733620 734058])
            ("org-batch-agenda-csv" function (:prototype-flag t) nil [734060 735842])
            ("org-store-agenda-views" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [735844 735926])
            ("org-batch-store-agenda-views" function (:prototype-flag t) nil [735928 736073])
            ("org-agenda-list" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [736075 736666])
            ("org-search-view" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [736668 738990])
            ("org-todo-list" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [738992 739372])
            ("org-tags-view" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [739374 739588])
            ("org-agenda-list-stuck-projects" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [739590 739894])
            ("org-diary" function (:prototype-flag t) nil [739896 741035])
            ("org-calendar-goto-agenda" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [741037 741245])
            ("org-agenda-to-appt" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [741247 742419])
            ("org-beamer-sectioning" function (:prototype-flag t) nil [742601 743085])
            ("org-beamer-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [743087 743227])
            ("org-capture-string" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [743450 743534])
            ("org-capture" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [743536 744621])
            ("org-capture-import-remember-templates" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [744623 744772])
            ("org-columns" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [745011 745200])
            ("org-dblock-write:columnview" function (:prototype-flag t) nil [745202 746240])
            ("org-insert-columns-dblock" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [746242 746364])
            ("org-agenda-columns" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [746366 746472])
            ("org-check-version" function (:prototype-flag t) nil [746633 746743])
            ("org-release" function (:prototype-flag t) nil [746918 747068])
            ("org-git-version" function (:prototype-flag t) nil [747070 747220])
            ("org-odt-data-dir" variable (:default-value "/usr/share/emacs/etc/org") nil [747222 747306])
            ("put" code nil nil [747464 747515])
            ("put" code nil nil [747516 747579])
            ("outline-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [747581 749776])
            ("outline-minor-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [749778 750107])
            ("put" code nil nil [750108 750152])
            ("package-enable-at-startup" variable (:default-value t) nil [750483 750870])
            ("custom-autoload" code nil nil [750872 750928])
            ("package-install" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [750930 751148])
            ("package-install-from-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [751150 751604])
            ("package-install-file" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [751606 751758])
            ("package-refresh-contents" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [751760 751973])
            ("package-initialize" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [751975 752230])
            ("describe-package" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [752232 752349])
            ("list-packages" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [752351 752619])
            ("defalias" code nil nil [752621 752669])
            ("show-paren-mode" variable nil nil [752806 753103])
            ("custom-autoload" code nil nil [753105 753151])
            ("show-paren-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [753153 753610])
            ("put" code nil nil [753781 753828])
            ("parse-time-string" function (:prototype-flag t) nil [753830 754077])
            ("pascal-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [754233 756339])
            ("password-cache" variable (:default-value t) nil [756552 756609])
            ("custom-autoload" code nil nil [756611 756663])
            ("password-cache-expiry" variable (:default-value 16) nil [756665 756840])
            ("custom-autoload" code nil nil [756842 756901])
            ("password-in-cache-p" function (:prototype-flag t) nil [756903 757004])
            ("pcase" function (:prototype-flag t) nil [757174 758856])
            ("put" code nil nil [758858 758895])
            ("pcase-let*" function (:prototype-flag t) nil [758897 759125])
            ("put" code nil nil [759127 759169])
            ("pcase-let" function (:prototype-flag t) nil [759171 759405])
            ("put" code nil nil [759407 759448])
            ("pcomplete/cvs" function (:prototype-flag t) nil [759595 759691])
            ("pcomplete/gzip" function (:prototype-flag t) nil [759884 759964])
            ("pcomplete/bzip2" function (:prototype-flag t) nil [759966 760048])
            ("pcomplete/make" function (:prototype-flag t) nil [760050 760134])
            ("pcomplete/tar" function (:prototype-flag t) nil [760136 760228])
            ("defalias" code nil nil [760230 760272])
            ("pcomplete/kill" function (:prototype-flag t) nil [760459 760575])
            ("pcomplete/umount" function (:prototype-flag t) nil [760577 760673])
            ("pcomplete/mount" function (:prototype-flag t) nil [760675 760769])
            ("pcomplete/rpm" function (:prototype-flag t) nil [760916 761006])
            ("pcomplete/cd" function (:prototype-flag t) nil [761292 761369])
            ("defalias" code nil nil [761371 761412])
            ("pcomplete/rmdir" function (:prototype-flag t) nil [761414 761497])
            ("pcomplete/rm" function (:prototype-flag t) nil [761499 761576])
            ("pcomplete/xargs" function (:prototype-flag t) nil [761578 761661])
            ("defalias" code nil nil [761663 761706])
            ("pcomplete/which" function (:prototype-flag t) nil [761708 761791])
            ("pcomplete/chown" function (:prototype-flag t) nil [761793 761888])
            ("pcomplete/chgrp" function (:prototype-flag t) nil [761890 761985])
            ("pcomplete/ssh" function (:prototype-flag t) nil [761987 762084])
            ("pcomplete/scp" function (:prototype-flag t) nil [762086 762241])
            ("pcomplete" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [762559 762816])
            ("pcomplete-reverse" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [762818 762926])
            ("pcomplete-expand-and-complete" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [762928 763085])
            ("pcomplete-continue" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [763087 763201])
            ("pcomplete-expand" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [763203 763347])
            ("pcomplete-help" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [763349 763467])
            ("pcomplete-list" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [763469 763588])
            ("pcomplete-comint-setup" function (:prototype-flag t) nil [763590 763861])
            ("pcomplete-shell-setup" function (:prototype-flag t) nil [763863 763964])
            ("cvs-checkout" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [764192 764459])
            ("cvs-quickdir" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [764461 764841])
            ("cvs-examine" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [764843 765351])
            ("cvs-update" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [765353 765805])
            ("cvs-status" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [765807 766252])
            ("cvs-dired-action" variable (:default-value (quote cvs-quickdir)) nil [766254 766422])
            ("custom-autoload" code nil nil [766424 766468])
            ("cvs-dired-use-hook" variable (:default-value (quote (4))) nil [766470 766799])
            ("custom-autoload" code nil nil [766801 766847])
            ("cvs-dired-noselect" function (:arguments ("dir")) nil [766849 767383])
            ("cvs-global-menu" variable (:default-value (let ((m (make-sparse-keymap "PCL-CVS"))) (define-key m [status] (\` (menu-item (\, (purecopy "Directory Status")) cvs-status :help (\, (purecopy "A more verbose status of a workarea"))))) (define-key m [checkout] (\` (menu-item (\, (purecopy "Checkout Module")) cvs-checkout :help (\, (purecopy "Check out a module from the repository"))))) (define-key m [update] (\` (menu-item (\, (purecopy "Update Directory")) cvs-update :help (\, (purecopy "Fetch updates from the repository"))))) (define-key m [examine] (\` (menu-item (\, (purecopy "Examine Directory")) cvs-examine :help (\, (purecopy "Examine the current state of a workarea"))))) (fset (quote cvs-global-menu) m))) nil [767524 768201])
            ("put" code nil nil [768363 768418])
            ("put" code nil nil [768419 768488])
            ("put" code nil nil [768489 768554])
            ("put" code nil nil [768555 768610])
            ("put" code nil nil [768611 768676])
            ("put" code nil nil [768677 768732])
            ("perl-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [768734 770940])
            ("picture-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [771100 774858])
            ("defalias" code nil nil [774860 774898])
            ("plstore-open" function (:prototype-flag t) nil [775061 775167])
            ("plstore-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [775169 775258])
            ("po-find-file-coding-system" function (:prototype-flag t) nil [775417 775637])
            ("pong" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [775770 776020])
            ("pop3-movemail" function (:prototype-flag t) nil [776162 776297])
            ("pp-to-string" function (:prototype-flag t) nil [776553 776816])
            ("pp-buffer" function (:prototype-flag t) nil [776818 776937])
            ("pp" function (:prototype-flag t) nil [776939 777245])
            ("pp-eval-expression" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [777247 777428])
            ("pp-macroexpand-expression" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [777430 777551])
            ("pp-eval-last-sexp" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [777553 777747])
            ("pp-macroexpand-last-sexp" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [777749 777957])
            ("pr-interface" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [779418 779638])
            ("pr-ps-directory-preview" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [779640 780489])
            ("pr-ps-directory-using-ghostscript" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [780491 781369])
            ("pr-ps-directory-print" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [781371 782225])
            ("pr-ps-directory-ps-print" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [782227 783152])
            ("pr-ps-buffer-preview" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [783154 783792])
            ("pr-ps-buffer-using-ghostscript" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [783794 784452])
            ("pr-ps-buffer-print" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [784454 785088])
            ("pr-ps-buffer-ps-print" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [785090 785795])
            ("pr-ps-region-preview" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [785797 785947])
            ("pr-ps-region-using-ghostscript" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [785949 786138])
            ("pr-ps-region-print" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [786140 786293])
            ("pr-ps-region-ps-print" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [786295 786477])
            ("pr-ps-mode-preview" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [786479 786631])
            ("pr-ps-mode-using-ghostscript" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [786633 786824])
            ("pr-ps-mode-print" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [786826 786981])
            ("pr-ps-mode-ps-print" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [786983 787159])
            ("pr-printify-directory" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [787161 787724])
            ("pr-printify-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [787726 788007])
            ("pr-printify-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [788009 788290])
            ("pr-txt-directory" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [788292 788660])
            ("pr-txt-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [788662 788748])
            ("pr-txt-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [788750 788836])
            ("pr-txt-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [788838 788926])
            ("pr-despool-preview" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [788928 789419])
            ("pr-despool-using-ghostscript" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [789421 789929])
            ("pr-despool-print" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [789931 790427])
            ("pr-despool-ps-print" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [790429 790959])
            ("pr-ps-file-preview" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [790961 791062])
            ("pr-ps-file-up-preview" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [791064 791194])
            ("pr-ps-file-using-ghostscript" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [791196 791323])
            ("pr-ps-file-print" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [791325 791422])
            ("pr-ps-file-ps-print" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [791424 791565])
            ("pr-ps-file-up-ps-print" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [791567 792484])
            ("pr-toggle-file-duplex" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [792486 792582])
            ("pr-toggle-file-tumble" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [792584 792842])
            ("pr-toggle-file-landscape" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [792844 792946])
            ("pr-toggle-ghostscript" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [792948 793044])
            ("pr-toggle-faces" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [793046 793129])
            ("pr-toggle-spool" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [793131 793203])
            ("pr-toggle-duplex" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [793205 793276])
            ("pr-toggle-tumble" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [793278 793511])
            ("pr-toggle-landscape" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [793513 793590])
            ("pr-toggle-upside-down" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [793592 793673])
            ("pr-toggle-line" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [793675 793749])
            ("pr-toggle-zebra" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [793751 793828])
            ("pr-toggle-header" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [793830 793910])
            ("pr-toggle-header-frame" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [793912 794004])
            ("pr-toggle-lock" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [794006 794078])
            ("pr-toggle-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [794080 794189])
            ("pr-toggle-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [794191 794263])
            ("pr-customize" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [794265 794369])
            ("lpr-customize" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [794371 794471])
            ("pr-help" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [794473 794564])
            ("pr-ps-name" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [794566 794659])
            ("pr-txt-name" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [794661 794749])
            ("pr-ps-utility" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [794751 794847])
            ("pr-show-ps-setup" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [794849 794950])
            ("pr-show-pr-setup" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [794952 795053])
            ("pr-show-lpr-setup" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [795055 795152])
            ("pr-ps-fast-fire" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [795154 797666])
            ("pr-txt-fast-fire" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [797668 798658])
            ("proced" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [798789 799145])
            ("profiler-start" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [799394 799668])
            ("profiler-find-profile" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [799670 799763])
            ("profiler-find-profile-other-window" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [799765 799871])
            ("profiler-find-profile-other-frame" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [799873 799978])
            ("prolog-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [800158 800648])
            ("mercury-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [800650 800789])
            ("run-prolog" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [800791 800985])
            ("bdf-directory-list" variable (:default-value (if (memq system-type (quote (ms-dos windows-nt))) (list (expand-file-name "fonts/bdf" installation-directory)) (quote ("/usr/local/share/emacs/fonts/bdf")))) nil [801128 801417])
            ("custom-autoload" code nil nil [801419 801467])
            ("ps-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [801622 802723])
            ("ps-page-dimensions-database" variable (:default-value (purecopy (list (list (quote a4) (/ (* 72 21.0) 2.54) (/ (* 72 29.7) 2.54) "A4") (list (quote a3) (/ (* 72 29.7) 2.54) (/ (* 72 42.0) 2.54) "A3") (list (quote letter) (* 72 8.5) (* 72 11.0) "Letter") (list (quote legal) (* 72 8.5) (* 72 14.0) "Legal") (list (quote letter-small) (* 72 7.68) (* 72 10.16) "LetterSmall") (list (quote tabloid) (* 72 11.0) (* 72 17.0) "Tabloid") (list (quote ledger) (* 72 17.0) (* 72 11.0) "Ledger") (list (quote statement) (* 72 5.5) (* 72 8.5) "Statement") (list (quote executive) (* 72 7.5) (* 72 10.0) "Executive") (list (quote a4small) (* 72 7.47) (* 72 10.85) "A4Small") (list (quote b4) (* 72 10.125) (* 72 14.33) "B4") (list (quote b5) (* 72 7.16) (* 72 10.125) "B5") (quote (addresslarge 236.0 99.0 "AddressLarge")) (quote (addresssmall 236.0 68.0 "AddressSmall")) (quote (cuthanging13 90.0 222.0 "CutHanging13")) (quote (cuthanging15 90.0 114.0 "CutHanging15")) (quote (diskette 181.0 136.0 "Diskette")) (quote (eurofilefolder 139.0 112.0 "EuropeanFilefolder")) (quote (eurofoldernarrow 526.0 107.0 "EuroFolderNarrow")) (quote (eurofolderwide 526.0 136.0 "EuroFolderWide")) (quote (euronamebadge 189.0 108.0 "EuroNameBadge")) (quote (euronamebadgelarge 223.0 136.0 "EuroNameBadgeLarge")) (quote (filefolder 230.0 37.0 "FileFolder")) (quote (jewelry 76.0 136.0 "Jewelry")) (quote (mediabadge 180.0 136.0 "MediaBadge")) (quote (multipurpose 126.0 68.0 "MultiPurpose")) (quote (retaillabel 90.0 104.0 "RetailLabel")) (quote (shipping 271.0 136.0 "Shipping")) (quote (slide35mm 26.0 104.0 "Slide35mm")) (quote (spine8mm 187.0 26.0 "Spine8mm")) (quote (topcoated 425.19685 136.0 "TopCoatedPaper")) (quote (topcoatedpaper 396.0 136.0 "TopcoatedPaper150")) (quote (vhsface 205.0 127.0 "VHSFace")) (quote (vhsspine 400.0 50.0 "VHSSpine")) (quote (zipdisk 156.0 136.0 "ZipDisk"))))) nil [803252 804957])
            ("custom-autoload" code nil nil [804959 805018])
            ("ps-paper-type" variable (:default-value (quote letter)) nil [805020 805209])
            ("custom-autoload" code nil nil [805211 805256])
            ("ps-print-color-p" variable (:default-value (or (fboundp (quote x-color-values)) (fboundp (quote color-instance-rgb-components)))) nil [805258 805595])
            ("custom-autoload" code nil nil [805597 805645])
            ("ps-print-customize" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [805647 805738])
            ("ps-print-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [805740 806255])
            ("ps-print-buffer-with-faces" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [806257 806597])
            ("ps-print-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [806599 806794])
            ("ps-print-region-with-faces" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [806796 807144])
            ("ps-spool-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [807146 807443])
            ("ps-spool-buffer-with-faces" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [807445 807839])
            ("ps-spool-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [807841 808098])
            ("ps-spool-region-with-faces" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [808100 808510])
            ("ps-despool" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [808512 809021])
            ("ps-line-lengths" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [809023 809261])
            ("ps-nb-pages-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [809263 809451])
            ("ps-nb-pages-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [809453 809640])
            ("ps-setup" function (:prototype-flag t) nil [809642 809740])
            ("ps-extend-face-list" function (:prototype-flag t) nil [809742 810239])
            ("ps-extend-face" function (:prototype-flag t) nil [810241 811328])
            ("add-to-list" code nil nil [811495 811567])
            ("add-to-list" code nil nil [811569 811646])
            ("run-python" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [811648 812287])
            ("python-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [812289 812479])
            ("quoted-printable-decode-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [812632 813174])
            ("quail-title" function (:prototype-flag t) nil [813578 813675])
            ("quail-use-package" function (:prototype-flag t) nil [813677 813972])
            ("quail-define-package" function (:prototype-flag t) nil [813974 818099])
            ("quail-set-keyboard-layout" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [818101 818539])
            ("quail-show-keyboard-layout" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [818541 818776])
            ("quail-define-rules" function (:prototype-flag t) nil [818778 820249])
            ("quail-install-map" function (:prototype-flag t) nil [820251 820535])
            ("quail-install-decode-map" function (:prototype-flag t) nil [820537 820863])
            ("quail-defrule" function (:prototype-flag t) nil [820865 822133])
            ("quail-defrule-internal" function (:prototype-flag t) nil [822135 822573])
            ("quail-update-leim-list-file" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [822575 823150])
            ("quickurl-reread-hook-postfix" variable
               (:constant-flag t
                :default-value "
;; Local Variables:
;; eval: (progn (require 'quickurl) (add-hook 'local-write-file-hooks (lambda () (quickurl-read) nil)))
;; End:
")
                nil [823439 823960])
            ("quickurl" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [823962 824210])
            ("quickurl-ask" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [824212 824333])
            ("quickurl-add-url" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [824335 824565])
            ("quickurl-browse-url" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [824567 824835])
            ("quickurl-browse-url-ask" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [824837 824978])
            ("quickurl-edit-urls" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [824980 825095])
            ("quickurl-list-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [825097 825274])
            ("quickurl-list" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [825276 825401])
            ("rcirc" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [825573 825785])
            ("defalias" code nil nil [825787 825809])
            ("rcirc-connect" function (:prototype-flag t) nil [825811 825948])
            ("rcirc-track-minor-mode" variable nil nil [825950 826275])
            ("custom-autoload" code nil nil [826277 826330])
            ("rcirc-track-minor-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [826332 826617])
            ("remote-compile" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [826770 826924])
            ("defalias" code nil nil [827093 827131])
            ("re-builder" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [827133 827521])
            ("recentf-mode" variable nil nil [827661 827946])
            ("custom-autoload" code nil nil [827948 827993])
            ("recentf-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [827995 828417])
            ("delete-rectangle" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [828812 829240])
            ("delete-extract-rectangle" function (:prototype-flag t) nil [829242 829617])
            ("extract-rectangle" function (:prototype-flag t) nil [829619 829820])
            ("kill-rectangle" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [829822 830465])
            ("copy-rectangle-as-kill" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [830467 830597])
            ("yank-rectangle" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [830599 830713])
            ("insert-rectangle" function (:prototype-flag t) nil [830715 831086])
            ("open-rectangle" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [831088 831522])
            ("defalias" code nil nil [831524 831580])
            ("delete-whitespace-rectangle" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [831582 832073])
            ("string-rectangle" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [832075 832328])
            ("defalias" code nil nil [832330 832377])
            ("string-insert-rectangle" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [832379 832724])
            ("clear-rectangle" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [832726 833070])
            ("rectangle-number-lines" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [833072 833464])
            ("refill-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [833620 834135])
            ("turn-on-reftex" function (:prototype-flag t) nil [834348 834423])
            ("reftex-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [834425 835836])
            ("reftex-reset-scanning-information" function (:prototype-flag t) nil [835838 836023])
            ("reftex-citation" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [836198 837298])
            ("reftex-isearch-minor-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [837489 837915])
            ("reftex-index-phrases-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [838103 839046])
            ("reftex-all-document-files" function (:prototype-flag t) nil [839234 839466])
            ("put" code nil nil [839626 839718])
            ("put" code nil nil [839719 839811])
            ("put" code nil nil [839812 839869])
            ("put" code nil nil [839870 839952])
            ("regexp-opt" function (:prototype-flag t) nil [840138 840891])
            ("regexp-opt-depth" function (:prototype-flag t) nil [840893 841088])
            ("remember" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [841331 841608])
            ("remember-other-frame" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [841610 841722])
            ("remember-clipboard" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [841724 841890])
            ("remember-diary-extract-entries" function (:prototype-flag t) nil [841892 842003])
            ("repeat" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [842134 842822])
            ("reporter-submit-bug-report" function (:prototype-flag t) nil [842989 844195])
            ("reposition-window" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [844349 845479])
            ("reveal-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [845634 846017])
            ("global-reveal-mode" variable nil nil [846019 846328])
            ("custom-autoload" code nil nil [846330 846380])
            ("global-reveal-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [846382 846736])
            ("ring-p" function (:prototype-flag t) nil [846893 846979])
            ("make-ring" function (:prototype-flag t) nil [846981 847077])
            ("rlogin" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [847216 848941])
            ("rmail-file-name" variable (:default-value (purecopy "~/RMAIL")) nil [849469 849552])
            ("custom-autoload" code nil nil [849554 849598])
            ("put" code nil nil [849600 849833])
            ("rmail-spool-directory" variable (:default-value (purecopy (cond ((file-exists-p "/var/mail") "/var/mail/") ((file-exists-p "/var/spool/mail") "/var/spool/mail/") ((memq system-type (quote (hpux usg-unix-v irix))) "/usr/mail/") (t "/usr/spool/mail/")))) nil [849835 850165])
            ("custom-autoload" code nil nil [850167 850217])
            ("custom-initialize-delay" code nil nil [850218 850270])
            ("rmail-movemail-variant-p" function (:prototype-flag t) nil [850272 850463])
            ("rmail-user-mail-address-regexp" variable nil nil [850465 851085])
            ("custom-autoload" code nil nil [851087 851146])
            ("define-obsolete-variable-alias" code nil nil [851148 851240])
            ("rmail-default-dont-reply-to-names" variable nil nil [851242 851446])
            ("make-obsolete-variable" code nil nil [851448 851540])
            ("rmail-ignored-headers" variable (:default-value (purecopy (concat "^via:\\|^mail-from:\\|^origin:\\|^references:\\|^sender:" "\\|^status:\\|^received:\\|^x400-originator:\\|^x400-recipients:" "\\|^x400-received:\\|^x400-mts-identifier:\\|^x400-content-type:" "\\|^\\(resent-\\|\\)message-id:\\|^summary-line:\\|^resent-date:" "\\|^nntp-posting-host:\\|^path:\\|^x-char.*:\\|^x-face:\\|^face:" "\\|^x-mailer:\\|^delivered-to:\\|^lines:" "\\|^content-transfer-encoding:\\|^x-coding-system:" "\\|^return-path:\\|^errors-to:\\|^return-receipt-to:" "\\|^precedence:\\|^mime-version:" "\\|^list-owner:\\|^list-help:\\|^list-post:\\|^list-subscribe:" "\\|^list-id:\\|^list-unsubscribe:\\|^list-archive:" "\\|^content-length:\\|^nntp-posting-date:\\|^user-agent" "\\|^importance:\\|^envelope-to:\\|^delivery-date\\|^openpgp:" "\\|^mbox-line:\\|^cancel-lock:" "\\|^DomainKey-Signature:\\|^dkim-signature:" "\\|^resent-face:\\|^resent-x.*:\\|^resent-organization:\\|^resent-openpgp:" "\\|^x-.*:"))) nil [851542 852957])
            ("custom-autoload" code nil nil [852959 853009])
            ("rmail-displayed-headers" variable nil nil [853011 853191])
            ("custom-autoload" code nil nil [853193 853245])
            ("rmail-retry-ignored-headers" variable (:default-value (purecopy "^x-authentication-warning:\\|^x-detected-operating-system:\\|^x-spam[-a-z]*:\\|content-type:\\|content-transfer-encoding:\\|mime-version:\\|message-id:")) nil [853247 853516])
            ("custom-autoload" code nil nil [853518 853574])
            ("rmail-highlighted-headers" variable (:default-value (purecopy "^From:\\|^Subject:")) nil [853576 853786])
            ("custom-autoload" code nil nil [853788 853842])
            ("rmail-primary-inbox-list" variable nil nil [853844 854207])
            ("custom-autoload" code nil nil [854209 854262])
            ("rmail-secondary-file-directory" variable (:default-value (purecopy "~/")) nil [854264 854371])
            ("custom-autoload" code nil nil [854373 854432])
            ("rmail-secondary-file-regexp" variable (:default-value (purecopy "\\.xmail$")) nil [854434 854547])
            ("custom-autoload" code nil nil [854549 854605])
            ("rmail-mode-hook" variable nil nil [854607 854688])
            ("rmail-show-message-hook" variable nil nil [854690 854787])
            ("custom-autoload" code nil nil [854789 854841])
            ("rmail-file-coding-system" variable nil nil [854843 854950])
            ("rmail-insert-mime-forwarded-message-function" variable nil nil [854952 855324])
            ("rmail" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [855326 855907])
            ("rmail-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [855909 859252])
            ("rmail-input" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [859254 859339])
            ("rmail-set-remote-password" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [859341 859483])
            ("put" code nil nil [859690 859744])
            ("rmail-output" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [859746 861006])
            ("rmail-output-as-seen" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [861008 861558])
            ("rmail-output-body-to-file" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [861560 862144])
            ("rng-c-load-schema" function (:prototype-flag t) nil [862305 862448])
            ("rng-nxml-mode-init" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [862607 862850])
            ("rng-validate-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [863011 864309])
            ("put" code nil nil [864462 864546])
            ("rng-xsd-compile" function (:prototype-flag t) nil [864548 865635])
            ("robin-define-package" function (:prototype-flag t) nil [865844 866287])
            ("robin-modify-package" function (:prototype-flag t) nil [866289 866575])
            ("robin-use-package" function (:prototype-flag t) nil [866577 866689])
            ("rot13" function (:prototype-flag t) nil [866887 867013])
            ("rot13-string" function (:prototype-flag t) nil [867015 867108])
            ("rot13-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [867110 867235])
            ("rot13-other-window" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [867237 867609])
            ("toggle-rot13-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [867611 867722])
            ("add-to-list" code nil nil [867881 867950])
            ("rst-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [867952 868214])
            ("rst-minor-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [868216 868633])
            ("ruby-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [868796 869129])
            ("add-to-list" code nil nil [869131 869201])
            ("dolist" code nil nil [869203 869338])
            ("ruler-mode" variable nil nil [869485 869600])
            ("ruler-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [869602 869877])
            ("rx-to-string" function (:prototype-flag t) nil [870027 870257])
            ("rx" function (:prototype-flag t) nil [870259 878816])
            ("savehist-mode" variable nil nil [878960 879249])
            ("custom-autoload" code nil nil [879251 879298])
            ("savehist-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [879300 879981])
            ("scheme-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [880148 881062])
            ("dsssl-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [881064 881510])
            ("gnus-score-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [881672 881831])
            ("scroll-all-mode" variable nil nil [881983 882280])
            ("custom-autoload" code nil nil [882282 882333])
            ("scroll-all-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [882335 882755])
            ("scroll-lock-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [882911 883407])
            ("when" code nil nil [883543 883620])
            ("semantic-default-submodes" variable (:default-value (quote (global-semantic-idle-scheduler-mode global-semanticdb-minor-mode))) nil [883800 885349])
            ("custom-autoload" code nil nil [885351 885408])
            ("semantic-mode" variable nil nil [885410 885699])
            ("custom-autoload" code nil nil [885701 885748])
            ("semantic-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [885750 886311])
            ("bovine-grammar-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [886518 886632])
            ("wisent-grammar-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [886839 886953])
            ("mail-from-style" variable (:default-value (quote default)) nil [887636 888044])
            ("custom-autoload" code nil nil [888046 888093])
            ("mail-specify-envelope-from" variable nil nil [888095 888551])
            ("custom-autoload" code nil nil [888553 888611])
            ("mail-self-blind" variable nil nil [888613 888814])
            ("custom-autoload" code nil nil [888816 888863])
            ("mail-interactive" variable (:default-value t) nil [888865 889022])
            ("custom-autoload" code nil nil [889024 889072])
            ("send-mail-function" variable (:default-value (if (and (boundp (quote smtpmail-smtp-server)) smtpmail-smtp-server) (quote smtpmail-send-it) (quote sendmail-query-once))) nil [889074 889534])
            ("custom-autoload" code nil nil [889536 889586])
            ("mail-header-separator" variable (:default-value (purecopy "--text follows this line--")) nil [889588 889730])
            ("custom-autoload" code nil nil [889732 889785])
            ("mail-archive-file-name" variable nil nil [889787 889980])
            ("custom-autoload" code nil nil [889982 890036])
            ("mail-default-reply-to" variable nil nil [890038 890237])
            ("custom-autoload" code nil nil [890239 890292])
            ("mail-personal-alias-file" variable (:default-value (purecopy "~/.mailrc")) nil [890294 890556])
            ("custom-autoload" code nil nil [890558 890614])
            ("mail-setup-hook" variable nil nil [890616 890714])
            ("custom-autoload" code nil nil [890716 890763])
            ("mail-aliases" variable (:default-value t) nil [890765 891071])
            ("mail-yank-prefix" variable (:default-value "> ") nil [891073 891242])
            ("custom-autoload" code nil nil [891244 891292])
            ("mail-indentation-spaces" variable (:default-value 3) nil [891294 891453])
            ("custom-autoload" code nil nil [891455 891510])
            ("mail-citation-hook" variable nil nil [891512 892008])
            ("custom-autoload" code nil nil [892010 892060])
            ("mail-citation-prefix-regexp" variable (:default-value (purecopy "\\([ 	]*\\(\\w\\|[_.]\\)+>+\\|[ 	]*[]>|]\\)+")) nil [892062 892435])
            ("custom-autoload" code nil nil [892437 892496])
            ("mail-signature" variable (:default-value t) nil [892498 892946])
            ("custom-autoload" code nil nil [892948 892994])
            ("mail-signature-file" variable (:default-value (purecopy "~/.signature")) nil [892996 893111])
            ("custom-autoload" code nil nil [893113 893164])
            ("mail-default-directory" variable (:default-value (purecopy "~/")) nil [893166 893434])
            ("custom-autoload" code nil nil [893436 893490])
            ("mail-default-headers" variable nil nil [893492 893730])
            ("custom-autoload" code nil nil [893732 893784])
            ("sendmail-query-once" function (:prototype-flag t) nil [893786 893966])
            ("define-mail-user-agent" code nil nil [893968 894062])
            ("sendmail-user-agent-compose" function (:prototype-flag t) nil [894064 894247])
            ("mail-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [894249 895377])
            ("mail-mailing-lists" variable nil nil [895379 895591])
            ("custom-autoload" code nil nil [895593 895643])
            ("sendmail-coding-system" variable nil nil [895645 895964])
            ("default-sendmail-coding-system" variable (:default-value (quote iso-latin-1)) nil [895966 896442])
            ("mail" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [896444 898632])
            ("mail-other-window" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [898634 898823])
            ("mail-other-frame" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [898825 899012])
            ("put" code nil nil [899222 899264])
            ("put" code nil nil [899266 899308])
            ("put" code nil nil [899310 899356])
            ("server-start" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [899358 900105])
            ("server-force-delete" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [900107 900340])
            ("server-mode" variable nil nil [900342 900623])
            ("custom-autoload" code nil nil [900625 900668])
            ("server-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [900670 901057])
            ("server-save-buffers-kill-terminal" function (:prototype-flag t) nil [901059 901374])
            ("ses-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [901490 901868])
            ("sgml-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [902041 902756])
            ("html-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [902758 904561])
            ("put" code nil nil [904721 904766])
            ("sh-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [904768 907259])
            ("defalias" code nil nil [907261 907299])
            ("list-load-path-shadows" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [907468 909409])
            ("shadow-define-cluster" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [909648 910088])
            ("shadow-define-literal-group" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [910090 910431])
            ("shadow-define-regexp-group" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [910433 910889])
            ("shadow-initialize" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [910891 910973])
            ("shell-dumb-shell-regexp" variable (:default-value (purecopy "cmd\\(proxy\\)?\\.exe")) nil [911124 911475])
            ("custom-autoload" code nil nil [911477 911529])
            ("shell" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [911531 913191])
            ("shr-insert-document" function (:prototype-flag t) nil [913336 913534])
            ("sieve-manage" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [913743 913815])
            ("sieve-upload" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [913817 913882])
            ("sieve-upload-and-bury" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [913884 913958])
            ("sieve-upload-and-kill" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [913960 914034])
            ("sieve-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [914191 914534])
            ("simula-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [914690 916835])
            ("skeleton-filter-function" variable (:default-value (quote identity)) nil [917051 917168])
            ("define-skeleton" function (:prototype-flag t) nil [917170 917417])
            ("put" code nil nil [917419 917460])
            ("skeleton-proxy-new" function (:prototype-flag t) nil [917462 918044])
            ("skeleton-insert" function (:prototype-flag t) nil [918046 921193])
            ("skeleton-pair-insert-maybe" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [921195 921902])
            ("smerge-ediff" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [922093 922309])
            ("smerge-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [922311 922615])
            ("smerge-start-session" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [922617 922798])
            ("smiley-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [922960 923130])
            ("smiley-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [923132 923333])
            ("smtpmail-send-it" function (:prototype-flag t) nil [923516 923575])
            ("smtpmail-send-queued-mail" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [923577 923714])
            ("snake" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [923851 924415])
            ("snmp-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [924578 924955])
            ("snmpv2-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [924957 925340])
            ("sunrise-sunset" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [925494 925888])
            ("solitaire" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [926041 927705])
            ("put" code nil nil [927965 928017])
            ("sort-subr" function (:prototype-flag t) nil [928019 930170])
            ("sort-lines" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [930172 930512])
            ("sort-paragraphs" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [930514 930864])
            ("sort-pages" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [930866 931206])
            ("put" code nil nil [931207 931262])
            ("sort-numeric-fields" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [931264 931841])
            ("sort-fields" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [931843 932301])
            ("sort-regexp-fields" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [932303 933421])
            ("sort-columns" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [933423 934216])
            ("reverse-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [934218 934381])
            ("spam-initialize" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [934525 934885])
            ("spam-report-process-queue" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [935164 935493])
            ("spam-report-url-ping-mm-url" function (:prototype-flag t) nil [935495 935718])
            ("spam-report-url-to-file" function (:prototype-flag t) nil [935720 935925])
            ("spam-report-agentize" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [935927 936178])
            ("spam-report-deagentize" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [936180 936376])
            ("defalias" code nil nil [936545 936586])
            ("speedbar-frame-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [936588 937047])
            ("speedbar-get-focus" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [937049 937295])
            ("spook" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [937445 937543])
            ("snarf-spooks" function (:prototype-flag t) nil [937545 937660])
            ("sql-add-product-keywords" function (:prototype-flag t) nil [938028 938760])
            ("sql-help" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [938762 940032])
            ("sql-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [940034 941123])
            ("sql-connect" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [941125 941451])
            ("sql-product-interactive" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [941453 942008])
            ("sql-oracle" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [942010 943235])
            ("sql-sybase" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [943237 944473])
            ("sql-informix" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [944475 945593])
            ("sql-sqlite" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [945595 946849])
            ("sql-mysql" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [946851 948127])
            ("sql-solid" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [948129 949262])
            ("sql-ingres" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [949264 950367])
            ("sql-ms" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [950369 951588])
            ("sql-postgres" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [951590 953082])
            ("sql-interbase" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [953084 954237])
            ("sql-db2" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [954239 955566])
            ("sql-linter" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [955568 956779])
            ("srecode-template-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [956967 957075])
            ("defalias" code nil nil [957077 957120])
            ("starttls-open-stream" function (:prototype-flag t) nil [957281 958150])
            ("strokes-global-set-stroke" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [958577 959013])
            ("strokes-read-stroke" function (:prototype-flag t) nil [959015 959451])
            ("strokes-read-complex-stroke" function (:prototype-flag t) nil [959453 959932])
            ("strokes-do-stroke" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [959934 960098])
            ("strokes-do-complex-stroke" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [960100 960273])
            ("strokes-describe-stroke" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [960275 960417])
            ("strokes-help" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [960419 960516])
            ("strokes-load-user-strokes" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [960518 960643])
            ("strokes-list-strokes" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [960645 960991])
            ("strokes-mode" variable nil nil [960993 961278])
            ("custom-autoload" code nil nil [961280 961325])
            ("strokes-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [961327 962106])
            ("strokes-decode-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [962108 962377])
            ("strokes-compose-complex-stroke" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [962379 962516])
            ("studlify-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [962696 962785])
            ("studlify-word" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [962787 962913])
            ("studlify-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [962915 963002])
            ("subword-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [963182 964312])
            ("global-subword-mode" variable nil nil [964314 964627])
            ("custom-autoload" code nil nil [964629 964681])
            ("global-subword-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [964683 965090])
            ("sc-cite-original" function (:prototype-flag t) nil [965250 966251])
            ("define-obsolete-function-alias" code nil nil [966393 966462])
            ("gpm-mouse-mode" variable (:default-value t) nil [966464 966755])
            ("custom-autoload" code nil nil [966757 966804])
            ("gpm-mouse-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [966806 967266])
            ("untabify" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [967406 967714])
            ("tabify" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [967716 968123])
            ("table-cell-map-hook" variable nil nil [969121 969289])
            ("custom-autoload" code nil nil [969291 969339])
            ("table-load-hook" variable nil nil [969341 969437])
            ("custom-autoload" code nil nil [969439 969483])
            ("table-point-entered-cell-hook" variable nil nil [969485 969596])
            ("custom-autoload" code nil nil [969598 969656])
            ("table-point-left-cell-hook" variable nil nil [969658 969763])
            ("custom-autoload" code nil nil [969765 969820])
            ("table-insert" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [969822 974922])
            ("table-insert-row" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [974924 975251])
            ("table-insert-column" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [975253 975605])
            ("table-insert-row-column" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [975607 975758])
            ("table-recognize" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [975760 976129])
            ("table-unrecognize" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [976131 976186])
            ("table-recognize-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [976188 976526])
            ("table-unrecognize-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [976528 976598])
            ("table-recognize-table" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [976600 976864])
            ("table-unrecognize-table" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [976866 976927])
            ("table-recognize-cell" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [976929 977394])
            ("table-unrecognize-cell" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [977396 977456])
            ("table-heighten-cell" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [977458 977896])
            ("table-shorten-cell" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [977898 978390])
            ("table-widen-cell" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [978392 978639])
            ("table-narrow-cell" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [978641 978865])
            ("table-forward-cell" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [978867 980741])
            ("table-backward-cell" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [980743 980959])
            ("table-span-cell" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [980961 981132])
            ("table-split-cell-vertically" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [981134 981295])
            ("table-split-cell-horizontally" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [981297 981478])
            ("table-split-cell" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [981480 981639])
            ("table-justify" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [981641 981888])
            ("table-justify-cell" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [981890 982250])
            ("table-justify-row" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [982252 982447])
            ("table-justify-column" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [982449 982650])
            ("table-fixed-width-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [982652 983181])
            ("table-query-dimension" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [983183 983939])
            ("table-generate-source" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [983941 985105])
            ("table-insert-sequence" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [985107 986734])
            ("table-delete-row" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [986736 986987])
            ("table-delete-column" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [986989 987260])
            ("table-capture" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [987262 992400])
            ("table-release" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [992402 992710])
            ("talk-connect" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [992846 992955])
            ("talk" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [992957 993070])
            ("tar-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [993209 993988])
            ("tcl-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [994162 995226])
            ("inferior-tcl" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [995228 995429])
            ("tcl-help-on-word" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [995431 995623])
            ("telnet" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [995766 996369])
            ("rsh" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [996371 996603])
            ("make-term" function (:prototype-flag t) nil [996763 997182])
            ("term" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [997184 997431])
            ("ansi-term" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [997433 997555])
            ("serial-term" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [997557 998131])
            ("terminal-emulator" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [998279 999775])
            ("testcover-this-defun" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [999951 1000052])
            ("tetris" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1000193 1000930])
            ("tex-shell-file-name" variable nil nil [1001562 1001670])
            ("custom-autoload" code nil nil [1001672 1001723])
            ("tex-directory" variable (:default-value (purecopy ".")) nil [1001725 1002012])
            ("custom-autoload" code nil nil [1002014 1002059])
            ("tex-first-line-header-regexp" variable nil nil [1002061 1002338])
            ("custom-autoload" code nil nil [1002340 1002400])
            ("tex-main-file" variable nil nil [1002402 1002593])
            ("custom-autoload" code nil nil [1002595 1002640])
            ("tex-offer-save" variable (:default-value t) nil [1002642 1002745])
            ("custom-autoload" code nil nil [1002747 1002793])
            ("tex-run-command" variable (:default-value (purecopy "tex")) nil [1002795 1002956])
            ("custom-autoload" code nil nil [1002958 1003005])
            ("latex-run-command" variable (:default-value (purecopy "latex")) nil [1003007 1003176])
            ("custom-autoload" code nil nil [1003178 1003227])
            ("slitex-run-command" variable (:default-value (purecopy "slitex")) nil [1003229 1003402])
            ("custom-autoload" code nil nil [1003404 1003454])
            ("tex-start-options" variable (:default-value (purecopy "")) nil [1003456 1003752])
            ("custom-autoload" code nil nil [1003754 1003803])
            ("tex-start-commands" variable (:default-value (purecopy "\\nonstopmode\\input")) nil [1003805 1004060])
            ("custom-autoload" code nil nil [1004062 1004112])
            ("latex-block-names" variable nil nil [1004114 1004250])
            ("custom-autoload" code nil nil [1004252 1004301])
            ("tex-bibtex-command" variable (:default-value (purecopy "bibtex")) nil [1004303 1004562])
            ("custom-autoload" code nil nil [1004564 1004614])
            ("tex-dvi-print-command" variable (:default-value (purecopy "lpr -d")) nil [1004616 1004866])
            ("custom-autoload" code nil nil [1004868 1004921])
            ("tex-alt-dvi-print-command" variable (:default-value (purecopy "lpr -d")) nil [1004923 1005532])
            ("custom-autoload" code nil nil [1005534 1005591])
            ("tex-dvi-view-command" variable (:default-value (\` (cond ((eq window-system (quote x)) (\, (purecopy "xdvi"))) ((eq window-system (quote w32)) (\, (purecopy "yap"))) (t (\, (purecopy "dvi2tty * | cat -s")))))) nil [1005593 1006083])
            ("custom-autoload" code nil nil [1006085 1006137])
            ("tex-show-queue-command" variable (:default-value (purecopy "lpq")) nil [1006139 1006315])
            ("custom-autoload" code nil nil [1006317 1006371])
            ("tex-default-mode" variable (:default-value (quote latex-mode)) nil [1006373 1006671])
            ("custom-autoload" code nil nil [1006673 1006721])
            ("tex-open-quote" variable (:default-value (purecopy "``")) nil [1006723 1006834])
            ("custom-autoload" code nil nil [1006836 1006882])
            ("tex-close-quote" variable (:default-value (purecopy "''")) nil [1006884 1006997])
            ("custom-autoload" code nil nil [1006999 1007046])
            ("tex-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1007048 1007480])
            ("defalias" code nil nil [1007482 1007512])
            ("defalias" code nil nil [1007514 1007556])
            ("defalias" code nil nil [1007558 1007592])
            ("plain-tex-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1007594 1009327])
            ("latex-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1009329 1011021])
            ("slitex-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1011023 1012784])
            ("tex-start-shell" function (:prototype-flag t) nil [1012786 1012844])
            ("doctex-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1012846 1012930])
            ("texinfo-format-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1013134 1013560])
            ("texinfo-format-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1013562 1013903])
            ("texi2info" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1013905 1014532])
            ("texinfo-open-quote" variable (:default-value (purecopy "``")) nil [1014731 1014850])
            ("custom-autoload" code nil nil [1014852 1014901])
            ("texinfo-close-quote" variable (:default-value (purecopy "''")) nil [1014903 1015024])
            ("custom-autoload" code nil nil [1015026 1015076])
            ("texinfo-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1015078 1017901])
            ("thai-compose-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1018146 1018359])
            ("thai-compose-string" function (:prototype-flag t) nil [1018361 1018497])
            ("thai-compose-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1018499 1018606])
            ("thai-composition-function" function (:prototype-flag t) nil [1018608 1018685])
            ("forward-thing" function (:prototype-flag t) nil [1018940 1019264])
            ("bounds-of-thing-at-point" function (:prototype-flag t) nil [1019266 1019779])
            ("thing-at-point" function (:prototype-flag t) nil [1019781 1020175])
            ("sexp-at-point" function (:prototype-flag t) nil [1020177 1020284])
            ("symbol-at-point" function (:prototype-flag t) nil [1020286 1020397])
            ("number-at-point" function (:prototype-flag t) nil [1020399 1020510])
            ("list-at-point" function (:prototype-flag t) nil [1020512 1020624])
            ("thumbs-find-thumb" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1020859 1020949])
            ("thumbs-show-from-dir" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1020951 1021191])
            ("thumbs-dired-show-marked" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1021193 1021305])
            ("thumbs-dired-show" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1021307 1021430])
            ("defalias" code nil nil [1021432 1021472])
            ("thumbs-dired-setroot" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1021474 1021590])
            ("tibetan-char-p" function (:prototype-flag t) nil [1022102 1022260])
            ("tibetan-tibetan-to-transcription" function (:prototype-flag t) nil [1022262 1022415])
            ("tibetan-transcription-to-tibetan" function (:prototype-flag t) nil [1022417 1022611])
            ("tibetan-compose-string" function (:prototype-flag t) nil [1022613 1022711])
            ("tibetan-compose-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1022713 1022830])
            ("tibetan-decompose-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1022832 1023091])
            ("tibetan-decompose-string" function (:prototype-flag t) nil [1023093 1023330])
            ("tibetan-decompose-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1023332 1023536])
            ("tibetan-compose-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1023538 1023714])
            ("tibetan-post-read-conversion" function (:prototype-flag t) nil [1023716 1023793])
            ("tibetan-pre-write-conversion" function (:prototype-flag t) nil [1023795 1023876])
            ("tibetan-pre-write-canonicalize-for-unicode" function (:prototype-flag t) nil [1023878 1023973])
            ("tildify-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1024150 1024471])
            ("tildify-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1024473 1024774])
            ("display-time-day-and-date" variable nil nil [1025005 1025123])
            ("custom-autoload" code nil nil [1025125 1025178])
            ("put" code nil nil [1025179 1025229])
            ("display-time" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1025231 1025549])
            ("display-time-mode" variable nil nil [1025551 1025856])
            ("custom-autoload" code nil nil [1025858 1025905])
            ("display-time-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1025907 1026510])
            ("display-time-world" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1026512 1026737])
            ("emacs-uptime" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1026739 1026997])
            ("emacs-init-time" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1026999 1027115])
            ("date-to-time" function (:prototype-flag t) nil [1027486 1027671])
            ("if" code nil nil [1027672 1027938])
            ("seconds-to-time" function (:prototype-flag t) nil [1027940 1028065])
            ("time-less-p" function (:prototype-flag t) nil [1028067 1028190])
            ("days-to-time" function (:prototype-flag t) nil [1028192 1028284])
            ("time-since" function (:prototype-flag t) nil [1028286 1028438])
            ("defalias" code nil nil [1028440 1028480])
            ("time-subtract" function (:prototype-flag t) nil [1028482 1028636])
            ("time-add" function (:prototype-flag t) nil [1028638 1028767])
            ("date-to-day" function (:prototype-flag t) nil [1028769 1028914])
            ("days-between" function (:prototype-flag t) nil [1028916 1029079])
            ("date-leap-year-p" function (:prototype-flag t) nil [1029081 1029178])
            ("time-to-day-in-year" function (:prototype-flag t) nil [1029180 1029308])
            ("time-to-days" function (:prototype-flag t) nil [1029310 1029528])
            ("safe-date-to-time" function (:prototype-flag t) nil [1029530 1029720])
            ("format-seconds" function (:prototype-flag t) nil [1029722 1030676])
            ("put" code nil nil [1030847 1030901])
            ("put" code nil nil [1030902 1030968])
            ("put" code nil nil [1030969 1031028])
            ("put" code nil nil [1031029 1031082])
            ("put" code nil nil [1031083 1031134])
            ("put" code nil nil [1031135 1031196])
            ("put" code nil nil [1031197 1031251])
            ("put" code nil nil [1031252 1031307])
            ("time-stamp" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1031309 1032245])
            ("time-stamp-toggle-active" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1032247 1032468])
            ("timeclock-mode-line-display" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1032879 1033444])
            ("timeclock-in" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1033446 1034212])
            ("timeclock-out" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1034214 1034689])
            ("timeclock-status-string" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1034691 1035028])
            ("timeclock-change" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1035030 1035370])
            ("timeclock-query-out" function (:prototype-flag t) nil [1035372 1035539])
            ("timeclock-reread-log" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1035541 1035708])
            ("timeclock-workday-remaining-string" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1035710 1036106])
            ("timeclock-workday-elapsed-string" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1036108 1036404])
            ("timeclock-when-to-leave-string" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1036406 1036823])
            ("titdic-convert" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1037023 1037276])
            ("batch-titdic-convert" function (:prototype-flag t) nil [1037278 1037734])
            ("define-key" code nil nil [1037890 1037933])
            ("define-key" code nil nil [1037935 1037996])
            ("tmm-menubar" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1037998 1038316])
            ("tmm-menubar-mouse" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1038318 1038600])
            ("tmm-prompt" function (:prototype-flag t) nil [1038602 1039231])
            ("todo-add-category" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1039516 1039627])
            ("todo-add-item-non-interactively" function (:prototype-flag t) nil [1039629 1039778])
            ("todo-insert-item" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1039780 1039954])
            ("todo-top-priorities" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1039956 1040377])
            ("todo-print" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1040379 1040668])
            ("todo-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1040670 1040755])
            ("todo-cp" function (:prototype-flag t) nil [1040757 1040867])
            ("todo-show" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1040869 1040935])
            ("toggle-tool-bar-mode-from-frame" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1041201 1041397])
            ("tool-bar-add-item" function (:prototype-flag t) nil [1041399 1042164])
            ("tool-bar-local-item" function (:prototype-flag t) nil [1042166 1042807])
            ("tool-bar-add-item-from-menu" function (:prototype-flag t) nil [1042809 1043518])
            ("tool-bar-local-item-from-menu" function (:prototype-flag t) nil [1043520 1044086])
            ("tpu-edt-mode" variable nil nil [1044257 1044542])
            ("custom-autoload" code nil nil [1044544 1044589])
            ("tpu-edt-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1044591 1044846])
            ("defalias" code nil nil [1044848 1044879])
            ("tpu-edt-on" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1044881 1044957])
            ("tpu-mapper" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1045124 1046460])
            ("tq-create" function (:prototype-flag t) nil [1046604 1046892])
            ("trace-buffer" variable (:default-value (purecopy "*trace-output*")) nil [1047093 1047194])
            ("custom-autoload" code nil nil [1047196 1047237])
            ("trace-function" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1047239 1047869])
            ("trace-function-background" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1047871 1048468])
            ("tramp-mode" variable (:default-value t) nil [1048807 1048921])
            ("custom-autoload" code nil nil [1048923 1048962])
            ("tramp-syntax" variable (:default-value (if (featurep (quote xemacs)) (quote sep) (quote ftp))) nil [1048964 1049259])
            ("custom-autoload" code nil nil [1049261 1049302])
            ("tramp-file-name-regexp-unified" variable
               (:constant-flag t
                :default-value (if (memq system-type (quote (cygwin windows-nt))) "\\`/\\([^[/|:]\\{2,\\}\\|[^/|]\\{2,\\}]\\):" "\\`/\\([^[/|:]+\\|[^/|]+]\\):"))
                nil [1049304 1049711])
            ("tramp-file-name-regexp-separate" variable
               (:constant-flag t
                :default-value "\\`/\\[.*\\]")
                nil [1049713 1049945])
            ("tramp-file-name-regexp-url" variable
               (:constant-flag t
                :default-value "\\`/[^/|:]+://")
                nil [1049947 1050118])
            ("tramp-file-name-regexp" variable
               (:constant-flag t
                :default-value (cond ((equal tramp-syntax (quote ftp)) tramp-file-name-regexp-unified) ((equal tramp-syntax (quote sep)) tramp-file-name-regexp-separate) ((equal tramp-syntax (quote url)) tramp-file-name-regexp-url) (t (error "Wrong `tramp-syntax' defined"))))
                nil [1050120 1051116])
            ("tramp-completion-file-name-regexp-unified" variable
               (:constant-flag t
                :default-value (if (memq system-type (quote (cygwin windows-nt))) "\\`/[^/]\\{2,\\}\\'" "\\`/[^/]*\\'"))
                nil [1051118 1051496])
            ("tramp-completion-file-name-regexp-separate" variable
               (:constant-flag t
                :default-value "\\`/\\([[][^]]*\\)?\\'")
                nil [1051498 1051762])
            ("tramp-completion-file-name-regexp-url" variable
               (:constant-flag t
                :default-value "\\`/[^/:]+\\(:\\(/\\(/[^/]*\\)?\\)?\\)?\\'")
                nil [1051764 1051985])
            ("tramp-completion-file-name-regexp" variable
               (:constant-flag t
                :default-value (cond ((equal tramp-syntax (quote ftp)) tramp-completion-file-name-regexp-unified) ((equal tramp-syntax (quote sep)) tramp-completion-file-name-regexp-separate) ((equal tramp-syntax (quote url)) tramp-completion-file-name-regexp-url) (t (error "Wrong `tramp-syntax' defined"))))
                nil [1051987 1052712])
            ("tramp-completion-file-name-handler-alist" variable
               (:constant-flag t
                :default-value (quote ((file-name-all-completions . tramp-completion-handle-file-name-all-completions) (file-name-completion . tramp-completion-handle-file-name-completion))))
                nil [1052714 1053133])
            ("tramp-run-real-handler" function (:arguments ("operation" "args")) nil [1053135 1053670])
            ("tramp-completion-run-real-handler" function (:arguments ("operation" "args")) nil [1053672 1054168])
            ("tramp-file-name-handler" function (:prototype-flag t) nil [1054170 1054362])
            ("tramp-completion-file-name-handler" function (:arguments ("operation" "args")) nil [1054364 1054969])
            ("tramp-register-file-name-handlers" function nil nil [1054971 1055950])
            ("tramp-register-file-name-handlers" code nil nil [1055952 1055987])
            ("tramp-unload-file-name-handlers" function (:prototype-flag t) nil [1055989 1056060])
            ("tramp-completion-handle-file-name-all-completions" function (:prototype-flag t) nil [1056062 1056227])
            ("tramp-completion-handle-file-name-completion" function (:prototype-flag t) nil [1056229 1056396])
            ("tramp-unload-tramp" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1056398 1056494])
            ("tramp-ftp-enable-ange-ftp" function (:prototype-flag t) nil [1056661 1056730])
            ("help-with-tutorial" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1056879 1057665])
            ("tai-viet-composition-function" function (:prototype-flag t) nil [1057840 1057938])
            ("2C-command" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1058137 1058185])
            ("global-set-key" code nil nil [1058187 1058223])
            ("global-set-key" code nil nil [1058225 1058258])
            ("2C-two-columns" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1058260 1058723])
            ("2C-associate-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1058725 1058984])
            ("2C-split" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1058986 1059772])
            ("type-break-mode" variable nil nil [1060008 1060305])
            ("custom-autoload" code nil nil [1060307 1060358])
            ("type-break-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1060360 1063957])
            ("type-break" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1063959 1064240])
            ("type-break-statistics" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1064242 1064514])
            ("type-break-guesstimate-keystroke-threshold" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1064516 1065795])
            ("uce-reply-to-uce" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1065937 1066248])
            ("ucs-normalize-NFD-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1066773 1066899])
            ("ucs-normalize-NFD-string" function (:prototype-flag t) nil [1066901 1067021])
            ("ucs-normalize-NFC-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1067023 1067149])
            ("ucs-normalize-NFC-string" function (:prototype-flag t) nil [1067151 1067271])
            ("ucs-normalize-NFKD-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1067273 1067401])
            ("ucs-normalize-NFKD-string" function (:prototype-flag t) nil [1067403 1067525])
            ("ucs-normalize-NFKC-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1067527 1067655])
            ("ucs-normalize-NFKC-string" function (:prototype-flag t) nil [1067657 1067779])
            ("ucs-normalize-HFS-NFD-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1067781 1067933])
            ("ucs-normalize-HFS-NFD-string" function (:prototype-flag t) nil [1067935 1068081])
            ("ucs-normalize-HFS-NFC-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1068083 1068235])
            ("ucs-normalize-HFS-NFC-string" function (:prototype-flag t) nil [1068237 1068383])
            ("underline-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1068572 1068817])
            ("ununderline-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1068819 1069045])
            ("batch-unrmail" function (:prototype-flag t) nil [1069204 1069539])
            ("unrmail" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1069541 1069677])
            ("unsafep" function (:prototype-flag t) nil [1069834 1070075])
            ("url-retrieve" function (:prototype-flag t) nil [1070238 1071726])
            ("url-retrieve-synchronously" function (:prototype-flag t) nil [1071728 1072026])
            ("url-get-authentication" function (:prototype-flag t) nil [1072212 1073379])
            ("url-register-auth-scheme" function (:prototype-flag t) nil [1073381 1074062])
            ("url-store-in-cache" function (:prototype-flag t) nil [1074254 1074362])
            ("url-is-cached" function (:prototype-flag t) nil [1074364 1074534])
            ("url-cache-extract" function (:prototype-flag t) nil [1074536 1074641])
            ("url-cid" function (:prototype-flag t) nil [1074784 1074837])
            ("url-dav-supported-p" function (:prototype-flag t) nil [1075030 1075183])
            ("url-dav-request" function (:prototype-flag t) nil [1075185 1075968])
            ("url-dav-vc-registered" function (:prototype-flag t) nil [1075970 1076037])
            ("url-file" function (:prototype-flag t) nil [1076184 1076282])
            ("url-gateway-nslookup-host" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1076456 1076586])
            ("url-open-stream" function (:prototype-flag t) nil [1076588 1076880])
            ("url-handler-mode" variable nil nil [1077131 1077432])
            ("custom-autoload" code nil nil [1077434 1077488])
            ("url-handler-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1077490 1077791])
            ("url-file-handler" function (:prototype-flag t) nil [1077793 1078062])
            ("url-copy-file" function (:prototype-flag t) nil [1078064 1078718])
            ("url-file-local-copy" function (:prototype-flag t) nil [1078720 1078927])
            ("url-insert-file-contents" function (:prototype-flag t) nil [1078929 1079036])
            ("url-default-expander" function (:prototype-flag t) nil [1079176 1079221])
            ("defalias" code nil nil [1079223 1079283])
            ("url-https" function (:prototype-flag t) nil [1079285 1079317])
            ("url-https-file-exists-p" function (:prototype-flag t) nil [1079319 1079365])
            ("url-https-file-readable-p" function (:prototype-flag t) nil [1079367 1079415])
            ("url-https-file-attributes" function (:prototype-flag t) nil [1079417 1079465])
            ("url-irc" function (:prototype-flag t) nil [1079608 1079661])
            ("url-ldap" function (:prototype-flag t) nil [1079808 1080061])
            ("url-mail" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1080225 1080287])
            ("url-mailto" function (:prototype-flag t) nil [1080289 1080378])
            ("url-man" function (:prototype-flag t) nil [1080578 1080661])
            ("url-info" function (:prototype-flag t) nil [1080663 1080739])
            ("url-generic-emulator-loader" function (:prototype-flag t) nil [1080741 1080815])
            ("defalias" code nil nil [1080817 1080868])
            ("defalias" code nil nil [1080870 1080921])
            ("defalias" code nil nil [1080923 1080974])
            ("url-data" function (:prototype-flag t) nil [1080976 1081059])
            ("url-news" function (:prototype-flag t) nil [1081216 1081271])
            ("url-snews" function (:prototype-flag t) nil [1081273 1081329])
            ("isPlainHostName" function (:prototype-flag t) nil [1081559 1081620])
            ("dnsDomainIs" function (:prototype-flag t) nil [1081622 1081683])
            ("dnsResolve" function (:prototype-flag t) nil [1081685 1081741])
            ("isResolvable" function (:prototype-flag t) nil [1081743 1081801])
            ("isInNet" function (:prototype-flag t) nil [1081803 1081863])
            ("url-ns-prefs" function (:prototype-flag t) nil [1081865 1081933])
            ("url-ns-user-pref" function (:prototype-flag t) nil [1081935 1082014])
            ("url-recreate-url" function (:prototype-flag t) nil [1082194 1082306])
            ("url-generic-parse-url" function (:prototype-flag t) nil [1082308 1083756])
            ("url-setup-privacy-info" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1083926 1084051])
            ("url-queue-retrieve" function (:prototype-flag t) nil [1084211 1084649])
            ("url-debug" variable nil nil [1085261 1085569])
            ("custom-autoload" code nil nil [1085571 1085612])
            ("url-debug" function (:prototype-flag t) nil [1085614 1085681])
            ("url-parse-args" function (:prototype-flag t) nil [1085683 1085765])
            ("url-insert-entities-in-string" function (:prototype-flag t) nil [1085767 1086184])
            ("url-normalize-url" function (:prototype-flag t) nil [1086186 1086325])
            ("url-lazy-message" function (:prototype-flag t) nil [1086327 1086517])
            ("url-get-normalized-date" function (:prototype-flag t) nil [1086519 1086676])
            ("url-eat-trailing-space" function (:prototype-flag t) nil [1086678 1086787])
            ("url-strip-leading-spaces" function (:prototype-flag t) nil [1086789 1086897])
            ("url-pretty-length" function (:prototype-flag t) nil [1086899 1086961])
            ("url-display-percentage" function (:prototype-flag t) nil [1086963 1087048])
            ("url-percentage" function (:prototype-flag t) nil [1087050 1087111])
            ("defalias" code nil nil [1087113 1087157])
            ("url-file-directory" function (:prototype-flag t) nil [1087159 1087270])
            ("url-file-nondirectory" function (:prototype-flag t) nil [1087272 1087389])
            ("url-parse-query-string" function (:prototype-flag t) nil [1087391 1087496])
            ("url-build-query-string" function (:prototype-flag t) nil [1087498 1088121])
            ("url-unhex-string" function (:prototype-flag t) nil [1088123 1088426])
            ("url-hexify-string" function (:prototype-flag t) nil [1088428 1089053])
            ("url-encode-url" function (:prototype-flag t) nil [1089055 1089368])
            ("url-file-extension" function (:prototype-flag t) nil [1089370 1089587])
            ("url-truncate-url-for-viewing" function (:prototype-flag t) nil [1089589 1089795])
            ("url-view-url" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1089797 1090046])
            ("ask-user-about-lock" function (:prototype-flag t) nil [1090231 1090705])
            ("ask-user-about-supersession-threat" function (:prototype-flag t) nil [1090707 1091210])
            ("utf-7-post-read-conversion" function (:prototype-flag t) nil [1091485 1091555])
            ("utf-7-imap-post-read-conversion" function (:prototype-flag t) nil [1091557 1091632])
            ("utf-7-pre-write-conversion" function (:prototype-flag t) nil [1091634 1091708])
            ("utf-7-imap-pre-write-conversion" function (:prototype-flag t) nil [1091710 1091789])
            ("utf7-encode" function (:prototype-flag t) nil [1091929 1092072])
            ("uudecode-decode-region-external" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1092307 1092587])
            ("uudecode-decode-region-internal" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1092589 1092818])
            ("uudecode-decode-region" function (:prototype-flag t) nil [1092820 1093008])
            ("vc-checkout-hook" variable nil nil [1093596 1093709])
            ("custom-autoload" code nil nil [1093711 1093753])
            ("vc-checkin-hook" variable nil nil [1093755 1093884])
            ("custom-autoload" code nil nil [1093886 1093927])
            ("vc-before-checkin-hook" variable nil nil [1093929 1094056])
            ("custom-autoload" code nil nil [1094058 1094106])
            ("vc-next-action" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1094108 1095310])
            ("vc-register" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1095312 1096072])
            ("vc-version-diff" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1096074 1096212])
            ("vc-diff" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1096214 1096603])
            ("vc-version-ediff" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1096605 1096760])
            ("vc-ediff" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1096762 1097164])
            ("vc-root-diff" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1097166 1097594])
            ("vc-revision-other-window" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1097596 1097853])
            ("vc-insert-headers" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1097855 1098065])
            ("vc-merge" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1098067 1098746])
            ("defalias" code nil nil [1098748 1098794])
            ("vc-create-tag" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1098796 1099129])
            ("vc-retrieve-tag" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1099131 1099471])
            ("vc-print-log" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1099473 1099891])
            ("vc-print-root-log" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1099893 1100227])
            ("vc-log-incoming" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1100229 1100471])
            ("vc-log-outgoing" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1100473 1100708])
            ("vc-revert" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1100710 1100953])
            ("vc-rollback" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1100955 1101191])
            ("define-obsolete-function-alias" code nil nil [1101193 1101261])
            ("vc-pull" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1101263 1101919])
            ("defalias" code nil nil [1101921 1101951])
            ("vc-switch-backend" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1101953 1102377])
            ("vc-transfer-file" function (:prototype-flag t) nil [1102379 1102990])
            ("vc-delete-file" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1102992 1103108])
            ("vc-rename-file" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1103110 1103223])
            ("vc-update-change-log" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1103225 1103838])
            ("vc-branch-part" function (:prototype-flag t) nil [1103840 1103943])
            ("vc-annotate" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1104100 1105558])
            ("vc-arch-registered" function (:arguments ("file")) nil [1105693 1105851])
            ("vc-bzr-admin-dirname" variable
               (:constant-flag t
                :default-value ".bzr")
                nil [1105983 1106087])
            ("vc-bzr-admin-checkout-format-file" variable
               (:constant-flag t
                :default-value (concat vc-bzr-admin-dirname "/checkout/format"))
                nil [1106089 1106231])
            ("vc-bzr-registered" function (:arguments ("file")) nil [1106233 1106397])
            ("vc-cvs-registered" function (:arguments ("f")) nil [1106528 1106750])
            ("vc-dir" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1106887 1107608])
            ("vc-do-command" function (:prototype-flag t) nil [1107773 1108742])
            ("vc-git-registered" function (:arguments ("file")) nil [1108874 1109081])
            ("vc-hg-registered" function (:arguments ("file")) nil [1109202 1109403])
            ("vc-mtn-admin-dir" variable
               (:constant-flag t
                :default-value "_MTN")
                nil [1109535 1109605])
            ("vc-mtn-admin-format" variable
               (:constant-flag t
                :default-value (concat vc-mtn-admin-dir "/format"))
                nil [1109607 1109723])
            ("vc-mtn-registered" function (:arguments ("file")) nil [1109725 1109875])
            ("vc-rcs-master-templates" variable (:default-value (purecopy (quote ("%sRCS/%s,v" "%s%s,v" "%sRCS/%s")))) nil [1110029 1110219])
            ("custom-autoload" code nil nil [1110221 1110274])
            ("vc-rcs-registered" function (:arguments ("f")) nil [1110276 1110336])
            ("vc-sccs-master-templates" variable (:default-value (purecopy (quote ("%sSCCS/s.%s" "%ss.%s" vc-sccs-search-project-dir)))) nil [1110494 1110703])
            ("custom-autoload" code nil nil [1110705 1110760])
            ("vc-sccs-registered" function (:arguments ("f")) nil [1110762 1110824])
            ("vc-sccs-search-project-dir" function (:arguments ("dirname" "basename")) nil [1110826 1111522])
            ("vc-svn-registered" function (:arguments ("f")) nil [1111654 1111969])
            ("add-to-list" code nil nil [1112132 1112208])
            ("vera-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1112210 1113932])
            ("verilog-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1114106 1120652])
            ("vhdl-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1120815 1146437])
            ("vi-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1146577 1148898])
            ("viet-encode-viscii-char" function (:prototype-flag t) nil [1149237 1149361])
            ("viet-decode-viqr-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1149363 1149629])
            ("viet-decode-viqr-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1149631 1149768])
            ("viet-encode-viqr-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1149770 1150036])
            ("viet-encode-viqr-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1150038 1150175])
            ("viqr-post-read-conversion" function (:prototype-flag t) nil [1150177 1150250])
            ("viqr-pre-write-conversion" function (:prototype-flag t) nil [1150252 1150329])
            ("view-remove-frame-by-deleting" variable (:default-value t) nil [1150718 1150886])
            ("custom-autoload" code nil nil [1150888 1150945])
            ("view-mode" variable nil nil [1150947 1151120])
            ("make-variable-buffer-local" code nil nil [1151122 1151161])
            ("kill-buffer-if-not-modified" function (:prototype-flag t) nil [1151163 1151296])
            ("view-file" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1151298 1151748])
            ("view-file-other-window" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1151750 1152327])
            ("view-file-other-frame" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1152329 1152922])
            ("view-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1152924 1154014])
            ("view-buffer-other-window" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1154016 1154904])
            ("view-buffer-other-frame" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1154906 1155792])
            ("view-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1155794 1160649])
            ("view-return-to-alist-update" function (:prototype-flag t) nil [1160651 1161195])
            ("make-obsolete" code nil nil [1161197 1161280])
            ("view-mode-enter" function (:prototype-flag t) nil [1161282 1161950])
            ("View-exit-and-edit" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1161952 1162059])
            ("vip-setup" function (:prototype-flag t) nil [1162213 1162324])
            ("vip-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1162326 1162398])
            ("toggle-viper-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1162568 1162701])
            ("viper-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1162703 1162818])
            ("warning-prefix-function" variable nil nil [1162997 1163394])
            ("warning-series" variable nil nil [1163396 1163834])
            ("warning-fill-prefix" variable nil nil [1163836 1163945])
            ("warning-type-format" variable (:default-value (purecopy " (%s)")) nil [1163947 1164186])
            ("display-warning" function (:prototype-flag t) nil [1164188 1165434])
            ("lwarn" function (:prototype-flag t) nil [1165436 1166258])
            ("warn" function (:prototype-flag t) nil [1166260 1166532])
            ("wdired-change-to-wdired-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1166685 1167075])
            ("webjump" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1167218 1167496])
            ("put" code nil nil [1167672 1167720])
            ("put" code nil nil [1167722 1167771])
            ("define-obsolete-function-alias" code nil nil [1167773 1167850])
            ("which-function-mode" variable nil nil [1167852 1168165])
            ("custom-autoload" code nil nil [1168167 1168222])
            ("which-function-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1168224 1168686])
            ("whitespace-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1169087 1169456])
            ("whitespace-newline-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1169458 1170034])
            ("global-whitespace-mode" variable nil nil [1170036 1170361])
            ("custom-autoload" code nil nil [1170363 1170421])
            ("global-whitespace-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1170423 1170816])
            ("global-whitespace-newline-mode" variable nil nil [1170818 1171175])
            ("custom-autoload" code nil nil [1171177 1171243])
            ("global-whitespace-newline-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1171245 1171856])
            ("whitespace-toggle-options" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1171858 1174578])
            ("global-whitespace-toggle-options" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1174580 1177314])
            ("whitespace-cleanup" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1177316 1179422])
            ("whitespace-cleanup-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1179424 1181001])
            ("whitespace-report" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1181003 1182370])
            ("whitespace-report-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1182372 1183765])
            ("widget-browse-at" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1183985 1184078])
            ("widget-browse" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1184080 1184178])
            ("widget-browse-other-window" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1184180 1184313])
            ("widget-minor-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1184315 1184577])
            ("widgetp" function (:prototype-flag t) nil [1184798 1184892])
            ("widget-prompt-value" function (:prototype-flag t) nil [1184894 1185112])
            ("widget-create" function (:prototype-flag t) nil [1185114 1185260])
            ("widget-delete" function (:prototype-flag t) nil [1185262 1185339])
            ("widget-insert" function (:prototype-flag t) nil [1185341 1185470])
            ("widget-keymap" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map "	" (quote widget-forward)) (define-key map "	" (quote widget-backward)) (define-key map [(shift tab)] (quote widget-backward)) (put (quote widget-backward) :advertised-binding [(shift tab)]) (define-key map [backtab] (quote widget-backward)) (define-key map [down-mouse-2] (quote widget-button-click)) (define-key map [down-mouse-1] (quote widget-button-click)) (define-key map [(control 109)] (quote widget-button-press)) map)) nil [1185472 1186095])
            ("widget-setup" function (:prototype-flag t) nil [1186097 1186205])
            ("windmove-left" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1186427 1186854])
            ("windmove-up" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1186856 1187269])
            ("windmove-right" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1187271 1187700])
            ("windmove-down" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1187702 1188120])
            ("windmove-default-keybindings" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1188122 1188331])
            ("winner-mode" variable nil nil [1188467 1188748])
            ("custom-autoload" code nil nil [1188750 1188793])
            ("winner-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1188795 1189099])
            ("woman-locale" variable nil nil [1189305 1189580])
            ("custom-autoload" code nil nil [1189582 1189623])
            ("woman" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1189625 1190285])
            ("woman-dired-find-file" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1190287 1190400])
            ("woman-find-file" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1190402 1190916])
            ("woman-bookmark-jump" function (:prototype-flag t) nil [1190918 1191029])
            ("wordstar-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1191190 1193670])
            ("xesam-search" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1193812 1194318])
            ("xml-parse-file" function (:prototype-flag t) nil [1194465 1195199])
            ("xml-parse-region" function (:prototype-flag t) nil [1195201 1196166])
            ("xmltok-get-declared-encoding-position" function (:prototype-flag t) nil [1196338 1196995])
            ("xterm-mouse-mode" variable nil nil [1197142 1197443])
            ("custom-autoload" code nil nil [1197445 1197495])
            ("xterm-mouse-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1197497 1198144])
            ("yenc-decode-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1198313 1198445])
            ("yenc-extract-filename" function (:prototype-flag t) nil [1198447 1198545])
            ("yow" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1198726 1198862])
            ("insert-zippyism" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1198864 1199009])
            ("apropos-zippy" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1199011 1199169])
            ("psychoanalyze-pinhead" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1199171 1199254])
            ("zone" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1199387 1199449])
            ("loaddefs" package nil nil [1215434 1215453]))          
      :file "loaddefs.el"
      :pointmax 1215599
      :fsize 1215609
      :lastmodtime '(20862 55169 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "hl-line.el.gz"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("hl-line-overlay" variable nil nil [2817 2909])
            ("make-variable-buffer-local" code nil nil [2910 2955])
            ("global-hl-line-overlay" variable nil nil [2957 3063])
            ("hl-line" customgroup (:user-visible-flag t) nil [3065 3159])
            ("hl-line" variable
               (:default-value (quote ((t :inherit highlight)))
                :type "face")
                nil [3161 3310])
            ("hl-line-face" variable (:default-value (quote hl-line)) nil [3312 3741])
            ("hl-line-sticky-flag" variable (:default-value t) nil [3743 4179])
            ("global-hl-line-sticky-flag" variable nil nil [4181 4550])
            ("hl-line-range-function" variable nil nil [4552 4939])
            ("define-minor-mode" code nil nil [4956 6432])
            ("hl-line-highlight" function nil nil [6434 6926])
            ("hl-line-unhighlight" function nil nil [6928 7076])
            ("define-minor-mode" code nil nil [7093 7995])
            ("global-hl-line-highlight" function nil nil [7997 8548])
            ("global-hl-line-unhighlight" function nil nil [8550 8726])
            ("hl-line-move" function (:arguments ("overlay")) nil [8728 9270])
            ("hl-line-unload-function" function nil nil [9272 9534])
            ("hl-line" package nil nil [9536 9554]))          
      :file "hl-line.el.gz"
      :pointmax 9581
      :fsize 2930
      :lastmodtime '(20707 18685 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "desktop.el.gz"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("desktop-file-version" variable (:default-value "206") nil [5705 5873])
            ("desktop" customgroup (:user-visible-flag t) nil [6093 6172])
            ("define-obsolete-variable-alias" code nil nil [6215 6289])
            ("define-minor-mode" code nil nil [6305 6743])
            ("desktop-save-mode-off" function nil nil [6745 6862])
            ("desktop-save" variable (:default-value (quote ask-if-new)) nil [6864 7899])
            ("desktop-load-locked-desktop" variable (:default-value (quote ask)) nil [7901 8385])
            ("define-obsolete-variable-alias" code nil nil [8387 8504])
            ("desktop-base-file-name" variable (:default-value (convert-standard-filename ".emacs.desktop")) nil [8506 8685])
            ("desktop-base-lock-name" variable (:default-value (convert-standard-filename ".emacs.desktop.lock")) nil [8687 8894])
            ("desktop-path" variable (:default-value (list user-emacs-directory "~")) nil [8896 9140])
            ("desktop-missing-file-warning" variable nil nil [9192 9511])
            ("desktop-no-desktop-file-hook" variable nil nil [9513 9769])
            ("desktop-not-loaded-hook" variable nil nil [9771 10104])
            ("desktop-after-read-hook" variable nil nil [10106 10312])
            ("desktop-save-hook" variable nil nil [10314 10594])
            ("desktop-globals-to-save" variable (:default-value (quote (desktop-missing-file-warning tags-file-name tags-table-list search-ring regexp-search-ring register-alist file-name-history))) nil [10596 11201])
            ("desktop-globals-to-clear" variable (:default-value (quote (kill-ring kill-ring-yank-pointer search-ring search-ring-yank-pointer regexp-search-ring regexp-search-ring-yank-pointer))) nil [11203 11736])
            ("desktop-clear-preserve-buffers" variable (:default-value (quote ("\\*scratch\\*" "\\*Messages\\*" "\\*server\\*" "\\*tramp/.+\\*" "\\*Warnings\\*"))) nil [11738 12143])
            ("desktop-locals-to-save" variable (:default-value (quote (desktop-locals-to-save truncate-lines case-fold-search case-replace fill-column overwrite-mode change-log-default-name line-number-mode column-number-mode size-indication-mode buffer-file-coding-system indent-tabs-mode tab-width indicate-buffer-boundaries indicate-empty-lines show-trailing-whitespace))) nil [12160 12827])
            ("desktop-buffers-not-to-save" variable nil nil [12829 13063])
            ("desktop-files-not-to-save" variable (:default-value "\\(^/[^/:]*:\\|(ftp)$\\)") nil [13098 13309])
            ("desktop-modes-not-to-save" variable (:default-value (quote (tags-table-mode))) nil [13381 13541])
            ("desktop-file-name-format" variable (:default-value (quote absolute)) nil [13543 13884])
            ("desktop-restore-eager" variable (:default-value t) nil [13886 14152])
            ("desktop-lazy-verbose" variable (:default-value t) nil [14154 14290])
            ("desktop-lazy-idle-delay" variable (:default-value 5) nil [14292 14461])
            ("desktop-save-buffer" variable nil nil [14478 15113])
            ("make-variable-buffer-local" code nil nil [15114 15163])
            ("make-obsolete-variable" code nil nil [15164 15270])
            ("make-obsolete-variable" code nil nil [15271 15378])
            ("desktop-buffer-mode-handlers" variable nil nil [15395 16561])
            ("put" code nil nil [16578 16637])
            ("make-obsolete-variable" code nil nil [16638 16748])
            ("desktop-minor-mode-table" variable (:default-value (quote ((auto-fill-function auto-fill-mode) (vc-mode nil) (vc-dired-mode nil) (erc-track-minor-mode nil) (savehist-mode nil)))) nil [16750 17475])
            ("desktop-minor-mode-handlers" variable nil nil [17492 18661])
            ("put" code nil nil [18678 18736])
            ("desktop-dirname" variable nil nil [18818 18907])
            ("desktop-full-file-name" function (:arguments ("dirname")) nil [18909 19141])
            ("desktop-full-lock-name" function (:arguments ("dirname")) nil [19143 19380])
            ("desktop-header" variable
               (:constant-flag t
                :user-visible-flag t
                :default-value ";; --------------------------------------------------------------------------
;; Desktop File for Emacs
;; --------------------------------------------------------------------------
")
                nil [19382 19628])
            ("desktop-delay-hook" variable nil nil [19630 19732])
            ("desktop-file-modtime" variable nil nil [19849 19997])
            ("desktop-owner" function (:arguments ("dirname")) nil [19999 20563])
            ("desktop-claim-lock" function (:arguments ("dirname")) nil [20565 20825])
            ("desktop-release-lock" function (:arguments ("dirname")) nil [20827 21081])
            ("desktop-truncate" function (:arguments ("list" "n")) nil [21163 21337])
            ("desktop-clear" function (:user-visible-flag t) nil [21434 22659])
            ("unless" code nil nil [22741 22808])
            ("desktop-kill" function nil nil [22810 24080])
            ("desktop-list*" function (:arguments ("args")) nil [24162 24449])
            ("desktop-buffer-info" function (:arguments ("buffer")) nil [24531 25821])
            ("desktop-internal-v2s" function (:arguments ("value")) nil [25903 28427])
            ("desktop-value-to-string" function (:arguments ("value")) nil [28509 28873])
            ("desktop-outvar" function (:arguments ("varspec")) nil [28955 29646])
            ("desktop-save-buffer-p" function (:arguments ("filename" "bufname" "mode" "_dummy")) nil [29728 30849])
            ("desktop-file-name" function (:arguments ("filename" "dirname")) nil [30931 31599])
            ("desktop-save" function
               (:user-visible-flag t
                :arguments ("dirname" "release"))
                nil [31697 34587])
            ("desktop-remove" function (:user-visible-flag t) nil [34684 34996])
            ("desktop-buffer-args-list" variable nil nil [34998 35081])
            ("desktop-lazy-timer" variable nil nil [35083 35114])
            ("desktop-read" function
               (:user-visible-flag t
                :arguments ("dirname"))
                nil [35211 39447])
            ("desktop-load-default" function nil nil [39585 39864])
            ("desktop-change-dir" function
               (:user-visible-flag t
                :arguments ("dirname"))
                nil [39961 40377])
            ("desktop-save-in-desktop-dir" function (:user-visible-flag t) nil [40474 40753])
            ("desktop-revert" function (:user-visible-flag t) nil [40850 41136])
            ("desktop-buffer-major-mode" variable nil nil [41138 41172])
            ("desktop-buffer-locals" variable nil nil [41173 41203])
            ("auto-insert" variable nil nil [41204 41224])
            ("desktop-restore-file-buffer" function (:arguments ("buffer-filename" "_buffer-name" "_buffer-misc")) nil [41327 42285])
            ("desktop-load-file" function (:arguments ("function")) nil [42287 42467])
            ("desktop-first-buffer" variable nil nil [42677 42706])
            ("desktop-buffer-ok-count" variable nil nil [42791 42823])
            ("desktop-buffer-fail-count" variable nil nil [42824 42858])
            ("desktop-create-buffer" function (:arguments ("file-version" "buffer-filename" "buffer-name" "buffer-majormode" "buffer-minormodes" "buffer-point" "buffer-mark" "buffer-readonly" "buffer-misc" "buffer-locals")) nil [42860 46700])
            ("desktop-buffer" function (:arguments ("buffer-filename" "buffer-name" "buffer-majormode" "mim" "pt" "mk" "ro" "tl" "fc" "cfs" "cr" "buffer-misc")) nil [46847 47263])
            ("desktop-append-buffer-args" function (:arguments ("args")) nil [47265 47651])
            ("desktop-lazy-create-buffer" function nil nil [47653 48536])
            ("desktop-idle-create-buffers" function nil nil [48538 49061])
            ("desktop-lazy-complete" function (:user-visible-flag t) nil [49063 49333])
            ("desktop-lazy-abort" function (:user-visible-flag t) nil [49335 49686])
            ("add-hook" code nil nil [50099 50408])
            ("desktop" package nil nil [50410 50428]))          
      :file "desktop.el.gz"
      :pointmax 50455
      :fsize 13584
      :lastmodtime '(20707 18685 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "speedbar.el.gz"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("speedbar-version" variable (:default-value "1.0") nil [194 262])
            ("speedbar-incompatible-version" variable (:default-value "0.14beta4") nil [263 500])
            ("easymenu" include nil nil [5987 6006])
            ("dframe" include nil nil [6007 6024])
            ("sb-image" include nil nil [6025 6044])
            ("speedbar" customgroup (:user-visible-flag t) nil [6069 6200])
            ("speedbar-faces" customgroup (:user-visible-flag t) nil [6202 6316])
            ("speedbar-vc" customgroup (:user-visible-flag t) nil [6318 6426])
            ("speedbar-initial-expansion-mode-alist" variable (:default-value (quote (("buffers" speedbar-buffer-easymenu-definition speedbar-buffers-key-map speedbar-buffer-buttons) ("quick buffers" speedbar-buffer-easymenu-definition speedbar-buffers-key-map speedbar-buffer-buttons-temp) ("files" speedbar-easymenu-definition-special speedbar-file-key-map speedbar-directory-buttons speedbar-default-directory-list)))) nil [7140 8383])
            ("speedbar-initial-expansion-list-name" variable (:default-value "files") nil [8385 8631])
            ("speedbar-previously-used-expansion-list-name" variable (:default-value "files") nil [8633 8853])
            ("speedbar-stealthy-function-list" variable (:default-value (quote (("files" speedbar-update-current-file speedbar-check-read-only speedbar-check-vc speedbar-check-objects)))) nil [8855 9609])
            ("speedbar-mode-functions-list" variable (:default-value (quote (("files" (speedbar-item-info . speedbar-files-item-info) (speedbar-line-directory . speedbar-files-line-directory)) ("buffers" (speedbar-item-info . speedbar-buffers-item-info) (speedbar-line-directory . speedbar-buffers-line-directory)) ("quick buffers" (speedbar-item-info . speedbar-buffers-item-info) (speedbar-line-directory . speedbar-buffers-line-directory))))) nil [9611 10699])
            ("speedbar-mode-specific-contents-flag" variable (:default-value t) nil [10701 10925])
            ("speedbar-query-confirmation-method" variable (:default-value (quote all)) nil [10927 11451])
            ("speedbar-special-mode-expansion-list" variable nil nil [11453 11789])
            ("speedbar-special-mode-key-map" variable nil nil [11791 12016])
            ("speedbar-before-visiting-file-hook" variable (:default-value (quote (push-mark))) nil [12018 12256])
            ("speedbar-visiting-file-hook" variable nil nil [12258 12399])
            ("speedbar-before-visiting-tag-hook" variable (:default-value (quote (push-mark))) nil [12401 12637])
            ("speedbar-visiting-tag-hook" variable (:default-value (quote (speedbar-highlight-one-tag-line))) nil [12639 12917])
            ("speedbar-load-hook" variable nil nil [12919 13025])
            ("speedbar-reconfigure-keymaps-hook" variable nil nil [13027 13157])
            ("speedbar-show-unknown-files" variable nil nil [13159 13359])
            ("speedbar-update-speed" variable (:default-value dframe-update-speed) nil [13598 13648])
            ("make-obsolete-variable" code nil nil [13649 13755])
            ("speedbar-navigating-speed" variable (:default-value dframe-update-speed) nil [13757 13811])
            ("make-obsolete-variable" code nil nil [13812 13922])
            ("speedbar-frame-parameters" variable (:default-value (quote ((minibuffer) (width . 20) (border-width . 0) (menu-bar-lines . 0) (tool-bar-lines . 0) (unsplittable . t) (left-fringe . 0)))) nil [13945 14583])
            ("speedbar-frame-plist" variable (:default-value (quote (minibuffer nil width 20 border-width 0 internal-border-width 0 unsplittable t default-toolbar-visible-p nil has-modeline-p nil menubar-visible-p nil default-gutter-visible-p nil))) nil [14636 15216])
            ("speedbar-use-imenu-flag" variable (:default-value (fboundp (quote imenu))) nil [15218 15539])
            ("speedbar-dynamic-tags-function-list" variable (:default-value (quote ((speedbar-fetch-dynamic-imenu . speedbar-insert-imenu-list) (speedbar-fetch-dynamic-etags . speedbar-insert-etags-list)))) nil [15541 16233])
            ("speedbar-use-tool-tips-flag" variable (:default-value (fboundp (quote tooltip-mode))) nil [16235 16480])
            ("speedbar-track-mouse-flag" variable (:default-value (not speedbar-use-tool-tips-flag)) nil [16482 16655])
            ("speedbar-default-position" variable (:default-value (quote left-right)) nil [16657 17009])
            ("speedbar-sort-tags" variable nil nil [17011 17190])
            ("speedbar-tag-hierarchy-method" variable (:default-value (quote (speedbar-prefix-group-tag-hierarchy speedbar-trim-words-tag-hierarchy))) nil [17192 17990])
            ("speedbar-tag-group-name-minimum-length" variable (:default-value 4) nil [17992 18429])
            ("speedbar-tag-split-minimum-length" variable (:default-value 20) nil [18431 18666])
            ("speedbar-tag-regroup-maximum-length" variable (:default-value 10) nil [18668 18961])
            ("speedbar-directory-button-trim-method" variable (:default-value (quote span)) nil [18963 19455])
            ("speedbar-smart-directory-expand-flag" variable (:default-value t) nil [19457 19915])
            ("speedbar-indentation-width" variable (:default-value 1) nil [19917 20069])
            ("speedbar-hide-button-brackets-flag" variable nil nil [20071 20226])
            ("speedbar-before-popup-hook" variable nil nil [20228 20358])
            ("speedbar-after-create-hook" variable (:default-value (quote (speedbar-frame-reposition-smartly))) nil [20360 20522])
            ("speedbar-before-delete-hook" variable nil nil [20524 20653])
            ("speedbar-mode-hook" variable nil nil [20655 20769])
            ("speedbar-timer-hook" variable nil nil [20771 20899])
            ("speedbar-verbosity-level" variable (:default-value 1) nil [20901 21110])
            ("speedbar-indicator-separator" variable (:default-value " ") nil [21112 21212])
            ("speedbar-vc-do-check" variable (:default-value t) nil [21214 21426])
            ("speedbar-vc-indicator" variable (:default-value "*") nil [21428 21663])
            ("speedbar-vc-directory-enable-hook" variable nil nil [21665 21920])
            ("speedbar-vc-in-control-hook" variable nil nil [21922 22199])
            ("speedbar-vc-to-do-point" variable nil nil [22201 22312])
            ("speedbar-obj-do-check" variable (:default-value t) nil [22314 22575])
            ("speedbar-obj-to-do-point" variable nil nil [22577 22689])
            ("speedbar-obj-indicator" variable (:default-value (quote ("#" . "!"))) nil [22691 22946])
            ("speedbar-obj-alist" variable (:default-value (quote (("\\.\\([cpC]\\|cpp\\|cc\\|cxx\\)$" . ".o") ("\\.el$" . ".elc") ("\\.java$" . ".class") ("\\.f\\(or\\|90\\|77\\)?$" . ".o") ("\\.tex$" . ".dvi") ("\\.texi$" . ".info")))) nil [22948 23240])
            ("speedbar-ro-to-do-point" variable nil nil [23242 23347])
            ("speedbar-object-read-only-indicator" variable (:default-value "%") nil [23349 23460])
            ("speedbar-indicator-regex" variable (:default-value (concat (regexp-quote speedbar-indicator-separator) "\\(" (regexp-quote speedbar-vc-indicator) "\\|" (regexp-quote (car speedbar-obj-indicator)) "\\|" (regexp-quote (cdr speedbar-obj-indicator)) "\\|" (regexp-quote speedbar-object-read-only-indicator) "\\)*")) nil [23574 24003])
            ("speedbar-scanner-reset-hook" variable nil nil [24005 24215])
            ("speedbar-ignored-modes" variable (:default-value (quote (fundamental-mode))) nil [24217 24452])
            ("speedbar-extension-list-to-regex" function (:arguments ("extlist")) nil [24454 25299])
            ("speedbar-ignored-directory-regexp" variable nil nil [25301 25713])
            ("define-obsolete-variable-alias" code nil nil [25715 25831])
            ("speedbar-ignored-directory-expressions" variable (:default-value (quote ("[/\\]logs?[/\\]\\'"))) nil [25833 26514])
            ("speedbar-directory-unshown-regexp" variable (:default-value "^\\(\\..*\\)\\'") nil [26516 26862])
            ("speedbar-file-unshown-regexp" variable (:default-value (let ((nstr "") (noext completion-ignored-extensions)) (while noext (setq nstr (concat nstr (regexp-quote (car noext)) "\\'" (if (cdr noext) "\\|" "")) noext (cdr noext))) (concat nstr "\\|#[^#]+#$\\|\\.\\.?\\'\\|\\.#"))) nil [26864 27378])
            ("speedbar-file-regexp" variable nil nil [27380 27584])
            ("speedbar-supported-extension-expressions" variable (:default-value (append (quote (".[ch]\\(\\+\\+\\|pp\\|c\\|h\\|xx\\)?" ".tex\\(i\\(nfo\\)?\\)?" ".el" ".emacs" ".l" ".lsp" ".p" ".java" ".js" ".f\\(90\\|77\\|or\\)?")) (if speedbar-use-imenu-flag (quote (".ad[abs]" ".p[lm]" ".tcl" ".m" ".scm" ".pm" ".py" ".g" ".s?html" ".ma?k" "[Mm]akefile\\(\\.in\\)?"))))) nil [27681 29015])
            ("setq" code nil nil [29017 29126])
            ("speedbar-add-supported-extension" function
               (:user-visible-flag t
                :arguments ("extension"))
                nil [29128 29941])
            ("speedbar-add-ignored-directory-regexp" function
               (:user-visible-flag t
                :arguments ("directory-expression"))
                nil [29943 30803])
            ("if" code nil nil [30862 31135])
            ("speedbar-update-flag" variable (:default-value dframe-have-timer-flag) nil [31137 31612])
            ("speedbar-update-flag-disable" variable nil nil [31614 31708])
            ("define-obsolete-variable-alias" code nil nil [31710 31802])
            ("speedbar-mode-syntax-table" variable (:default-value (let ((st (make-syntax-table))) (modify-syntax-entry 39 " " st) (modify-syntax-entry 34 " " st) (modify-syntax-entry 40 " " st) (modify-syntax-entry 41 " " st) (modify-syntax-entry 123 " " st) (modify-syntax-entry 125 " " st) (modify-syntax-entry 91 " " st) (modify-syntax-entry 93 " " st) st)) nil [31803 32260])
            ("define-obsolete-variable-alias" code nil nil [32263 32339])
            ("speedbar-mode-map" variable (:default-value (let ((map (make-keymap))) (suppress-keymap map t) (define-key map "t" (quote speedbar-toggle-updates)) (define-key map "g" (quote speedbar-refresh)) (define-key map "n" (quote speedbar-next)) (define-key map "p" (quote speedbar-prev)) (define-key map "\356" (quote speedbar-restricted-next)) (define-key map "\360" (quote speedbar-restricted-prev)) (define-key map "\216" (quote speedbar-forward-list)) (define-key map "\220" (quote speedbar-backward-list)) (define-key map "r" (lambda nil (interactive) (speedbar-change-initial-expansion-list speedbar-previously-used-expansion-list-name))) (define-key map "b" (lambda nil (interactive) (speedbar-change-initial-expansion-list "quick buffers"))) (define-key map "f" (lambda nil (interactive) (speedbar-change-initial-expansion-list "files"))) (dframe-update-keymap map) map)) nil [32340 33515])
            ("speedbar-make-specialized-keymap" function nil nil [33517 33803])
            ("speedbar-file-key-map" variable (:default-value (let ((map (speedbar-make-specialized-keymap))) (define-key map "e" (quote speedbar-edit-line)) (define-key map "" (quote speedbar-edit-line)) (define-key map "+" (quote speedbar-expand-line)) (define-key map "=" (quote speedbar-expand-line)) (define-key map "-" (quote speedbar-contract-line)) (define-key map "[" (quote speedbar-expand-line-descendants)) (define-key map "]" (quote speedbar-contract-line-descendants)) (define-key map " " (quote speedbar-toggle-line-expansion)) (define-key map "U" (quote speedbar-up-directory)) (define-key map "I" (quote speedbar-item-info)) (define-key map "B" (quote speedbar-item-byte-compile)) (define-key map "L" (quote speedbar-item-load)) (define-key map "C" (quote speedbar-item-copy)) (define-key map "D" (quote speedbar-item-delete)) (define-key map "O" (quote speedbar-item-object-delete)) (define-key map "R" (quote speedbar-item-rename)) (define-key map "M" (quote speedbar-create-directory)) map)) nil [33805 34865])
            ("speedbar-easymenu-definition-base" variable (:default-value (append (quote ("Speedbar" ["Update" speedbar-refresh t] ["Auto Update" speedbar-toggle-updates :active (not speedbar-update-flag-disable) :style toggle :selected speedbar-update-flag])) (if (and (or (fboundp (quote defimage)) (fboundp (quote make-image-specifier))) (if (fboundp (quote display-graphic-p)) (display-graphic-p) window-system)) (list ["Use Images" speedbar-toggle-images :style toggle :selected speedbar-use-images])))) nil [34867 35411])
            ("speedbar-easymenu-definition-special" variable (:default-value (quote (["Edit Item On Line" speedbar-edit-line t] ["Show All Files" speedbar-toggle-show-all-files :style toggle :selected speedbar-show-unknown-files] ["Expand File Tags" speedbar-expand-line (save-excursion (beginning-of-line) (looking-at "[0-9]+: *.\\+. "))] ["Flush Cache & Expand" speedbar-flush-expand-line (save-excursion (beginning-of-line) (looking-at "[0-9]+: *.\\+. "))] ["Expand All Descendants" speedbar-expand-line-descendants (save-excursion (beginning-of-line) (looking-at "[0-9]+: *.\\+. "))] ["Contract File Tags" speedbar-contract-line (save-excursion (beginning-of-line) (looking-at "[0-9]+: *.-. "))] "----" ["File/Tag Information" speedbar-item-info t] ["Load Lisp File" speedbar-item-load (save-excursion (beginning-of-line) (looking-at "[0-9]+: *\\[[+-]\\] .+\\(\\.el\\)\\( \\|$\\)"))] ["Byte Compile File" speedbar-item-byte-compile (save-excursion (beginning-of-line) (looking-at "[0-9]+: *\\[[+-]\\] .+\\(\\.el\\)\\( \\|$\\)"))] ["Copy File" speedbar-item-copy (save-excursion (beginning-of-line) (looking-at "[0-9]+: *\\["))] ["Rename File" speedbar-item-rename (save-excursion (beginning-of-line) (looking-at "[0-9]+: *[[<]"))] ["Create Directory" speedbar-create-directory (save-excursion (beginning-of-line) (looking-at "[0-9]+: *[[<]"))] ["Delete File" speedbar-item-delete (save-excursion (beginning-of-line) (looking-at "[0-9]+: *[[<]"))] ["Delete Object" speedbar-item-object-delete (save-excursion (beginning-of-line) (looking-at "[0-9]+: *\\[[+-]\\] [^ 
]+ \\*?[!#]$"))]))) nil [35413 37288])
            ("speedbar-easymenu-definition-trailer" variable (:default-value (append (if (and (featurep (quote custom)) (fboundp (quote custom-declare-variable))) (list ["Customize..." speedbar-customize t])) (list ["Close" dframe-close-frame t] ["Quit" delete-frame t]))) nil [37290 37598])
            ("speedbar-desired-buffer" variable nil nil [37600 37752])
            ("speedbar-buffer" variable nil nil [37753 37821])
            ("speedbar-frame" variable nil nil [37822 37884])
            ("speedbar-cached-frame" variable nil nil [37885 37987])
            ("speedbar-full-text-cache" variable nil nil [37988 38104])
            ("speedbar-last-selected-file" variable nil nil [38106 38203])
            ("speedbar-shown-directories" variable nil nil [38205 38322])
            ("speedbar-directory-contents-alist" variable nil nil [38324 38571])
            ("speedbar-power-click" variable nil nil [38573 38676])
            ("defalias" code nil nil [38701 38787])
            ("defalias" code nil nil [38789 38881])
            ("defalias" code nil nil [38883 38975])
            ("defalias" code nil nil [38977 39081])
            ("defalias" code nil nil [39139 39180])
            ("speedbar-frame-mode" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [39196 40812])
            ("speedbar-frame-reposition-smartly" function nil nil [40814 41794])
            ("speedbar-current-frame" function nil nil [41796 41955])
            ("speedbar-handle-delete-frame" function (:arguments ("e")) nil [41957 42267])
            ("speedbar-get-focus" function (:user-visible-flag t) nil [42284 42683])
            ("speedbar-frame-width" function nil nil [42685 42840])
            ("define-derived-mode" code nil nil [42842 45459])
            ("speedbar-message" function (:arguments ("fmt" "args")) nil [45461 45667])
            ("speedbar-y-or-n-p" function (:arguments ("prompt" "deleting")) nil [45669 46113])
            ("speedbar-select-attached-frame" function nil nil [46115 46265])
            ("defalias" code nil nil [46294 46364])
            ("defalias" code nil nil [46365 46453])
            ("speedbar-set-mode-line-format" function nil nil [46455 47662])
            ("speedbar-previous-menu" variable nil nil [47664 47771])
            ("speedbar-reconfigure-keymaps" function nil nil [47773 49927])
            ("speedbar-customize" function (:user-visible-flag t) nil [49955 50226])
            ("speedbar-track-mouse" function (:arguments ("event")) nil [50228 50651])
            ("speedbar-show-info-under-mouse" function nil nil [50653 50974])
            ("speedbar-next" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [50976 51165])
            ("speedbar-prev" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [51167 51310])
            ("speedbar-restricted-move" function (:arguments ("arg")) nil [51312 52462])
            ("speedbar-restricted-next" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [52464 52763])
            ("speedbar-restricted-prev" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [52765 53077])
            ("speedbar-navigate-list" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [53079 53551])
            ("speedbar-forward-list" function (:user-visible-flag t) nil [53553 53802])
            ("speedbar-backward-list" function (:user-visible-flag t) nil [53804 54056])
            ("speedbar-scroll-up" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [54058 54236])
            ("speedbar-scroll-down" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [54238 54418])
            ("speedbar-up-directory" function (:user-visible-flag t) nil [54420 54698])
            ("speedbar-refresh" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [54756 55651])
            ("speedbar-item-load" function (:user-visible-flag t) nil [55653 56096])
            ("speedbar-item-byte-compile" function (:user-visible-flag t) nil [56098 56486])
            ("speedbar-mouse-item-info" function
               (:user-visible-flag t
                :arguments ("event"))
                nil [56488 56692])
            ("speedbar-generic-item-info" function nil nil [56694 57253])
            ("speedbar-item-info" function (:user-visible-flag t) nil [57255 57594])
            ("speedbar-item-info-file-helper" function (:arguments ("filename")) nil [57596 58024])
            ("speedbar-item-info-tag-helper" function nil nil [58026 60089])
            ("speedbar-files-item-info" function nil nil [60091 60377])
            ("speedbar-item-copy" function (:user-visible-flag t) nil [60379 61414])
            ("speedbar-item-rename" function (:user-visible-flag t) nil [61416 62390])
            ("speedbar-create-directory" function (:user-visible-flag t) nil [62392 62776])
            ("speedbar-item-delete" function (:user-visible-flag t) nil [62778 63226])
            ("speedbar-item-object-delete" function (:user-visible-flag t) nil [63228 63860])
            ("speedbar-enable-update" function (:user-visible-flag t) nil [63862 64074])
            ("speedbar-disable-update" function (:user-visible-flag t) nil [64076 64282])
            ("speedbar-toggle-updates" function (:user-visible-flag t) nil [64284 64475])
            ("speedbar-toggle-images" function (:user-visible-flag t) nil [64477 64650])
            ("speedbar-toggle-sorting" function (:user-visible-flag t) nil [64652 64779])
            ("speedbar-toggle-show-all-files" function (:user-visible-flag t) nil [64781 64980])
            ("speedbar-with-writable" function (:arguments ("forms")) nil [64982 65145])
            ("put" code nil nil [65146 65199])
            ("speedbar-insert-button" function (:arguments ("text" "face" "mouse" "function" "token" "prevline")) nil [65201 66265])
            ("speedbar-insert-separator" function (:arguments ("text")) nil [66267 66663])
            ("speedbar-make-button" function (:arguments ("start" "end" "face" "mouse" "function" "token")) nil [66665 67619])
            ("speedbar-initial-expansion-list" function nil nil [67663 67997])
            ("speedbar-initial-menu" function nil nil [67999 68303])
            ("speedbar-initial-keymap" function nil nil [68305 68615])
            ("speedbar-initial-stealthy-functions" function nil nil [68617 68909])
            ("speedbar-add-expansion-list" function (:arguments ("new-list")) nil [68911 69070])
            ("speedbar-change-initial-expansion-list" function
               (:user-visible-flag t
                :arguments ("new-default"))
                nil [69072 69737])
            ("speedbar-fetch-replacement-function" function (:arguments ("function")) nil [69739 70063])
            ("speedbar-add-mode-functions-list" function (:arguments ("new-list")) nil [70065 70267])
            ("speedbar-maybe-add-localized-support" function (:arguments ("buffer")) nil [70314 70640])
            ("speedbar-add-localized-speedbar-support" function
               (:user-visible-flag t
                :arguments ("buffer"))
                nil [70642 72093])
            ("speedbar-remove-localized-speedbar-support" function (:arguments ("buffer")) nil [72095 72444])
            ("speedbar-file-lists" function (:arguments ("directory")) nil [72477 73765])
            ("speedbar-directory-buttons" function (:arguments ("directory" "_index")) nil [73767 76151])
            ("speedbar-make-tag-line" function (:arguments ("exp-button-type" "exp-button-char" "exp-button-function" "exp-button-data" "tag-button" "tag-button-function" "tag-button-data" "tag-button-face" "depth")) nil [76153 78765])
            ("speedbar-change-expand-button-char" function (:arguments ("char")) nil [78767 79293])
            ("speedbar-insert-files-at-point" function (:arguments ("files" "level")) nil [79323 80341])
            ("speedbar-default-directory-list" function (:arguments ("directory" "index")) nil [80343 81258])
            ("speedbar-generic-list-group-p" function (:arguments ("sublst")) nil [81653 82177])
            ("speedbar-generic-list-positioned-group-p" function (:arguments ("sublst")) nil [82179 82631])
            ("speedbar-generic-list-tag-p" function (:arguments ("sublst")) nil [82633 82939])
            ("speedbar-sort-tag-hierarchy" function (:arguments ("lst")) nil [82941 83094])
            ("speedbar-try-completion" function (:arguments ("string" "alist")) nil [83096 83373])
            ("speedbar-prefix-group-tag-hierarchy" function (:arguments ("lst")) nil [83375 88395])
            ("speedbar-trim-words-tag-hierarchy" function (:arguments ("lst")) nil [88397 89588])
            ("speedbar-simple-group-tag-hierarchy" function (:arguments ("lst")) nil [89590 90095])
            ("speedbar-create-tag-hierarchy" function (:arguments ("lst")) nil [90097 90728])
            ("speedbar-generic-list-group-expand-button-type" variable (:default-value (quote curly)) nil [90730 90926])
            ("speedbar-generic-list-tag-button-type" variable nil nil [90928 91115])
            ("speedbar-insert-generic-list" function (:arguments ("level" "lst" "expand-fun" "find-fun")) nil [91117 93161])
            ("speedbar-insert-imenu-list" function (:arguments ("indent" "lst")) nil [93163 93355])
            ("speedbar-insert-etags-list" function (:arguments ("indent" "lst")) nil [93357 93549])
            ("speedbar-update-contents" function (:user-visible-flag t) nil [93575 94213])
            ("speedbar-update-localized-contents" function nil nil [94215 95738])
            ("speedbar-update-directory-contents" function nil nil [95740 98765])
            ("speedbar-update-special-contents" function nil nil [98767 99728])
            ("speedbar-set-timer" function (:arguments ("timeout")) nil [99730 100333])
            ("speedbar-timer-fn" function nil nil [100335 102431])
            ("speedbar-stealthy-update-recurse" variable nil nil [102462 102561])
            ("speedbar-stealthy-updates" function nil nil [102563 103074])
            ("speedbar-reset-scanners" function nil nil [103076 103385])
            ("speedbar-find-selected-file" function (:arguments ("file")) nil [103387 104073])
            ("speedbar-clear-current-file" function nil nil [104075 104470])
            ("speedbar-update-current-file" function nil nil [104472 106858])
            ("speedbar-add-indicator" function (:arguments ("indicator-string" "replace-this")) nil [106860 107970])
            ("speedbar-check-read-only" function nil nil [107972 109133])
            ("speedbar-check-vc" function nil nil [109135 110857])
            ("speedbar-check-vc-this-line" function (:arguments ("depth")) nil [110859 111504])
            ("speedbar-vc-check-dir-p" function (:arguments ("directory")) nil [111506 111971])
            ("speedbar-this-file-in-vc" function (:arguments ("directory" "name")) nil [111973 112414])
            ("speedbar-check-objects" function nil nil [112439 113635])
            ("speedbar-check-obj-this-line" function (:arguments ("depth")) nil [113637 114880])
            ("speedbar-position-cursor-on-line" function nil nil [114908 115137])
            ("speedbar-click" function (:arguments ("e")) nil [115139 115555])
            ("speedbar-do-function-pointer" function nil nil [115557 116630])
            ("speedbar-line-text" function (:arguments ("p")) nil [116678 117061])
            ("speedbar-line-token" function (:arguments ("p")) nil [117063 117541])
            ("speedbar-line-file" function (:arguments ("p")) nil [117543 118049])
            ("speedbar-goto-this-file" function (:arguments ("file")) nil [118051 119296])
            ("speedbar-line-directory" function (:arguments ("depth")) nil [119298 119774])
            ("speedbar-files-line-directory" function (:arguments ("depth")) nil [119776 120891])
            ("speedbar-directory-line" function (:arguments ("directory")) nil [120893 121790])
            ("speedbar-edit-line" function (:user-visible-flag t) nil [121792 122235])
            ("speedbar-expand-line" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [122237 122678])
            ("speedbar-flush-expand-line" function (:user-visible-flag t) nil [122680 122831])
            ("speedbar-contract-line" function (:user-visible-flag t) nil [122833 123139])
            ("speedbar-toggle-line-expansion" function (:user-visible-flag t) nil [123141 123468])
            ("speedbar-expand-line-descendants" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [123470 124048])
            ("speedbar-contract-line-descendants" function (:user-visible-flag t) nil [124050 124310])
            ("speedbar-find-file" function (:arguments ("text" "_token" "indent")) nil [124312 125174])
            ("speedbar-dir-follow" function (:arguments ("text" "_token" "indent")) nil [125176 125941])
            ("speedbar-delete-subblock" function (:arguments ("indent")) nil [125943 126389])
            ("speedbar-dired" function (:arguments ("text" "token" "indent")) nil [126391 127834])
            ("speedbar-directory-buttons-follow" function (:arguments ("_text" "token" "_indent")) nil [127836 128426])
            ("speedbar-tag-file" function (:arguments ("text" "token" "indent")) nil [128428 129407])
            ("speedbar-tag-find" function (:arguments ("_text" "token" "indent")) nil [129409 130167])
            ("speedbar-tag-expand" function (:arguments ("text" "token" "indent")) nil [130169 130941])
            ("speedbar-select-frame-method" variable (:default-value (quote attached)) nil [130990 131335])
            ("speedbar-find-file-in-frame" function (:arguments ("file")) nil [131337 131959])
            ("speedbar-center-buffer-smartly" function nil nil [131986 134154])
            ("speedbar-fetch-dynamic-tags" function (:arguments ("file")) nil [134201 135300])
            ("if" code nil nil [135333 135958])
            ("speedbar-fetch-etags-parse-list" variable (:default-value (quote (("\\.\\([cChH]\\|c\\+\\+\\|cpp\\|cc\\|hh\\|java\\|cxx\\|hxx\\)\\'" . speedbar-parse-c-or-c++tag) ("^\\.emacs$\\|.\\(el\\|l\\|lsp\\)\\'" . "def[^i]+\\s-+\\(\\(\\w\\|[-_]\\)+\\)\\s-*") ("\\.tex\\'" . speedbar-parse-tex-string) ("\\.p\\'" . "\\(\\(FUNCTION\\|function\\|PROCEDURE\\|procedure\\)\\s-+\\([a-zA-Z0-9_.:]+\\)\\)\\s-*(?^?")))) nil [136025 137043])
            ("speedbar-fetch-etags-command" variable (:default-value "etags") nil [137045 137230])
            ("speedbar-fetch-etags-arguments" variable (:default-value (quote ("-D" "-I" "-o" "-"))) nil [137232 137615])
            ("speedbar-toggle-etags" function
               (:user-visible-flag t
                :arguments ("flag"))
                nil [137617 138506])
            ("speedbar-fetch-dynamic-etags" function (:arguments ("file")) nil [138508 139961])
            ("speedbar-extract-one-symbol" function (:arguments ("expr")) nil [140618 141330])
            ("speedbar-parse-c-or-c++tag" function nil nil [141332 141955])
            ("speedbar-parse-tex-string" function nil nil [141957 142310])
            ("speedbar-buffers-key-map" variable nil nil [142342 142429])
            ("if" code nil nil [142431 143156])
            ("speedbar-buffer-easymenu-definition" variable (:default-value (quote (["Jump to buffer" speedbar-edit-line t] ["Expand File Tags" speedbar-expand-line (save-excursion (beginning-of-line) (looking-at "[0-9]+: *.\\+. "))] ["Flush Cache & Expand" speedbar-flush-expand-line (save-excursion (beginning-of-line) (looking-at "[0-9]+: *.\\+. "))] ["Contract File Tags" speedbar-contract-line (save-excursion (beginning-of-line) (looking-at "[0-9]+: *.-. "))] "----" ["Kill Buffer" speedbar-buffer-kill-buffer (save-excursion (beginning-of-line) (looking-at "[0-9]+: *.[-+?]. "))] ["Revert Buffer" speedbar-buffer-revert-buffer (save-excursion (beginning-of-line) (looking-at "[0-9]+: *.[-+?]. "))]))) nil [143158 143977])
            ("speedbar-buffer-buttons" function (:arguments ("_directory" "_zero")) nil [143979 144209])
            ("speedbar-buffer-buttons-temp" function (:arguments ("_directory" "_zero")) nil [144211 144444])
            ("speedbar-buffer-buttons-engine" function (:arguments ("temp")) nil [144446 146179])
            ("speedbar-buffers-tail-notes" function (:arguments ("buffer")) nil [146181 146423])
            ("speedbar-buffers-item-info" function nil nil [146425 146937])
            ("speedbar-buffers-line-directory" function (:arguments ("_depth")) nil [146939 147536])
            ("speedbar-buffer-click" function (:arguments ("text" "token" "_indent")) nil [147538 147985])
            ("speedbar-buffer-kill-buffer" function (:user-visible-flag t) nil [147987 148301])
            ("speedbar-buffer-revert-buffer" function (:user-visible-flag t) nil [148303 148809])
            ("speedbar-highlight-one-tag-line" variable nil nil [148849 148965])
            ("speedbar-highlight-one-tag-line" function nil nil [148967 149407])
            ("speedbar-unhighlight-one-tag-line" function nil nil [149409 149779])
            ("speedbar-recenter-to-top" function nil nil [149781 149901])
            ("speedbar-recenter" function nil nil [149903 150057])
            ("speedbar-button-face" variable
               (:default-value (quote ((((class color) (background light)) :foreground "green4") (((class color) (background dark)) :foreground "green3")))
                :type "face")
                nil [150091 150313])
            ("speedbar-file-face" variable
               (:default-value (quote ((((class color) (background light)) :foreground "cyan4") (((class color) (background dark)) :foreground "cyan") (t :weight bold)))
                :type "face")
                nil [150315 150572])
            ("speedbar-directory-face" variable
               (:default-value (quote ((((class color) (background light)) :foreground "blue4") (((class color) (background dark)) :foreground "light blue")))
                :type "face")
                nil [150574 150815])
            ("speedbar-tag-face" variable
               (:default-value (quote ((((class color) (background light)) :foreground "brown") (((class color) (background dark)) :foreground "yellow")))
                :type "face")
                nil [150817 151040])
            ("speedbar-selected-face" variable
               (:default-value (quote ((((class color) (background light)) :foreground "red" :underline t) (((class color) (background dark)) :foreground "red" :underline t) (t :underline t)))
                :type "face")
                nil [151042 151333])
            ("speedbar-highlight-face" variable
               (:default-value (quote ((((class color) (background light)) :background "green") (((class color) (background dark)) :background "sea green")))
                :type "face")
                nil [151335 151595])
            ("speedbar-separator-face" variable
               (:default-value (quote ((((class color) (background light)) :background "blue" :foreground "white" :overline "gray") (((class color) (background dark)) :background "blue" :foreground "white" :overline "gray") (((class grayscale monochrome) (background light)) :background "black" :foreground "white" :overline "white") (((class grayscale monochrome) (background dark)) :background "white" :foreground "black" :overline "black")))
                :type "face")
                nil [151597 152250])
            ("add-hook" code nil nil [152273 152372])
            ("and" code nil nil [152428 152783])
            ("define-obsolete-variable-alias" code nil nil [152824 152930])
            ("define-obsolete-function-alias" code nil nil [152932 153046])
            ("define-obsolete-function-alias" code nil nil [153048 153134])
            ("define-obsolete-function-alias" code nil nil [153136 153238])
            ("define-obsolete-function-alias" code nil nil [153240 153326])
            ("define-obsolete-function-alias" code nil nil [153328 153430])
            ("speedbar" package nil nil [153432 153451])
            ("run-hooks" code nil nil [153476 153507]))          
      :file "speedbar.el.gz"
      :pointmax 153532
      :fsize 39821
      :lastmodtime '(20707 18685 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "dframe.el.gz"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("dframe-version" variable (:default-value "1.3") nil [179 264])
            ("x-pointer-hand2" variable nil nil [4878 4902])
            ("x-pointer-top-left-arrow" variable nil nil [4903 4936])
            ("defalias" code nil nil [4981 5192])
            ("dframe" customgroup (:user-visible-flag t) nil [5213 5297])
            ("dframe-have-timer-flag" variable (:default-value (if (fboundp (quote display-graphic-p)) (display-graphic-p) window-system)) nil [5299 5561])
            ("dframe-update-speed" variable (:default-value (if (featurep (quote xemacs)) 2 1)) nil [5563 5873])
            ("dframe-activity-change-focus-flag" variable nil nil [5875 6150])
            ("dframe-after-select-attached-frame-hook" variable nil nil [6152 6297])
            ("dframe-track-mouse-function" variable nil nil [6299 6469])
            ("make-variable-buffer-local" code nil nil [6470 6527])
            ("dframe-help-echo-function" variable nil nil [6529 6704])
            ("make-variable-buffer-local" code nil nil [6705 6760])
            ("dframe-mouse-click-function" variable nil nil [6762 6898])
            ("make-variable-buffer-local" code nil nil [6899 6956])
            ("dframe-mouse-position-function" variable nil nil [6958 7066])
            ("make-variable-buffer-local" code nil nil [7067 7127])
            ("dframe-power-click" variable nil nil [7129 7230])
            ("dframe-timer" variable nil nil [7232 7308])
            ("make-variable-buffer-local" code nil nil [7309 7351])
            ("dframe-attached-frame" variable nil nil [7353 7520])
            ("make-variable-buffer-local" code nil nil [7521 7572])
            ("dframe-controlled" variable nil nil [7574 7718])
            ("make-variable-buffer-local" code nil nil [7719 7766])
            ("dframe-update-keymap" function (:arguments ("map")) nil [7768 9488])
            ("dframe-live-p" function (:arguments ("frame")) nil [9490 9630])
            ("x-sensitive-text-pointer-shape" variable nil nil [9632 9671])
            ("x-pointer-shape" variable nil nil [9672 9696])
            ("dframe-frame-mode" function (:arguments ("arg" "frame-var" "cache-var" "buffer-var" "frame-name" "local-mode-fn" "parameters" "delete-hook" "popup-hook" "create-hook")) nil [9698 16017])
            ("dframe-reposition-frame" function (:arguments ("new-frame" "parent-frame" "location")) nil [16019 16376])
            ("declare-function" code nil nil [16445 16515])
            ("declare-function" code nil nil [16516 16587])
            ("dframe-reposition-frame-emacs" function (:arguments ("new-frame" "parent-frame" "location")) nil [16589 19760])
            ("dframe-reposition-frame-xemacs" function (:arguments ("_new-frame" "_parent-frame" "_location")) nil [19762 19977])
            ("dframe-needed-height" function (:arguments ("frame")) nil [20004 20369])
            ("dframe-detach" function (:arguments ("frame-var" "cache-var" "buffer-var")) nil [20371 20899])
            ("if" code nil nil [20936 21240])
            ("dframe-make-frame-visible-function" variable nil nil [21242 21388])
            ("dframe-iconify-frame-function" variable nil nil [21389 21527])
            ("dframe-delete-frame-function" variable nil nil [21528 21672])
            ("dframe-handle-make-frame-visible" function
               (:user-visible-flag t
                :arguments ("e"))
                nil [21674 22061])
            ("dframe-handle-iconify-frame" function
               (:user-visible-flag t
                :arguments ("e"))
                nil [22063 22427])
            ("dframe-handle-delete-frame" function
               (:user-visible-flag t
                :arguments ("e"))
                nil [22429 22933])
            ("dframe-get-focus" function
               (:user-visible-flag t
                :arguments ("frame-var" "activator" "hook"))
                nil [22953 23781])
            ("dframe-close-frame" function (:user-visible-flag t) nil [23784 23986])
            ("dframe-current-frame" function (:arguments ("frame-var" "desired-major-mode")) nil [23988 24570])
            ("dframe-attached-frame" function (:arguments ("frame")) nil [24572 24844])
            ("dframe-select-attached-frame" function (:arguments ("frame")) nil [24846 25306])
            ("dframe-with-attached-buffer" function (:arguments ("forms")) nil [25308 25630])
            ("dframe-maybee-jump-to-attached-frame" function nil nil [25632 25957])
            ("dframe-suppress-message-flag" variable nil nil [25960 26070])
            ("dframe-message" function (:arguments ("fmt" "args")) nil [26072 26508])
            ("dframe-y-or-n-p" function (:arguments ("prompt")) nil [26510 26937])
            ("dframe-client-functions" variable nil nil [27367 27456])
            ("dframe-set-timer" function (:arguments ("timeout" "fn" "_null-on-error")) nil [27458 28464])
            ("dframe-set-timer-internal" function (:arguments ("timeout" "_null-on-error")) nil [28466 28936])
            ("dframe-timer-fn" function nil nil [28938 29237])
            ("dframe-pass-event-to-popup-mode-menu" variable
               (:constant-flag t
                :default-value (let (max-args) (and (fboundp (quote popup-mode-menu)) (fboundp (quote function-max-args)) (setq max-args (function-max-args (quote popup-mode-menu))) (not (zerop max-args)))))
                nil [29271 29578])
            ("defalias" code nil nil [29796 31171])
            ("defalias" code nil nil [31221 31538])
            ("dframe-track-mouse" function
               (:user-visible-flag t
                :arguments ("event"))
                nil [31540 31899])
            ("dframe-track-mouse-xemacs" function (:arguments ("event")) nil [31901 32203])
            ("dframe-help-echo" function (:arguments ("_window" "buffer" "position")) nil [32205 32697])
            ("dframe-mouse-set-point" function (:arguments ("e")) nil [32699 33360])
            ("dframe-quick-mouse" function
               (:user-visible-flag t
                :arguments ("e"))
                nil [33362 33645])
            ("dframe-power-click" function
               (:user-visible-flag t
                :arguments ("e"))
                nil [33647 33983])
            ("dframe-click" function
               (:user-visible-flag t
                :arguments ("e"))
                nil [33985 34313])
            ("dframe-double-click" function
               (:user-visible-flag t
                :arguments ("e"))
                nil [34315 34790])
            ("dframe-temp-buffer-show-function" function (:arguments ("buffer")) nil [34968 35708])
            ("dframe-hack-buffer-menu" function
               (:user-visible-flag t
                :arguments ("_e"))
                nil [35710 36478])
            ("dframe-switch-buffer-attached-frame" function
               (:user-visible-flag t
                :arguments ("buffer"))
                nil [36480 36912])
            ("dframe-mouse-hscroll" function
               (:user-visible-flag t
                :arguments ("e"))
                nil [37059 37680])
            ("dframe" package nil nil [37682 37699]))          
      :file "dframe.el.gz"
      :pointmax 37725
      :fsize 11257
      :lastmodtime '(20707 18685 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "sb-image.el.gz"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("ezimage" include nil nil [1343 1361])
            ("speedbar-use-images" variable (:default-value ezimage-use-images) nil [1373 1523])
            ("defalias" code nil nil [1525 1566])
            ("speedbar-expand-image-button-alist" variable (:default-value (quote (("<+>" . ezimage-directory-plus) ("<->" . ezimage-directory-minus) ("< >" . ezimage-directory) ("[+]" . ezimage-page-plus) ("[-]" . ezimage-page-minus) ("[?]" . ezimage-page) ("[ ]" . ezimage-page) ("{+}" . ezimage-box-plus) ("{-}" . ezimage-box-minus) ("<M>" . ezimage-mail) ("<d>" . ezimage-document-tag) ("<i>" . ezimage-info-tag) (" =>" . ezimage-tag) (" +>" . ezimage-tag-gt) (" ->" . ezimage-tag-v) (">" . ezimage-tag) ("@" . ezimage-tag-type) ("  @" . ezimage-tag-type) ("*" . ezimage-checkout) ("#" . ezimage-object) ("!" . ezimage-object-out-of-date) ("//" . ezimage-label) ("%" . ezimage-lock)))) nil [1568 2367])
            ("speedbar-insert-image-button-maybe" function (:arguments ("start" "length")) nil [2369 2779])
            ("speedbar-image-dump" function (:user-visible-flag t) nil [2781 3579])
            ("sb-image" package nil nil [3581 3600]))          
      :file "sb-image.el.gz"
      :pointmax 3628
      :fsize 1568
      :lastmodtime '(20707 18685 0 0)
      :unmatched-syntax nil))
  :file "!usr!share!emacs!24.3!lisp!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2")

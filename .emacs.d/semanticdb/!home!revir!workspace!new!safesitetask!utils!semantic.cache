;; Object utils/
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "utils/"
  :tables (list 
   (semanticdb-table "config.h"
    :major-mode 'c-mode
    :tags nil
    :file "config.h"
    :pointmax 3375
    :fsize 4053
    :lastmodtime '(20886 1839 636945 745000)
    :unmatched-syntax 'nil
    )
   (semanticdb-table "cutil.h"
    :major-mode 'c-mode
    :tags 
        '( ("__CUTIL_H" variable (:constant-flag t) nil [1180 1189])
            ("config.h" include nil nil [1204 1223])
            ("cutil_init" function
               (:typemodifiers ("extern" "\"C\"")
                :type "void"
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [1277 1295])
            ("cutil_exit" function
               (:typemodifiers ("extern" "\"C\"")
                :type "void"
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [1296 1314])
            ("stdio.h" include
               (:typemodifiers ("extern" "\"C\"")
                :system-flag t)
                (reparse-symbol extern-c-contents) [1549 1567])
            ("stdlib.h" include
               (:typemodifiers ("extern" "\"C\"")
                :system-flag t)
                (reparse-symbol extern-c-contents) [1568 1587])
            ("assert.h" include
               (:typemodifiers ("extern" "\"C\"")
                :system-flag t)
                (reparse-symbol extern-c-contents) [1588 1607])
            ("windows.h" include
               (:typemodifiers ("extern" "\"C\"")
                :system-flag t)
                (reparse-symbol extern-c-contents) [1663 1683])
            ("Shlwapi.h" include
               (:typemodifiers ("extern" "\"C\"")
                :system-flag t)
                (reparse-symbol extern-c-contents) [1684 1704])
            ("limits.h" include
               (:typemodifiers ("extern" "\"C\"")
                :system-flag t)
                (reparse-symbol extern-c-contents) [1950 1969])
            ("byte" type
               (:typemodifiers ("extern" "\"C\"")
                :type "typedef"
                :superclasses "unsigned char"
                :typedef ("unsigned char"))
                (reparse-symbol extern-c-contents) [2027 2056])
            ("ushort" type
               (:typemodifiers ("extern" "\"C\"")
                :type "typedef"
                :superclasses "unsigned short"
                :typedef ("unsigned short"))
                (reparse-symbol extern-c-contents) [2057 2088])
            ("uint" type
               (:typemodifiers ("extern" "\"C\"")
                :type "typedef"
                :superclasses "unsigned int"
                :typedef ("unsigned int"))
                (reparse-symbol extern-c-contents) [2089 2118])
            ("ulong" type
               (:typemodifiers ("extern" "\"C\"")
                :type "typedef"
                :superclasses "unsigned long"
                :typedef ("unsigned long"))
                (reparse-symbol extern-c-contents) [2119 2149])
            ("stdint.h" include
               (:typemodifiers ("extern" "\"C\"")
                :system-flag t)
                (reparse-symbol extern-c-contents) [2691 2710])
            ("INT64_C" variable
               (:typemodifiers ("extern" "\"C\"")
                :constant-flag t)
                (reparse-symbol extern-c-contents) [2760 2767])
            ("UINT64_C" variable
               (:typemodifiers ("extern" "\"C\"")
                :constant-flag t)
                (reparse-symbol extern-c-contents) [2809 2817])
            ("INT64_MAX" variable
               (:typemodifiers ("extern" "\"C\"")
                :constant-flag t)
                (reparse-symbol extern-c-contents) [2862 2871])
            ("INT64_MIN" variable
               (:typemodifiers ("extern" "\"C\"")
                :constant-flag t)
                (reparse-symbol extern-c-contents) [2908 2917])
            ("UINT64_MAX" variable
               (:typemodifiers ("extern" "\"C\"")
                :constant-flag t)
                (reparse-symbol extern-c-contents) [2980 2990])
            ("SIZE_T_MAX" variable
               (:typemodifiers ("extern" "\"C\"")
                :constant-flag t)
                (reparse-symbol extern-c-contents) [3069 3079])
            ("INFINITE" variable
               (:typemodifiers ("extern" "\"C\"")
                :constant-flag t)
                (reparse-symbol extern-c-contents) [3122 3130])
            ("TRUE" variable
               (:typemodifiers ("extern" "\"C\"")
                :constant-flag t)
                (reparse-symbol extern-c-contents) [3172 3176])
            ("FALSE" variable
               (:typemodifiers ("extern" "\"C\"")
                :constant-flag t)
                (reparse-symbol extern-c-contents) [3209 3214])
            ("TYPE_MAXIMUM" variable
               (:typemodifiers ("extern" "\"C\"")
                :constant-flag t)
                (reparse-symbol extern-c-contents) [3256 3268])
            ("deps/min-max.h" include (:typemodifiers ("extern" "\"C\"")) (reparse-symbol extern-c-contents) [4864 4889])
            ("countof" variable
               (:typemodifiers ("extern" "\"C\"")
                :constant-flag t)
                (reparse-symbol extern-c-contents) [4930 4937])
            ("upper_32_bits" variable
               (:typemodifiers ("extern" "\"C\"")
                :constant-flag t)
                (reparse-symbol extern-c-contents) [4999 5012])
            ("lower_32_bits" variable
               (:typemodifiers ("extern" "\"C\"")
                :constant-flag t)
                (reparse-symbol extern-c-contents) [5056 5069])
            ("ISDIGIT" variable
               (:typemodifiers ("extern" "\"C\"")
                :constant-flag t)
                (reparse-symbol extern-c-contents) [5109 5116])
            ("ISXDIGIT" variable
               (:typemodifiers ("extern" "\"C\"")
                :constant-flag t)
                (reparse-symbol extern-c-contents) [5151 5159])
            ("XDIGIT_TO_NUM" variable
               (:typemodifiers ("extern" "\"C\"")
                :constant-flag t)
                (reparse-symbol extern-c-contents) [5290 5303])
            ("X2DIGITS_TO_NUM" variable
               (:typemodifiers ("extern" "\"C\"")
                :constant-flag t)
                (reparse-symbol extern-c-contents) [5364 5379])
            ("XNUM_TO_DIGIT" variable
               (:typemodifiers ("extern" "\"C\"")
                :constant-flag t)
                (reparse-symbol extern-c-contents) [5487 5500])
            ("XNUM_TO_digit" variable
               (:typemodifiers ("extern" "\"C\"")
                :constant-flag t)
                (reparse-symbol extern-c-contents) [5540 5553])
            ("xmalloc" variable
               (:typemodifiers ("extern" "\"C\"")
                :constant-flag t)
                (reparse-symbol extern-c-contents) [6775 6782])
            ("xrealloc" variable
               (:typemodifiers ("extern" "\"C\"")
                :constant-flag t)
                (reparse-symbol extern-c-contents) [6798 6806])
            ("xcalloc" variable
               (:typemodifiers ("extern" "\"C\"")
                :constant-flag t)
                (reparse-symbol extern-c-contents) [6823 6830])
            ("xstrdup" variable
               (:typemodifiers ("extern" "\"C\"")
                :constant-flag t)
                (reparse-symbol extern-c-contents) [6846 6853])
            ("xstrndup" variable
               (:typemodifiers ("extern" "\"C\"")
                :constant-flag t)
                (reparse-symbol extern-c-contents) [6869 6877])
            ("xfree" variable
               (:typemodifiers ("extern" "\"C\"")
                :constant-flag t)
                (reparse-symbol extern-c-contents) [6894 6899])
            ("xfree_null" variable
               (:typemodifiers ("extern" "\"C\"")
                :constant-flag t)
                (reparse-symbol extern-c-contents) [6921 6931])
            ("XMALLOC" variable
               (:typemodifiers ("extern" "\"C\"")
                :constant-flag t)
                (reparse-symbol extern-c-contents) [6991 6998])
            ("XCALLOC" variable
               (:typemodifiers ("extern" "\"C\"")
                :constant-flag t)
                (reparse-symbol extern-c-contents) [7046 7053])
            ("XALLOCA" variable
               (:typemodifiers ("extern" "\"C\"")
                :constant-flag t)
                (reparse-symbol extern-c-contents) [7104 7111])
            ("XNMALLOC" variable
               (:typemodifiers ("extern" "\"C\"")
                :constant-flag t)
                (reparse-symbol extern-c-contents) [7158 7166])
            ("XNCALLOC" variable
               (:typemodifiers ("extern" "\"C\"")
                :constant-flag t)
                (reparse-symbol extern-c-contents) [7223 7231])
            ("XNALLOCA" variable
               (:typemodifiers ("extern" "\"C\"")
                :constant-flag t)
                (reparse-symbol extern-c-contents) [7287 7295])
            ("zero_var" variable
               (:typemodifiers ("extern" "\"C\"")
                :constant-flag t)
                (reparse-symbol extern-c-contents) [7364 7372])
            ("zero_array" variable
               (:typemodifiers ("extern" "\"C\"")
                :constant-flag t)
                (reparse-symbol extern-c-contents) [7415 7425])
            ("zero_mem" variable
               (:typemodifiers ("extern" "\"C\"")
                :constant-flag t)
                (reparse-symbol extern-c-contents) [7467 7475])
            ("ctype.h" include
               (:typemodifiers ("extern" "\"C\"")
                :system-flag t)
                (reparse-symbol extern-c-contents) [7727 7745])
            ("string.h" include
               (:typemodifiers ("extern" "\"C\"")
                :system-flag t)
                (reparse-symbol extern-c-contents) [7746 7765])
            ("xisascii" variable
               (:typemodifiers ("extern" "\"C\"")
                :constant-flag t)
                (reparse-symbol extern-c-contents) [7797 7805])
            ("xisalpha" variable
               (:typemodifiers ("extern" "\"C\"")
                :constant-flag t)
                (reparse-symbol extern-c-contents) [7834 7842])
            ("xisalnum" variable
               (:typemodifiers ("extern" "\"C\"")
                :constant-flag t)
                (reparse-symbol extern-c-contents) [7871 7879])
            ("xiscntrl" variable
               (:typemodifiers ("extern" "\"C\"")
                :constant-flag t)
                (reparse-symbol extern-c-contents) [7908 7916])
            ("xisdigit" variable
               (:typemodifiers ("extern" "\"C\"")
                :constant-flag t)
                (reparse-symbol extern-c-contents) [7945 7953])
            ("xisgraph" variable
               (:typemodifiers ("extern" "\"C\"")
                :constant-flag t)
                (reparse-symbol extern-c-contents) [7982 7990])
            ("xislower" variable
               (:typemodifiers ("extern" "\"C\"")
                :constant-flag t)
                (reparse-symbol extern-c-contents) [8019 8027])
            ("xisprint" variable
               (:typemodifiers ("extern" "\"C\"")
                :constant-flag t)
                (reparse-symbol extern-c-contents) [8056 8064])
            ("xispunct" variable
               (:typemodifiers ("extern" "\"C\"")
                :constant-flag t)
                (reparse-symbol extern-c-contents) [8093 8101])
            ("xisspace" variable
               (:typemodifiers ("extern" "\"C\"")
                :constant-flag t)
                (reparse-symbol extern-c-contents) [8130 8138])
            ("xisupper" variable
               (:typemodifiers ("extern" "\"C\"")
                :constant-flag t)
                (reparse-symbol extern-c-contents) [8167 8175])
            ("xisxdigit" variable
               (:typemodifiers ("extern" "\"C\"")
                :constant-flag t)
                (reparse-symbol extern-c-contents) [8204 8213])
            ("STREQ" variable
               (:typemodifiers ("extern" "\"C\"")
                :constant-flag t)
                (reparse-symbol extern-c-contents) [8244 8249])
            ("STRIEQ" variable
               (:typemodifiers ("extern" "\"C\"")
                :constant-flag t)
                (reparse-symbol extern-c-contents) [8327 8333])
            ("STRNIEQ" variable
               (:typemodifiers ("extern" "\"C\"")
                :constant-flag t)
                (reparse-symbol extern-c-contents) [8433 8440])
            ("lowercase_str" function
               (:typemodifiers ("extern" "\"C\"")
                :type "int"
                :arguments 
                  ( ("str" variable
                       (:pointer 1
                        :type "char")
                        (reparse-symbol arg-sub-list) [8574 8584]))                  
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [8555 8585])
            ("uppercase_str" function
               (:typemodifiers ("extern" "\"C\"")
                :type "int"
                :arguments 
                  ( ("str" variable
                       (:pointer 1
                        :type "char")
                        (reparse-symbol arg-sub-list) [8650 8660]))                  
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [8631 8661])
            ("strdup_lower" function
               (:typemodifiers ("extern" "\"C\"")
                :type "char"
                :arguments 
                  ( ("s" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [8728 8742]))                  
                :pointer 1
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [8708 8743])
            ("strdup_upper" function
               (:typemodifiers ("extern" "\"C\"")
                :type "char"
                :arguments 
                  ( ("s" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [8795 8809]))                  
                :pointer 1
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [8775 8810])
            ("strdup_null" variable
               (:typemodifiers ("extern" "\"C\"")
                :constant-flag t)
                (reparse-symbol extern-c-contents) [8851 8862])
            ("substrdup" function
               (:typemodifiers ("extern" "\"C\"")
                :type "char"
                :arguments 
                  ( ("beg" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [8934 8950])
                    ("end" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [8951 8967]))                  
                :pointer 1
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [8917 8968])
            ("aprintf" function
               (:typemodifiers ("extern" "\"C\"")
                :type "char"
                :arguments 
                  ( ("fmt" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [9036 9052])
                    ("..." variable (:type "vararg") (reparse-symbol arg-sub-list) [9053 9057]))                  
                :pointer 1
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [9021 9058])
            ("strndup" function
               (:typemodifiers ("extern" "\"C\"")
                :type "char"
                :arguments 
                  ( ("s" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [9208 9222])
                    ("n" variable (:type ("size_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [9223 9232]))                  
                :pointer 1
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [9194 9233])
            ("strsep" function
               (:typemodifiers ("extern" "\"C\"")
                :type "char"
                :arguments 
                  ( ("stringp" variable
                       (:pointer 2
                        :type "char")
                        (reparse-symbol arg-sub-list) [9292 9307])
                    ("delim" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [9308 9326]))                  
                :pointer 1
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [9279 9327])
            ("strcasecmp" function
               (:typemodifiers ("extern" "\"C\"")
                :type "int"
                :arguments 
                  ( ("s1" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [9494 9509])
                    ("s2" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [9510 9525]))                  
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [9478 9526])
            ("strncasecmp" function
               (:typemodifiers ("extern" "\"C\"")
                :type "int"
                :arguments 
                  ( ("s1" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [9571 9586])
                    ("s2" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [9587 9602])
                    ("n" variable (:type ("size_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [9603 9612]))                  
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [9554 9613])
            ("strnstr" function
               (:typemodifiers ("extern" "\"C\"")
                :type "char"
                :arguments 
                  ( ("s" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [9670 9684])
                    ("find" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [9685 9702])
                    ("slen" variable (:type ("size_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [9703 9715]))                  
                :pointer 1
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [9656 9716])
            ("strcasestr" function
               (:typemodifiers ("extern" "\"C\"")
                :type "char"
                :arguments 
                  ( ("s" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [9766 9780])
                    ("find" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [9781 9798]))                  
                :pointer 1
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [9749 9799])
            ("memrchr" function
               (:typemodifiers ("extern" "\"C\"")
                :type "void"
                :arguments 
                  ( ("s" variable
                       (:pointer 1
                        :constant-flag t
                        :type "void")
                        (reparse-symbol arg-sub-list) [9850 9864])
                    ("c" variable (:type "int") (reparse-symbol arg-sub-list) [9865 9871])
                    ("n" variable (:type ("size_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [9872 9881]))                  
                :pointer 1
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [9836 9882])
            ("strncasestr" function
               (:typemodifiers ("extern" "\"C\"")
                :type "char"
                :arguments 
                  ( ("s" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [9966 9980])
                    ("find" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [9981 9998])
                    ("slen" variable (:type ("size_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [9999 10011]))                  
                :pointer 1
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [9948 10012])
            ("hash_pjw" function
               (:typemodifiers ("extern" "\"C\"")
                :type ("size_t" type (:type "class") nil nil)
                :arguments 
                  ( ("s" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [10068 10082])
                    ("tablesize" variable (:type ("size_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [10083 10100]))                  
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [10051 10101])
            ("BOUNDED_TO_ALLOCA" variable
               (:typemodifiers ("extern" "\"C\"")
                :constant-flag t)
                (reparse-symbol extern-c-contents) [10156 10173])
            ("PATH_SEP_CHAR" variable
               (:typemodifiers ("extern" "\"C\"")
                :constant-flag t)
                (reparse-symbol extern-c-contents) [11007 11020])
            ("PATH_SEP_WCHAR" variable
               (:typemodifiers ("extern" "\"C\"")
                :constant-flag t)
                (reparse-symbol extern-c-contents) [11034 11048])
            ("PATH_SEP_STR" variable
               (:typemodifiers ("extern" "\"C\"")
                :constant-flag t)
                (reparse-symbol extern-c-contents) [11063 11075])
            ("PATH_SEP_WSTR" variable
               (:typemodifiers ("extern" "\"C\"")
                :constant-flag t)
                (reparse-symbol extern-c-contents) [11089 11102])
            ("LINE_END_STR" variable
               (:typemodifiers ("extern" "\"C\"")
                :constant-flag t)
                (reparse-symbol extern-c-contents) [11117 11129])
            ("MIN_PATH" variable
               (:typemodifiers ("extern" "\"C\"")
                :constant-flag t)
                (reparse-symbol extern-c-contents) [11144 11152])
            ("seek_off_t" variable
               (:typemodifiers ("extern" "\"C\"")
                :constant-flag t)
                (reparse-symbol extern-c-contents) [11468 11478])
            ("is_absolute_path" function
               (:typemodifiers ("extern" "\"C\"")
                :type "int"
                :arguments 
                  ( ("path" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [11571 11588]))                  
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [11548 11589])
            ("is_root_path" function
               (:typemodifiers ("extern" "\"C\"")
                :type "int"
                :arguments 
                  ( ("path" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [11643 11660]))                  
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [11624 11661])
            ("path_find_file_name" function
               (:typemodifiers ("extern" "\"C\"")
                :type "char"
                :arguments 
                  ( ("path" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [11739 11756]))                  
                :constant-flag t
                :pointer 1
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [11707 11757])
            ("path_find_extension" function
               (:typemodifiers ("extern" "\"C\"")
                :type "char"
                :arguments 
                  ( ("path" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [11830 11847]))                  
                :constant-flag t
                :pointer 1
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [11798 11848])
            ("path_find_directory" function
               (:typemodifiers ("extern" "\"C\"")
                :type "int"
                :arguments 
                  ( ("path" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [11907 11924])
                    ("buf" variable
                       (:pointer 1
                        :type "char")
                        (reparse-symbol arg-sub-list) [11925 11935])
                    ("len" variable (:type ("size_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [11936 11947]))                  
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [11881 11948])
            ("path_file_exists" function
               (:typemodifiers ("extern" "\"C\"")
                :type "int"
                :arguments 
                  ( ("path" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [12014 12031]))                  
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [11991 12032])
            ("path_is_directory" function
               (:typemodifiers ("extern" "\"C\"")
                :type "int"
                :arguments 
                  ( ("path" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [12086 12103]))                  
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [12062 12104])
            ("path_is_file" function
               (:typemodifiers ("extern" "\"C\"")
                :type "int"
                :arguments 
                  ( ("path" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [12148 12165]))                  
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [12129 12166])
            ("relative_path" function
               (:typemodifiers ("extern" "\"C\"")
                :type "int"
                :arguments 
                  ( ("src" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [12214 12230])
                    ("dst" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [12231 12247])
                    ("sep" variable (:type "char") (reparse-symbol arg-sub-list) [12248 12257])
                    ("buf" variable
                       (:pointer 1
                        :type "char")
                        (reparse-symbol arg-sub-list) [12266 12276])
                    ("slen" variable (:type ("size_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [12277 12289]))                  
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [12194 12290])
            ("unique_file" function
               (:typemodifiers ("extern" "\"C\"")
                :type "int"
                :arguments 
                  ( ("path" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [12368 12385])
                    ("buf" variable
                       (:pointer 1
                        :type "char")
                        (reparse-symbol arg-sub-list) [12386 12396])
                    ("len" variable (:type ("size_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [12397 12408]))                  
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [12350 12409])
            ("unique_dir" function
               (:typemodifiers ("extern" "\"C\"")
                :type "int"
                :arguments 
                  ( ("path" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [12449 12466])
                    ("buf" variable
                       (:pointer 1
                        :type "char")
                        (reparse-symbol arg-sub-list) [12467 12477])
                    ("len" variable (:type ("size_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [12478 12489]))                  
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [12432 12490])
            ("path_char_illegal" function
               (:typemodifiers ("extern" "\"C\"")
                :type "int"
                :arguments 
                  ( ("ch" variable (:type "char") (reparse-symbol arg-sub-list) [12538 12546]))                  
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [12514 12547])
            ("path_char_escape" function
               (:typemodifiers ("extern" "\"C\"")
                :type "char"
                :arguments 
                  ( ("path" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [12608 12625]))                  
                :pointer 1
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [12584 12626])
            ("path_char_blankspace" function
               (:typemodifiers ("extern" "\"C\"")
                :type "void"
                :arguments 
                  ( ("path" variable
                       (:pointer 1
                        :type "char")
                        (reparse-symbol arg-sub-list) [12694 12705]))                  
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [12667 12706])
            ("create_directory" function
               (:typemodifiers ("extern" "\"C\"")
                :type "int"
                :arguments 
                  ( ("dir" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [12773 12789]))                  
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [12750 12790])
            ("create_directories" function
               (:typemodifiers ("extern" "\"C\"")
                :type "int"
                :arguments 
                  ( ("dir" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [12851 12867]))                  
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [12826 12868])
            ("delete_directory" function
               (:typemodifiers ("extern" "\"C\"")
                :type "int"
                :arguments 
                  ( ("dir" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [12915 12931]))                  
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [12892 12932])
            ("delete_dir_cb" variable
               (:typemodifiers ("extern" "\"C\"")
                :type "int"
                :functionpointer-flag t)
                (reparse-symbol extern-c-contents) [12970 13042])
            ("delete_directories" function
               (:typemodifiers ("extern" "\"C\"")
                :type "int"
                :arguments 
                  ( ("dir" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [13106 13122])
                    ("func" variable (:type ("delete_dir_cb" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [13123 13142])
                    ("arg" variable
                       (:pointer 1
                        :type "void")
                        (reparse-symbol arg-sub-list) [13143 13153]))                  
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [13081 13154])
            ("delete_empty_directories" function
               (:typemodifiers ("extern" "\"C\"")
                :type "int"
                :arguments 
                  ( ("dir" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [13208 13224]))                  
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [13177 13225])
            ("copy_dir_cb" variable
               (:typemodifiers ("extern" "\"C\"")
                :type "int"
                :functionpointer-flag t)
                (reparse-symbol extern-c-contents) [13278 13413])
            ("copy_directories" function
               (:typemodifiers ("extern" "\"C\"")
                :type "int"
                :arguments 
                  ( ("srcdir" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [13481 13500])
                    ("dstdir" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [13501 13520])
                    ("func" variable (:type ("copy_dir_cb" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [13577 13594])
                    ("arg" variable
                       (:pointer 1
                        :type "void")
                        (reparse-symbol arg-sub-list) [13595 13605]))                  
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [13458 13606])
            ("trav_dir_context" type
               (:typemodifiers ("extern" "\"C\"")
                :type "struct"
                :members 
                  ( ("basedir" variable
                       (:dereference 1
                        :type "char")
                        (reparse-symbol classsubparts) [13645 13670])
                    ("dir" variable
                       (:pointer 1
                        :type ("DIR" type (:type "class") nil nil))
                        (reparse-symbol classsubparts) [13819 13831])
                    ("pentry" variable
                       (:pointer 1
                        :type ("dirent" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol classsubparts) [13833 13856]))                  )
                (reparse-symbol extern-c-contents) [13619 13866])
            ("trav_dir_begin" function
               (:typemodifiers ("extern" "\"C\"")
                :type "int"
                :arguments 
                  ( ("dir" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [13889 13905])
                    ("ctx" variable
                       (:pointer 1
                        :type ("trav_dir_context" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [13906 13935]))                  
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [13868 13936])
            ("trav_dir_next" function
               (:typemodifiers ("extern" "\"C\"")
                :type "int"
                :arguments 
                  ( ("ctx" variable
                       (:pointer 1
                        :type ("trav_dir_context" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [13970 13999]))                  
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [13950 14000])
            ("trav_dir_end" function
               (:typemodifiers ("extern" "\"C\"")
                :type "int"
                :arguments 
                  ( ("ctx" variable
                       (:pointer 1
                        :type ("trav_dir_context" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [14037 14066]))                  
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [14018 14067])
            ("trav_entry_name" function
               (:typemodifiers ("extern" "\"C\"")
                :type "char"
                :arguments 
                  ( ("ctx" variable
                       (:pointer 1
                        :type ("trav_dir_context" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [14116 14145]))                  
                :constant-flag t
                :pointer 1
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [14087 14146])
            ("trav_entry_path" function
               (:typemodifiers ("extern" "\"C\"")
                :type "int"
                :arguments 
                  ( ("ctx" variable
                       (:pointer 1
                        :type ("trav_dir_context" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [14188 14217])
                    ("buf" variable
                       (:pointer 1
                        :type "char")
                        (reparse-symbol arg-sub-list) [14218 14228])
                    ("len" variable (:type ("size_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [14229 14240]))                  
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [14166 14241])
            ("trav_entry_is_dot" function
               (:typemodifiers ("extern" "\"C\"")
                :type "int"
                :arguments 
                  ( ("ctx" variable
                       (:pointer 1
                        :type ("trav_dir_context" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [14279 14308]))                  
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [14255 14309])
            ("trav_entry_is_dotdot" function
               (:typemodifiers ("extern" "\"C\"")
                :type "int"
                :arguments 
                  ( ("ctx" variable
                       (:pointer 1
                        :type ("trav_dir_context" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [14359 14388]))                  
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [14332 14389])
            ("trav_entry_is_dir" function
               (:typemodifiers ("extern" "\"C\"")
                :type "int"
                :arguments 
                  ( ("ctx" variable
                       (:pointer 1
                        :type ("trav_dir_context" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [14437 14466]))                  
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [14413 14467])
            ("trav_entry_is_file" function
               (:typemodifiers ("extern" "\"C\"")
                :type "int"
                :arguments 
                  ( ("ctx" variable
                       (:pointer 1
                        :type ("trav_dir_context" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [14512 14541]))                  
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [14487 14542])
            ("trav_entry_is_regular" function
               (:typemodifiers ("extern" "\"C\"")
                :type "int"
                :arguments 
                  ( ("ctx" variable
                       (:pointer 1
                        :type ("trav_dir_context" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [14590 14619]))                  
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [14562 14620])
            ("foreach_file_func_t" variable
               (:typemodifiers ("extern" "\"C\"")
                :type "int"
                :functionpointer-flag t)
                (reparse-symbol extern-c-contents) [14651 14708])
            ("foreach_dir_func_t" type
               (:typemodifiers ("extern" "\"C\"")
                :type "typedef"
                :superclasses "foreach_file_func_t"
                :typedef ("foreach_file_func_t" type (:type "class") nil nil))
                (reparse-symbol extern-c-contents) [14725 14773])
            ("foreach_file" function
               (:typemodifiers ("extern" "\"C\"")
                :type "int"
                :arguments 
                  ( ("dir" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [14815 14831])
                    ("func" variable (:type ("foreach_file_func_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [14832 14857])
                    ("recursively" variable (:type "int") (reparse-symbol arg-sub-list) [14888 14904])
                    ("regular_only" variable (:type "int") (reparse-symbol arg-sub-list) [14905 14922])
                    ("arg" variable
                       (:pointer 1
                        :type "void")
                        (reparse-symbol arg-sub-list) [14923 14933]))                  
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [14796 14934])
            ("foreach_dir" function
               (:typemodifiers ("extern" "\"C\"")
                :type "int"
                :arguments 
                  ( ("dir" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [14953 14969])
                    ("func" variable (:type ("foreach_dir_func_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [14970 14994])
                    ("arg" variable
                       (:pointer 1
                        :type "void")
                        (reparse-symbol arg-sub-list) [14995 15005]))                  
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [14935 15006])
            ("is_empty_dir" function
               (:typemodifiers ("extern" "\"C\"")
                :type "int"
                :arguments 
                  ( ("dir" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [15053 15069]))                  
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [15034 15070])
            ("copy_file" function
               (:typemodifiers ("extern" "\"C\"")
                :type "int"
                :arguments 
                  ( ("exists" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [15126 15145])
                    ("newfile" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [15146 15166])
                    ("overwritten" variable (:type "int") (reparse-symbol arg-sub-list) [15167 15183]))                  
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [15110 15184])
            ("move_file" function
               (:typemodifiers ("extern" "\"C\"")
                :type "int"
                :arguments 
                  ( ("exists" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [15212 15231])
                    ("newfile" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [15232 15252])
                    ("overwritten" variable (:type "int") (reparse-symbol arg-sub-list) [15253 15269]))                  
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [15196 15270])
            ("delete_file" function
               (:typemodifiers ("extern" "\"C\"")
                :type "int"
                :arguments 
                  ( ("path" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [15301 15318]))                  
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [15283 15319])
            ("delete_file_empty_updir" function
               (:typemodifiers ("extern" "\"C\"")
                :type "int"
                :arguments 
                  ( ("path" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [15371 15388])
                    ("top_dir" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [15389 15409]))                  
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [15341 15410])
            ("file_size" function
               (:typemodifiers ("extern" "\"C\"")
                :type ("int64_t" type (:type "class") nil nil)
                :arguments 
                  ( ("path" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [15457 15474]))                  
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [15438 15475])
            ("get_file_disk_usage" function
               (:typemodifiers ("extern" "\"C\"")
                :type ("int64_t" type (:type "class") nil nil)
                :arguments 
                  ( ("absolute_path" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [15540 15566]))                  
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [15511 15567])
            ("file_size_readable" function
               (:typemodifiers ("extern" "\"C\"")
                :type "void"
                :arguments 
                  ( ("size" variable (:type ("int64_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [15624 15637])
                    ("outbuf" variable
                       (:pointer 1
                        :type "char")
                        (reparse-symbol arg-sub-list) [15638 15651])
                    ("outlen" variable (:type "int") (reparse-symbol arg-sub-list) [15652 15663]))                  
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [15599 15664])
            ("xfopen" function
               (:typemodifiers ("extern" "\"C\"")
                :type ("FILE" type (:type "class") nil nil)
                :arguments 
                  ( ("file" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [15720 15737])
                    ("mode" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [15738 15755]))                  
                :pointer 1
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [15706 15756])
            ("xfclose" function
               (:typemodifiers ("extern" "\"C\"")
                :type "void"
                :arguments 
                  ( ("fp" variable
                       (:pointer 1
                        :type ("FILE" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [15789 15798]))                  
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [15775 15799])
            ("file_mem" type
               (:typemodifiers ("extern" "\"C\"")
                :type "struct"
                :members 
                  ( ("content" variable
                       (:pointer 1
                        :type "char")
                        (reparse-symbol classsubparts) [15856 15870])
                    ("length" variable (:type ("size_t" type (:type "class") nil nil)) (reparse-symbol classsubparts) [15898 15912]))                  )
                (reparse-symbol extern-c-contents) [15838 15942])
            ("read_file_mem" function
               (:typemodifiers ("extern" "\"C\"")
                :type ("file_mem" type
                     (:prototype t
                      :type "struct")
                      nil nil)
                :arguments 
                  ( ("file" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [15988 16005]))                  
                :pointer 1
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [15957 16006])
            ("free_file_mem" function
               (:typemodifiers ("extern" "\"C\"")
                :type "void"
                :arguments 
                  ( ("fm" variable
                       (:pointer 1
                        :type ("file_mem" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [16052 16072]))                  
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [16033 16073])
            ("write_mem_file" function
               (:typemodifiers ("extern" "\"C\"")
                :type "int"
                :arguments 
                  ( ("file" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [16136 16153])
                    ("data" variable
                       (:pointer 1
                        :constant-flag t
                        :type "void")
                        (reparse-symbol arg-sub-list) [16154 16171])
                    ("len" variable (:type ("size_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [16172 16183]))                  
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [16116 16184])
            ("write_mem_file_safe" function
               (:typemodifiers ("extern" "\"C\"")
                :type "int"
                :arguments 
                  ( ("file" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [16231 16248])
                    ("data" variable
                       (:pointer 1
                        :constant-flag t
                        :type "void")
                        (reparse-symbol arg-sub-list) [16249 16266])
                    ("len" variable (:type ("size_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [16267 16278]))                  
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [16206 16279])
            ("touch" variable
               (:typemodifiers ("extern" "\"C\"")
                :constant-flag t)
                (reparse-symbol extern-c-contents) [16315 16320])
            ("get_delim" function
               (:typemodifiers ("extern" "\"C\"")
                :type ("size_t" type (:type "class") nil nil)
                :arguments 
                  ( ("lineptr" variable
                       (:pointer 2
                        :type "char")
                        (reparse-symbol arg-sub-list) [16373 16388])
                    ("n" variable
                       (:pointer 1
                        :type ("size_t" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [16389 16399])
                    ("delim" variable (:type "int") (reparse-symbol arg-sub-list) [16400 16410])
                    ("fp" variable
                       (:pointer 1
                        :type ("FILE" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [16411 16420]))                  
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [16356 16421])
            ("get_line" function
               (:typemodifiers ("extern" "\"C\"")
                :type ("size_t" type (:type "class") nil nil)
                :arguments 
                  ( ("lineptr" variable
                       (:pointer 2
                        :type "char")
                        (reparse-symbol arg-sub-list) [16471 16486])
                    ("n" variable
                       (:pointer 1
                        :type ("size_t" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [16487 16497])
                    ("fp" variable
                       (:pointer 1
                        :type ("FILE" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [16498 16507]))                  
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [16454 16508])
            ("foreach_block_cb" variable
               (:typemodifiers ("extern" "\"C\"")
                :type "int"
                :functionpointer-flag t)
                (reparse-symbol extern-c-contents) [16540 16614])
            ("foreach_line_cb" variable
               (:typemodifiers ("extern" "\"C\"")
                :type "int"
                :functionpointer-flag t)
                (reparse-symbol extern-c-contents) [16650 16722])
            ("foreach_block" function
               (:typemodifiers ("extern" "\"C\"")
                :type "int"
                :arguments 
                  ( ("fp" variable
                       (:pointer 1
                        :type ("FILE" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [16773 16782])
                    ("func" variable (:type ("foreach_block_cb" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [16783 16805])
                    ("delim" variable (:type "int") (reparse-symbol arg-sub-list) [16806 16816])
                    ("arg" variable
                       (:pointer 1
                        :type "void")
                        (reparse-symbol arg-sub-list) [16817 16827]))                  
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [16754 16828])
            ("foreach_line" function
               (:typemodifiers ("extern" "\"C\"")
                :type "int"
                :arguments 
                  ( ("fp" variable
                       (:pointer 1
                        :type ("FILE" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [16882 16891])
                    ("func" variable (:type ("foreach_line_cb" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [16892 16913])
                    ("arg" variable
                       (:pointer 1
                        :type "void")
                        (reparse-symbol arg-sub-list) [16914 16924]))                  
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [16863 16925])
            ("time.h" include
               (:typemodifiers ("extern" "\"C\"")
                :system-flag t)
                (reparse-symbol extern-c-contents) [17183 17200])
            ("time_str" function
               (:typemodifiers ("extern" "\"C\"")
                :type "char"
                :arguments 
                  ( ("" variable (:type ("time_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [17238 17245]))                  
                :constant-flag t
                :pointer 1
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [17216 17246])
            ("date_str" function
               (:typemodifiers ("extern" "\"C\"")
                :type "char"
                :arguments 
                  ( ("" variable (:type ("time_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [17316 17323]))                  
                :constant-flag t
                :pointer 1
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [17294 17324])
            ("datetime_str" function
               (:typemodifiers ("extern" "\"C\"")
                :type "char"
                :arguments 
                  ( ("" variable (:type ("time_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [17398 17405]))                  
                :constant-flag t
                :pointer 1
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [17372 17406])
            ("TIME_UNIT_MAX" variable
               (:typemodifiers ("extern" "\"C\"")
                :constant-flag t)
                (reparse-symbol extern-c-contents) [17473 17486])
            ("time_unit_localize" function
               (:typemodifiers ("extern" "\"C\"")
                :type "void"
                :arguments 
                  ( ("year" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [17515 17532])
                    ("month" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [17533 17551])
                    ("day" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [17552 17568])
                    ("hour" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [17596 17613])
                    ("minute" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [17614 17633])
                    ("second" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [17634 17653])
                    ("plural" variable (:type "int") (reparse-symbol arg-sub-list) [17660 17671]))                  
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [17491 17672])
            ("time_span_readable" function
               (:typemodifiers ("extern" "\"C\"")
                :type "void"
                :arguments 
                  ( ("seconds" variable (:type ("int64_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [17698 17714])
                    ("accurate" variable (:type "int") (reparse-symbol arg-sub-list) [17715 17728])
                    ("outbuf" variable
                       (:pointer 1
                        :type "char")
                        (reparse-symbol arg-sub-list) [17729 17742])
                    ("outlen" variable (:type ("size_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [17743 17757]))                  
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [17674 17758])
            ("TIME_BUFSIZE" variable
               (:typemodifiers ("extern" "\"C\"")
                :constant-flag t)
                (reparse-symbol extern-c-contents) [17812 17824])
            ("TIME_SPAN_BUFSIZE" variable
               (:typemodifiers ("extern" "\"C\"")
                :constant-flag t)
                (reparse-symbol extern-c-contents) [17867 17884])
            ("ssleep" function
               (:typemodifiers ("extern" "\"C\"")
                :type "void"
                :arguments 
                  ( ("seconds" variable (:type "int") (reparse-symbol arg-sub-list) [17939 17951]))                  
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [17927 17952])
            ("msleep" function
               (:typemodifiers ("extern" "\"C\"")
                :type "void"
                :arguments 
                  ( ("milliseconds" variable (:type "int") (reparse-symbol arg-sub-list) [17991 18008]))                  
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [17979 18009])
            ("utimer_t" type
               (:typemodifiers ("extern" "\"C\"")
                :type "typedef"
                :typedef ("" type
                     (:members 
                        ( ("start" variable (:type ("timeval" type
                               (:prototype t
                                :type "struct")
                                nil nil)) (reparse-symbol classsubparts) [18081 18102])
                          ("stop" variable (:type ("timeval" type
                               (:prototype t
                                :type "struct")
                                nil nil)) (reparse-symbol classsubparts) [18104 18124]))                        
                      :type "struct")
                      nil nil))
                (reparse-symbol extern-c-contents) [18049 18206])
            ("utimer_start" function
               (:typemodifiers ("extern" "\"C\"")
                :type "void"
                :arguments 
                  ( ("timer" variable
                       (:pointer 1
                        :type ("utimer_t" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [18226 18242]))                  
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [18208 18243])
            ("utimer_stop" function
               (:typemodifiers ("extern" "\"C\"")
                :type "void"
                :arguments 
                  ( ("timer" variable
                       (:pointer 1
                        :type ("utimer_t" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [18283 18299]))                  
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [18266 18300])
            ("utimer_elapsed_us" function
               (:typemodifiers ("extern" "\"C\"")
                :type "double"
                :arguments 
                  ( ("meter" variable
                       (:pointer 1
                        :type ("utimer_t" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [18349 18365]))                  
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [18324 18366])
            ("utimer_elapsed_ms" function
               (:typemodifiers ("extern" "\"C\"")
                :type "double"
                :arguments 
                  ( ("meter" variable
                       (:pointer 1
                        :type ("utimer_t" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [18417 18433]))                  
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [18392 18434])
            ("utimer_elapsed_s" function
               (:typemodifiers ("extern" "\"C\"")
                :type "double"
                :arguments 
                  ( ("meter" variable
                       (:pointer 1
                        :type ("utimer_t" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [18484 18500]))                  
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [18460 18501])
            ("get_random" function
               (:typemodifiers ("extern" "\"C\"")
                :type "int"
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [18527 18545])
            ("MAX_CHARSET" variable
               (:typemodifiers ("extern" "\"C\"")
                :constant-flag t)
                (reparse-symbol extern-c-contents) [18805 18816])
            ("is_ascii" function
               (:typemodifiers ("extern" "\"C\"")
                :type "int"
                :arguments 
                  ( ("str" variable
                       (:pointer 1
                        :constant-flag t
                        :type "void")
                        (reparse-symbol arg-sub-list) [18914 18930])
                    ("size" variable (:type ("size_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [18931 18943]))                  
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [18901 18944])
            ("is_utf8" function
               (:typemodifiers ("extern" "\"C\"")
                :type "int"
                :arguments 
                  ( ("str" variable
                       (:pointer 1
                        :constant-flag t
                        :type "void")
                        (reparse-symbol arg-sub-list) [18986 19002])
                    ("size" variable (:type ("size_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [19003 19015]))                  
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [18974 19016])
            ("is_gb2312" function
               (:typemodifiers ("extern" "\"C\"")
                :type "int"
                :arguments 
                  ( ("str" variable
                       (:pointer 1
                        :constant-flag t
                        :type "void")
                        (reparse-symbol arg-sub-list) [19061 19077])
                    ("size" variable (:type ("size_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [19078 19090]))                  
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [19047 19091])
            ("is_gbk" function
               (:typemodifiers ("extern" "\"C\"")
                :type "int"
                :arguments 
                  ( ("str" variable
                       (:pointer 1
                        :constant-flag t
                        :type "void")
                        (reparse-symbol arg-sub-list) [19133 19149])
                    ("size" variable (:type ("size_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [19150 19162]))                  
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [19122 19163])
            ("get_charset" function
               (:typemodifiers ("extern" "\"C\"")
                :type "int"
                :arguments 
                  ( ("str" variable
                       (:pointer 1
                        :constant-flag t
                        :type "void")
                        (reparse-symbol arg-sub-list) [19209 19225])
                    ("size" variable (:type ("size_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [19226 19238])
                    ("outbuf" variable
                       (:pointer 1
                        :type "char")
                        (reparse-symbol arg-sub-list) [19244 19257])
                    ("outlen" variable (:type ("size_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [19258 19272])
                    ("can_ascii" variable (:type "int") (reparse-symbol arg-sub-list) [19273 19287]))                  
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [19193 19288])
            ("get_file_charset" function
               (:typemodifiers ("extern" "\"C\"")
                :type "int"
                :arguments 
                  ( ("file" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [19363 19380])
                    ("outbuf" variable
                       (:pointer 1
                        :type "char")
                        (reparse-symbol arg-sub-list) [19381 19394])
                    ("outlen" variable (:type ("size_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [19395 19409])
                    ("probability" variable
                       (:pointer 1
                        :type "double")
                        (reparse-symbol arg-sub-list) [19433 19453])
                    ("max_line" variable (:type "int") (reparse-symbol arg-sub-list) [19454 19467]))                  
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [19342 19468])
            ("read_file_bom" function
               (:typemodifiers ("extern" "\"C\"")
                :type "int"
                :arguments 
                  ( ("fp" variable
                       (:pointer 1
                        :type ("FILE" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [19488 19497])
                    ("outbuf" variable
                       (:pointer 1
                        :type "char")
                        (reparse-symbol arg-sub-list) [19498 19511])
                    ("outlen" variable (:type ("size_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [19512 19526]))                  
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [19470 19527])
            ("write_file_bom" function
               (:typemodifiers ("extern" "\"C\"")
                :type "int"
                :arguments 
                  ( ("fp" variable
                       (:pointer 1
                        :type ("FILE" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [19569 19578])
                    ("charset" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [19579 19599]))                  
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [19550 19600])
            ("utf8_len" function
               (:typemodifiers ("extern" "\"C\"")
                :type "int"
                :arguments 
                  ( ("u8" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [19640 19655]))                  
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [19627 19656])
            ("utf8_trim" function
               (:typemodifiers ("extern" "\"C\"")
                :type "int"
                :arguments 
                  ( ("u8" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [19730 19745])
                    ("outbuf" variable
                       (:pointer 1
                        :type "char")
                        (reparse-symbol arg-sub-list) [19746 19759])
                    ("max_byte" variable (:type ("size_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [19760 19776]))                  
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [19716 19777])
            ("mbcs_to_wcs" function
               (:typemodifiers ("extern" "\"C\"")
                :type "wchar_t"
                :arguments 
                  ( ("src" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [19864 19880]))                  
                :pointer 1
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [19843 19881])
            ("wcs_to_mbcs" function
               (:typemodifiers ("extern" "\"C\"")
                :type "char"
                :arguments 
                  ( ("src" variable
                       (:pointer 1
                        :constant-flag t
                        :type "wchar_t")
                        (reparse-symbol arg-sub-list) [19941 19960]))                  
                :pointer 1
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [19920 19961])
            ("get_locale" function
               (:typemodifiers ("extern" "\"C\"")
                :type "char"
                :constant-flag t
                :pointer 1
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [21364 21389])
            ("memfrob" function
               (:typemodifiers ("extern" "\"C\"")
                :type "void"
                :arguments 
                  ( ("mem" variable
                       (:pointer 1
                        :type "void")
                        (reparse-symbol arg-sub-list) [22036 22046])
                    ("length" variable (:type ("size_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [22047 22061]))                  
                :pointer 1
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [22022 22062])
            ("process_t" type
               (:typemodifiers ("extern" "\"C\"")
                :type "typedef"
                :superclasses "pid_t"
                :typedef ("pid_t" type (:type "class") nil nil))
                (reparse-symbol extern-c-contents) [22678 22702])
            ("INVALID_PROCESS" variable
               (:typemodifiers ("extern" "\"C\"")
                :constant-flag t)
                (reparse-symbol extern-c-contents) [22711 22726])
            ("process_create" function
               (:typemodifiers ("extern" "\"C\"")
                :type ("process_t" type (:type "class") nil nil)
                :arguments 
                  ( ("executable_and_param" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [22762 22795]))                  
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [22737 22796])
            ("process_wait" function
               (:typemodifiers ("extern" "\"C\"")
                :type "int"
                :arguments 
                  ( ("process" variable (:type ("process_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [22833 22851])
                    ("milliseconds" variable (:type "int") (reparse-symbol arg-sub-list) [22852 22869])
                    ("exit_code" variable
                       (:pointer 1
                        :type "int")
                        (reparse-symbol arg-sub-list) [22870 22885]))                  
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [22816 22886])
            ("process_kill" function
               (:typemodifiers ("extern" "\"C\"")
                :type "int"
                :arguments 
                  ( ("process" variable (:type ("process_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [22920 22938])
                    ("exit_code" variable (:type "int") (reparse-symbol arg-sub-list) [22939 22953])
                    ("wait" variable (:type "int") (reparse-symbol arg-sub-list) [22954 22963]))                  
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [22903 22964])
            ("pthread.h" include
               (:typemodifiers ("extern" "\"C\"")
                :system-flag t)
                (reparse-symbol extern-c-contents) [23484 23504])
            ("thread_t" type
               (:typemodifiers ("extern" "\"C\"")
                :type "typedef"
                :superclasses "pthread_t"
                :typedef ("pthread_t" type (:type "class") nil nil))
                (reparse-symbol extern-c-contents) [23505 23532])
            ("thread_ret_t" type
               (:typemodifiers ("extern" "\"C\"")
                :type "typedef"
                :superclasses "void"
                :pointer 1
                :typedef ("void"))
                (reparse-symbol extern-c-contents) [23533 23560])
            ("THREAD_CALLTYPE" variable
               (:typemodifiers ("extern" "\"C\"")
                :constant-flag t)
                (reparse-symbol extern-c-contents) [23569 23584])
            ("INVALID_THREAD" variable
               (:typemodifiers ("extern" "\"C\"")
                :constant-flag t)
                (reparse-symbol extern-c-contents) [23593 23607])
            ("thread_proc_t" variable
               (:typemodifiers ("extern" "\"C\"")
                :type ("thread_ret_t" type (:type "class") nil nil)
                :functionpointer-flag t)
                (reparse-symbol extern-c-contents) [23639 23692])
            ("thread_create" function
               (:typemodifiers ("extern" "\"C\"")
                :type "int"
                :arguments 
                  ( ("t" variable
                       (:pointer 1
                        :type ("thread_t" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [23713 23725])
                    ("proc" variable (:type ("thread_proc_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [23726 23745])
                    ("arg" variable
                       (:pointer 1
                        :type "void")
                        (reparse-symbol arg-sub-list) [23746 23756])
                    ("stacksize" variable (:type "int") (reparse-symbol arg-sub-list) [23757 23771]))                  
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [23694 23772])
            ("thread_exit" function
               (:typemodifiers ("extern" "\"C\"")
                :type "void"
                :arguments 
                  ( ("exit_code" variable (:type ("size_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [23802 23819]))                  
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [23785 23820])
            ("thread_join" function
               (:typemodifiers ("extern" "\"C\"")
                :type "int"
                :arguments 
                  ( ("t" variable (:type ("thread_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [23862 23873])
                    ("exit_code" variable
                       (:pointer 1
                        :type ("thread_ret_t" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [23874 23898]))                  
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [23845 23899])
            ("atomic_t" type
               (:typemodifiers ("extern" "\"C\"")
                :type "typedef"
                :typedef ("" type
                     (:members 
                        ( ("counter" variable
                             (:typemodifiers ("volatile")
                              :type "long")
                              (reparse-symbol classsubparts) [24219 24241]))                        
                      :type "struct")
                      nil nil))
                (reparse-symbol extern-c-contents) [24201 24252])
            ("atomic_read" function
               (:typemodifiers ("extern" "\"C\"")
                :type "long"
                :arguments 
                  ( ("v" variable
                       (:pointer 1
                        :constant-flag t
                        :type ("atomic_t" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [24271 24289]))                  
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [24254 24290])
            ("atomic_set" function
               (:typemodifiers ("extern" "\"C\"")
                :type "void"
                :arguments 
                  ( ("v" variable
                       (:pointer 1
                        :type ("atomic_t" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [24307 24319])
                    ("i" variable (:type "long") (reparse-symbol arg-sub-list) [24320 24327]))                  
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [24291 24328])
            ("atomic_add" function
               (:typemodifiers ("extern" "\"C\"")
                :type "void"
                :arguments 
                  ( ("i" variable (:type "long") (reparse-symbol arg-sub-list) [24345 24352])
                    ("v" variable
                       (:pointer 1
                        :type ("atomic_t" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [24353 24365]))                  
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [24329 24366])
            ("atomic_sub" function
               (:typemodifiers ("extern" "\"C\"")
                :type "void"
                :arguments 
                  ( ("i" variable (:type "long") (reparse-symbol arg-sub-list) [24383 24390])
                    ("v" variable
                       (:pointer 1
                        :type ("atomic_t" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [24391 24403]))                  
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [24367 24404])
            ("atomic_inc" function
               (:typemodifiers ("extern" "\"C\"")
                :type "void"
                :arguments 
                  ( ("v" variable
                       (:pointer 1
                        :type ("atomic_t" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [24421 24433]))                  
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [24405 24434])
            ("atomic_dec" function
               (:typemodifiers ("extern" "\"C\"")
                :type "void"
                :arguments 
                  ( ("v" variable
                       (:pointer 1
                        :type ("atomic_t" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [24451 24463]))                  
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [24435 24464])
            ("spin_lock_t" type
               (:typemodifiers ("extern" "\"C\"")
                :type "typedef"
                :typedef ("" type
                     (:members 
                        ( ("spin_" variable
                             (:typemodifiers ("volatile")
                              :type "long")
                              (reparse-symbol classsubparts) [24536 24556]))                        
                      :type "struct")
                      nil nil))
                (reparse-symbol extern-c-contents) [24518 24570])
            ("spin_init" function
               (:typemodifiers ("extern" "\"C\"")
                :type "void"
                :arguments 
                  ( ("lock" variable
                       (:pointer 1
                        :type ("spin_lock_t" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [24587 24605]))                  
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [24572 24606])
            ("spin_lock" function
               (:typemodifiers ("extern" "\"C\"")
                :type "void"
                :arguments 
                  ( ("lock" variable
                       (:pointer 1
                        :type ("spin_lock_t" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [24644 24662]))                  
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [24629 24663])
            ("spin_unlock" function
               (:typemodifiers ("extern" "\"C\"")
                :type "void"
                :arguments 
                  ( ("lock" variable
                       (:pointer 1
                        :type ("spin_lock_t" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [24702 24720]))                  
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [24685 24721])
            ("spin_trylock" function
               (:typemodifiers ("extern" "\"C\"")
                :type "int"
                :arguments 
                  ( ("lock" variable
                       (:pointer 1
                        :type ("spin_lock_t" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [24760 24778]))                  
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [24742 24779])
            ("spin_is_lock" function
               (:typemodifiers ("extern" "\"C\"")
                :type "int"
                :arguments 
                  ( ("lock" variable
                       (:pointer 1
                        :type ("spin_lock_t" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [24820 24838]))                  
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [24802 24839])
            ("mutex_t" type
               (:typemodifiers ("extern" "\"C\"")
                :type "typedef"
                :superclasses "CRITICAL_SECTION"
                :typedef ("CRITICAL_SECTION" type (:type "class") nil nil))
                (reparse-symbol extern-c-contents) [25004 25037])
            ("mutex_init" function
               (:typemodifiers ("extern" "\"C\"")
                :type "void"
                :arguments 
                  ( ("lock" variable
                       (:pointer 1
                        :type ("mutex_t" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [25062 25076]))                  
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [25046 25077])
            ("mutex_lock" function
               (:typemodifiers ("extern" "\"C\"")
                :type "void"
                :arguments 
                  ( ("lock" variable
                       (:pointer 1
                        :type ("mutex_t" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [25120 25134]))                  
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [25104 25135])
            ("mutex_unlock" function
               (:typemodifiers ("extern" "\"C\"")
                :type "void"
                :arguments 
                  ( ("lock" variable
                       (:pointer 1
                        :type ("mutex_t" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [25179 25193]))                  
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [25161 25194])
            ("mutex_trylock" function
               (:typemodifiers ("extern" "\"C\"")
                :type "int"
                :arguments 
                  ( ("lock" variable
                       (:pointer 1
                        :type ("mutex_t" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [25238 25252]))                  
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [25219 25253])
            ("mutex_destroy" function
               (:typemodifiers ("extern" "\"C\"")
                :type "void"
                :arguments 
                  ( ("lock" variable
                       (:pointer 1
                        :type ("mutex_t" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [25302 25316]))                  
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [25283 25317])
            ("CONDVAR_UNSUPPORT" variable
               (:typemodifiers ("extern" "\"C\"")
                :constant-flag t)
                (reparse-symbol extern-c-contents) [25545 25562])
            ("fs_usage" type
               (:typemodifiers ("extern" "\"C\"")
                :type "struct"
                :members 
                  ( ("fsu_total" variable (:type ("uint64_t" type (:type "class") nil nil)) (reparse-symbol classsubparts) [26252 26271])
                    ("fsu_free" variable (:type ("uint64_t" type (:type "class") nil nil)) (reparse-symbol classsubparts) [26300 26318])
                    ("fsu_avail" variable (:type ("uint64_t" type (:type "class") nil nil)) (reparse-symbol classsubparts) [26353 26372])
                    ("fsu_files" variable (:type ("uint64_t" type (:type "class") nil nil)) (reparse-symbol classsubparts) [26407 26426])
                    ("fsu_ffree" variable (:type ("uint64_t" type (:type "class") nil nil)) (reparse-symbol classsubparts) [26455 26474]))                  )
                (reparse-symbol extern-c-contents) [26233 26504])
            ("get_fs_usage" function
               (:typemodifiers ("extern" "\"C\"")
                :type "int"
                :arguments 
                  ( ("absolute_path" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [26524 26550])
                    ("fsp" variable
                       (:pointer 1
                        :type ("fs_usage" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [26551 26572]))                  
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [26506 26573])
            ("number_of_processors" function
               (:typemodifiers ("extern" "\"C\"")
                :type "int"
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [26600 26628])
            ("errno.h" include
               (:typemodifiers ("extern" "\"C\"")
                :system-flag t)
                (reparse-symbol extern-c-contents) [26853 26871])
            ("ASSERT" variable
               (:typemodifiers ("extern" "\"C\"")
                :constant-flag t)
                (reparse-symbol extern-c-contents) [27063 27069])
            ("VERIFY" variable
               (:typemodifiers ("extern" "\"C\"")
                :constant-flag t)
                (reparse-symbol extern-c-contents) [27093 27099])
            ("fatal_exit" function
               (:typemodifiers ("extern" "\"C\"")
                :type "void"
                :arguments 
                  ( ("msg" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [27166 27182]))                  
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [27149 27183])
            ("not_reached" function
               (:typemodifiers ("extern" "\"C\"")
                :type "void"
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [27220 27240])
            ("not_implemented" function
               (:typemodifiers ("extern" "\"C\"")
                :type "void"
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [27275 27299])
            ("get_last_error_std" function
               (:typemodifiers ("extern" "\"C\"")
                :type "char"
                :constant-flag t
                :pointer 1
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [27453 27486])
            ("get_last_error" function
               (:typemodifiers ("extern" "\"C\"")
                :type "char"
                :constant-flag t
                :pointer 1
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [27528 27557])
            ("hexdump" function
               (:typemodifiers ("extern" "\"C\"")
                :type "char"
                :arguments 
                  ( ("data" variable
                       (:pointer 1
                        :constant-flag t
                        :type "void")
                        (reparse-symbol arg-sub-list) [27632 27649])
                    ("len" variable (:type ("size_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [27650 27661]))                  
                :pointer 1
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [27617 27662])
            ("ptr_to_str" function
               (:typemodifiers ("extern" "\"C\"")
                :type "int"
                :arguments 
                  ( ("ptr" variable
                       (:pointer 1
                        :type "void")
                        (reparse-symbol arg-sub-list) [27732 27742])
                    ("buf" variable
                       (:pointer 1
                        :type "char")
                        (reparse-symbol arg-sub-list) [27743 27753])
                    ("len" variable (:type "int") (reparse-symbol arg-sub-list) [27754 27762]))                  
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [27715 27763])
            ("str_to_ptr" function
               (:typemodifiers ("extern" "\"C\"")
                :type "void"
                :arguments 
                  ( ("str" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [27815 27831]))                  
                :pointer 1
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [27797 27832])
            ("stdarg.h" include
               (:typemodifiers ("extern" "\"C\"")
                :system-flag t)
                (reparse-symbol extern-c-contents) [28075 28094])
            ("MAX_LOGS" variable
               (:typemodifiers ("extern" "\"C\"")
                :constant-flag t)
                (reparse-symbol extern-c-contents) [28207 28215])
            ("LOG_INVALID" variable
               (:typemodifiers ("extern" "\"C\"")
                :constant-flag t)
                (reparse-symbol extern-c-contents) [28259 28270])
            ("LogSeverity" type
               (:typemodifiers ("extern" "\"C\"")
                :type "enum"
                :members 
                  ( ("LOG_DEBUG" variable
                       (:constant-flag t
                        :default-value (28354 28355)
                        :type "int")
                        (reparse-symbol enumsubparts) [28342 28355])
                    ("LOG_INFO" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [28383 28392])
                    ("LOG_NOTICE" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [28419 28430])
                    ("LOG_WARNING" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [28457 28469])
                    ("LOG_ERROR" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [28495 28505])
                    ("LOG_CRIT" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [28532 28541])
                    ("LOG_ALERT" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [28568 28578])
                    ("LOG_FATAL" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [28605 28615]))                  )
                (reparse-symbol extern-c-contents) [28322 28642])
            ("log_init" function
               (:typemodifiers ("extern" "\"C\"")
                :type "void"
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [28644 28660])
            ("log_severity" function
               (:typemodifiers ("extern" "\"C\"")
                :type "void"
                :arguments 
                  ( ("severity" variable (:type "int") (reparse-symbol arg-sub-list) [28708 28721]))                  
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [28690 28722])
            ("log_open" function
               (:typemodifiers ("extern" "\"C\"")
                :type "int"
                :arguments 
                  ( ("path" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [28767 28784])
                    ("append" variable (:type "int") (reparse-symbol arg-sub-list) [28785 28796])
                    ("binary" variable (:type "int") (reparse-symbol arg-sub-list) [28797 28808]))                  
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [28753 28809])
            ("log_dopen" function
               (:typemodifiers ("extern" "\"C\"")
                :type "int"
                :arguments 
                  ( ("path" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [28845 28862])
                    ("append" variable (:type "int") (reparse-symbol arg-sub-list) [28863 28874])
                    ("binary" variable (:type "int") (reparse-symbol arg-sub-list) [28875 28886]))                  
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [28830 28887])
            ("PRINTF_FORMAT" function
               (:typemodifiers ("extern" "\"C\"")
                :type "int"
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [28955 28974])
            ("PRINTF_FORMAT" function
               (:typemodifiers ("extern" "\"C\"")
                :type "int"
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [29049 29068])
            ("log_flush" function
               (:typemodifiers ("extern" "\"C\"")
                :type "void"
                :arguments 
                  ( ("log_id" variable (:type "int") (reparse-symbol arg-sub-list) [29101 29112]))                  
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [29086 29113])
            ("log_dflush" variable
               (:typemodifiers ("extern" "\"C\"")
                :constant-flag t)
                (reparse-symbol extern-c-contents) [29153 29163])
            ("log_close" function
               (:typemodifiers ("extern" "\"C\"")
                :type "void"
                :arguments 
                  ( ("log_id" variable (:type "int") (reparse-symbol arg-sub-list) [29195 29206]))                  
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [29180 29207])
            ("log_dclose" variable
               (:typemodifiers ("extern" "\"C\"")
                :constant-flag t)
                (reparse-symbol extern-c-contents) [29243 29253])
            ("log_close_users" function
               (:typemodifiers ("extern" "\"C\"")
                :type "void"
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [29295 29318])
            ("log_close_all" function
               (:typemodifiers ("extern" "\"C\"")
                :type "void"
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [29352 29373])
            ("set_log_debug_stderr" function
               (:typemodifiers ("extern" "\"C\"")
                :type "void"
                :arguments 
                  ( ("enable" variable (:type "int") (reparse-symbol arg-sub-list) [29432 29443]))                  
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [29406 29444])
            ("log_dprintf" variable
               (:typemodifiers ("extern" "\"C\"")
                :constant-flag t)
                (reparse-symbol extern-c-contents) [29742 29753])
            ("version_parse" function
               (:typemodifiers ("extern" "\"C\"")
                :type "int"
                :arguments 
                  ( ("version" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [31587 31607])
                    ("major" variable
                       (:pointer 1
                        :type "int")
                        (reparse-symbol arg-sub-list) [31608 31619])
                    ("minor" variable
                       (:pointer 1
                        :type "int")
                        (reparse-symbol arg-sub-list) [31620 31631])
                    ("revision" variable
                       (:pointer 1
                        :type "int")
                        (reparse-symbol arg-sub-list) [31670 31684])
                    ("build" variable
                       (:pointer 1
                        :type "int")
                        (reparse-symbol arg-sub-list) [31685 31696])
                    ("suffix" variable
                       (:pointer 1
                        :type "char")
                        (reparse-symbol arg-sub-list) [31697 31710])
                    ("plen" variable (:type ("size_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [31711 31723]))                  
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [31567 31724])
            ("version_compare" function
               (:typemodifiers ("extern" "\"C\"")
                :type "int"
                :arguments 
                  ( ("v1" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [31747 31762])
                    ("v2" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [31763 31778]))                  
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [31725 31779])
            ("get_execute_path" function
               (:typemodifiers ("extern" "\"C\"")
                :type "char"
                :constant-flag t
                :pointer 1
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [32054 32085])
            ("get_execute_name" function
               (:typemodifiers ("extern" "\"C\"")
                :type "char"
                :constant-flag t
                :pointer 1
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [32122 32153])
            ("get_execute_dir" function
               (:typemodifiers ("extern" "\"C\"")
                :type "char"
                :constant-flag t
                :pointer 1
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [32180 32210])
            ("get_current_dir" function
               (:typemodifiers ("extern" "\"C\"")
                :type "char"
                :constant-flag t
                :pointer 1
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [32241 32271])
            ("set_current_dir" function
               (:typemodifiers ("extern" "\"C\"")
                :type "int"
                :arguments 
                  ( ("dir" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [32323 32339]))                  
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [32301 32340])
            ("get_home_dir" function
               (:typemodifiers ("extern" "\"C\"")
                :type "char"
                :constant-flag t
                :pointer 1
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [32367 32394])
            ("get_temp_dir" function
               (:typemodifiers ("extern" "\"C\"")
                :type "char"
                :constant-flag t
                :pointer 1
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [32440 32467])
            ("get_temp_file_under" function
               (:typemodifiers ("extern" "\"C\"")
                :type "int"
                :arguments 
                  ( ("dir" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [32525 32541])
                    ("prefix" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [32542 32561])
                    ("outbuf" variable
                       (:pointer 1
                        :type "char")
                        (reparse-symbol arg-sub-list) [32595 32608])
                    ("outlen" variable (:type ("size_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [32609 32623]))                  
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [32499 32624])
            ("get_temp_file" function
               (:typemodifiers ("extern" "\"C\"")
                :type "char"
                :arguments 
                  ( ("prefix" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [32651 32670]))                  
                :constant-flag t
                :pointer 1
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [32625 32671])
            ("set_env" function
               (:typemodifiers ("extern" "\"C\"")
                :type "int"
                :arguments 
                  ( ("key" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [32738 32754])
                    ("val" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [32755 32771]))                  
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [32724 32772])
            ("unset_env" function
               (:typemodifiers ("extern" "\"C\"")
                :type "int"
                :arguments 
                  ( ("key" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [32808 32824]))                  
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [32792 32825])
            ("get_env" function
               (:typemodifiers ("extern" "\"C\"")
                :type "char"
                :arguments 
                  ( ("key" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [32869 32885]))                  
                :constant-flag t
                :pointer 1
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [32849 32886])
            ("DEPRECATED" variable
               (:typemodifiers ("extern" "\"C\"")
                :type "int")
                (reparse-symbol extern-c-contents) [32974 32985])
            ("str_to_num" function
               (:typemodifiers ("extern" "\"C\"")
                :type ("int64_t" type (:type "class") nil nil)
                :arguments 
                  ( ("str" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [33025 33041]))                  
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [33005 33042])
            ("numdigit" function
               (:typemodifiers ("extern" "\"C\"")
                :type "int"
                :arguments 
                  ( ("number" variable (:type ("int64_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [33086 33101]))                  
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [33071 33102])
            ("shutdown_system" function
               (:typemodifiers ("extern" "\"C\"")
                :type "int"
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [33146 33170])
            ("reboot_system" function
               (:typemodifiers ("extern" "\"C\"")
                :type "int"
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [33196 33218]))          
    :file "cutil.h"
    :pointmax 33300
    :fsize 40462
    :lastmodtime '(20890 60840 913485 30000)
    :unmatched-syntax '((semantic-list 32942 . 32973) (symbol 32932 . 32942) (INT 32926 . 32929) (number 29065 . 29066) (number 29063 . 29064) (semantic-list 29007 . 29048) (symbol 28997 . 29007) (VOID 28992 . 28996) (number 28971 . 28972) (number 28969 . 28970) (semantic-list 28924 . 28954) (symbol 28913 . 28924) (VOID 28908 . 28912) (TYPEDEF 23631 . 23638) (TYPEDEF 16642 . 16649) (TYPEDEF 16532 . 16539) (TYPEDEF 14642 . 14649) (TYPEDEF 13270 . 13277) (TYPEDEF 12962 . 12969) (semantic-list 11499 . 11539) (symbol 11492 . 11499) (string 11500 . 11538) (symbol 11485 . 11491) (string 11500 . 11538) (punctuation 11484 . 11485))
    :lexical-table 
        '(("XCALLOC" (spp-arg-list ("type") 7053 . 7059) . ((semantic-list "((type *)xcalloc(1, sizeof (type)))" 7060 . 7095)))
          ("xisdigit" (spp-arg-list ("c") 7953 . 7956) . ((symbol "isdigit" 7957 . 7964) (semantic-list "((byte)c)" 7964 . 7973)))
          ("xisprint" (spp-arg-list ("c") 8064 . 8067) . ((symbol "isprint" 8068 . 8075) (semantic-list "((byte)c)" 8075 . 8084)))
          ("seek_off_t" . ((LONG "long" 11479 . 11483)))
          ("X2DIGITS_TO_NUM" (spp-arg-list ("h1" "h2") 5379 . 5387) . ((semantic-list "((XDIGIT_TO_NUM (h1) << 4) + XDIGIT_TO_NUM (h2))" 5388 . 5436)))
          ("XNUM_TO_DIGIT" (spp-arg-list ("x") 5500 . 5503) . ((semantic-list "(\"0123456789ABCDEF\"[x] + 0)" 5504 . 5531)))
          ("xrealloc" . ((symbol "realloc" 6807 . 6814)))
          ("xisalpha" (spp-arg-list ("c") 7842 . 7845) . ((symbol "isalpha" 7846 . 7853) (semantic-list "((byte)c)" 7853 . 7862)))
          ("log_dprintf" (spp-arg-list ("level" "fmt" "...") 29753 . 29770) . ((symbol "log_printf" 29771 . 29781) (semantic-list "(0, level, fmt, ##__VA_ARGS__)" 29781 . 29811)))
          ("TRUE" . ((number "1" 3177 . 3178)))
          ("xispunct" (spp-arg-list ("c") 8101 . 8104) . ((symbol "ispunct" 8105 . 8112) (semantic-list "((byte)c)" 8112 . 8121)))
          ("STRNIEQ" (spp-arg-list ("a" "b" "n") 8440 . 8449) . ((semantic-list "(toupper(*(a)) == toupper(*(b)) && strncasecmp((a), (b), (n)) == 0)" 8453 . 8520)))
          ("touch" (spp-arg-list ("file") 16320 . 16326) . ((symbol "write_mem_file" 16327 . 16341) (semantic-list "(file, \"\", 0)" 16341 . 16354)))
          ("INT64_C" (spp-arg-list ("x") 2767 . 2770) . ((spp-symbol-merge ((symbol "x" 2771 . 2772) (symbol "LL" 2774 . 2776)) 2771 . 2776)))
          ("FALSE" . ((number "0" 3215 . 3216)))
          ("TYPE_MAXIMUM" (spp-arg-list ("t") 3268 . 3271) . ((semantic-list "((t) (~ (~ (t) 0 << (sizeof (t) * CHAR_BIT - 1))))" 3272 . 3322)))
          ("xstrdup" . ((symbol "strdup" 6854 . 6860)))
          ("PATH_SEP_WCHAR" . ((string "L'/'" 11050 . 11054)))
          ("UINT64_MAX" . ((symbol "UINT64_C" 2991 . 2999) (semantic-list "(0xFFFFFFFFFFFFFFFF)" 2999 . 3019)))
          ("upper_32_bits" (spp-arg-list ("n") 5012 . 5015) . ((semantic-list "((uint32_t)(((n) >> 16) >> 16))" 5016 . 5047)))
          ("XALLOCA" (spp-arg-list ("type") 7111 . 7117) . ((semantic-list "((type *)alloca(sizeof(type)))" 7118 . 7148)))
          ("xislower" (spp-arg-list ("c") 8027 . 8030) . ((symbol "islower" 8031 . 8038) (semantic-list "((byte)c)" 8038 . 8047)))
          ("xisspace" (spp-arg-list ("c") 8138 . 8141) . ((symbol "isspace" 8142 . 8149) (semantic-list "((byte)c)" 8149 . 8158)))
          ("THREAD_CALLTYPE")
          ("VERIFY" (spp-arg-list ("x") 27099 . 27102) . 
              ((IF "if" 27103 . 27105) (semantic-list "(!(x))" 27106 . 27112) (semantic-list "{fatal_exit(\"VERIFY FAILED : \"#x);}" 27112 . 27147)))
          ("INFINITE" . ((symbol "0xFFFFFFFFU" 3131 . 3142)))
          ("xmalloc" . ((symbol "malloc" 6783 . 6789)))
          ("MIN_PATH" . ((number "1" 11155 . 11156)))
          ("xcalloc" . ((symbol "calloc" 6831 . 6837)))
          ("xstrndup" . ((symbol "strndup" 6878 . 6885)))
          ("xfree_null" (spp-arg-list ("p") 6931 . 6934) . 
              ((DO "do" 6935 . 6937) (semantic-list "{ if (p) xfree (p); }" 6937 . 6958) (WHILE "while" 6958 . 6963) (semantic-list "(0)" 6963 . 6966) (punctuation ";" 6966 . 6967)))
          ("XNMALLOC" (spp-arg-list ("n" "type") 7166 . 7175) . ((semantic-list "((type *)xmalloc((n) * sizeof (type)))" 7176 . 7214)))
          ("xisascii" (spp-arg-list ("c") 7805 . 7808) . ((symbol "isascii" 7809 . 7816) (semantic-list "((byte)c)" 7816 . 7825)))
          ("BOUNDED_TO_ALLOCA" (spp-arg-list ("beg" "end" "place") 10173 . 10190) . 
              ((DO "do" 10191 . 10193) (semantic-list "{		\\
	const char *BTA_beg = (beg);					\\
	int BTA_len = (end) - BTA_beg;					\\
	char **BTA_dest = &(place);						\\
	*BTA_dest = (char*)alloca (BTA_len + 1);		\\
	memcpy (*BTA_dest, BTA_beg, BTA_len);			\\
	(*BTA_dest)[BTA_len] = '\\0';					\\
}" 10194 . 10434) (WHILE "while" 10435 . 10440) (semantic-list "(0)" 10441 . 10444)))
          ("PATH_SEP_WSTR" . ((string "L\"/\"" 11104 . 11108)))
          ("SIZE_T_MAX" . ((symbol "UINT_MAX" 3080 . 3088)))
          ("lower_32_bits" (spp-arg-list ("n") 5069 . 5072) . ((semantic-list "((uint32_t)(n))" 5073 . 5088)))
          ("xfree" . ((symbol "free" 6900 . 6904)))
          ("XNCALLOC" (spp-arg-list ("n" "type") 7231 . 7240) . ((semantic-list "((type *)xcalloc((n), sizeof (type)))" 7241 . 7278)))
          ("STREQ" (spp-arg-list ("a" "b") 8249 . 8255) . ((semantic-list "(*(a) == *(b) && strcmp((a), (b)) == 0)" 8256 . 8295)))
          ("XDIGIT_TO_NUM" (spp-arg-list ("h") 5303 . 5306) . ((semantic-list "((h) < 'A' ? (h) - '0' : toupper (h) - 'A' + 10)" 5307 . 5355)))
          ("zero_var" (spp-arg-list ("x") 7372 . 7375) . ((symbol "memset" 7376 . 7382) (semantic-list "(&(x), '\\0', sizeof(x))" 7383 . 7406)))
          ("xisalnum" (spp-arg-list ("c") 7879 . 7882) . ((symbol "isalnum" 7883 . 7890) (semantic-list "((byte)c)" 7890 . 7899)))
          ("xiscntrl" (spp-arg-list ("c") 7916 . 7919) . ((symbol "iscntrl" 7920 . 7927) (semantic-list "((byte)c)" 7927 . 7936)))
          ("xisupper" (spp-arg-list ("c") 8175 . 8178) . ((symbol "isupper" 8179 . 8186) (semantic-list "((byte)c)" 8186 . 8195)))
          ("strdup_null" (spp-arg-list ("x") 8862 . 8865) . ((semantic-list "((x) ? xstrdup(x) : NULL)" 8866 . 8891)))
          ("LINE_END_STR" . ((string "\"\\r\"" 11131 . 11135)))
          ("countof" (spp-arg-list ("arr") 4937 . 4942) . ((semantic-list "(sizeof(arr) / sizeof((arr)[0]))" 4943 . 4975)))
          ("zero_array" (spp-arg-list ("x") 7425 . 7428) . ((symbol "memset" 7429 . 7435) (semantic-list "((x), '\\0', sizeof(x))" 7436 . 7458)))
          ("PATH_SEP_STR" . ((string "\"/\"" 11077 . 11080)))
          ("TIME_BUFSIZE" . ((number "64" 17826 . 17828)))
          ("ASSERT" (spp-arg-list ("x") 27069 . 27072) . ((semantic-list "(x)" 27073 . 27076)))
          ("__CUTIL_H")
          ("INT64_MAX" . ((symbol "INT64_C" 2872 . 2879) (semantic-list "(0x7FFFFFFFFFFFFFFF)" 2879 . 2899)))
          ("TIME_UNIT_MAX" . ((number "20" 17487 . 17489)))
          ("MAX_CHARSET" . ((number "10" 18817 . 18819)))
          ("CONDVAR_UNSUPPORT" . ((number "1" 25563 . 25564)))
          ("log_dclose" (spp-arg-list nil 29253 . 29255) . ((symbol "log_close" 29256 . 29265) (semantic-list "(0)" 29265 . 29268)))
          ("UINT64_C" (spp-arg-list ("x") 2817 . 2820) . ((spp-symbol-merge ((symbol "x" 2821 . 2822) (symbol "ULL" 2824 . 2827)) 2821 . 2827)))
          ("INT64_MIN" . ((symbol "INT64_C" 2918 . 2925) (semantic-list "(0x8000000000000000)" 2925 . 2945)))
          ("ISDIGIT" (spp-arg-list ("c") 5116 . 5119) . ((semantic-list "(c >= '0' && c <= '9')" 5120 . 5142)))
          ("XNALLOCA" (spp-arg-list ("n" "type") 7295 . 7304) . ((semantic-list "((type *)alloca ((n) * sizeof (type)))" 7305 . 7343)))
          ("xisxdigit" (spp-arg-list ("c") 8213 . 8216) . ((symbol "isxdigit" 8217 . 8225) (semantic-list "((byte)c)" 8225 . 8234)))
          ("STRIEQ" (spp-arg-list ("a" "b") 8333 . 8339) . ((semantic-list "(toupper(*(a)) == toupper(*(b)) && strcasecmp((a), (b)) == 0)" 8343 . 8404)))
          ("INVALID_THREAD" . ((number "0" 23608 . 23609)))
          ("LOG_INVALID" . ((punctuation "-" 28272 . 28273) (number "1" 28273 . 28274)))
          ("log_dflush" (spp-arg-list nil 29163 . 29165) . ((symbol "log_flush" 29166 . 29175) (semantic-list "(0)" 29175 . 29178)))
          ("ISXDIGIT" (spp-arg-list ("c") 5159 . 5162) . ((semantic-list "(((c >= '0' && c <= '9') || ((c & ~0x20) >= 'A' && (c & ~0x20) <= 'F')) ? 1 : 0)" 5163 . 5243)))
          ("XNUM_TO_digit" (spp-arg-list ("x") 5553 . 5556) . ((semantic-list "(\"0123456789abcdef\"[x] + 0)" 5557 . 5584)))
          ("XMALLOC" (spp-arg-list ("type") 6998 . 7004) . ((semantic-list "((type *)xmalloc(sizeof (type)))" 7005 . 7037)))
          ("zero_mem" (spp-arg-list ("x" "n") 7475 . 7480) . ((symbol "memset" 7481 . 7487) (semantic-list "((x), '\\0', (n))" 7487 . 7503)))
          ("xisgraph" (spp-arg-list ("c") 7990 . 7993) . ((symbol "isgraph" 7994 . 8001) (semantic-list "((byte)c)" 8001 . 8010)))
          ("PATH_SEP_CHAR" . ((string "'/'" 11022 . 11025)))
          ("TIME_SPAN_BUFSIZE" . ((number "128" 17885 . 17888)))
          ("INVALID_PROCESS" . ((number "0" 22727 . 22728)))
          ("MAX_LOGS" . ((number "100" 28217 . 28220)))
          )

    )
   (semanticdb-table "cutil.c"
    :major-mode 'c-mode
    :tags 
        '( ("cutil.h" include nil nil [1 19])
            ("locale.h" include (:system-flag t) nil [21 40])
            ("wchar.h" include (:system-flag t) nil [42 60])
            ("sys/types.h" include (:system-flag t) nil [997 1019])
            ("sys/statfs.h" include (:system-flag t) nil [1034 1057])
            ("sys/time.h" include (:system-flag t) nil [1073 1094])
            ("sys/wait.h" include (:system-flag t) nil [1116 1137])
            ("fcntl.h" include (:system-flag t) nil [1154 1172])
            ("utime.h" include (:system-flag t) nil [1192 1210])
            ("signal.h" include (:system-flag t) nil [1226 1245])
            ("STAT_STRUCT" variable (:constant-flag t) nil [1411 1422])
            ("g_opened_files" variable
               (:typemodifiers ("static")
                :type "int")
                nil [1445 1471])
            ("cutil_init" function (:type "void") nil [1696 2751])
            ("cutil_exit" function (:type "void") nil [2755 3373])
            ("lowercase_str" function
               (:arguments 
                  ( ("str" variable
                       (:pointer 1
                        :type "char")
                        (reparse-symbol arg-sub-list) [7120 7130]))                  
                :type "int")
                nil [7101 7275])
            ("uppercase_str" function
               (:arguments 
                  ( ("str" variable
                       (:pointer 1
                        :type "char")
                        (reparse-symbol arg-sub-list) [7332 7342]))                  
                :type "int")
                nil [7313 7487])
            ("strdup_lower" function
               (:pointer 1
                :arguments 
                  ( ("s" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [7532 7546]))                  
                :type "char")
                nil [7512 7658])
            ("strdup_upper" function
               (:pointer 1
                :arguments 
                  ( ("s" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [7703 7717]))                  
                :type "char")
                nil [7683 7831])
            ("substrdup" function
               (:pointer 1
                :arguments 
                  ( ("beg" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [7871 7887])
                    ("end" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [7888 7904]))                  
                :type "char")
                nil [7853 8107])
            ("ASPRINTF_MAX" variable (:constant-flag t) nil [8119 8131])
            ("aprintf" function
               (:pointer 1
                :arguments 
                  ( ("fmt" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [8187 8203])
                    ("..." variable (:type "vararg") (reparse-symbol arg-sub-list) [8204 8208]))                  
                :type "char")
                nil [8172 8707])
            ("SIZE_BITS" variable (:constant-flag t) nil [8719 8728])
            ("hash_pjw" function
               (:arguments 
                  ( ("x" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [8879 8893])
                    ("tablesize" variable (:type ("size_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [8894 8911]))                  
                :type ("size_t" type (:type "class") nil nil))
                nil [8862 9050])
            ("strncasestr" function
               (:pointer 1
                :arguments 
                  ( ("s" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [13965 13979])
                    ("find" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [13980 13997])
                    ("slen" variable (:type ("size_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [13998 14010]))                  
                :type "char")
                nil [13947 14425])
            ("path_valid" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("path" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [14692 14709])
                    ("absolute" variable (:type "int") (reparse-symbol arg-sub-list) [14710 14723]))                  
                :type "int")
                nil [14670 15018])
            ("is_absolute_path" function
               (:arguments 
                  ( ("path" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [15069 15086]))                  
                :type "int")
                nil [15048 15313])
            ("is_root_path" function
               (:arguments 
                  ( ("path" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [15352 15369]))                  
                :type "int")
                nil [15335 15436])
            ("path_find_file_name" function
               (:pointer 1
                :constant-flag t
                :arguments 
                  ( ("path" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [15734 15751]))                  
                :type "char")
                nil [15702 16236])
            ("path_find_extension" function
               (:pointer 1
                :constant-flag t
                :arguments 
                  ( ("path" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [16450 16467]))                  
                :type "char")
                nil [16418 16885])
            ("path_find_directory" function
               (:arguments 
                  ( ("path" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [17090 17107])
                    ("outbuf" variable
                       (:pointer 1
                        :type "char")
                        (reparse-symbol arg-sub-list) [17108 17121])
                    ("outlen" variable (:type ("size_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [17122 17136]))                  
                :type "int")
                nil [17066 18097])
            ("path_file_exists" function
               (:arguments 
                  ( ("path" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [18143 18160]))                  
                :type "int")
                nil [18122 18521])
            ("path_is_directory" function
               (:arguments 
                  ( ("path" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [18564 18581]))                  
                :type "int")
                nil [18542 18973])
            ("path_is_file" function
               (:arguments 
                  ( ("path" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [19018 19035]))                  
                :type "int")
                nil [19001 19469])
            ("relative_path" function
               (:arguments 
                  ( ("src" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [19710 19726])
                    ("dst" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [19727 19743])
                    ("sep" variable (:type "char") (reparse-symbol arg-sub-list) [19744 19753])
                    ("outbuf" variable
                       (:pointer 1
                        :type "char")
                        (reparse-symbol arg-sub-list) [19754 19767])
                    ("slen" variable (:type ("size_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [19768 19780]))                  
                :type "int")
                nil [19692 20680])
            ("normalize_dir_path" function
               (:pointer 1
                :typemodifiers ("static")
                :arguments 
                  ( ("dir" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [20762 20778]))                  
                :type "char")
                nil [20730 21048])
            ("unique_file" function
               (:arguments 
                  ( ("path" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [21085 21102])
                    ("buf" variable
                       (:pointer 1
                        :type "char")
                        (reparse-symbol arg-sub-list) [21103 21113])
                    ("len" variable (:type ("size_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [21114 21125]))                  
                :type "int")
                nil [21069 22022])
            ("unique_dir" function
               (:arguments 
                  ( ("path" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [22081 22098])
                    ("buf" variable
                       (:pointer 1
                        :type "char")
                        (reparse-symbol arg-sub-list) [22099 22109])
                    ("len" variable (:type ("size_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [22110 22121]))                  
                :type "int")
                nil [22066 22783])
            ("" type
               (:members 
                  ( ("pathchr_not_unix" variable
                       (:constant-flag t
                        :default-value (22831 22832)
                        :type "int")
                        (reparse-symbol enumsubparts) [22809 22832])
                    ("pathchr_not_windows" variable
                       (:constant-flag t
                        :default-value (22882 22883)
                        :type "int")
                        (reparse-symbol enumsubparts) [22860 22883])
                    ("pathchr_control" variable
                       (:constant-flag t
                        :default-value (22937 22938)
                        :type "int")
                        (reparse-symbol enumsubparts) [22915 22938]))                  
                :type "enum")
                nil [22801 22961])
            ("U" variable (:constant-flag t) nil [22973 22974])
            ("W" variable (:constant-flag t) nil [23001 23002])
            ("C" variable (:constant-flag t) nil [23032 23033])
            ("UW" variable (:constant-flag t) nil [23061 23063])
            ("UWC" variable (:constant-flag t) nil [23077 23080])
            ("pathchr_table" variable
               (:dereference 1
                :typemodifiers ("static")
                :constant-flag t
                :type "unsigned char")
                nil [23090 24824])
            ("PATH_CHAR_TEST" variable (:constant-flag t) nil [24836 24850])
            ("path_char_illegal" function
               (:arguments 
                  ( ("ch" variable (:type "char") (reparse-symbol arg-sub-list) [25011 25019]))                  
                :type "int")
                nil [24989 25152])
            ("path_char_blankspace" function
               (:arguments 
                  ( ("path" variable
                       (:pointer 1
                        :type "char")
                        (reparse-symbol arg-sub-list) [25205 25216]))                  
                :type "void")
                nil [25179 25342])
            ("path_char_escape" function
               (:pointer 1
                :arguments 
                  ( ("path" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [25469 25486]))                  
                :type "char")
                nil [25446 26055])
            ("create_directory" function
               (:arguments 
                  ( ("dir" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [26163 26179]))                  
                :type "int")
                nil [26142 26497])
            ("create_directories" function
               (:arguments 
                  ( ("dir" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [26633 26649]))                  
                :type "int")
                nil [26610 27893])
            ("delete_directory" function
               (:arguments 
                  ( ("dir" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [27933 27949]))                  
                :type "int")
                nil [27912 28247])
            ("TRAV_RETURN_0" variable (:constant-flag t) nil [28259 28272])
            ("trav_dir_end" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("ctx" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [28295 28299]))                  
                :type "int")
                nil [28281 28300])
            ("buf" variable
               (:dereference 1
                :type "char")
                nil [28438 28457])
            ("ctx" variable (:type ("trav_dir_context" type
                 (:prototype t
                  :type "struct")
                  nil nil)) nil [28460 28488])
            ("succ" variable (:type "int") nil [28491 28500])
            ("_delete_directories" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("dir" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [29325 29329])
                    ("" variable (:type ("func" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [29330 29335])
                    ("" variable (:type ("arg" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [29336 29340]))                  
                :type "int")
                nil [29305 29341])
            ("buf" variable
               (:dereference 1
                :type "char")
                nil [29407 29426])
            ("ctx" variable (:type ("trav_dir_context" type
                 (:prototype t
                  :type "struct")
                  nil nil)) nil [29429 29457])
            ("empty" variable (:type "int") nil [29460 29474])
            ("delete_directory" variable (:type ("empty" type (:type "class") nil nil)) nil [29946 29977])
            ("ctx" variable (:type ("trav_dir_context" type
                 (:prototype t
                  :type "struct")
                  nil nil)) nil [30568 30596])
            ("spath" variable
               (:dereference 1
                :type "char")
                nil [30599 30622])
            ("dpath" variable
               (:dereference 1
                :type "char")
                nil [30636 30659])
            ("srclen" variable (:type ("size_t" type (:type "class") nil nil)) nil [30674 30705])
            ("dstlen" variable (:type ("size_t" type (:type "class") nil nil)) nil [30708 30739])
            ("succ" variable (:type "int") nil [30742 30751])
            ("trav_dir_end" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("ctx" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [31773 31777]))                  
                :type "int")
                nil [31759 31778])
            ("p" variable
               (:pointer 1
                :type "char")
                nil [32517 32539])
            ("ddir" variable
               (:pointer 1
                :type "char")
                nil [32517 32539])
            ("sdir" variable
               (:pointer 1
                :type "char")
                nil [32517 32539])
            ("lastdir" variable
               (:dereference 1
                :type "char")
                nil [32542 32578])
            ("dbuf" variable
               (:dereference 1
                :type "char")
                nil [32542 32578])
            ("dlen" variable (:type ("size_t" type (:type "class") nil nil)) nil [32609 32627])
            ("slen" variable (:type ("size_t" type (:type "class") nil nil)) nil [32609 32627])
            ("ret" variable (:type "int") nil [32630 32638])
            ("sdir" variable (:type "int") nil [32796 32827])
            ("ddir" variable (:type "int") nil [32830 32861])
            ("slen" variable (:type "int") nil [32864 32884])
            ("dlen" variable (:type "int") nil [32887 32907])
            ("copy_dirs_error" variable (:type ("goto" type (:type "class") nil nil)) nil [33037 33058])
            ("p" variable (:type "int") nil [33137 33160])
            ("copy_dirs_error" variable (:type ("goto" type (:type "class") nil nil)) nil [33224 33245])
            ("p" variable (:type "int") nil [33316 33339])
            ("p" variable (:type "int") nil [33660 33697])
            ("copy_dirs_error" variable (:type ("goto" type (:type "class") nil nil)) nil [33726 33747])
            ("memset" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("lastdir" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [33759 33767]))                  
                :type "int")
                nil [33752 33788])
            ("ASSERT" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("strlen" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [33959 33968])
                    ("" variable (:type ("MIN_PATH" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [33972 33981]))                  
                :type "int")
                nil [33952 33982])
            ("strncpy" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("lastdir" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [33993 34001])
                    ("" variable (:type ("p" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [34002 34004]))                  
                :type "int")
                nil [33985 34010])
            ("memset" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("dbuf" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [34030 34035]))                  
                :type "int")
                nil [34023 34053])
            ("strcpy" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("dbuf" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [34063 34068])
                    ("" variable (:type ("ddir" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [34069 34074]))                  
                :type "int")
                nil [34056 34075])
            ("strncpy" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("dbuf" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [34086 34092])
                    ("" variable (:type ("strlen" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [34093 34105])
                    ("" variable (:type ("lastdir" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [34107 34115])
                    ("" variable (:type ("MAX_PATH" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [34116 34125])
                    ("" variable (:type ("strlen" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [34125 34137]))                  
                :type "int")
                nil [34078 34139])
            ("dbuf" variable
               (:dereference 1
                :type "int")
                nil [34170 34198])
            ("copy_dirs_error" variable (:type ("goto" type (:type "class") nil nil)) nil [34232 34253])
            ("create_directory" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("dbuf" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [34290 34295]))                  
                :type "int")
                nil [34273 34296])
            ("dbuf" variable
               (:dereference 1
                :type "int")
                nil [34314 34349])
            ("ret" variable (:type "int") nil [34352 34405])
            ("xfree" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("sdir" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [34436 34441]))                  
                :type "int")
                nil [34430 34442])
            ("xfree" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("ddir" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [34471 34476]))                  
                :type "int")
                nil [34465 34477])
            ("ret" variable (:type "int") nil [34489 34493])
            ("xfree" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("sdir" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [34542 34547]))                  
                :type "int")
                nil [34536 34548])
            ("xfree" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("ddir" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [34577 34582]))                  
                :type "int")
                nil [34571 34583])
            ("p" variable
               (:pointer 1
                :constant-flag t
                :type "char")
                nil [34705 34719])
            ("memset" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("ctx" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [34835 34839]))                  
                :type "int")
                nil [34828 34857])
            ("strcpy" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("ctx" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [34867 34871])
                    ("" variable (:type ("basedir" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [34872 34880])
                    ("" variable (:type ("dir" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [34881 34885]))                  
                :type "int")
                nil [34860 34886])
            ("basedir" variable
               (:dereference 1
                :type "int")
                nil [34953 34986])
            ("dir" variable (:type "int") nil [35343 35362])
            ("pentry" variable (:type "int") nil [35407 35434])
            ("strcmp" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("ctx" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [36099 36103])
                    ("" variable (:type ("pentry" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [36104 36111])
                    ("" variable (:type ("d_name" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [36112 36119]))                  
                :type "int")
                nil [36092 36125])
            ("strcmp" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("ctx" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [36383 36387])
                    ("" variable (:type ("pentry" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [36388 36395])
                    ("" variable (:type ("d_name" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [36396 36403]))                  
                :type "int")
                nil [36376 36410])
            ("DT_DIR" variable (:type "int") nil [36612 36619])
            ("trav_entry_is_dir" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("ctx" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [36736 36740]))                  
                :type "int")
                nil [36718 36741])
            ("DT_REG" variable (:type "int") nil [37068 37075])
            ("closedir" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("ctx" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [37210 37214])
                    ("" variable (:type ("dir" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [37215 37219]))                  
                :type "int")
                nil [37201 37220])
            ("d_name" variable (:type "int") nil [37536 37543])
            ("filename" variable
               (:pointer 1
                :constant-flag t
                :type "char")
                nil [37651 37672])
            ("tlen" variable (:type ("size_t" type (:type "class") nil nil)) nil [37675 37687])
            ("filename" variable (:type "int") nil [37693 37725])
            ("tlen" variable (:type "int") nil [37760 37807])
            ("buf" variable
               (:dereference 1
                :type "char")
                nil [38150 38171])
            ("ctx" variable (:type ("trav_dir_context" type
                 (:prototype t
                  :type "struct")
                  nil nil)) nil [38174 38202])
            ("buf" variable
               (:dereference 1
                :type "char")
                nil [38989 39010])
            ("ctx" variable (:type ("trav_dir_context" type
                 (:prototype t
                  :type "struct")
                  nil nil)) nil [39013 39041])
            ("ctx" variable (:type ("trav_dir_context" type
                 (:prototype t
                  :type "struct")
                  nil nil)) nil [39507 39535])
            ("unlink" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("path" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [40152 40157]))                  
                :type "int")
                nil [40145 40158])
            ("p" variable
               (:pointer 1
                :type "char")
                nil [40449 40475])
            ("pbuf" variable
               (:dereference 1
                :type "char")
                nil [40449 40475])
            ("top_len" variable (:type ("size_t" type (:type "class") nil nil)) nil [40478 40493])
            ("strncpy" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("pbuf" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [40792 40797])
                    ("" variable (:type ("path" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [40798 40803])
                    ("" variable (:type ("MAX_PATH" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [40804 40813]))                  
                :type "int")
                nil [40784 40816])
            ("top_len" variable (:type "int") nil [40850 40876])
            ("size" variable (:type "int") nil [41723 41740])
            ("fd2" variable (:type "int") nil [41723 41740])
            ("fd1" variable (:type "int") nil [41723 41740])
            ("buf" variable
               (:dereference 1
                :type "char")
                nil [41743 41758])
            ("file" variable (:type ("stat" type
                 (:prototype t
                  :type "struct")
                  nil nil)) nil [41761 41778])
            ("TEMP_FAILURE_RETRY" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("close" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [42368 42378]))                  
                :type "int")
                nil [42349 42380])
            ("TEMP_FAILURE_RETRY" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("close" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [42402 42412]))                  
                :type "int")
                nil [42383 42414])
            ("st" variable (:type ("stat" type
                 (:prototype t
                  :type "struct")
                  nil nil)) nil [44095 44110])
            ("st_size" variable (:type "int") nil [44204 44212])
            ("Byte" variable
               (:typemodifiers ("static")
                :constant-flag t
                :type ("int64_t" type (:type "class") nil nil))
                nil [45289 45319])
            ("reach_size_unit" variable (:constant-flag t) nil [45622 45637])
            ("snprintf" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("outbuf" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [45689 45696])
                    ("" variable (:type ("outlen" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [45697 45704])
                    ("" variable (:type ("fmt" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [45705 45709])
                    ("" variable (:type ("size" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [45723 45729])
                    ("" variable (:type ("unit" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [45743 45748]))                  
                :type "int")
                nil [45680 45749])
            ("snprintf" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("outbuf" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [45780 45787])
                    ("" variable (:type ("outlen" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [45788 45795]))                  
                :type "int")
                nil [45771 45800])
            ("snprintf" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("outbuf" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [45835 45842])
                    ("" variable (:type ("outlen" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [45843 45850]))                  
                :type "int")
                nil [45826 45857])
            ("g_opened_files" variable
               (:typemodifiers ("static")
                :type "int")
                nil [46194 46224])
            ("fp" variable
               (:pointer 1
                :type ("FILE" type (:type "class") nil nil))
                nil [46282 46291])
            ("fp" variable (:type "int") nil [46626 46629])
            ("fclose" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("fp" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [46768 46771]))                  
                :type "int")
                nil [46761 46772])
            ("fm" variable
               (:pointer 1
                :type ("file_mem" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [46945 46965])
            ("fp" variable
               (:pointer 1
                :type ("FILE" type (:type "class") nil nil))
                nil [46968 46977])
            ("length" variable (:type ("int64_t" type (:type "class") nil nil)) nil [46980 46995])
            ("readed" variable (:type ("size_t" type (:type "class") nil nil)) nil [46998 47012])
            ("NULL" variable (:type "int") nil [47053 47058])
            ("length" variable (:type "int") nil [47078 47103])
            ("NULL" variable (:type "int") nil [47152 47157])
            ("fp" variable (:type "int") nil [47177 47201])
            ("NULL" variable (:type "int") nil [47223 47228])
            ("fm" variable (:type "int") nil [47233 47263])
            ("length" variable (:type "int") nil [47270 47294])
            ("content" variable (:type "int") nil [47410 47451])
            ("readed" variable (:type "int") nil [47456 47503])
            ("content" variable
               (:dereference 1
                :type "int")
                nil [47628 47655])
            ("xfclose" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("fp" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [47666 47669]))                  
                :type "int")
                nil [47658 47670])
            ("fm" variable (:type "int") nil [47682 47685])
            ("fp" variable
               (:pointer 1
                :type ("FILE" type (:type "class") nil nil))
                nil [47961 47970])
            ("xfclose" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("fp" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [48138 48141]))                  
                :type "int")
                nil [48130 48142])
            ("tmpfile" variable
               (:dereference 1
                :type "char")
                nil [48393 48434])
            ("tmpdir" variable
               (:dereference 1
                :type "char")
                nil [48393 48434])
            ("mallptr" variable
               (:pointer 1
                :type "char")
                nil [49202 49226])
            ("origptr" variable
               (:pointer 1
                :type "char")
                nil [49202 49226])
            ("nm" variable (:type ("size_t" type (:type "class") nil nil)) nil [49229 49253])
            ("count" variable (:type ("size_t" type (:type "class") nil nil)) nil [49229 49253])
            ("ch" variable (:type "int") nil [49256 49263])
            ("origptr" variable (:type "int") nil [49268 49287])
            ("mallptr" variable (:type "int") nil [49290 49305])
            ("count" variable (:type "int") nil [49308 49318])
            ("lineptr" variable
               (:pointer 1
                :type "int")
                nil [50272 50291])
            ("n" variable
               (:pointer 1
                :type "int")
                nil [50294 50305])
            ("count" variable (:type "int") nil [50317 50323])
            ("get_delim" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("lineptr" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [50503 50511])
                    ("" variable (:type ("n" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [50512 50514])
                    ("" variable (:type ("fp" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [50521 50524]))                  
                :type "int")
                nil [50493 50525])
            ("block" variable
               (:pointer 1
                :type "char")
                nil [50634 50657])
            ("buf" variable
               (:dereference 1
                :type "char")
                nil [50634 50657])
            ("nblock" variable (:type ("size_t" type (:type "class") nil nil)) nil [50660 50679])
            ("len" variable (:type ("size_t" type (:type "class") nil nil)) nil [50660 50679])
            ("ret" variable (:type "int") nil [50682 50690])
            ("block" variable (:type "int") nil [50695 50707])
            ("nblock" variable (:type "int") nil [50731 50742])
            ("foreach_block" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("fp" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [51097 51100])
                    ("" variable (:type ("func" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [51101 51106])
                    ("" variable (:type ("arg" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [51113 51117]))                  
                :type "int")
                nil [51083 51118])
            ("output" variable
               (:dereference 1
                :typemodifiers ("static")
                :type "char")
                nil [51413 51436])
            ("tm" variable
               (:pointer 1
                :type ("tm" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [51440 51470])
            ("NULL" variable (:type "int") nil [51492 51497])
            ("NULL" variable (:type "int") nil [51563 51568])
            ("output" variable (:type "int") nil [51581 51588])
            ("fmttime" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [51683 51685]))                  
                :type "int")
                nil [51675 51698])
            ("fmttime" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [51792 51794]))                  
                :type "int")
                nil [51784 51807])
            ("fmttime" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [51917 51919]))                  
                :type "int")
                nil [51909 51941])
            ("year" variable
               (:dereference 1
                :type "char")
                nil [51969 51994])
            ("month" variable
               (:dereference 1
                :type "char")
                nil [51997 52023])
            ("day" variable
               (:dereference 1
                :type "char")
                nil [52026 52050])
            ("hour" variable
               (:dereference 1
                :type "char")
                nil [52053 52078])
            ("minute" variable
               (:dereference 1
                :type "char")
                nil [52081 52108])
            ("second" variable
               (:dereference 1
                :type "char")
                nil [52111 52138])
            ("millisecond" variable
               (:dereference 1
                :type "char")
                nil [52141 52173])
            ("microsecond" variable
               (:dereference 1
                :type "char")
                nil [52176 52208])
            ("tu_locale_single" variable
               (:typemodifiers ("static")
                :type ("time_units" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [52216 52258])
            ("tu_locale_plural" variable
               (:typemodifiers ("static")
                :type ("time_units" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [52260 52302])
            ("tu_single_init" variable
               (:typemodifiers ("static")
                :type "int")
                nil [52304 52334])
            ("tu_plural_init" variable
               (:typemodifiers ("static")
                :type "int")
                nil [52336 52366])
            ("intl" variable
               (:pointer 1
                :type ("time_units" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [52629 52653])
            ("ASSERT" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable
                       (:reference 1
                        :type ("year" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [52665 52672])
                    ("" variable
                       (:reference 1
                        :type ("month" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [52673 52681])
                    ("" variable
                       (:reference 1
                        :type ("day" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [52682 52688])
                    ("" variable
                       (:reference 1
                        :type ("hour" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [52689 52696])
                    ("" variable
                       (:reference 1
                        :type ("minute" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [52697 52706])
                    ("" variable (:type ("second" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [52707 52714]))                  
                :type "int")
                nil [52658 52715])
            ("memset" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("intl" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [52861 52866]))                  
                :type "int")
                nil [52854 52897])
            ("strncpy" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("intl" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [52908 52913])
                    ("" variable (:type ("year" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [52914 52919])
                    ("" variable (:type ("year" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [52920 52925])
                    ("" variable (:type ("TIME_UNIT_MAX" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [52926 52940]))                  
                :type "int")
                nil [52900 52941])
            ("strncpy" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("intl" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [52952 52957])
                    ("" variable (:type ("month" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [52958 52964])
                    ("" variable (:type ("month" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [52965 52971])
                    ("" variable (:type ("TIME_UNIT_MAX" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [52972 52986]))                  
                :type "int")
                nil [52944 52987])
            ("strncpy" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("intl" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [52998 53003])
                    ("" variable (:type ("day" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [53004 53008])
                    ("" variable (:type ("day" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [53009 53013])
                    ("" variable (:type ("TIME_UNIT_MAX" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [53014 53028]))                  
                :type "int")
                nil [52990 53029])
            ("strncpy" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("intl" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [53040 53045])
                    ("" variable (:type ("hour" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [53046 53051])
                    ("" variable (:type ("hour" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [53052 53057])
                    ("" variable (:type ("TIME_UNIT_MAX" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [53058 53072]))                  
                :type "int")
                nil [53032 53073])
            ("strncpy" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("intl" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [53084 53089])
                    ("" variable (:type ("minute" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [53090 53097])
                    ("" variable (:type ("minute" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [53098 53105])
                    ("" variable (:type ("TIME_UNIT_MAX" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [53106 53120]))                  
                :type "int")
                nil [53076 53121])
            ("strncpy" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("intl" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [53132 53137])
                    ("" variable (:type ("second" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [53138 53145])
                    ("" variable (:type ("second" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [53146 53153])
                    ("" variable (:type ("TIME_UNIT_MAX" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [53154 53168]))                  
                :type "int")
                nil [53124 53169])
            ("tu_en_single" variable
               (:typemodifiers ("static")
                :type ("time_units" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [53301 53395])
            ("tu_en_plural" variable
               (:typemodifiers ("static")
                :type ("time_units" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [53398 53498])
            ("secs_per_second" variable
               (:typemodifiers ("static")
                :constant-flag t
                :type ("int64_t" type (:type "class") nil nil))
                nil [53503 53544])
            ("secs_per_minute" variable
               (:typemodifiers ("static")
                :constant-flag t
                :type ("int64_t" type (:type "class") nil nil))
                nil [53547 53589])
            ("secs_per_hour" variable
               (:typemodifiers ("static")
                :constant-flag t
                :type ("int64_t" type (:type "class") nil nil))
                nil [53592 53637])
            ("cut" variable (:type "int") nil [53816 53829])
            ("pos" variable (:type "int") nil [53816 53829])
            ("nsecond" variable (:type ("int64_t" type (:type "class") nil nil)) nil [53832 53880])
            ("nminute" variable (:type ("int64_t" type (:type "class") nil nil)) nil [53832 53880])
            ("nhour" variable (:type ("int64_t" type (:type "class") nil nil)) nil [53832 53880])
            ("nday" variable (:type ("int64_t" type (:type "class") nil nil)) nil [53832 53880])
            ("nmonth" variable (:type ("int64_t" type (:type "class") nil nil)) nil [53832 53880])
            ("nyear" variable (:type ("int64_t" type (:type "class") nil nil)) nil [53832 53880])
            ("second_s" variable
               (:pointer 1
                :constant-flag t
                :type "char")
                nil [53883 53951])
            ("minute_s" variable
               (:pointer 1
                :constant-flag t
                :type "char")
                nil [53883 53951])
            ("hour_s" variable
               (:pointer 1
                :constant-flag t
                :type "char")
                nil [53883 53951])
            ("day_s" variable
               (:pointer 1
                :constant-flag t
                :type "char")
                nil [53883 53951])
            ("month_s" variable
               (:pointer 1
                :constant-flag t
                :type "char")
                nil [53883 53951])
            ("year_s" variable
               (:pointer 1
                :constant-flag t
                :type "char")
                nil [53883 53951])
            ("units_plural" variable
               (:pointer 1
                :type ("time_units" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [53954 54001])
            ("units_single" variable
               (:pointer 1
                :type ("time_units" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [53954 54001])
            ("units_single" variable (:type "int") nil [54048 54081])
            ("units_single" variable (:type "int") nil [54092 54121])
            ("units_plural" variable (:type "int") nil [54168 54201])
            ("units_plural" variable (:type "int") nil [54232 54265])
            ("units_plural" variable (:type "int") nil [54276 54305])
            ("memset" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("outbuf" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [54317 54324])
                    ("" variable (:type ("outlen" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [54328 54335]))                  
                :type "int")
                nil [54310 54336])
            ("pos" variable (:type "int") nil [54393 54401])
            ("cutoff" variable
               (:suffix ":10"
                :type "int")
                nil [54423 54435])
            ("reach_time_unit" variable (:constant-flag t) nil [54447 54462])
            ("Sleep" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type ("seconds" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [55133 55145]))                  
                :type "int")
                nil [55127 55147])
            ("Sleep" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("milliseconds" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [55433 55446]))                  
                :type "int")
                nil [55427 55447])
            ("QueryPerformanceCounter" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("meter" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [55602 55608])
                    ("" variable (:type ("start" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [55609 55615]))                  
                :type "int")
                nil [55577 55616])
            ("QueryPerformanceCounter" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("meter" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [55755 55761])
                    ("" variable (:type ("stop" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [55762 55767]))                  
                :type "int")
                nil [55730 55768])
            ("freq" variable (:type ("LARGE_INTEGER" type (:type "class") nil nil)) nil [55992 56011])
            ("QueryPerformanceFrequency" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("freq" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [56041 56046]))                  
                :type "int")
                nil [56014 56047])
            ("QuadPart" variable (:type "int") nil [56139 56148])
            ("li" variable (:type ("LARGE_INTEGER" type (:type "class") nil nil)) nil [56548 56565])
            ("QueryPerformanceCounter" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("li" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [56593 56596]))                  
                :type "int")
                nil [56568 56597])
            ("IsASCII" variable (:type "int") nil [56988 57004])
            ("start" variable
               (:pointer 1
                :type "unsigned char")
                nil [57007 57054])
            ("end" variable
               (:pointer 1
                :type "unsigned char")
                nil [57057 57109])
            ("IsASCII" variable (:type "int") nil [57234 57242])
            ("IsUTF8" variable (:type "int") nil [57918 57933])
            ("start" variable
               (:pointer 1
                :type "unsigned char")
                nil [57936 57983])
            ("end" variable
               (:pointer 1
                :type "unsigned char")
                nil [57986 58038])
            ("IsUTF8" variable (:type "int") nil [58889 58896])
            ("IsGB2312" variable (:type "int") nil [58971 58988])
            ("start" variable
               (:pointer 1
                :type "unsigned char")
                nil [58991 59038])
            ("end" variable
               (:pointer 1
                :type "unsigned char")
                nil [59041 59093])
            ("IsGB2312" variable (:type "int") nil [59879 59888])
            ("IsGBK" variable (:type "int") nil [59957 59971])
            ("start" variable
               (:pointer 1
                :type "unsigned char")
                nil [59974 60021])
            ("end" variable
               (:pointer 1
                :type "unsigned char")
                nil [60024 60076])
            ("IsGBK" variable (:type "int") nil [61817 61823])
            ("MATCH_CHARSET_RETURN" variable (:constant-flag t) nil [61838 61858])
            ("strncpy" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("outbuf" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [61920 61927])
                    ("" variable (:type ("csname" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [61928 61935])
                    ("" variable (:type ("outlen" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [61936 61943]))                  
                :type "int")
                nil [61912 61946])
            ("outbuf" variable
               (:dereference 1
                :type "int")
                nil [61951 61973])
            ("ascii" variable (:type ("uint" type (:type "class") nil nil)) nil [62537 62548])
            ("utf8" variable (:type ("uint" type (:type "class") nil nil)) nil [62551 62561])
            ("gb2312" variable (:type ("uint" type (:type "class") nil nil)) nil [62564 62576])
            ("gbk" variable (:type ("uint" type (:type "class") nil nil)) nil [62579 62588])
            ("gb18030" variable (:type ("uint" type (:type "class") nil nil)) nil [62591 62604])
            ("unknown" variable (:type ("uint" type (:type "class") nil nil)) nil [62607 62620])
            ("max_line" variable (:type ("uint" type (:type "class") nil nil)) nil [62625 62639])
            ("count" variable (:type ("uint" type (:type "class") nil nil)) nil [62642 62653])
            ("fci" variable
               (:pointer 1
                :type ("file_charset_info" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [62762 62825])
            ("fp" variable
               (:pointer 1
                :type ("FILE" type (:type "class") nil nil))
                nil [63540 63549])
            ("fci" variable
               (:pointer 1
                :type ("file_charset_info" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [63552 63582])
            ("fp" variable (:type "int") nil [63641 63665])
            ("fci" variable (:type "int") nil [63815 63855])
            ("memset" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("fci" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [63865 63869]))                  
                :type "int")
                nil [63858 63907])
            ("max_line" variable
               (:suffix ":0"
                :type "int")
                nil [63958 63971])
            ("foreach_line" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("fp" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [64003 64006])
                    ("" variable (:type ("get_line_charset" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [64007 64024])
                    ("" variable (:type ("fci" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [64025 64029]))                  
                :type "int")
                nil [63990 64030])
            ("xfclose" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("fp" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [64041 64044]))                  
                :type "int")
                nil [64033 64045])
            ("not_reached" function
               (:prototype-flag t
                :type "int")
                nil [65285 65299])
            ("FOUND_FILE_BOM" variable (:constant-flag t) nil [65326 65340])
            ("fseek" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("fp" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [65416 65419])
                    ("" variable (:type ("len" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [65423 65427])
                    ("" variable (:type ("SEEK_CUR" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [65428 65437]))                  
                :type "int")
                nil [65410 65438])
            ("len" variable (:type ("size_t" type (:type "class") nil nil)) nil [65782 65804])
            ("cslen" variable (:type ("size_t" type (:type "class") nil nil)) nil [65782 65804])
            ("utf16be" variable (:type "int") nil [65807 65836])
            ("utf16le" variable (:type "int") nil [65807 65836])
            ("fread" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("buf" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [65912 65917])
                    ("" variable (:type ("len" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [65918 65922])
                    ("" variable (:type ("fp" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [65929 65932]))                  
                :type "int")
                nil [65899 65933])
            ("fseek" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("fp" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [66790 66793])
                    ("" variable (:type ("len" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [66809 66813])
                    ("" variable (:type ("SEEK_CUR" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [66814 66823]))                  
                :type "int")
                nil [66784 66824])
            ("UTF8_BOM" variable (:constant-flag t) nil [66900 66908])
            ("UTF16LE_BOM" variable (:constant-flag t) nil [66934 66945])
            ("UTF16BE_BOM" variable (:constant-flag t) nil [66967 66978])
            ("UTF32LE_BOM" variable (:constant-flag t) nil [67000 67011])
            ("UTF32BE_BOM" variable (:constant-flag t) nil [67041 67052])
            ("GB18030_BOM" variable (:constant-flag t) nil [67082 67093])
            ("ELSEIF_FILE_BOM" variable (:constant-flag t) nil [67125 67140])
            ("len" variable (:type ("size_t" type (:type "class") nil nil)) nil [67443 67458])
            ("len" variable (:type "int") nil [67841 67845])
            ("UTF8_ASCII" variable (:constant-flag t) nil [67964 67974])
            ("UTF8_FIRST" variable (:constant-flag t) nil [68019 68029])
            ("UTF8_OTHER" variable (:constant-flag t) nil [68074 68084])
            ("utf8" variable (:type "int") nil [68176 68181])
            ("count" variable (:type "int") nil [68184 68198])
            ("count" variable (:type "int") nil [68369 68375])
            ("utf8" variable (:type "int") nil [68664 68669])
            ("p" variable
               (:pointer 1
                :constant-flag t
                :type ("byte" type (:type "class") nil nil))
                nil [68672 68705])
            ("strcpy" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("outbuf" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [68791 68798])
                    ("" variable (:type ("utf8" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [68799 68804]))                  
                :type "int")
                nil [68784 68805])
            ("slen" variable (:type "int") nil [68816 68821])
            ("count" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) nil [69004 69032])
            ("count" variable (:type "int") nil [69128 69134])
            ("_Source" variable
               (:pointer 1
                :constant-flag t
                :type "char")
                nil [69665 69691])
            ("_Dsize" variable (:type ("size_t" type (:type "class") nil nil)) nil [69695 69742])
            ("_Dest" variable
               (:pointer 1
                :type "wchar_t")
                nil [69746 69806])
            ("mbstowcs" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("_Dest" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [69819 69825])
                    ("" variable (:type ("_Source" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [69825 69833])
                    ("" variable (:type ("_Dsize" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [69833 69840]))                  
                :type "int")
                nil [69810 69841])
            ("setlocale" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("LC_ALL" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [69857 69864])
                    ("" variable (:type ("curLocale" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [69865 69875]))                  
                :type "int")
                nil [69847 69876])
            ("_Dest" variable (:type "int") nil [69887 69893])
            ("NULL" variable (:type "int") nil [69909 69914])
            ("_Source" variable
               (:pointer 1
                :constant-flag t
                :type "wchar_t")
                nil [70401 70430])
            ("_Dsize" variable (:type ("size_t" type (:type "class") nil nil)) nil [70434 70481])
            ("_Dest" variable
               (:pointer 1
                :type "char")
                nil [70485 70525])
            ("wcstombs" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("_Dest" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [70538 70544])
                    ("" variable (:type ("_Source" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [70544 70552])
                    ("" variable (:type ("_Dsize" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [70552 70559]))                  
                :type "int")
                nil [70529 70560])
            ("setlocale" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("LC_ALL" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [70576 70583])
                    ("" variable (:type ("curLocale" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [70584 70594]))                  
                :type "int")
                nil [70566 70595])
            ("_Dest" variable (:type "int") nil [70606 70612])
            ("NULL" variable (:type "int") nil [70628 70633])
            ("lcs" variable (:type "int") nil [75227 75231])
            ("log_dprintf" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("LOG_ERROR" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [81017 81027]))                  
                :type "int")
                nil [81005 81044])
            ("INVALID_PROCESS" variable (:type "int") nil [81054 81070])
            ("new_fd" variable (:type "int") nil [81111 81131])
            ("null_fd" variable (:type "int") nil [81111 81131])
            ("null_fd" variable (:type "int") nil [81135 81193])
            ("new_fd" variable (:type "int") nil [81295 81352])
            ("TEMP_FAILURE_RETRY" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("close" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [81511 81525]))                  
                :type "int")
                nil [81492 81527])
            ("signal" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("SIGHUP" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [81555 81562])
                    ("" variable (:type ("SIG_DFL" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [81563 81571]))                  
                :type "int")
                nil [81548 81572])
            ("signal" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("SIGINT" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [81582 81589])
                    ("" variable (:type ("SIG_DFL" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [81590 81598]))                  
                :type "int")
                nil [81575 81599])
            ("signal" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("SIGILL" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [81609 81616])
                    ("" variable (:type ("SIG_DFL" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [81617 81625]))                  
                :type "int")
                nil [81602 81626])
            ("signal" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("SIGABRT" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [81636 81644])
                    ("" variable (:type ("SIG_DFL" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [81645 81653]))                  
                :type "int")
                nil [81629 81654])
            ("signal" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("SIGFPE" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [81664 81671])
                    ("" variable (:type ("SIG_DFL" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [81672 81680]))                  
                :type "int")
                nil [81657 81681])
            ("signal" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("SIGBUS" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [81691 81698])
                    ("" variable (:type ("SIG_DFL" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [81699 81707]))                  
                :type "int")
                nil [81684 81708])
            ("signal" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("SIGSEGV" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [81718 81726])
                    ("" variable (:type ("SIG_DFL" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [81727 81735]))                  
                :type "int")
                nil [81711 81736])
            ("signal" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("SIGSYS" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [81746 81753])
                    ("" variable (:type ("SIG_DFL" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [81754 81762]))                  
                :type "int")
                nil [81739 81763])
            ("signal" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("SIGTERM" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [81773 81781])
                    ("" variable (:type ("SIG_DFL" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [81782 81790]))                  
                :type "int")
                nil [81766 81791])
            ("execl" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("executable_and_param" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [81837 81858])
                    ("" variable (:type ("NULL" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [81859 81864]))                  
                :type "int")
                nil [81808 81865])
            ("_exit" function
               (:prototype-flag t
                :type "int")
                nil [81892 81903])
            ("pid" variable (:type "int") nil [81917 81921])
            ("status" variable (:type "int") nil [82290 82306])
            ("wait_per_cycle" variable
               (:constant-flag t
                :type "int")
                nil [82381 82411])
            ("time_waited" variable (:type "int") nil [82428 82448])
            ("msleep" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("wait_per_cycle" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [82483 82498]))                  
                :type "int")
                nil [82476 82499])
            ("ret_pid" variable (:type "int") nil [82503 82568])
            ("wait_per_cycle" variable (:type "int") nil [82587 82602])
            ("exit_code" variable
               (:pointer 1
                :type "int")
                nil [82788 82804])
            ("exit_code" variable
               (:pointer 1
                :type "int")
                nil [82881 82914])
            ("tries" variable (:type "int") nil [83400 83415])
            ("sleep_ms" variable (:type "unsigned int") nil [83418 83440])
            ("kMaxSleepMs" variable
               (:constant-flag t
                :type "unsigned int")
                nil [83443 83477])
            ("exited" variable (:type "int") nil [83480 83495])
            ("CloseHandle" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [85298 85300]))                  
                :type "int")
                nil [85286 85301])
            ("counter" variable (:type "int") nil [85820 85828])
            ("stf" variable (:type ("statfs" type
                 (:prototype t
                  :type "struct")
                  nil nil)) nil [90454 90472])
            ("fsu_total" variable (:type "int") nil [90528 90567])
            ("fsu_free" variable (:type "int") nil [90576 90613])
            ("fsu_avail" variable (:type "int") nil [90622 90661])
            ("fsu_files" variable (:type "int") nil [90670 90694])
            ("fsu_ffree" variable (:type "int") nil [90703 90727])
            ("ERRBUF_LEN" variable (:constant-flag t) nil [90964 90974])
            ("p" variable
               (:pointer 1
                :type "int")
                nil [97697 97711])
            ("p" variable
               (:pointer 1
                :type "int")
                nil [97715 97722])
            ("i" variable (:type ("size_t" type (:type "class") nil nil)) nil [98141 98150])
            ("i" variable (:type "int") nil [98160 98166])
            ("len" variable (:type "int") nil [98171 98175])
            ("buf" variable (:type "int") nil [98290 98294])
            ("ptr" variable
               (:pointer 1
                :type "void")
                nil [98513 98523])
            ("NULL" variable (:type "int") nil [98574 98579])
            ("ptr" variable (:type "int") nil [98620 98624])
            ("LOG_DBG" variable (:constant-flag t) nil [98863 98870])
            ("LOG_USER" variable (:constant-flag t) nil [98897 98905])
            ("LOG_VALID" variable (:constant-flag t) nil [98935 98944])
            ("log_min_severity" variable
               (:typemodifiers ("static")
                :type "int")
                nil [99188 99220])
            ("log_debug_stderr" variable
               (:typemodifiers ("static")
                :type "int")
                nil [99238 99270])
            ("log_min_severity" variable (:type "int") nil [99502 99530])
            ("log_debug_stderr" variable (:type "int") nil [99580 99606])
            ("i" variable (:type "int") nil [99649 99655])
            ("i" variable (:type "int") nil [99663 99669])
            ("log_files" variable
               (:dereference 1
                :type "int")
                nil [99698 99718])
            ("mutex_init" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("log_locks" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [99734 99746]))                  
                :type "int")
                nil [99722 99748])
            ("i" variable (:type "int") nil [99835 99841])
            ("i" variable (:type "int") nil [99928 99941])
            ("log_lock" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("i" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [99979 99981]))                  
                :type "int")
                nil [99970 99982])
            ("log_unlock" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("i" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [100283 100285]))                  
                :type "int")
                nil [100272 100286])
            ("LOG_INVALID" variable (:type "int") nil [100302 100314])
            ("log_unlock" function
               (:prototype-flag t
                :type "int")
                nil [100544 100564])
            ("setvbuf" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("log_files" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [100686 100704])
                    ("" variable (:type ("NULL" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [100706 100711])
                    ("" variable (:type ("_IOLBF" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [100712 100719]))                  
                :type "int")
                nil [100678 100726])
            ("log_unlock" function
               (:prototype-flag t
                :type "int")
                nil [100885 100905])
            ("LOG_INVALID" variable (:type "int") nil [100963 100975])
            ("fp" variable
               (:pointer 1
                :type ("FILE" type (:type "class") nil nil))
                nil [101038 101047])
            ("args" variable (:type ("va_list" type (:type "class") nil nil)) nil [101050 101063])
            ("log_unlock" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("log_id" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [101178 101185]))                  
                :type "int")
                nil [101167 101186])
            ("fp" variable
               (:pointer 1
                :type ("FILE" type (:type "class") nil nil))
                nil [101493 101502])
            ("t" variable (:type ("time_t" type (:type "class") nil nil)) nil [101505 101514])
            ("p" variable
               (:pointer 1
                :constant-flag t
                :type "char")
                nil [101535 101549])
            ("args" variable (:type ("va_list" type (:type "class") nil nil)) nil [101552 101565])
            ("level" variable (:type "int") nil [101568 101578])
            ("log_unlock" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("log_id" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [101855 101862]))                  
                :type "int")
                nil [101844 101863])
            ("argsd" variable (:type ("va_list" type (:type "class") nil nil)) nil [102421 102435])
            ("va_start" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("argsd" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [102454 102460])
                    ("" variable (:type ("fmt" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [102461 102465]))                  
                :type "int")
                nil [102445 102466])
            ("vfprintf" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("stderr" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [102485 102492])
                    ("" variable (:type ("fmt" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [102493 102497])
                    ("" variable (:type ("argsd" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [102498 102504]))                  
                :type "int")
                nil [102476 102505])
            ("va_end" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("argsd" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [102522 102528]))                  
                :type "int")
                nil [102515 102529])
            ("fputc" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("fp" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [102614 102617]))                  
                :type "int")
                nil [102602 102618])
            ("fputc" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("stderr" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [102679 102686]))                  
                :type "int")
                nil [102667 102687])
            ("xfclose" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("log_files" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [103104 103121]))                  
                :type "int")
                nil [103096 103123])
            ("log_files" variable
               (:dereference 1
                :type "int")
                nil [103127 103152])
            ("i" variable (:type "int") nil [103307 103313])
            ("i" variable (:type "int") nil [103321 103334])
            ("q" variable
               (:pointer 1
                :type "char")
                nil [108662 108680])
            ("p" variable
               (:pointer 1
                :type "char")
                nil [108662 108680])
            ("ver" variable
               (:pointer 1
                :type "char")
                nil [108662 108680])
            ("id" variable (:type "int") nil [108683 108694])
            ("major" variable
               (:pointer 1
                :type "int")
                nil [108753 108764])
            ("minor" variable
               (:pointer 1
                :type "int")
                nil [108778 108789])
            ("revision" variable
               (:pointer 1
                :type "int")
                nil [108806 108820])
            ("build" variable
               (:pointer 1
                :type "int")
                nil [108834 108845])
            ("suffix" variable
               (:pointer 1
                :type "int")
                nil [108860 108875])
            ("strncpy" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("suffix" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [108960 108967])
                    ("" variable (:type ("p" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [108968 108970])
                    ("" variable (:type ("slen" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [108973 108978]))                  
                :type "int")
                nil [108952 108979])
            ("suffix" variable
               (:dereference 1
                :type "int")
                nil [108983 109005])
            ("q" variable (:type "int") nil [109089 109097])
            ("major" variable
               (:pointer 1
                :type "int")
                nil [109163 109191])
            ("minor" variable
               (:pointer 1
                :type "int")
                nil [109226 109254])
            ("revision" variable
               (:pointer 1
                :type "int")
                nil [109292 109323])
            ("build" variable
               (:pointer 1
                :type "int")
                nil [109358 109386])
            ("build1" variable (:type "int") nil [109597 109635])
            ("revision1" variable (:type "int") nil [109597 109635])
            ("minor1" variable (:type "int") nil [109597 109635])
            ("major1" variable (:type "int") nil [109597 109635])
            ("build2" variable (:type "int") nil [109638 109676])
            ("revision2" variable (:type "int") nil [109638 109676])
            ("minor2" variable (:type "int") nil [109638 109676])
            ("major2" variable (:type "int") nil [109638 109676])
            ("init" variable
               (:typemodifiers ("static")
                :type "int")
                nil [110589 110609])
            ("proc" variable
               (:dereference 1
                :type "char")
                nil [110916 110930])
            ("n" variable (:type ("ssize_t" type (:type "class") nil nil)) nil [110934 110944])
            ("sprintf" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("proc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [110956 110961])
                    ("" variable (:type ("getpid" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [110978 110986]))                  
                :type "int")
                nil [110948 110988])
            ("n" variable (:type "int") nil [110992 111027])
            ("path" variable
               (:dereference 1
                :type "int")
                nil [111062 111077])
            ("path" variable
               (:dereference 1
                :type "int")
                nil [111090 111105])
            ("init" variable (:type "int") nil [111130 111139])
            ("path" variable (:type "int") nil [111155 111160])
            ("slash_end" variable
               (:pointer 1
                :constant-flag t
                :type "char")
                nil [111266 111295])
            ("path" variable
               (:pointer 1
                :constant-flag t
                :type "char")
                nil [111266 111295])
            ("path" variable (:type "int") nil [111354 111359])
            ("empty" variable (:type "int") nil [111476 111482])
            ("init" variable
               (:typemodifiers ("static")
                :type "int")
                nil [111635 111655])
            ("path" variable
               (:pointer 1
                :constant-flag t
                :type "char")
                nil [111678 111716])
            ("dir" variable
               (:dereference 1
                :type "int")
                nil [111932 111946])
            ("init" variable (:type "int") nil [111952 111961])
            ("dir" variable (:type "int") nil [111977 111981])
            ("len" variable (:type "int") nil [112139 112147])
            ("path" variable
               (:dereference 1
                :type "int")
                nil [112626 112652])
            ("path" variable (:type "int") nil [112694 112699])
            ("len" variable (:type "int") nil [113265 113273])
            ("path" variable
               (:dereference 1
                :type "int")
                nil [113813 113839])
            ("path" variable (:type "int") nil [113881 113886])
            ("init" variable
               (:typemodifiers ("static")
                :type "int")
                nil [114052 114072])
            ("len" variable (:type "int") nil [114095 114103])
            ("strcpy" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("path" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [114477 114482]))                  
                :type "int")
                nil [114470 114492])
            ("path" variable
               (:dereference 1
                :type "int")
                nil [114656 114671])
            ("init" variable (:type "int") nil [114677 114686])
            ("path" variable (:type "int") nil [114702 114707])
            ("prefix_use" variable
               (:pointer 1
                :constant-flag t
                :type "char")
                nil [114997 115035])
            ("prefix_use" variable (:type "int") nil [115066 115086])
            ("tempname" variable
               (:pointer 1
                :type "char")
                nil [115684 115729])
            ("strncpy" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("outbuf" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [115773 115780])
                    ("" variable (:type ("tempname" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [115781 115790])
                    ("" variable (:type ("outlen" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [115791 115798]))                  
                :type "int")
                nil [115765 115799])
            ("tempname" variable
               (:dereference 1
                :type "int")
                nil [115803 115829])
            ("free" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("tempname" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [115838 115847]))                  
                :type "int")
                nil [115833 115848])
            ("NULL" variable (:type "int") nil [116069 116074])
            ("tmpfile" variable (:type "int") nil [116086 116094])
            ("KEY_MAX" variable (:constant-flag t) nil [116109 116116])
            ("VAL_MAX" variable (:constant-flag t) nil [116131 116138])
            ("i" variable (:type ("int64_t" type (:type "class") nil nil)) nil [117744 117758])
            ("i" variable (:type "int") nil [117802 117804])
            ("cnt" variable (:type "int") nil [117868 117880])
            ("cnt" variable (:type "int") nil [117904 117908])
            ("cnt" variable (:type "int") nil [117946 117950])
            ("cnt" variable (:type "int") nil [117960 117964]))          
    :file "cutil.c"
    :pointmax 118685
    :fsize 131455
    :lastmodtime '(20890 60840 913485 30000)
    :unmatched-syntax '((close-paren 118651 . 118652) (punctuation 118640 . 118641) (number 118639 . 118640) (RETURN 118632 . 118638) (open-paren 118007 . 118008) (close-paren 118004 . 118005) (open-paren 118003 . 118004) (symbol 117988 . 118003) (INT 117984 . 117987) (close-paren 117966 . 117967) (RETURN 117953 . 117959) (punctuation 117945 . 117946) (punctuation 117944 . 117945) (close-paren 117939 . 117940) (number 117938 . 117939) (punctuation 117936 . 117937) (punctuation 117935 . 117936) (semantic-list 117920 . 117934) (open-paren 117919 . 117920) (WHILE 117913 . 117918) (punctuation 117903 . 117904) (punctuation 117902 . 117903) (close-paren 117897 . 117898) (number 117896 . 117897) (punctuation 117894 . 117895) (symbol 117887 . 117893) (open-paren 117886 . 117887) (IF 117883 . 117885) (open-paren 117864 . 117865) (close-paren 117861 . 117862) (symbol 117855 . 117861) (symbol 117847 . 117854) (open-paren 117846 . 117847) (symbol 117837 . 117845) (INT 117833 . 117836) (close-paren 117806 . 117807) (RETURN 117795 . 117801) (punctuation 117789 . 117790) (close-paren 117788 . 117789) (symbol 117787 . 117788) (punctuation 117786 . 117787) (punctuation 117784 . 117785) (symbol 117778 . 117784) (string 117775 . 117778) (punctuation 117773 . 117774) (symbol 117770 . 117773) (open-paren 117769 . 117770) (symbol 117763 . 117769) (open-paren 117740 . 117741) (close-paren 117737 . 117738) (symbol 117734 . 117737) (punctuation 117732 . 117733) (CHAR 117728 . 117732) (CONST 117722 . 117727) (open-paren 117721 . 117722) (symbol 117711 . 117721) (symbol 117703 . 117710) (close-paren 117679 . 117680) (punctuation 117676 . 117677) (number 117675 . 117676) (RETURN 117668 . 117674) (punctuation 117662 . 117663) (number 117661 . 117662) (RETURN 117654 . 117660) (close-paren 117649 . 117650) (number 117648 . 117649) (punctuation 117646 . 117647) (semantic-list 117624 . 117645) (symbol 117616 . 117624) (open-paren 117615 . 117616) (IF 117612 . 117614) (open-paren 117608 . 117609) (close-paren 117605 . 117606) (symbol 117602 . 117605) (INT 117598 . 117601) (punctuation 117596 . 117597) (symbol 117593 . 117596) (punctuation 117591 . 117592) (CHAR 117587 . 117591) (punctuation 117585 . 117586) (symbol 117584 . 117585) (symbol 117576 . 117583) (open-paren 117575 . 117576) (symbol 117565 . 117575) (INT 117561 . 117564) (close-paren 117494 . 117495) (punctuation 117485 . 117486) (close-paren 117484 . 117485) (symbol 117481 . 117484) (open-paren 117480 . 117481) (symbol 117472 . 117480) (punctuation 117471 . 117472) (RETURN 117464 . 117470) (open-paren 117215 . 117216) (close-paren 117213 . 117214) (symbol 117210 . 117213) (punctuation 117208 . 117209) (CHAR 117204 . 117208) (CONST 117198 . 117203) (open-paren 117197 . 117198) (symbol 117188 . 117197) (INT 117184 . 117187) (close-paren 117138 . 117139) (punctuation 117128 . 117129) (close-paren 117127 . 117128) (symbol 117124 . 117127) (open-paren 117123 . 117124) (symbol 117117 . 117123) (RETURN 117110 . 117116) (open-paren 116736 . 116737) (close-paren 116733 . 116734) (symbol 116730 . 116733) (punctuation 116728 . 116729) (CHAR 116724 . 116728) (CONST 116718 . 116723) (open-paren 116717 . 116718) (symbol 116710 . 116717) (punctuation 116708 . 116709) (CHAR 116704 . 116708) (CONST 116698 . 116703) (close-paren 116605 . 116606) (punctuation 116596 . 116597) (close-paren 116595 . 116596) (number 116594 . 116595) (punctuation 116592 . 116593) (symbol 116589 . 116592) (punctuation 116587 . 116588) (symbol 116584 . 116587) (open-paren 116583 . 116584) (symbol 116577 . 116583) (punctuation 116576 . 116577) (RETURN 116569 . 116575) (open-paren 116271 . 116272) (close-paren 116269 . 116270) (symbol 116266 . 116269) (punctuation 116264 . 116265) (CHAR 116260 . 116264) (CONST 116254 . 116259) (punctuation 116252 . 116253) (symbol 116249 . 116252) (punctuation 116247 . 116248) (CHAR 116243 . 116247) (CONST 116237 . 116242) (open-paren 116236 . 116237) (symbol 116229 . 116236) (INT 116225 . 116228) (close-paren 116096 . 116097) (RETURN 116079 . 116085) (RETURN 116062 . 116068) (close-paren 116057 . 116058) (semantic-list 116014 . 116057) (symbol 115995 . 116014) (semantic-list 116027 . 116029) (punctuation 115994 . 115995) (open-paren 115993 . 115994) (IF 115990 . 115992) (punctuation 115983 . 115984) (close-paren 115982 . 115983) (symbol 115974 . 115982) (open-paren 115973 . 115974) (symbol 115966 . 115973) (CHAR 115961 . 115965) (STATIC 115954 . 115960) (open-paren 115950 . 115951) (close-paren 115947 . 115948) (symbol 115941 . 115947) (punctuation 115939 . 115940) (CHAR 115935 . 115939) (CONST 115929 . 115934) (open-paren 115928 . 115929) (symbol 115915 . 115928) (punctuation 115913 . 115914) (CHAR 115909 . 115913) (CONST 115903 . 115908) (close-paren 115874 . 115875) (punctuation 115863 . 115864) (number 115862 . 115863) (RETURN 115855 . 115861) (close-paren 115851 . 115852) (punctuation 115760 . 115761) (number 115759 . 115760) (RETURN 115752 . 115758) (semantic-list 115736 . 115747) (IF 115733 . 115735) (open-paren 115679 . 115680) (punctuation 115224 . 115225) (number 115223 . 115224) (RETURN 115216 . 115222) (close-paren 115211 . 115212) (semantic-list 115203 . 115211) (symbol 115185 . 115203) (punctuation 115184 . 115185) (punctuation 115183 . 115184) (punctuation 115182 . 115183) (semantic-list 115169 . 115177) (symbol 115157 . 115169) (open-paren 115156 . 115157) (IF 115153 . 115155) (punctuation 115147 . 115148) (number 115146 . 115147) (RETURN 115139 . 115145) (close-paren 115134 . 115135) (symbol 115126 . 115134) (punctuation 115124 . 115125) (symbol 115117 . 115123) (punctuation 115115 . 115116) (punctuation 115114 . 115115) (symbol 115107 . 115113) (punctuation 115106 . 115107) (punctuation 115104 . 115105) (punctuation 115103 . 115104) (symbol 115096 . 115102) (punctuation 115095 . 115096) (open-paren 115094 . 115095) (IF 115091 . 115093) (close-paren 115061 . 115062) (semantic-list 115058 . 115061) (symbol 115052 . 115058) (punctuation 115050 . 115051) (punctuation 115049 . 115050) (symbol 115042 . 115048) (open-paren 115041 . 115042) (IF 115038 . 115040) (open-paren 114993 . 114994) (close-paren 114990 . 114991) (symbol 114984 . 114990) (symbol 114977 . 114983) (punctuation 114975 . 114976) (symbol 114969 . 114975) (punctuation 114968 . 114969) (CHAR 114963 . 114967) (punctuation 114953 . 114954) (symbol 114947 . 114953) (punctuation 114946 . 114947) (CHAR 114941 . 114945) (CONST 114935 . 114940) (punctuation 114933 . 114934) (symbol 114927 . 114933) (punctuation 114925 . 114926) (CHAR 114921 . 114925) (CONST 114915 . 114920) (open-paren 114914 . 114915) (symbol 114895 . 114914) (INT 114891 . 114894) (close-paren 114709 . 114710) (RETURN 114695 . 114701) (close-paren 114689 . 114690) (ELSE 114647 . 114651) (semantic-list 114572 . 114643) (semantic-list 114522 . 114568) (IF 114519 . 114521) (string 114483 . 114490) (open-paren 114090 . 114091) (close-paren 114086 . 114087) (symbol 114082 . 114086) (punctuation 114081 . 114082) (open-paren 114080 . 114081) (IF 114077 . 114079) (punctuation 114048 . 114049) (close-paren 114047 . 114048) (symbol 114039 . 114047) (open-paren 114038 . 114039) (symbol 114034 . 114038) (CHAR 114029 . 114033) (STATIC 114022 . 114028) (open-paren 114018 . 114019) (close-paren 114015 . 114016) (open-paren 114014 . 114015) (symbol 114002 . 114014) (punctuation 114001 . 114002) (CHAR 113996 . 114000) (CONST 113990 . 113995) (close-paren 113888 . 113889) (RETURN 113874 . 113880) (punctuation 113868 . 113869) (string 113864 . 113868) (punctuation 113862 . 113863) (close-paren 113860 . 113861) (number 113859 . 113860) (open-paren 113858 . 113859) (symbol 113854 . 113858) (ELSE 113846 . 113850) (close-paren 113842 . 113843) (semantic-list 113778 . 113808) (IF 113775 . 113777) (open-paren 113770 . 113771) (close-paren 113766 . 113767) (number 113765 . 113766) (punctuation 113763 . 113764) (symbol 113754 . 113762) (punctuation 113752 . 113753) (symbol 113748 . 113751) (punctuation 113746 . 113747) (punctuation 113745 . 113746) (number 113743 . 113744) (punctuation 113741 . 113742) (symbol 113737 . 113740) (open-paren 113736 . 113737) (IF 113733 . 113735) (punctuation 113729 . 113730) (close-paren 113728 . 113729) (symbol 113724 . 113728) (open-paren 113723 . 113724) (symbol 113717 . 113723) (punctuation 113715 . 113716) (symbol 113711 . 113714) (punctuation 113684 . 113685) (string 113680 . 113684) (punctuation 113678 . 113679) (close-paren 113676 . 113677) (number 113675 . 113676) (punctuation 113674 . 113675) (symbol 113666 . 113674) (open-paren 113665 . 113666) (symbol 113661 . 113665) (punctuation 113657 . 113658) (close-paren 113656 . 113657) (symbol 113648 . 113656) (punctuation 113646 . 113647) (semantic-list 113638 . 113646) (symbol 113632 . 113638) (string 113639 . 113645) (punctuation 113630 . 113631) (symbol 113626 . 113630) (open-paren 113625 . 113626) (symbol 113618 . 113625) (punctuation 113261 . 113262) (close-paren 113260 . 113261) (symbol 113252 . 113260) (open-paren 113251 . 113252) (symbol 113247 . 113251) (CHAR 113242 . 113246) (STATIC 113235 . 113241) (open-paren 113231 . 113232) (close-paren 113228 . 113229) (open-paren 113227 . 113228) (symbol 113215 . 113227) (punctuation 113214 . 113215) (CHAR 113210 . 113214) (CONST 113204 . 113209) (close-paren 113096 . 113097) (punctuation 113093 . 113094) (number 113092 . 113093) (RETURN 113085 . 113091) (punctuation 113058 . 113059) (number 113057 . 113058) (RETURN 113050 . 113056) (close-paren 113045 . 113046) (semantic-list 113040 . 113045) (symbol 113035 . 113040) (open-paren 113034 . 113035) (IF 113031 . 113033) (open-paren 112763 . 112764) (close-paren 112760 . 112761) (symbol 112757 . 112760) (punctuation 112756 . 112757) (CHAR 112751 . 112755) (CONST 112745 . 112750) (open-paren 112744 . 112745) (symbol 112729 . 112744) (INT 112725 . 112728) (close-paren 112701 . 112702) (RETURN 112687 . 112693) (punctuation 112681 . 112682) (string 112677 . 112681) (punctuation 112675 . 112676) (close-paren 112673 . 112674) (number 112672 . 112673) (open-paren 112671 . 112672) (symbol 112667 . 112671) (ELSE 112659 . 112663) (close-paren 112655 . 112656) (semantic-list 112591 . 112621) (IF 112588 . 112590) (open-paren 112583 . 112584) (close-paren 112579 . 112580) (number 112578 . 112579) (punctuation 112576 . 112577) (symbol 112567 . 112575) (punctuation 112565 . 112566) (symbol 112561 . 112564) (punctuation 112559 . 112560) (punctuation 112558 . 112559) (number 112556 . 112557) (punctuation 112554 . 112555) (symbol 112550 . 112553) (open-paren 112549 . 112550) (IF 112546 . 112548) (punctuation 112542 . 112543) (close-paren 112541 . 112542) (symbol 112537 . 112541) (open-paren 112536 . 112537) (symbol 112530 . 112536) (punctuation 112528 . 112529) (symbol 112524 . 112527) (punctuation 112497 . 112498) (string 112493 . 112497) (punctuation 112491 . 112492) (close-paren 112489 . 112490) (number 112488 . 112489) (open-paren 112487 . 112488) (symbol 112483 . 112487) (close-paren 112478 . 112479) (semantic-list 112462 . 112478) (symbol 112456 . 112462) (punctuation 112455 . 112456) (open-paren 112454 . 112455) (IF 112451 . 112453) (punctuation 112135 . 112136) (close-paren 112134 . 112135) (symbol 112126 . 112134) (open-paren 112125 . 112126) (symbol 112121 . 112125) (CHAR 112116 . 112120) (STATIC 112109 . 112115) (open-paren 112105 . 112106) (close-paren 112102 . 112103) (open-paren 112101 . 112102) (symbol 112086 . 112101) (punctuation 112084 . 112085) (CHAR 112080 . 112084) (CONST 112074 . 112079) (close-paren 111983 . 111984) (RETURN 111970 . 111976) (close-paren 111964 . 111965) (ELSE 111923 . 111927) (semantic-list 111745 . 111919) (semantic-list 111723 . 111741) (IF 111720 . 111722) (open-paren 111673 . 111674) (close-paren 111669 . 111670) (symbol 111665 . 111669) (punctuation 111664 . 111665) (open-paren 111663 . 111664) (IF 111660 . 111662) (punctuation 111631 . 111632) (close-paren 111630 . 111631) (symbol 111622 . 111630) (open-paren 111621 . 111622) (symbol 111618 . 111621) (CHAR 111613 . 111617) (STATIC 111606 . 111612) (open-paren 111602 . 111603) (close-paren 111599 . 111600) (open-paren 111598 . 111599) (symbol 111583 . 111598) (punctuation 111581 . 111582) (CHAR 111577 . 111581) (CONST 111571 . 111576) (close-paren 111484 . 111485) (RETURN 111469 . 111475) (punctuation 111465 . 111466) (string 111461 . 111465) (punctuation 111459 . 111460) (close-paren 111457 . 111458) (number 111456 . 111457) (open-paren 111455 . 111456) (symbol 111450 . 111455) (punctuation 111444 . 111445) (number 111443 . 111444) (punctuation 111442 . 111443) (symbol 111433 . 111442) (RETURN 111426 . 111432) (close-paren 111421 . 111422) (symbol 111412 . 111421) (open-paren 111411 . 111412) (IF 111408 . 111410) (punctuation 111404 . 111405) (close-paren 111403 . 111404) (symbol 111390 . 111403) (punctuation 111388 . 111389) (symbol 111384 . 111388) (open-paren 111383 . 111384) (symbol 111376 . 111383) (punctuation 111374 . 111375) (symbol 111364 . 111373) (RETURN 111347 . 111353) (close-paren 111342 . 111343) (semantic-list 111339 . 111342) (symbol 111335 . 111339) (punctuation 111334 . 111335) (open-paren 111333 . 111334) (IF 111330 . 111332) (punctuation 111326 . 111327) (close-paren 111325 . 111326) (open-paren 111324 . 111325) (symbol 111308 . 111324) (punctuation 111306 . 111307) (symbol 111301 . 111305) (punctuation 111262 . 111263) (close-paren 111261 . 111262) (number 111260 . 111261) (open-paren 111259 . 111260) (symbol 111254 . 111259) (CHAR 111249 . 111253) (STATIC 111242 . 111248) (open-paren 111238 . 111239) (close-paren 111235 . 111236) (open-paren 111234 . 111235) (symbol 111218 . 111234) (punctuation 111216 . 111217) (CHAR 111212 . 111216) (CONST 111206 . 111211) (close-paren 111162 . 111163) (RETURN 111148 . 111154) (close-paren 111142 . 111143) (ELSE 111081 . 111085) (semantic-list 111034 . 111057) (IF 111031 . 111033) (semantic-list 110984 . 110986) (string 110962 . 110976) (open-paren 110627 . 110628) (close-paren 110623 . 110624) (symbol 110619 . 110623) (punctuation 110618 . 110619) (open-paren 110617 . 110618) (IF 110614 . 110616) (punctuation 110585 . 110586) (close-paren 110584 . 110585) (symbol 110576 . 110584) (open-paren 110575 . 110576) (symbol 110571 . 110575) (CHAR 110566 . 110570) (STATIC 110559 . 110565) (open-paren 110555 . 110556) (close-paren 110552 . 110553) (open-paren 110551 . 110552) (symbol 110535 . 110551) (punctuation 110533 . 110534) (CHAR 110529 . 110533) (CONST 110523 . 110528) (close-paren 110267 . 110268) (punctuation 110264 . 110265) (number 110263 . 110264) (RETURN 110256 . 110262) (punctuation 110233 . 110234) (number 110232 . 110233) (punctuation 110231 . 110232) (RETURN 110224 . 110230) (close-paren 110219 . 110220) (symbol 110213 . 110219) (punctuation 110211 . 110212) (symbol 110204 . 110210) (open-paren 110203 . 110204) (IF 110200 . 110202) (ELSE 110195 . 110199) (punctuation 110191 . 110192) (number 110190 . 110191) (RETURN 110183 . 110189) (close-paren 110178 . 110179) (symbol 110172 . 110178) (punctuation 110170 . 110171) (symbol 110163 . 110169) (open-paren 110162 . 110163) (IF 110159 . 110161) (punctuation 110128 . 110129) (number 110127 . 110128) (punctuation 110126 . 110127) (RETURN 110119 . 110125) (close-paren 110114 . 110115) (symbol 110105 . 110114) (punctuation 110103 . 110104) (symbol 110093 . 110102) (open-paren 110092 . 110093) (IF 110089 . 110091) (ELSE 110084 . 110088) (punctuation 110080 . 110081) (number 110079 . 110080) (RETURN 110072 . 110078) (close-paren 110067 . 110068) (symbol 110058 . 110067) (punctuation 110056 . 110057) (symbol 110046 . 110055) (open-paren 110045 . 110046) (IF 110042 . 110044) (punctuation 110012 . 110013) (number 110011 . 110012) (punctuation 110010 . 110011) (RETURN 110003 . 110009) (close-paren 109998 . 109999) (symbol 109992 . 109998) (punctuation 109990 . 109991) (symbol 109983 . 109989) (open-paren 109982 . 109983) (IF 109979 . 109981) (ELSE 109974 . 109978) (punctuation 109970 . 109971) (number 109969 . 109970) (RETURN 109962 . 109968) (close-paren 109957 . 109958) (symbol 109951 . 109957) (punctuation 109949 . 109950) (symbol 109942 . 109948) (open-paren 109941 . 109942) (IF 109938 . 109940) (punctuation 109910 . 109911) (number 109909 . 109910) (punctuation 109908 . 109909) (RETURN 109901 . 109907) (close-paren 109896 . 109897) (symbol 109890 . 109896) (punctuation 109888 . 109889) (symbol 109881 . 109887) (open-paren 109880 . 109881) (IF 109877 . 109879) (ELSE 109872 . 109876) (punctuation 109868 . 109869) (number 109867 . 109868) (RETURN 109860 . 109866) (close-paren 109855 . 109856) (symbol 109849 . 109855) (punctuation 109847 . 109848) (symbol 109840 . 109846) (open-paren 109839 . 109840) (IF 109836 . 109838) (punctuation 109815 . 109816) (close-paren 109814 . 109815) (number 109813 . 109814) (punctuation 109811 . 109812) (symbol 109807 . 109811) (punctuation 109805 . 109806) (symbol 109799 . 109805) (punctuation 109798 . 109799) (punctuation 109796 . 109797) (symbol 109787 . 109796) (punctuation 109786 . 109787) (punctuation 109784 . 109785) (symbol 109778 . 109784) (punctuation 109777 . 109778) (punctuation 109775 . 109776) (symbol 109769 . 109775) (punctuation 109768 . 109769) (punctuation 109766 . 109767) (symbol 109764 . 109766) (open-paren 109763 . 109764) (symbol 109750 . 109763) (punctuation 109746 . 109747) (close-paren 109745 . 109746) (number 109744 . 109745) (punctuation 109742 . 109743) (symbol 109738 . 109742) (punctuation 109736 . 109737) (symbol 109730 . 109736) (punctuation 109729 . 109730) (punctuation 109727 . 109728) (symbol 109718 . 109727) (punctuation 109717 . 109718) (punctuation 109715 . 109716) (symbol 109709 . 109715) (punctuation 109708 . 109709) (punctuation 109706 . 109707) (symbol 109700 . 109706) (punctuation 109699 . 109700) (punctuation 109697 . 109698) (symbol 109695 . 109697) (open-paren 109694 . 109695) (symbol 109681 . 109694) (open-paren 109593 . 109594) (close-paren 109590 . 109591) (symbol 109588 . 109590) (punctuation 109586 . 109587) (CHAR 109582 . 109586) (CONST 109576 . 109581) (punctuation 109574 . 109575) (symbol 109572 . 109574) (punctuation 109570 . 109571) (CHAR 109566 . 109570) (CONST 109560 . 109565) (open-paren 109559 . 109560) (symbol 109544 . 109559) (INT 109540 . 109543) (close-paren 109450 . 109451) (punctuation 109447 . 109448) (number 109446 . 109447) (RETURN 109439 . 109445) (punctuation 109435 . 109436) (close-paren 109434 . 109435) (symbol 109431 . 109434) (open-paren 109430 . 109431) (symbol 109425 . 109430) (close-paren 109419 . 109420) (punctuation 109415 . 109416) (punctuation 109414 . 109415) (punctuation 109413 . 109414) (symbol 109411 . 109413) (punctuation 109404 . 109405) (BREAK 109399 . 109404) (ELSE 109390 . 109394) (semantic-list 109335 . 109353) (IF 109332 . 109334) (ELSE 109327 . 109331) (semantic-list 109266 . 109287) (IF 109263 . 109265) (ELSE 109258 . 109262) (semantic-list 109203 . 109221) (IF 109200 . 109202) (ELSE 109195 . 109199) (semantic-list 109140 . 109158) (IF 109137 . 109139) (open-paren 109132 . 109133) (close-paren 109128 . 109129) (semantic-list 109119 . 109128) (symbol 109113 . 109119) (string 109124 . 109127) (punctuation 109120 . 109121) (punctuation 109111 . 109112) (symbol 109109 . 109110) (open-paren 109108 . 109109) (WHILE 109102 . 109107) (punctuation 109085 . 109086) (close-paren 109084 . 109085) (symbol 109077 . 109084) (open-paren 109076 . 109077) (symbol 109069 . 109076) (punctuation 109067 . 109068) (close-paren 109065 . 109066) (symbol 109058 . 109065) (punctuation 109056 . 109057) (symbol 109054 . 109055) (punctuation 109052 . 109053) (symbol 109045 . 109052) (open-paren 109044 . 109045) (symbol 109036 . 109044) (punctuation 109034 . 109035) (symbol 109032 . 109033) (punctuation 109030 . 109031) (symbol 109026 . 109029) (close-paren 109008 . 109009) (number 108970 . 108971) (punctuation 108969 . 108970) (open-paren 108947 . 108948) (close-paren 108943 . 108944) (symbol 108937 . 108943) (punctuation 108935 . 108936) (punctuation 108934 . 108935) (symbol 108932 . 108933) (open-paren 108931 . 108932) (IF 108928 . 108930) (punctuation 108924 . 108925) (close-paren 108923 . 108924) (string 108920 . 108923) (punctuation 108918 . 108919) (symbol 108911 . 108918) (semantic-list 108904 . 108911) (open-paren 108903 . 108904) (symbol 108897 . 108903) (punctuation 108895 . 108896) (symbol 108893 . 108894) (close-paren 108858 . 108859) (symbol 108852 . 108858) (open-paren 108851 . 108852) (IF 108848 . 108850) (close-paren 108832 . 108833) (symbol 108827 . 108832) (open-paren 108826 . 108827) (IF 108823 . 108825) (close-paren 108804 . 108805) (symbol 108796 . 108804) (open-paren 108795 . 108796) (IF 108792 . 108794) (close-paren 108776 . 108777) (symbol 108771 . 108776) (open-paren 108770 . 108771) (IF 108767 . 108769) (close-paren 108751 . 108752) (symbol 108746 . 108751) (open-paren 108745 . 108746) (IF 108742 . 108744) (punctuation 108724 . 108725) (number 108723 . 108724) (RETURN 108716 . 108722) (close-paren 108711 . 108712) (symbol 108704 . 108711) (punctuation 108703 . 108704) (open-paren 108702 . 108703) (IF 108699 . 108701) (open-paren 108658 . 108659) (close-paren 108655 . 108656) (symbol 108651 . 108655) (symbol 108644 . 108650) (punctuation 108642 . 108643) (symbol 108636 . 108642) (punctuation 108635 . 108636) (CHAR 108630 . 108634) (punctuation 108628 . 108629) (symbol 108623 . 108628) (punctuation 108622 . 108623) (INT 108618 . 108621) (punctuation 108616 . 108617) (symbol 108608 . 108616) (punctuation 108607 . 108608) (INT 108603 . 108606) (punctuation 108594 . 108595) (symbol 108589 . 108594) (punctuation 108588 . 108589) (INT 108584 . 108587) (punctuation 108582 . 108583) (symbol 108577 . 108582) (punctuation 108576 . 108577) (INT 108572 . 108575) (punctuation 108570 . 108571) (symbol 108563 . 108570) (punctuation 108561 . 108562) (CHAR 108557 . 108561) (CONST 108551 . 108556) (open-paren 108550 . 108551) (symbol 108537 . 108550) (INT 108533 . 108536) (close-paren 103447 . 103448) (punctuation 103444 . 103445) (close-paren 103443 . 103444) (number "0" 103436 . 103443) (open-paren 103435 . 103436) (symbol 103426 . 103435) (punctuation 103422 . 103423) (close-paren 103421 . 103422) (open-paren 103420 . 103421) (symbol 103405 . 103420) (open-paren 103401 . 103402) (close-paren 103398 . 103399) (open-paren 103397 . 103398) (symbol 103384 . 103397) (VOID 103379 . 103383) (close-paren 103374 . 103375) (punctuation 103371 . 103372) (close-paren 103370 . 103371) (symbol 103369 . 103370) (open-paren 103368 . 103369) (symbol 103359 . 103368) (close-paren 103354 . 103355) (punctuation 103353 . 103354) (punctuation 103352 . 103353) (symbol 103351 . 103352) (punctuation 103349 . 103350) (number 103348 . 103349) (punctuation 103347 . 103348) (symbol 103339 . 103347) (punctuation 103337 . 103338) (symbol 103335 . 103336) (open-paren 103320 . 103321) (FOR 103316 . 103319) (open-paren 103303 . 103304) (close-paren 103300 . 103301) (open-paren 103299 . 103300) (symbol 103284 . 103299) (VOID 103279 . 103283) (close-paren 103274 . 103275) (punctuation 103271 . 103272) (close-paren 103270 . 103271) (symbol 103264 . 103270) (open-paren 103263 . 103264) (symbol 103253 . 103263) (close-paren 103247 . 103248) (punctuation 103243 . 103244) (punctuation 103242 . 103243) (punctuation 103241 . 103242) (symbol 103227 . 103241) (semantic-list 103203 . 103222) (IF 103200 . 103202) (semantic-list 103113 . 103121) (open-paren 103091 . 103092) (close-paren 103087 . 103088) (semantic-list 103079 . 103087) (symbol 103070 . 103079) (open-paren 103069 . 103070) (IF 103066 . 103068) (punctuation 103060 . 103061) (close-paren 103059 . 103060) (symbol 103053 . 103059) (open-paren 103052 . 103053) (symbol 103044 . 103052) (punctuation 103038 . 103039) (RETURN 103032 . 103038) (close-paren 103027 . 103028) (semantic-list #("((id) >= LOG_DBG && (id) <= MAX_LOGS)" 0 1 (macros (("id" symbol "log_id" 103020 . 103026)))) 103010 . 103027) (punctuation 103009 . 103010) (open-paren 103008 . 103009) (IF 103005 . 103007) (open-paren 103001 . 103002) (close-paren 102998 . 102999) (symbol 102992 . 102998) (INT 102988 . 102991) (open-paren 102987 . 102988) (symbol 102978 . 102987) (VOID 102973 . 102977) (close-paren 102954 . 102955) (punctuation 102951 . 102952) (close-paren 102950 . 102951) (symbol 102944 . 102950) (open-paren 102943 . 102944) (symbol 102933 . 102943) (punctuation 102927 . 102928) (close-paren 102926 . 102927) (semantic-list 102918 . 102926) (symbol 102909 . 102918) (open-paren 102908 . 102909) (symbol 102902 . 102908) (close-paren 102897 . 102898) (semantic-list 102889 . 102897) (symbol 102880 . 102889) (open-paren 102879 . 102880) (IF 102876 . 102878) (punctuation 102870 . 102871) (close-paren 102869 . 102870) (symbol 102863 . 102869) (open-paren 102862 . 102863) (symbol 102854 . 102862) (open-paren 102850 . 102851) (close-paren 102847 . 102848) (symbol 102841 . 102847) (INT 102837 . 102840) (open-paren 102836 . 102837) (symbol 102827 . 102836) (VOID 102822 . 102826) (close-paren 102817 . 102818) (punctuation 102814 . 102815) (close-paren 102813 . 102814) (string 102792 . 102813) (open-paren 102791 . 102792) (symbol 102781 . 102791) (close-paren 102776 . 102777) (symbol 102767 . 102776) (punctuation 102765 . 102766) (punctuation 102764 . 102765) (symbol 102758 . 102763) (open-paren 102757 . 102758) (IF 102754 . 102756) (punctuation 102711 . 102712) (close-paren 102710 . 102711) (symbol 102704 . 102710) (open-paren 102703 . 102704) (symbol 102693 . 102703) (close-paren 102689 . 102690) (string 102673 . 102677) (semantic-list 102624 . 102663) (IF 102621 . 102623) (string 102608 . 102612) (open-paren 102598 . 102599) (close-paren 102591 . 102592) (string 102587 . 102591) (punctuation 102585 . 102586) (punctuation 102584 . 102585) (symbol 102582 . 102583) (punctuation 102581 . 102582) (open-paren 102580 . 102581) (IF 102577 . 102579) (punctuation 102573 . 102574) (number 102572 . 102573) (punctuation 102570 . 102571) (close-paren 102568 . 102569) (symbol 102565 . 102568) (open-paren 102564 . 102565) (symbol 102558 . 102564) (punctuation 102556 . 102557) (symbol 102552 . 102555) (punctuation 102550 . 102551) (symbol 102548 . 102549) (close-paren 102535 . 102536) (open-paren 102412 . 102413) (close-paren 102406 . 102407) (symbol 102390 . 102406) (punctuation 102388 . 102389) (punctuation 102387 . 102388) (number "0" 102379 . 102386) (punctuation 102377 . 102378) (punctuation 102376 . 102377) (symbol 102369 . 102375) (open-paren 102368 . 102369) (IF 102365 . 102367) (punctuation 102360 . 102361) (close-paren 102359 . 102360) (symbol 102355 . 102359) (open-paren 102354 . 102355) (symbol 102348 . 102354) (punctuation 102344 . 102345) (close-paren 102343 . 102344) (symbol 102339 . 102343) (punctuation 102337 . 102338) (symbol 102334 . 102337) (punctuation 102332 . 102333) (symbol 102330 . 102332) (open-paren 102329 . 102330) (symbol 102321 . 102329) (punctuation 102317 . 102318) (close-paren 102316 . 102317) (symbol 102313 . 102316) (punctuation 102311 . 102312) (symbol 102307 . 102311) (open-paren 102306 . 102307) (symbol 102298 . 102306) (punctuation 102284 . 102285) (close-paren 102283 . 102284) (semantic-list 102276 . 102283) (symbol 102258 . 102276) (punctuation 102256 . 102257) (string 102249 . 102256) (punctuation 102247 . 102248) (symbol 102241 . 102247) (open-paren 102240 . 102241) (symbol 102233 . 102240) (close-paren 102229 . 102230) (symbol 102213 . 102229) (punctuation 102211 . 102212) (punctuation 102210 . 102211) (number "0" 102202 . 102209) (punctuation 102200 . 102201) (punctuation 102199 . 102200) (symbol 102192 . 102198) (open-paren 102191 . 102192) (IF 102188 . 102190) (punctuation 102183 . 102184) (close-paren 102182 . 102183) (semantic-list 102175 . 102182) (symbol 102157 . 102175) (punctuation 102155 . 102156) (string 102148 . 102155) (punctuation 102146 . 102147) (symbol 102144 . 102146) (open-paren 102143 . 102144) (symbol 102136 . 102143) (punctuation 102122 . 102123) (close-paren 102121 . 102122) (symbol 102116 . 102121) (punctuation 102114 . 102115) (string 102109 . 102114) (punctuation 102107 . 102108) (symbol 102101 . 102107) (open-paren 102100 . 102101) (symbol 102093 . 102100) (close-paren 102089 . 102090) (symbol 102073 . 102089) (punctuation 102071 . 102072) (punctuation 102070 . 102071) (number "0" 102062 . 102069) (punctuation 102060 . 102061) (punctuation 102059 . 102060) (symbol 102052 . 102058) (open-paren 102051 . 102052) (IF 102048 . 102050) (punctuation 102044 . 102045) (close-paren 102043 . 102044) (symbol 102038 . 102043) (punctuation 102036 . 102037) (string 102031 . 102036) (punctuation 102029 . 102030) (symbol 102027 . 102029) (open-paren 102026 . 102027) (symbol 102018 . 102025) (punctuation 102011 . 102012) (close-paren 102010 . 102011) (semantic-list 102006 . 102010) (symbol 101997 . 102006) (punctuation 102007 . 102008) (punctuation 101995 . 101996) (string 101976 . 101995) (punctuation 101974 . 101975) (semantic-list 101967 . 101974) (SIZEOF 101961 . 101967) (punctuation 101959 . 101960) (symbol 101954 . 101959) (open-paren 101953 . 101954) (symbol 101945 . 101953) (punctuation 101941 . 101942) (close-paren 101940 . 101941) (semantic-list 101933 . 101940) (SIZEOF 101927 . 101933) (punctuation 101925 . 101926) (number 101924 . 101925) (punctuation 101922 . 101923) (symbol 101917 . 101922) (open-paren 101916 . 101917) (symbol 101910 . 101916) (punctuation 101906 . 101907) (close-paren 101905 . 101906) (symbol 101901 . 101905) (open-paren 101900 . 101901) (symbol 101896 . 101900) (punctuation 101894 . 101895) (symbol 101892 . 101893) (close-paren 101877 . 101878) (punctuation 101873 . 101874) (RETURN 101867 . 101873) (open-paren 101839 . 101840) (close-paren 101835 . 101836) (semantic-list 101811 . 101835) (punctuation 101810 . 101811) (open-paren 101809 . 101810) (IF 101806 . 101808) (punctuation 101800 . 101801) (close-paren 101799 . 101800) (symbol 101793 . 101799) (open-paren 101792 . 101793) (symbol 101784 . 101792) (punctuation 101715 . 101716) (RETURN 101709 . 101715) (close-paren 101704 . 101705) (symbol 101688 . 101704) (punctuation 101686 . 101687) (symbol 101680 . 101685) (open-paren 101679 . 101680) (IF 101676 . 101678) (punctuation 101672 . 101673) (close-paren 101671 . 101672) (symbol 101662 . 101671) (punctuation 101660 . 101661) (semantic-list 101639 . 101660) (symbol 101635 . 101639) (open-paren 101634 . 101635) (symbol 101630 . 101634) (punctuation 101628 . 101629) (symbol 101622 . 101627) (punctuation 101616 . 101617) (RETURN 101610 . 101616) (close-paren 101605 . 101606) (semantic-list #("((id) >= LOG_DBG && (id) <= MAX_LOGS)" 0 1 (macros (("id" symbol "log_id" 101598 . 101604)))) 101588 . 101605) (punctuation 101587 . 101588) (open-paren 101586 . 101587) (IF 101583 . 101585) (punctuation 101531 . 101532) (close-paren 101530 . 101531) (number 101528 . 101530) (open-paren 101527 . 101528) (symbol 101522 . 101527) (CHAR 101517 . 101521) (open-paren 101489 . 101490) (close-paren 101486 . 101487) (punctuation 101485 . 101486) (punctuation 101484 . 101485) (punctuation 101483 . 101484) (punctuation 101481 . 101482) (symbol 101478 . 101481) (punctuation 101477 . 101478) (CHAR 101472 . 101476) (CONST 101466 . 101471) (punctuation 101464 . 101465) (symbol 101456 . 101464) (INT 101452 . 101455) (punctuation 101450 . 101451) (symbol 101444 . 101450) (INT 101440 . 101443) (open-paren 101439 . 101440) (symbol 101429 . 101439) (VOID 101424 . 101428) (close-paren 101343 . 101344) (punctuation 101340 . 101341) (close-paren 101339 . 101340) (symbol 101333 . 101339) (open-paren 101332 . 101333) (symbol 101322 . 101332) (punctuation 101277 . 101278) (close-paren 101276 . 101277) (symbol 101272 . 101276) (open-paren 101271 . 101272) (symbol 101265 . 101271) (punctuation 101261 . 101262) (close-paren 101260 . 101261) (symbol 101256 . 101260) (punctuation 101254 . 101255) (symbol 101251 . 101254) (punctuation 101249 . 101250) (symbol 101247 . 101249) (open-paren 101246 . 101247) (symbol 101238 . 101246) (punctuation 101234 . 101235) (close-paren 101233 . 101234) (symbol 101230 . 101233) (punctuation 101228 . 101229) (symbol 101224 . 101228) (open-paren 101223 . 101224) (symbol 101215 . 101223) (close-paren 101200 . 101201) (punctuation 101196 . 101197) (RETURN 101190 . 101196) (open-paren 101162 . 101163) (close-paren 101158 . 101159) (semantic-list 101134 . 101158) (punctuation 101133 . 101134) (open-paren 101132 . 101133) (IF 101129 . 101131) (punctuation 101123 . 101124) (close-paren 101122 . 101123) (symbol 101116 . 101122) (open-paren 101115 . 101116) (symbol 101107 . 101115) (punctuation 101101 . 101102) (RETURN 101095 . 101101) (close-paren 101090 . 101091) (semantic-list #("((id) >= LOG_DBG && (id) <= MAX_LOGS)" 0 1 (macros (("id" symbol "log_id" 101083 . 101089)))) 101073 . 101090) (punctuation 101072 . 101073) (open-paren 101071 . 101072) (IF 101068 . 101070) (open-paren 101034 . 101035) (close-paren 101031 . 101032) (punctuation 101030 . 101031) (punctuation 101029 . 101030) (punctuation 101028 . 101029) (punctuation 101026 . 101027) (symbol 101023 . 101026) (punctuation 101022 . 101023) (CHAR 101017 . 101021) (CONST 101011 . 101016) (punctuation 101009 . 101010) (symbol 101003 . 101009) (INT 100999 . 101002) (open-paren 100998 . 100999) (symbol 100987 . 100998) (VOID 100982 . 100986) (close-paren 100977 . 100978) (RETURN 100956 . 100962) (punctuation 100952 . 100953) (close-paren 100951 . 100952) (number "0" 100944 . 100951) (open-paren 100943 . 100944) (symbol 100933 . 100943) (close-paren 100927 . 100928) (punctuation 100923 . 100924) (number "0" 100916 . 100923) (RETURN 100909 . 100915) (number "0" 100896 . 100903) (punctuation 100878 . 100879) (punctuation 100877 . 100878) (punctuation 100876 . 100877) (symbol 100862 . 100876) (number 100720 . 100724) (semantic-list 100695 . 100704) (open-paren 100673 . 100674) (close-paren 100669 . 100670) (semantic-list 100660 . 100669) (symbol 100651 . 100660) (open-paren 100650 . 100651) (IF 100647 . 100649) (punctuation 100643 . 100644) (close-paren 100642 . 100643) (symbol 100638 . 100642) (punctuation 100636 . 100637) (symbol 100632 . 100636) (open-paren 100631 . 100632) (symbol 100625 . 100631) (punctuation 100623 . 100624) (close-paren 100621 . 100622) (number "0" 100614 . 100621) (open-paren 100613 . 100614) (symbol 100604 . 100613) (close-paren 100586 . 100587) (punctuation 100582 . 100583) (number "0" 100575 . 100582) (RETURN 100568 . 100574) (number "0" 100555 . 100562) (open-paren 100539 . 100540) (close-paren 100535 . 100536) (semantic-list 100526 . 100535) (symbol 100517 . 100526) (open-paren 100516 . 100517) (IF 100513 . 100515) (punctuation 100494 . 100495) (close-paren 100493 . 100494) (number "0" 100486 . 100493) (open-paren 100485 . 100486) (symbol 100477 . 100485) (punctuation 100471 . 100472) (close-paren 100470 . 100471) (string 100467 . 100470) (punctuation 100465 . 100466) (string 100460 . 100464) (punctuation 100458 . 100459) (symbol 100451 . 100457) (open-paren 100450 . 100451) (punctuation 100448 . 100449) (close-paren 100446 . 100447) (string 100443 . 100446) (punctuation 100441 . 100442) (string 100436 . 100440) (punctuation 100434 . 100435) (symbol 100427 . 100433) (open-paren 100426 . 100427) (punctuation 100424 . 100425) (symbol 100417 . 100423) (punctuation 100415 . 100416) (symbol 100410 . 100414) (punctuation 100409 . 100410) (CHAR 100404 . 100408) (CONST 100398 . 100403) (open-paren 100394 . 100395) (close-paren 100391 . 100392) (symbol 100385 . 100391) (INT 100381 . 100384) (punctuation 100379 . 100380) (symbol 100373 . 100379) (INT 100369 . 100372) (punctuation 100367 . 100368) (symbol 100363 . 100367) (punctuation 100362 . 100363) (CHAR 100357 . 100361) (CONST 100351 . 100356) (open-paren 100350 . 100351) (symbol 100341 . 100350) (INT 100337 . 100340) (close-paren 100316 . 100317) (RETURN 100295 . 100301) (close-paren 100289 . 100290) (semantic-list 100017 . 100266) (semantic-list 99991 . 100013) (IF 99988 . 99990) (open-paren 99965 . 99966) (close-paren 99961 . 99962) (punctuation 99960 . 99961) (punctuation 99959 . 99960) (symbol 99958 . 99959) (punctuation 99956 . 99957) (number 99955 . 99956) (punctuation 99954 . 99955) (symbol 99946 . 99954) (punctuation 99944 . 99945) (symbol 99942 . 99943) (open-paren 99927 . 99928) (FOR 99923 . 99926) (punctuation 99917 . 99918) (close-paren 99916 . 99917) (string 99913 . 99916) (punctuation 99911 . 99912) (string 99906 . 99910) (punctuation 99904 . 99905) (symbol 99897 . 99903) (open-paren 99896 . 99897) (punctuation 99894 . 99895) (close-paren 99892 . 99893) (string 99889 . 99892) (punctuation 99887 . 99888) (string 99882 . 99886) (punctuation 99880 . 99881) (symbol 99873 . 99879) (open-paren 99872 . 99873) (punctuation 99870 . 99871) (symbol 99863 . 99869) (punctuation 99861 . 99862) (symbol 99856 . 99860) (punctuation 99855 . 99856) (CHAR 99850 . 99854) (CONST 99844 . 99849) (open-paren 99831 . 99832) (close-paren 99828 . 99829) (symbol 99822 . 99828) (INT 99818 . 99821) (punctuation 99816 . 99817) (symbol 99810 . 99816) (INT 99806 . 99809) (punctuation 99804 . 99805) (symbol 99800 . 99804) (punctuation 99799 . 99800) (CHAR 99794 . 99798) (CONST 99788 . 99793) (open-paren 99787 . 99788) (symbol 99779 . 99787) (INT 99775 . 99778) (close-paren 99754 . 99755) (close-paren 99751 . 99752) (semantic-list 99743 . 99746) (punctuation 99733 . 99734) (open-paren 99693 . 99694) (close-paren 99689 . 99690) (punctuation 99688 . 99689) (punctuation 99687 . 99688) (symbol 99686 . 99687) (punctuation 99684 . 99685) (number 99683 . 99684) (punctuation 99682 . 99683) (symbol 99674 . 99682) (punctuation 99672 . 99673) (symbol 99670 . 99671) (open-paren 99662 . 99663) (FOR 99658 . 99661) (open-paren 99645 . 99646) (close-paren 99642 . 99643) (open-paren 99641 . 99642) (symbol 99633 . 99641) (VOID 99628 . 99632) (close-paren 99608 . 99609) (open-paren 99576 . 99577) (close-paren 99573 . 99574) (symbol 99567 . 99573) (INT 99563 . 99566) (open-paren 99562 . 99563) (symbol 99542 . 99562) (VOID 99537 . 99541) (close-paren 99532 . 99533) (open-paren 99498 . 99499) (close-paren 99495 . 99496) (symbol 99487 . 99495) (INT 99483 . 99486) (open-paren 99482 . 99483) (symbol 99470 . 99482) (VOID 99465 . 99469) (close-paren 99460 . 99461) (punctuation 99457 . 99458) (close-paren 99456 . 99457) (semantic-list 99448 . 99456) (symbol 99439 . 99448) (punctuation 99438 . 99439) (open-paren 99437 . 99438) (symbol 99425 . 99437) (open-paren 99421 . 99422) (close-paren 99418 . 99419) (symbol 99412 . 99418) (INT 99408 . 99411) (open-paren 99407 . 99408) (symbol 99397 . 99407) (VOID 99392 . 99396) (INLINE 99385 . 99391) (STATIC 99378 . 99384) (close-paren 99373 . 99374) (punctuation 99370 . 99371) (close-paren 99369 . 99370) (semantic-list 99361 . 99369) (symbol 99352 . 99361) (punctuation 99351 . 99352) (open-paren 99350 . 99351) (symbol 99340 . 99350) (open-paren 99336 . 99337) (close-paren 99333 . 99334) (symbol 99327 . 99333) (INT 99323 . 99326) (open-paren 99322 . 99323) (symbol 99314 . 99322) (VOID 99309 . 99313) (INLINE 99302 . 99308) (STATIC 99295 . 99301) (punctuation 99183 . 99184) (close-paren 99182 . 99183) (number 99181 . 99182) (punctuation 99180 . 99181) (symbol 99172 . 99180) (open-paren 99171 . 99172) (symbol 99162 . 99171) (symbol 99154 . 99161) (STATIC 99147 . 99153) (punctuation 99144 . 99145) (close-paren 99143 . 99144) (number 99142 . 99143) (punctuation 99141 . 99142) (symbol 99133 . 99141) (open-paren 99132 . 99133) (symbol 99123 . 99132) (punctuation 99121 . 99122) (symbol 99117 . 99121) (STATIC 99110 . 99116) (punctuation 99105 . 99106) (close-paren 99104 . 99105) (string 99097 . 99104) (punctuation 99096 . 99097) (string 99089 . 99096) (punctuation 99088 . 99089) (string 99078 . 99088) (punctuation 99077 . 99078) (string 99070 . 99077) (punctuation 99069 . 99070) (string 99060 . 99069) (punctuation 99059 . 99060) (string 99051 . 99059) (punctuation 99050 . 99051) (string 99044 . 99050) (punctuation 99043 . 99044) (string 99036 . 99043) (open-paren 99032 . 99033) (punctuation 99030 . 99031) (close-paren 99028 . 99029) (open-paren 99027 . 99028) (symbol 99009 . 99027) (punctuation 99007 . 99008) (CHAR 99003 . 99007) (CONST 98997 . 99002) (STATIC 98990 . 98996) (close-paren 98626 . 98627) (RETURN 98613 . 98619) (punctuation 98607 . 98608) (close-paren 98606 . 98607) (symbol 98603 . 98606) (punctuation 98602 . 98603) (punctuation 98600 . 98601) (string 98596 . 98600) (punctuation 98594 . 98595) (symbol 98591 . 98594) (open-paren 98590 . 98591) (symbol 98584 . 98590) (RETURN 98567 . 98573) (close-paren 98562 . 98563) (semantic-list 98557 . 98562) (SIZEOF 98551 . 98557) (punctuation 98549 . 98550) (punctuation 98548 . 98549) (number 98546 . 98547) (punctuation 98544 . 98545) (semantic-list 98538 . 98543) (symbol 98532 . 98538) (open-paren 98531 . 98532) (IF 98528 . 98530) (open-paren 98509 . 98510) (close-paren 98506 . 98507) (symbol 98503 . 98506) (punctuation 98502 . 98503) (CHAR 98497 . 98501) (CONST 98491 . 98496) (open-paren 98490 . 98491) (symbol 98480 . 98490) (punctuation 98478 . 98479) (VOID 98474 . 98478) (close-paren 98441 . 98442) (punctuation 98438 . 98439) (number 98437 . 98438) (RETURN 98430 . 98436) (punctuation 98424 . 98425) (number 98423 . 98424) (RETURN 98416 . 98422) (close-paren 98411 . 98412) (number 98410 . 98411) (punctuation 98408 . 98409) (semantic-list 98386 . 98407) (symbol 98378 . 98386) (string 98397 . 98401) (open-paren 98377 . 98378) (IF 98374 . 98376) (open-paren 98370 . 98371) (close-paren 98367 . 98368) (symbol 98364 . 98367) (INT 98360 . 98363) (punctuation 98358 . 98359) (symbol 98355 . 98358) (punctuation 98353 . 98354) (CHAR 98349 . 98353) (punctuation 98347 . 98348) (symbol 98344 . 98347) (punctuation 98343 . 98344) (VOID 98338 . 98342) (open-paren 98337 . 98338) (symbol 98327 . 98337) (INT 98323 . 98326) (close-paren 98296 . 98297) (RETURN 98283 . 98289) (punctuation 98277 . 98278) (string 98273 . 98277) (punctuation 98271 . 98272) (close-paren 98269 . 98270) (number 98268 . 98269) (punctuation 98267 . 98268) (symbol 98261 . 98267) (open-paren 98260 . 98261) (symbol 98257 . 98260) (punctuation 98253 . 98254) (close-paren 98252 . 98253) (semantic-list 98249 . 98252) (semantic-list 98227 . 98249) (punctuation 98225 . 98226) (string 98218 . 98225) (punctuation 98216 . 98217) (number 98215 . 98216) (punctuation 98214 . 98215) (symbol 98213 . 98214) (punctuation 98211 . 98212) (symbol 98204 . 98210) (punctuation 98202 . 98203) (number 98201 . 98202) (punctuation 98200 . 98201) (symbol 98199 . 98200) (punctuation 98197 . 98198) (symbol 98193 . 98196) (open-paren 98192 . 98193) (symbol 98184 . 98192) (close-paren 98179 . 98180) (punctuation 98178 . 98179) (punctuation 98177 . 98178) (symbol 98176 . 98177) (punctuation 98169 . 98170) (symbol 98167 . 98168) (open-paren 98159 . 98160) (FOR 98155 . 98158) (punctuation 98137 . 98138) (close-paren 98136 . 98137) (symbol 98130 . 98136) (open-paren 98129 . 98130) (symbol 98122 . 98129) (close-paren 98121 . 98122) (punctuation 98120 . 98121) (CHAR 98116 . 98120) (open-paren 98115 . 98116) (punctuation 98113 . 98114) (symbol 98109 . 98112) (punctuation 98108 . 98109) (CHAR 98103 . 98107) (punctuation 98099 . 98100) (number 98098 . 98099) (punctuation 98096 . 98097) (number 98094 . 98095) (punctuation 98092 . 98093) (symbol 98088 . 98091) (punctuation 98086 . 98087) (symbol 98079 . 98085) (INT 98075 . 98078) (open-paren 98035 . 98036) (close-paren 98032 . 98033) (symbol 98029 . 98032) (symbol 98022 . 98028) (punctuation 98020 . 98021) (symbol 98016 . 98020) (punctuation 98015 . 98016) (VOID 98010 . 98014) (CONST 98004 . 98009) (open-paren 98003 . 98004) (symbol 97996 . 98003) (punctuation 97994 . 97995) (CHAR 97990 . 97994) (close-paren 97958 . 97959) (open-paren 97899 . 97900) (close-paren 97896 . 97897) (open-paren 97895 . 97896) (symbol 97880 . 97895) (VOID 97875 . 97879) (close-paren 97851 . 97852) (open-paren 97796 . 97797) (close-paren 97793 . 97794) (open-paren 97792 . 97793) (symbol 97781 . 97792) (VOID 97776 . 97780) (close-paren 97749 . 97750) (close-paren 97725 . 97726) (open-paren 97692 . 97693) (punctuation 97165 . 97166) (close-paren 97164 . 97165) (symbol 97161 . 97164) (punctuation 97159 . 97160) (string 97144 . 97159) (punctuation 97142 . 97143) (symbol 97134 . 97142) (open-paren 97133 . 97134) (symbol 97122 . 97133) (open-paren 97117 . 97118) (close-paren 97114 . 97115) (symbol 97111 . 97114) (punctuation 97109 . 97110) (CHAR 97105 . 97109) (CONST 97099 . 97104) (open-paren 97098 . 97099) (symbol 97088 . 97098) (VOID 97083 . 97087) (close-paren 91862 . 91863) (punctuation 91851 . 91852) (close-paren 91850 . 91851) (open-paren 91849 . 91850) (symbol 91831 . 91849) (RETURN 91824 . 91830) (open-paren 91765 . 91766) (close-paren 91762 . 91763) (open-paren 91761 . 91762) (symbol 91747 . 91761) (punctuation 91745 . 91746) (CHAR 91741 . 91745) (CONST 91735 . 91740) (close-paren 91730 . 91731) (punctuation 91727 . 91728) (close-paren 91726 . 91727) (symbol 91721 . 91726) (open-paren 91720 . 91721) (symbol 91712 . 91720) (RETURN 91705 . 91711) (open-paren 91701 . 91702) (close-paren 91698 . 91699) (open-paren 91697 . 91698) (symbol 91679 . 91697) (punctuation 91677 . 91678) (CHAR 91673 . 91677) (CONST 91667 . 91672) (close-paren 90755 . 90756) (punctuation 90752 . 90753) (number 90751 . 90752) (RETURN 90744 . 90750) (close-paren 90730 . 90731) (punctuation 90702 . 90703) (punctuation 90701 . 90702) (symbol 90698 . 90701) (punctuation 90669 . 90670) (punctuation 90668 . 90669) (symbol 90665 . 90668) (punctuation 90621 . 90622) (punctuation 90620 . 90621) (symbol 90617 . 90620) (punctuation 90575 . 90576) (punctuation 90574 . 90575) (symbol 90571 . 90574) (punctuation 90527 . 90528) (punctuation 90526 . 90527) (symbol 90523 . 90526) (punctuation 90516 . 90517) (number 90515 . 90516) (RETURN 90508 . 90514) (semantic-list 90479 . 90503) (IF 90476 . 90478) (open-paren 90449 . 90450) (punctuation 90024 . 90025) (number 90023 . 90024) (RETURN 90016 . 90022) (close-paren 90011 . 90012) (symbol 90008 . 90011) (punctuation 90007 . 90008) (punctuation 90005 . 90006) (punctuation 90004 . 90005) (semantic-list 89994 . 90003) (symbol 89984 . 89994) (number 90001 . 90002) (punctuation 89983 . 89984) (open-paren 89982 . 89983) (IF 89979 . 89981) (open-paren 89975 . 89976) (close-paren 89972 . 89973) (symbol 89969 . 89972) (punctuation 89968 . 89969) (symbol 89959 . 89967) (STRUCT 89952 . 89958) (punctuation 89950 . 89951) (symbol 89946 . 89950) (punctuation 89944 . 89945) (CHAR 89940 . 89944) (CONST 89934 . 89939) (open-paren 89933 . 89934) (symbol 89921 . 89933) (INT 89917 . 89920) (close-paren 89872 . 89873) (punctuation 89861 . 89862) (close-paren 89860 . 89861) (symbol 89840 . 89860) (open-paren 89839 . 89840) (symbol 89832 . 89839) (RETURN 89825 . 89831) (open-paren 89725 . 89726) (close-paren 89722 . 89723) (open-paren 89721 . 89722) (symbol 89701 . 89721) (INT 89697 . 89700) (close-paren 88323 . 88324) (punctuation 88312 . 88313) (close-paren 88311 . 88312) (symbol 88307 . 88311) (open-paren 88306 . 88307) (symbol 88285 . 88306) (open-paren 88228 . 88229) (close-paren 88225 . 88226) (symbol 88221 . 88225) (punctuation 88219 . 88220) (symbol 88212 . 88219) (open-paren 88211 . 88212) (symbol 88198 . 88211) (VOID 88193 . 88197) (close-paren 88188 . 88189) (punctuation 88177 . 88178) (number 88176 . 88177) (RETURN 88169 . 88175) (open-paren 88007 . 88008) (close-paren 88004 . 88005) (symbol 88000 . 88004) (punctuation 87999 . 88000) (symbol 87991 . 87998) (open-paren 87990 . 87991) (symbol 87977 . 87990) (INT 87973 . 87976) (close-paren 87968 . 87969) (punctuation 87957 . 87958) (close-paren 87956 . 87957) (symbol 87952 . 87956) (open-paren 87951 . 87952) (symbol 87931 . 87951) (open-paren 87875 . 87876) (close-paren 87872 . 87873) (symbol 87868 . 87872) (punctuation 87867 . 87868) (symbol 87859 . 87866) (open-paren 87858 . 87859) (symbol 87846 . 87858) (VOID 87841 . 87845) (close-paren 87836 . 87837) (punctuation 87825 . 87826) (close-paren 87824 . 87825) (symbol 87820 . 87824) (open-paren 87819 . 87820) (symbol 87801 . 87819) (open-paren 87745 . 87746) (close-paren 87742 . 87743) (symbol 87738 . 87742) (punctuation 87737 . 87738) (symbol 87729 . 87736) (open-paren 87728 . 87729) (symbol 87718 . 87728) (VOID 87713 . 87717) (close-paren 87708 . 87709) (punctuation 87697 . 87698) (close-paren 87696 . 87697) (symbol 87692 . 87696) (punctuation 87690 . 87691) (symbol 87686 . 87690) (open-paren 87685 . 87686) (symbol 87667 . 87685) (open-paren 87497 . 87498) (close-paren 87494 . 87495) (symbol 87490 . 87494) (punctuation 87489 . 87490) (symbol 87481 . 87488) (open-paren 87480 . 87481) (symbol 87470 . 87480) (VOID 87465 . 87469) (close-paren 87445 . 87446) (open-paren 87278 . 87279) (close-paren 87275 . 87276) (symbol 87271 . 87275) (punctuation 87269 . 87270) (symbol 87258 . 87269) (open-paren 87257 . 87258) (symbol 87245 . 87257) (INT 87241 . 87244) (close-paren 87236 . 87237) (open-paren 87086 . 87087) (close-paren 87083 . 87084) (symbol 87079 . 87083) (punctuation 87077 . 87078) (symbol 87066 . 87077) (open-paren 87065 . 87066) (symbol 87054 . 87065) (VOID 87049 . 87053) (close-paren 87044 . 87045) (open-paren 86879 . 86880) (close-paren 86876 . 86877) (symbol 86872 . 86876) (punctuation 86870 . 86871) (symbol 86859 . 86870) (open-paren 86858 . 86859) (symbol 86846 . 86858) (INT 86842 . 86845) (close-paren 86837 . 86838) (open-paren 86661 . 86662) (close-paren 86658 . 86659) (symbol 86654 . 86658) (punctuation 86652 . 86653) (symbol 86641 . 86652) (open-paren 86640 . 86641) (symbol 86631 . 86640) (VOID 86626 . 86630) (close-paren 86621 . 86622) (open-paren 86471 . 86472) (close-paren 86468 . 86469) (symbol 86464 . 86468) (punctuation 86462 . 86463) (symbol 86451 . 86462) (open-paren 86450 . 86451) (symbol 86441 . 86450) (VOID 86436 . 86440) (close-paren 86420 . 86421) (open-paren 86350 . 86351) (close-paren 86347 . 86348) (symbol 86346 . 86347) (punctuation 86345 . 86346) (symbol 86336 . 86344) (open-paren 86335 . 86336) (symbol 86325 . 86335) (VOID 86320 . 86324) (close-paren 86315 . 86316) (open-paren 86245 . 86246) (close-paren 86242 . 86243) (symbol 86241 . 86242) (punctuation 86240 . 86241) (symbol 86231 . 86239) (open-paren 86230 . 86231) (symbol 86220 . 86230) (VOID 86215 . 86219) (close-paren 86210 . 86211) (open-paren 86132 . 86133) (close-paren 86129 . 86130) (symbol 86128 . 86129) (punctuation 86127 . 86128) (symbol 86118 . 86126) (punctuation 86116 . 86117) (symbol 86115 . 86116) (LONG 86110 . 86114) (open-paren 86109 . 86110) (symbol 86099 . 86109) (VOID 86094 . 86098) (close-paren 86089 . 86090) (open-paren 86014 . 86015) (close-paren 86011 . 86012) (symbol 86010 . 86011) (punctuation 86009 . 86010) (symbol 86000 . 86008) (punctuation 85998 . 85999) (symbol 85997 . 85998) (LONG 85992 . 85996) (open-paren 85991 . 85992) (symbol 85981 . 85991) (VOID 85976 . 85980) (close-paren 85971 . 85972) (open-paren 85873 . 85874) (close-paren 85870 . 85871) (symbol 85869 . 85870) (LONG 85864 . 85868) (punctuation 85862 . 85863) (symbol 85861 . 85862) (punctuation 85860 . 85861) (symbol 85851 . 85859) (open-paren 85850 . 85851) (symbol 85840 . 85850) (VOID 85835 . 85839) (close-paren 85830 . 85831) (punctuation 85819 . 85820) (punctuation 85818 . 85819) (symbol 85817 . 85818) (RETURN 85810 . 85816) (open-paren 85806 . 85807) (close-paren 85803 . 85804) (symbol 85802 . 85803) (punctuation 85801 . 85802) (symbol 85792 . 85800) (CONST 85786 . 85791) (open-paren 85785 . 85786) (symbol 85774 . 85785) (LONG 85769 . 85773) (close-paren 85360 . 85361) (punctuation 85357 . 85358) (number 85356 . 85357) (RETURN 85349 . 85355) (punctuation 85335 . 85336) (close-paren 85334 . 85335) (symbol 85333 . 85334) (open-paren 85332 . 85333) (symbol 85321 . 85332) (close-paren 85317 . 85318) (punctuation 85313 . 85314) (number 85312 . 85313) (RETURN 85305 . 85311) (open-paren 85281 . 85282) (close-paren 85277 . 85278) (semantic-list 85263 . 85277) (symbol 85246 . 85263) (punctuation 85245 . 85246) (punctuation 85243 . 85244) (punctuation 85242 . 85243) (symbol 85232 . 85241) (open-paren 85231 . 85232) (IF 85228 . 85230) (punctuation 85224 . 85225) (close-paren 85223 . 85224) (symbol 85215 . 85223) (punctuation 85213 . 85214) (symbol 85212 . 85213) (open-paren 85211 . 85212) (symbol 85192 . 85211) (open-paren 85117 . 85118) (close-paren 85114 . 85115) (symbol 85105 . 85114) (punctuation 85104 . 85105) (symbol 85091 . 85103) (punctuation 85089 . 85090) (symbol 85088 . 85089) (symbol 85079 . 85087) (open-paren 85078 . 85079) (symbol 85067 . 85078) (INT 85063 . 85066) (close-paren 85046 . 85047) (punctuation 85035 . 85036) (close-paren 85034 . 85035) (symbol 85025 . 85034) (semantic-list 85015 . 85025) (open-paren 85014 . 85015) (symbol 85002 . 85014) (open-paren 84917 . 84918) (close-paren 84914 . 84915) (symbol 84905 . 84914) (symbol 84898 . 84904) (open-paren 84897 . 84898) (symbol 84886 . 84897) (VOID 84881 . 84885) (close-paren 84864 . 84865) (punctuation 84861 . 84862) (number 84860 . 84861) (RETURN 84853 . 84859) (punctuation 84839 . 84840) (number 84838 . 84839) (RETURN 84831 . 84837) (close-paren 84826 . 84827) (symbol 84806 . 84826) (punctuation 84804 . 84805) (punctuation 84803 . 84804) (symbol 84801 . 84802) (punctuation 84800 . 84801) (open-paren 84799 . 84800) (IF 84796 . 84798) (punctuation 84792 . 84793) (close-paren 84791 . 84792) (symbol 84787 . 84791) (punctuation 84785 . 84786) (number 84784 . 84785) (punctuation 84782 . 84783) (symbol 84779 . 84782) (punctuation 84777 . 84778) (symbol 84773 . 84777) (punctuation 84771 . 84772) (symbol 84762 . 84771) (punctuation 84760 . 84761) (symbol 84756 . 84760) (open-paren 84755 . 84756) (symbol 84741 . 84755) (close-paren 84740 . 84741) (symbol 84734 . 84740) (open-paren 84733 . 84734) (punctuation 84731 . 84732) (symbol 84729 . 84730) (punctuation 84728 . 84729) (open-paren 84340 . 84341) (close-paren 84337 . 84338) (symbol 84328 . 84337) (INT 84324 . 84327) (punctuation 84322 . 84323) (symbol 84319 . 84322) (punctuation 84318 . 84319) (VOID 84313 . 84317) (punctuation 84311 . 84312) (symbol 84307 . 84311) (symbol 84293 . 84306) (punctuation 84291 . 84292) (symbol 84290 . 84291) (punctuation 84288 . 84289) (symbol 84280 . 84288) (open-paren 84279 . 84280) (symbol 84266 . 84279) (INT 84262 . 84265) (close-paren 84016 . 84017) (punctuation 84006 . 84007) (number 84005 . 84006) (RETURN 83998 . 84004) (close-paren 83994 . 83995) (semantic-list 83881 . 83992) (semantic-list 83869 . 83878) (IF 83866 . 83868) (semantic-list 83519 . 83835) (semantic-list 83505 . 83518) (WHILE 83499 . 83504) (open-paren 83396 . 83397) (close-paren 83393 . 83394) (symbol 83389 . 83393) (open-paren 83388 . 83389) (IF 83385 . 83387) (punctuation 83365 . 83366) (number 83364 . 83365) (RETURN 83357 . 83363) (close-paren 83353 . 83354) (semantic-list 83335 . 83353) (symbol 83331 . 83335) (open-paren 83330 . 83331) (IF 83327 . 83329) (open-paren 83041 . 83042) (close-paren 83038 . 83039) (symbol 83034 . 83038) (INT 83030 . 83033) (punctuation 83028 . 83029) (symbol 83019 . 83028) (INT 83015 . 83018) (punctuation 83013 . 83014) (symbol 83006 . 83013) (symbol 82996 . 83005) (open-paren 82995 . 82996) (symbol 82983 . 82995) (INT 82979 . 82982) (close-paren 82965 . 82966) (punctuation 82955 . 82956) (number 82954 . 82955) (RETURN 82947 . 82953) (close-paren 82928 . 82929) (punctuation 82925 . 82926) (number 82924 . 82925) (RETURN 82917 . 82923) (semantic-list 82866 . 82877) (IF 82863 . 82865) (open-paren 82859 . 82860) (close-paren 82857 . 82858) (semantic-list 82849 . 82857) (symbol 82840 . 82849) (open-paren 82839 . 82840) (IF 82836 . 82838) (close-paren 82818 . 82819) (punctuation 82815 . 82816) (number 82814 . 82815) (RETURN 82807 . 82813) (semantic-list 82773 . 82784) (IF 82770 . 82772) (open-paren 82766 . 82767) (close-paren 82764 . 82765) (semantic-list 82756 . 82764) (symbol 82745 . 82756) (open-paren 82744 . 82745) (IF 82741 . 82743) (punctuation 82719 . 82720) (number 82718 . 82719) (RETURN 82711 . 82717) (close-paren 82707 . 82708) (semantic-list 82692 . 82707) (symbol 82684 . 82692) (number 82705 . 82706) (punctuation 82704 . 82705) (punctuation 82702 . 82703) (punctuation 82701 . 82702) (open-paren 82683 . 82684) (IF 82680 . 82682) (close-paren 82676 . 82677) (punctuation 82673 . 82674) (BREAK 82668 . 82673) (semantic-list 82608 . 82664) (IF 82605 . 82607) (punctuation 82585 . 82586) (punctuation 82584 . 82585) (symbol 82572 . 82583) (open-paren 82472 . 82473) (close-paren 82470 . 82471) (number 82469 . 82470) (punctuation 82467 . 82468) (punctuation 82466 . 82467) (symbol 82458 . 82465) (open-paren 82457 . 82458) (WHILE 82451 . 82456) (punctuation 82378 . 82379) (close-paren 82377 . 82378) (semantic-list 82350 . 82377) (symbol 82343 . 82350) (punctuation 82360 . 82361) (open-paren 82342 . 82343) (symbol 82324 . 82342) (punctuation 82322 . 82323) (symbol 82314 . 82321) (symbol 82308 . 82313) (open-paren 82035 . 82036) (close-paren 82033 . 82034) (symbol 82024 . 82033) (punctuation 82023 . 82024) (INT 82019 . 82022) (punctuation 82017 . 82018) (symbol 82005 . 82017) (INT 82001 . 82004) (punctuation 81999 . 82000) (symbol 81992 . 81999) (symbol 81982 . 81991) (open-paren 81981 . 81982) (symbol 81969 . 81981) (INT 81965 . 81968) (close-paren 81929 . 81930) (RETURN 81910 . 81916) (close-paren 81905 . 81906) (number 81898 . 81901) (string 81831 . 81835) (string 81825 . 81829) (string 81814 . 81823) (semantic-list 81516 . 81525) (semantic-list 81383 . 81469) (semantic-list 81358 . 81382) (IF 81355 . 81357) (semantic-list 81213 . 81291) (semantic-list 81199 . 81212) (IF 81196 . 81198) (open-paren 81095 . 81096) (close-paren 81092 . 81093) (number 81091 . 81092) (punctuation 81089 . 81090) (punctuation 81088 . 81089) (symbol 81084 . 81087) (open-paren 81083 . 81084) (IF 81080 . 81082) (ELSE 81075 . 81079) (close-paren 81072 . 81073) (RETURN 81047 . 81053) (string 81028 . 81042) (open-paren 81001 . 81002) (close-paren 80998 . 80999) (number 80997 . 80998) (punctuation 80995 . 80996) (symbol 80991 . 80994) (open-paren 80990 . 80991) (IF 80987 . 80989) (punctuation 80984 . 80985) (close-paren 80983 . 80984) (open-paren 80982 . 80983) (symbol 80978 . 80982) (punctuation 80976 . 80977) (symbol 80972 . 80975) (symbol 80966 . 80971) (open-paren 79760 . 79761) (close-paren 79758 . 79759) (symbol 79738 . 79758) (punctuation 79736 . 79737) (CHAR 79732 . 79736) (CONST 79726 . 79731) (open-paren 79725 . 79726) (symbol 79711 . 79725) (symbol 79701 . 79710) (close-paren 75249 . 75250) (RETURN 75220 . 75226) (punctuation 75216 . 75217) (close-paren 75215 . 75216) (semantic-list 75213 . 75215) (symbol 75207 . 75213) (punctuation 75205 . 75206) (string 75199 . 75205) (punctuation 75197 . 75198) (semantic-list 75192 . 75197) (SIZEOF 75186 . 75192) (punctuation 75184 . 75185) (symbol 75181 . 75184) (open-paren 75180 . 75181) (symbol 75172 . 75180) (punctuation 75168 . 75169) (close-paren 75167 . 75168) (number 75165 . 75167) (open-paren 75164 . 75165) (symbol 75161 . 75164) (CHAR 75156 . 75160) (STATIC 75149 . 75155) (open-paren 75006 . 75007) (close-paren 75003 . 75004) (open-paren 75002 . 75003) (symbol 74992 . 75002) (punctuation 74991 . 74992) (CHAR 74986 . 74990) (CONST 74980 . 74985) (close-paren 70643 . 70644) (RETURN 70621 . 70627) (close-paren 70615 . 70616) (RETURN 70599 . 70605) (open-paren 70396 . 70397) (close-paren 70392 . 70393) (symbol 70383 . 70392) (open-paren 70382 . 70383) (IF 70379 . 70381) (punctuation 70375 . 70376) (close-paren 70374 . 70375) (string 70372 . 70374) (punctuation 70370 . 70371) (symbol 70364 . 70370) (open-paren 70363 . 70364) (symbol 70354 . 70363) (punctuation 70352 . 70353) (symbol 70342 . 70351) (punctuation 70340 . 70341) (CHAR 70336 . 70340) (CONST 70330 . 70335) (open-paren 69990 . 69991) (close-paren 69987 . 69988) (symbol 69984 . 69987) (punctuation 69982 . 69983) (WCHAR 69975 . 69982) (CONST 69969 . 69974) (open-paren 69968 . 69969) (symbol 69957 . 69968) (punctuation 69955 . 69956) (CHAR 69951 . 69955) (close-paren 69924 . 69925) (RETURN 69902 . 69908) (close-paren 69896 . 69897) (RETURN 69880 . 69886) (open-paren 69660 . 69661) (close-paren 69656 . 69657) (symbol 69647 . 69656) (open-paren 69646 . 69647) (IF 69643 . 69645) (punctuation 69639 . 69640) (close-paren 69638 . 69639) (string 69636 . 69638) (punctuation 69634 . 69635) (symbol 69628 . 69634) (open-paren 69627 . 69628) (symbol 69618 . 69627) (punctuation 69616 . 69617) (symbol 69606 . 69615) (punctuation 69604 . 69605) (CHAR 69600 . 69604) (CONST 69594 . 69599) (open-paren 69280 . 69281) (close-paren 69277 . 69278) (symbol 69274 . 69277) (punctuation 69272 . 69273) (CHAR 69268 . 69272) (CONST 69262 . 69267) (open-paren 69261 . 69262) (symbol 69250 . 69261) (punctuation 69248 . 69249) (WCHAR 69241 . 69248) (close-paren 69155 . 69156) (punctuation 69152 . 69153) (number 69151 . 69152) (punctuation 69150 . 69151) (RETURN 69143 . 69149) (close-paren 69137 . 69138) (RETURN 69121 . 69127) (semantic-list 69051 . 69117) (semantic-list 69039 . 69047) (IF 69036 . 69038) (open-paren 68999 . 69000) (close-paren 68995 . 68996) (symbol 68990 . 68995) (punctuation 68988 . 68989) (punctuation 68987 . 68988) (symbol 68985 . 68986) (open-paren 68984 . 68985) (IF 68981 . 68983) (close-paren 68960 . 68961) (punctuation 68956 . 68957) (punctuation 68955 . 68956) (punctuation 68954 . 68955) (symbol 68953 . 68954) (punctuation 68946 . 68947) (number 68945 . 68946) (punctuation 68944 . 68945) (RETURN 68937 . 68943) (semantic-list 68915 . 68932) (IF 68912 . 68914) (ELSE 68907 . 68911) (punctuation 68902 . 68903) (BREAK 68897 . 68902) (semantic-list 68856 . 68892) (IF 68853 . 68855) (open-paren 68848 . 68849) (close-paren 68847 . 68848) (symbol 68842 . 68847) (punctuation 68840 . 68841) (punctuation 68839 . 68840) (symbol 68837 . 68838) (open-paren 68836 . 68837) (WHILE 68830 . 68835) (close-paren 68824 . 68825) (RETURN 68809 . 68815) (semantic-list 68771 . 68779) (IF 68768 . 68770) (open-paren 68763 . 68764) (close-paren 68759 . 68760) (symbol 68755 . 68759) (punctuation 68753 . 68754) (punctuation 68752 . 68753) (symbol 68743 . 68751) (open-paren 68742 . 68743) (IF 68739 . 68741) (punctuation 68733 . 68734) (number 68732 . 68733) (punctuation 68731 . 68732) (RETURN 68724 . 68730) (close-paren 68719 . 68720) (symbol 68715 . 68719) (punctuation 68714 . 68715) (open-paren 68713 . 68714) (IF 68710 . 68712) (close-paren 68663 . 68664) (punctuation 68662 . 68663) (symbol 68658 . 68662) (open-paren 68657 . 68658) (punctuation 68655 . 68656) (symbol 68649 . 68654) (punctuation 68648 . 68649) (symbol 68643 . 68647) (CONST 68637 . 68642) (punctuation 68633 . 68634) (close-paren 68632 . 68633) (symbol 68628 . 68632) (open-paren 68627 . 68628) (symbol 68621 . 68627) (punctuation 68619 . 68620) (symbol 68614 . 68618) (symbol 68607 . 68613) (open-paren 68603 . 68604) (close-paren 68600 . 68601) (symbol 68592 . 68600) (symbol 68585 . 68591) (punctuation 68583 . 68584) (symbol 68577 . 68583) (punctuation 68575 . 68576) (CHAR 68571 . 68575) (punctuation 68569 . 68570) (symbol 68565 . 68569) (punctuation 68563 . 68564) (CHAR 68559 . 68563) (CONST 68553 . 68558) (open-paren 68552 . 68553) (symbol 68543 . 68552) (INT 68539 . 68542) (close-paren 68377 . 68378) (RETURN 68362 . 68368) (close-paren 68356 . 68357) (punctuation 68352 . 68353) (punctuation 68351 . 68352) (punctuation 68350 . 68351) (symbol 68349 . 68350) (punctuation 68342 . 68343) (number 68341 . 68342) (punctuation 68340 . 68341) (RETURN 68333 . 68339) (semantic-list 68311 . 68328) (IF 68308 . 68310) (ELSE 68303 . 68307) (punctuation 68298 . 68299) (punctuation 68297 . 68298) (punctuation 68296 . 68297) (symbol 68291 . 68296) (semantic-list 68250 . 68286) (IF 68247 . 68249) (open-paren 68242 . 68243) (close-paren 68241 . 68242) (symbol 68240 . 68241) (punctuation 68239 . 68240) (open-paren 68238 . 68239) (WHILE 68232 . 68237) (punctuation 68226 . 68227) (number 68225 . 68226) (punctuation 68224 . 68225) (RETURN 68217 . 68223) (close-paren 68212 . 68213) (symbol 68208 . 68212) (punctuation 68207 . 68208) (open-paren 68206 . 68207) (IF 68203 . 68205) (close-paren 68175 . 68176) (punctuation 68174 . 68175) (symbol 68170 . 68174) (open-paren 68169 . 68170) (punctuation 68167 . 68168) (symbol 68165 . 68166) (punctuation 68164 . 68165) (symbol 68159 . 68163) (open-paren 68155 . 68156) (close-paren 68152 . 68153) (symbol 68148 . 68152) (punctuation 68146 . 68147) (CHAR 68142 . 68146) (CONST 68136 . 68141) (open-paren 68135 . 68136) (symbol 68127 . 68135) (INT 68123 . 68126) (close-paren 67847 . 67848) (punctuation 67839 . 67840) (punctuation 67838 . 67839) (close-paren 67836 . 67837) (symbol 67834 . 67836) (punctuation 67832 . 67833) (number 67831 . 67832) (punctuation 67829 . 67830) (symbol 67826 . 67829) (punctuation 67824 . 67825) (symbol 67821 . 67824) (open-paren 67820 . 67821) (symbol 67814 . 67820) (RETURN 67807 . 67813) (punctuation 67803 . 67804) (punctuation 67785 . 67786) (number 67784 . 67785) (RETURN 67777 . 67783) (close-paren 67772 . 67773) (symbol 67769 . 67772) (punctuation 67768 . 67769) (open-paren 67767 . 67768) (IF 67764 . 67766) (punctuation 67507 . 67508) (close-paren 67506 . 67507) (number 67505 . 67506) (open-paren 67504 . 67505) (IF 67501 . 67503) (punctuation 67495 . 67496) (number 67494 . 67495) (RETURN 67487 . 67493) (close-paren 67482 . 67483) (symbol 67475 . 67482) (punctuation 67474 . 67475) (punctuation 67472 . 67473) (punctuation 67471 . 67472) (symbol 67468 . 67470) (punctuation 67467 . 67468) (open-paren 67466 . 67467) (IF 67463 . 67465) (punctuation 67439 . 67440) (close-paren 67438 . 67439) (number 67437 . 67438) (open-paren 67436 . 67437) (symbol 67433 . 67436) (symbol 67428 . 67432) (open-paren 67424 . 67425) (close-paren 67421 . 67422) (symbol 67414 . 67421) (punctuation 67412 . 67413) (CHAR 67408 . 67412) (CONST 67402 . 67407) (punctuation 67400 . 67401) (symbol 67398 . 67400) (punctuation 67397 . 67398) (symbol 67392 . 67396) (open-paren 67391 . 67392) (symbol 67377 . 67391) (INT 67373 . 67376) (close-paren 67258 . 67259) (punctuation 67248 . 67249) (close-paren 67247 . 67248) (symbol 67246 . 67247) (open-paren 67245 . 67246) (symbol 67239 . 67245) (punctuation 67237 . 67238) (symbol 67233 . 67236) (punctuation 67227 . 67228) (close-paren 67226 . 67227) (semantic-list 67221 . 67226) (SIZEOF 67215 . 67221) (punctuation 67213 . 67214) (symbol 67212 . 67213) (punctuation 67210 . 67211) (symbol 67207 . 67210) (semantic-list 67200 . 67207) (open-paren 67199 . 67200) (symbol 67192 . 67199) (open-paren 67183 . 67184) (close-paren 67182 . 67183) (close-paren 67181 . 67182) (symbol 67180 . 67181) (punctuation 67178 . 67179) (symbol 67171 . 67178) (open-paren 67170 . 67171) (symbol 67164 . 67170) (punctuation 67163 . 67164) (open-paren 67162 . 67163) (IF 67159 . 67161) (ELSE 67154 . 67158) (close-paren 66843 . 66844) (close-paren 66840 . 66841) (punctuation 66836 . 66837) (number 66835 . 66836) (RETURN 66828 . 66834) (punctuation 66808 . 66809) (number 66807 . 66808) (punctuation 66806 . 66807) (semantic-list 66794 . 66806) (open-paren 66779 . 66780) (ELSE 66772 . 66776) (semantic-list #("{			\\" 0 1 (macros (("s" string "\"UTF-16BE\"" 66758 . 66768)))) 66743 . 66769) (close-paren 66738 . 66739) (symbol 66731 . 66738) (open-paren 66730 . 66731) (IF 66727 . 66729) (ELSE 66722 . 66726) (semantic-list #("{			\\" 0 1 (macros (("s" string "\"UTF-16LE\"" 66708 . 66718)))) 66693 . 66719) (close-paren 66688 . 66689) (symbol 66681 . 66688) (open-paren 66680 . 66681) (IF 66677 . 66679) (punctuation 66673 . 66674) (symbol 66669 . 66673) (close-paren 66664 . 66665) (semantic-list 66284 . 66661) (semantic-list 66270 . 66280) (IF 66267 . 66269) (ELSE 66262 . 66266) (semantic-list 66151 . 66258) (semantic-list 66137 . 66147) (IF 66134 . 66136) (ELSE 66129 . 66133) (semantic-list 65966 . 66125) (semantic-list 65952 . 65962) (IF 65949 . 65951) (punctuation 65942 . 65943) (punctuation 65941 . 65942) (punctuation 65940 . 65941) (symbol 65937 . 65940) (number 65926 . 65927) (number 65923 . 65924) (punctuation 65916 . 65917) (semantic-list 65905 . 65912) (open-paren 65894 . 65895) (close-paren 65893 . 65894) (semantic-list 65889 . 65893) (symbol 65885 . 65889) (punctuation 65884 . 65885) (open-paren 65883 . 65884) (WHILE 65878 . 65883) (punctuation 65872 . 65873) (number 65871 . 65872) (RETURN 65864 . 65870) (close-paren 65859 . 65860) (symbol 65853 . 65859) (punctuation 65852 . 65853) (punctuation 65850 . 65851) (punctuation 65849 . 65850) (symbol 65846 . 65848) (punctuation 65845 . 65846) (open-paren 65844 . 65845) (IF 65841 . 65843) (punctuation 65778 . 65779) (close-paren 65777 . 65778) (number 65775 . 65777) (open-paren 65774 . 65775) (symbol 65771 . 65774) (CHAR 65766 . 65770) (UNSIGNED 65757 . 65765) (open-paren 65753 . 65754) (close-paren 65750 . 65751) (symbol 65744 . 65750) (symbol 65737 . 65743) (punctuation 65735 . 65736) (symbol 65729 . 65735) (punctuation 65728 . 65729) (CHAR 65723 . 65727) (punctuation 65721 . 65722) (symbol 65719 . 65721) (punctuation 65718 . 65719) (symbol 65713 . 65717) (open-paren 65712 . 65713) (symbol 65699 . 65712) (INT 65695 . 65698) (close-paren 65550 . 65551) (punctuation 65539 . 65540) (number 65538 . 65539) (RETURN 65531 . 65537) (punctuation 65523 . 65524) (string 65519 . 65523) (punctuation 65517 . 65518) (close-paren 65515 . 65516) (symbol 65510 . 65515) (open-paren 65509 . 65510) (symbol 65503 . 65509) (punctuation 65494 . 65495) (close-paren 65493 . 65494) (symbol 65492 . 65493) (punctuation 65490 . 65491) (symbol 65484 . 65490) (open-paren 65483 . 65484) (symbol 65477 . 65483) (close-paren 65464 . 65465) (punctuation 65453 . 65454) (number 65452 . 65453) (RETURN 65445 . 65451) (punctuation 65422 . 65423) (number 65421 . 65422) (punctuation 65420 . 65421) (open-paren 65401 . 65402) (close-paren 65400 . 65401) (number 65399 . 65400) (punctuation 65397 . 65398) (symbol 65391 . 65396) (punctuation 65389 . 65390) (symbol 65382 . 65388) (open-paren 65381 . 65382) (IF 65378 . 65380) (punctuation 65369 . 65370) (close-paren 65368 . 65369) (symbol 65367 . 65368) (open-paren 65366 . 65367) (symbol 65360 . 65366) (punctuation 65358 . 65359) (symbol 65352 . 65357) (close-paren 65313 . 65314) (punctuation 65310 . 65311) (number 65309 . 65310) (RETURN 65302 . 65308) (semantic-list 64112 . 65280) (punctuation 64092 . 64093) (number 64091 . 64092) (RETURN 64084 . 64090) (semantic-list 64067 . 64080) (IF 64064 . 64066) (punctuation 63956 . 63957) (number 63954 . 63955) (punctuation 63952 . 63953) (symbol 63943 . 63951) (punctuation 63941 . 63942) (symbol 63932 . 63940) (punctuation 63931 . 63932) (punctuation 63930 . 63931) (symbol 63927 . 63930) (semantic-list 63879 . 63905) (SIZEOF 63873 . 63879) (number 63870 . 63871) (semantic-list 63753 . 63810) (semantic-list 63715 . 63750) (IF 63712 . 63714) (punctuation 63688 . 63689) (number 63687 . 63688) (RETURN 63680 . 63686) (semantic-list 63671 . 63676) (IF 63668 . 63670) (punctuation 63635 . 63636) (number 63634 . 63635) (RETURN 63627 . 63633) (semantic-list 63590 . 63623) (IF 63587 . 63589) (open-paren 63536 . 63537) (close-paren 63533 . 63534) (symbol 63525 . 63533) (INT 63521 . 63524) (punctuation 63519 . 63520) (symbol 63508 . 63519) (punctuation 63506 . 63507) (DOUBLE 63500 . 63506) (punctuation 63491 . 63492) (symbol 63485 . 63491) (symbol 63478 . 63484) (punctuation 63476 . 63477) (symbol 63470 . 63476) (punctuation 63469 . 63470) (CHAR 63464 . 63468) (punctuation 63462 . 63463) (symbol 63458 . 63462) (punctuation 63456 . 63457) (CHAR 63452 . 63456) (CONST 63446 . 63451) (open-paren 63445 . 63446) (symbol 63429 . 63445) (INT 63425 . 63428) (close-paren 63172 . 63173) (punctuation 63169 . 63170) (number 63168 . 63169) (RETURN 63161 . 63167) (punctuation 63155 . 63156) (number 63154 . 63155) (RETURN 63147 . 63153) (semantic-list 63095 . 63143) (IF 63092 . 63094) (punctuation 63071 . 63072) (punctuation 63070 . 63071) (punctuation 63069 . 63070) (symbol 63064 . 63069) (punctuation 63063 . 63064) (punctuation 63062 . 63063) (symbol 63059 . 63062) (punctuation 63039 . 63040) (punctuation 63038 . 63039) (punctuation 63037 . 63038) (symbol 63030 . 63037) (punctuation 63029 . 63030) (punctuation 63028 . 63029) (symbol 63025 . 63028) (ELSE 63017 . 63021) (punctuation 63013 . 63014) (punctuation 63012 . 63013) (punctuation 63011 . 63012) (symbol 63008 . 63011) (punctuation 63007 . 63008) (punctuation 63006 . 63007) (symbol 63003 . 63006) (semantic-list 62980 . 62999) (IF 62977 . 62979) (ELSE 62972 . 62976) (punctuation 62968 . 62969) (punctuation 62967 . 62968) (punctuation 62966 . 62967) (symbol 62960 . 62966) (punctuation 62959 . 62960) (punctuation 62958 . 62959) (symbol 62955 . 62958) (semantic-list 62929 . 62951) (IF 62926 . 62928) (ELSE 62921 . 62925) (punctuation 62917 . 62918) (punctuation 62916 . 62917) (punctuation 62915 . 62916) (symbol 62911 . 62915) (punctuation 62910 . 62911) (punctuation 62909 . 62910) (symbol 62906 . 62909) (semantic-list 62882 . 62902) (IF 62879 . 62881) (ELSE 62874 . 62878) (punctuation 62870 . 62871) (punctuation 62869 . 62870) (punctuation 62868 . 62869) (symbol 62863 . 62868) (punctuation 62862 . 62863) (punctuation 62861 . 62862) (symbol 62858 . 62861) (semantic-list 62833 . 62854) (IF 62830 . 62832) (open-paren 62758 . 62759) (close-paren 62755 . 62756) (symbol 62752 . 62755) (punctuation 62751 . 62752) (VOID 62746 . 62750) (punctuation 62744 . 62745) (symbol 62739 . 62744) (symbol 62732 . 62738) (punctuation 62730 . 62731) (symbol 62727 . 62730) (symbol 62720 . 62726) (punctuation 62718 . 62719) (symbol 62714 . 62718) (punctuation 62713 . 62714) (CHAR 62708 . 62712) (open-paren 62707 . 62708) (symbol 62691 . 62707) (INT 62687 . 62690) (STATIC 62680 . 62686) (punctuation 62656 . 62657) (close-paren 62655 . 62656) (open-paren 62533 . 62534) (symbol 62516 . 62533) (STRUCT 62509 . 62515) (close-paren 62453 . 62454) (punctuation 62450 . 62451) (number 62449 . 62450) (RETURN 62442 . 62448) (punctuation 62436 . 62437) (punctuation 62400 . 62401) (punctuation 62358 . 62359) (semantic-list 62196 . 62242) (semantic-list 62185 . 62196) (IF 62182 . 62184) (open-paren 62178 . 62179) (close-paren 62175 . 62176) (symbol 62166 . 62175) (INT 62162 . 62165) (punctuation 62160 . 62161) (symbol 62154 . 62160) (symbol 62147 . 62153) (punctuation 62145 . 62146) (symbol 62139 . 62145) (punctuation 62138 . 62139) (CHAR 62133 . 62137) (punctuation 62131 . 62132) (symbol 62127 . 62131) (symbol 62120 . 62126) (punctuation 62118 . 62119) (symbol 62115 . 62118) (punctuation 62113 . 62114) (VOID 62109 . 62113) (CONST 62103 . 62108) (open-paren 62102 . 62103) (symbol 62091 . 62102) (INT 62087 . 62090) (close-paren 61990 . 61991) (punctuation 61989 . 61990) (number 61988 . 61989) (RETURN 61981 . 61987) (number 61943 . 61944) (punctuation 61942 . 61943) (open-paren 61905 . 61906) (close-paren 61904 . 61905) (semantic-list 61893 . 61904) (symbol 61887 . 61893) (punctuation 61886 . 61887) (punctuation 61885 . 61886) (symbol 61882 . 61885) (open-paren 61881 . 61882) (IF 61878 . 61880) (close-paren 61825 . 61826) (RETURN 61810 . 61816) (semantic-list 60103 . 61805) (semantic-list 60087 . 60100) (WHILE 60081 . 60086) (open-paren 59953 . 59954) (close-paren 59950 . 59951) (symbol 59946 . 59950) (symbol 59939 . 59945) (punctuation 59937 . 59938) (symbol 59930 . 59937) (punctuation 59928 . 59929) (VOID 59924 . 59928) (CONST 59918 . 59923) (open-paren 59917 . 59918) (symbol 59911 . 59917) (INT 59907 . 59910) (close-paren 59890 . 59891) (RETURN 59872 . 59878) (semantic-list 59120 . 59867) (semantic-list 59104 . 59117) (WHILE 59098 . 59103) (open-paren 58967 . 58968) (close-paren 58964 . 58965) (symbol 58960 . 58964) (symbol 58953 . 58959) (punctuation 58951 . 58952) (symbol 58944 . 58951) (punctuation 58942 . 58943) (VOID 58938 . 58942) (CONST 58932 . 58937) (open-paren 58931 . 58932) (symbol 58922 . 58931) (INT 58918 . 58921) (close-paren 58898 . 58899) (RETURN 58882 . 58888) (semantic-list 58063 . 58879) (semantic-list 58047 . 58060) (WHILE 58041 . 58046) (open-paren 57914 . 57915) (close-paren 57911 . 57912) (symbol 57907 . 57911) (symbol 57900 . 57906) (punctuation 57898 . 57899) (symbol 57891 . 57898) (punctuation 57889 . 57890) (VOID 57885 . 57889) (CONST 57879 . 57884) (open-paren 57878 . 57879) (symbol 57871 . 57878) (INT 57867 . 57870) (close-paren 57244 . 57245) (RETURN 57227 . 57233) (semantic-list 57136 . 57222) (semantic-list 57120 . 57133) (WHILE 57114 . 57119) (open-paren 56984 . 56985) (close-paren 56981 . 56982) (symbol 56977 . 56981) (symbol 56970 . 56976) (punctuation 56968 . 56969) (symbol 56961 . 56968) (punctuation 56959 . 56960) (VOID 56955 . 56959) (CONST 56949 . 56954) (open-paren 56948 . 56949) (symbol 56940 . 56948) (INT 56936 . 56939) (close-paren 56646 . 56647) (punctuation 56635 . 56636) (semantic-list 56612 . 56635) (semantic-list 56607 . 56612) (RETURN 56600 . 56606) (punctuation 56592 . 56593) (open-paren 56427 . 56428) (close-paren 56424 . 56425) (open-paren 56423 . 56424) (symbol 56413 . 56423) (INT 56409 . 56412) (close-paren 56385 . 56386) (punctuation 56382 . 56383) (number 56375 . 56382) (punctuation 56373 . 56374) (semantic-list 56365 . 56372) (symbol 56348 . 56365) (RETURN 56341 . 56347) (open-paren 56337 . 56338) (close-paren 56334 . 56335) (symbol 56329 . 56334) (punctuation 56328 . 56329) (symbol 56319 . 56327) (open-paren 56318 . 56319) (symbol 56302 . 56318) (DOUBLE 56295 . 56301) (close-paren 56271 . 56272) (punctuation 56268 . 56269) (number 56264 . 56268) (punctuation 56262 . 56263) (semantic-list 56254 . 56261) (symbol 56237 . 56254) (RETURN 56230 . 56236) (open-paren 56226 . 56227) (close-paren 56223 . 56224) (symbol 56218 . 56223) (punctuation 56217 . 56218) (symbol 56208 . 56216) (open-paren 56207 . 56208) (symbol 56190 . 56207) (DOUBLE 56183 . 56189) (close-paren 56158 . 56159) (punctuation 56138 . 56139) (symbol 56134 . 56138) (semantic-list 56126 . 56134) (punctuation 56124 . 56125) (number 56114 . 56123) (punctuation 56112 . 56113) (semantic-list 56065 . 56111) (semantic-list 56057 . 56065) (RETURN 56050 . 56056) (punctuation 56040 . 56041) (open-paren 55846 . 55847) (close-paren 55843 . 55844) (symbol 55838 . 55843) (punctuation 55837 . 55838) (symbol 55828 . 55836) (open-paren 55827 . 55828) (symbol 55810 . 55827) (DOUBLE 55803 . 55809) (close-paren 55778 . 55779) (punctuation 55761 . 55762) (punctuation 55760 . 55761) (punctuation 55754 . 55755) (open-paren 55666 . 55667) (close-paren 55663 . 55664) (symbol 55658 . 55663) (punctuation 55657 . 55658) (symbol 55648 . 55656) (open-paren 55647 . 55648) (symbol 55636 . 55647) (VOID 55631 . 55635) (close-paren 55626 . 55627) (punctuation 55608 . 55609) (punctuation 55607 . 55608) (punctuation 55601 . 55602) (open-paren 55512 . 55513) (close-paren 55509 . 55510) (symbol 55504 . 55509) (punctuation 55503 . 55504) (symbol 55494 . 55502) (open-paren 55493 . 55494) (symbol 55481 . 55493) (VOID 55476 . 55480) (close-paren 55457 . 55458) (open-paren 55208 . 55209) (close-paren 55205 . 55206) (symbol 55193 . 55205) (INT 55189 . 55192) (open-paren 55188 . 55189) (symbol 55182 . 55188) (VOID 55177 . 55181) (close-paren 55157 . 55158) (number 55141 . 55145) (open-paren 55081 . 55082) (close-paren 55078 . 55079) (symbol 55071 . 55078) (INT 55067 . 55070) (open-paren 55066 . 55067) (symbol 55060 . 55066) (VOID 55055 . 55059) (close-paren 55036 . 55037) (semantic-list 54826 . 55008) (semantic-list 54802 . 54823) (WHILE 54796 . 54801) (semantic-list 54508 . 54791) (semantic-list 54483 . 54508) (IF 54480 . 54482) (ELSE 54475 . 54479) (punctuation 54421 . 54422) (number 54419 . 54420) (punctuation 54417 . 54418) (symbol 54410 . 54416) (punctuation 54408 . 54409) (symbol 54404 . 54407) (semantic-list 54352 . 54388) (semantic-list 54342 . 54349) (IF 54339 . 54341) (number 54325 . 54326) (ELSE 54268 . 54272) (semantic-list 54212 . 54228) (IF 54209 . 54211) (ELSE 54204 . 54208) (semantic-list 54148 . 54164) (IF 54145 . 54147) (ELSE 54084 . 54088) (semantic-list 54028 . 54044) (IF 54025 . 54027) (punctuation 53810 . 53811) (number 53808 . 53810) (punctuation 53806 . 53807) (number 53803 . 53805) (punctuation 53801 . 53802) (number 53798 . 53800) (punctuation 53796 . 53797) (number 53793 . 53795) (punctuation 53791 . 53792) (number 53788 . 53790) (punctuation 53786 . 53787) (symbol 53772 . 53785) (symbol 53764 . 53771) (CONST 53758 . 53763) (STATIC 53751 . 53757) (punctuation 53747 . 53748) (number 53745 . 53747) (punctuation 53743 . 53744) (number 53740 . 53742) (punctuation 53738 . 53739) (number 53735 . 53737) (punctuation 53733 . 53734) (number 53730 . 53732) (punctuation 53728 . 53729) (symbol 53713 . 53727) (symbol 53705 . 53712) (CONST 53699 . 53704) (STATIC 53692 . 53698) (punctuation 53688 . 53689) (number 53686 . 53688) (punctuation 53684 . 53685) (number 53681 . 53683) (punctuation 53679 . 53680) (number 53676 . 53678) (punctuation 53674 . 53675) (symbol 53661 . 53673) (symbol 53653 . 53660) (CONST 53647 . 53652) (STATIC 53640 . 53646) (open-paren 53297 . 53298) (close-paren 53294 . 53295) (symbol 53288 . 53294) (symbol 53281 . 53287) (punctuation 53279 . 53280) (symbol 53273 . 53279) (punctuation 53271 . 53272) (CHAR 53267 . 53271) (punctuation 53265 . 53266) (symbol 53259 . 53265) (INT 53255 . 53258) (punctuation 53253 . 53254) (symbol 53249 . 53253) (symbol 53241 . 53248) (open-paren 53240 . 53241) (symbol 53222 . 53240) (VOID 53217 . 53221) (close-paren 53171 . 53172) (punctuation 53137 . 53138) (punctuation 53136 . 53137) (punctuation 53089 . 53090) (punctuation 53088 . 53089) (punctuation 53045 . 53046) (punctuation 53044 . 53045) (punctuation 53003 . 53004) (punctuation 53002 . 53003) (punctuation 52957 . 52958) (punctuation 52956 . 52957) (punctuation 52913 . 52914) (punctuation 52912 . 52913) (semantic-list 52876 . 52895) (SIZEOF 52870 . 52876) (number 52867 . 52868) (semantic-list 52792 . 52849) (ELSE 52788 . 52792) (semantic-list 52731 . 52788) (semantic-list 52723 . 52731) (IF 52720 . 52722) (punctuation 52705 . 52706) (punctuation 52695 . 52696) (punctuation 52687 . 52688) (punctuation 52680 . 52681) (punctuation 52671 . 52672) (open-paren 52625 . 52626) (close-paren 52622 . 52623) (symbol 52616 . 52622) (INT 52612 . 52615) (punctuation 52603 . 52604) (symbol 52597 . 52603) (punctuation 52595 . 52596) (CHAR 52591 . 52595) (CONST 52585 . 52590) (punctuation 52583 . 52584) (symbol 52577 . 52583) (punctuation 52575 . 52576) (CHAR 52571 . 52575) (CONST 52565 . 52570) (punctuation 52563 . 52564) (symbol 52559 . 52563) (punctuation 52557 . 52558) (CHAR 52553 . 52557) (CONST 52547 . 52552) (punctuation 52538 . 52539) (symbol 52535 . 52538) (punctuation 52533 . 52534) (CHAR 52529 . 52533) (CONST 52523 . 52528) (punctuation 52521 . 52522) (symbol 52516 . 52521) (punctuation 52514 . 52515) (CHAR 52510 . 52514) (CONST 52504 . 52509) (punctuation 52502 . 52503) (symbol 52498 . 52502) (punctuation 52496 . 52497) (CHAR 52492 . 52496) (CONST 52486 . 52491) (open-paren 52485 . 52486) (symbol 52467 . 52485) (VOID 52462 . 52466) (punctuation 52211 . 52212) (close-paren 52210 . 52211) (open-paren 51965 . 51966) (symbol 51955 . 51965) (STRUCT 51948 . 51954) (close-paren 51943 . 51944) (string 51920 . 51939) (RETURN 51902 . 51908) (open-paren 51897 . 51898) (close-paren 51894 . 51895) (symbol 51893 . 51894) (symbol 51886 . 51892) (open-paren 51885 . 51886) (symbol 51872 . 51884) (punctuation 51871 . 51872) (CHAR 51866 . 51870) (CONST 51860 . 51865) (close-paren 51809 . 51810) (string 51795 . 51805) (RETURN 51777 . 51783) (open-paren 51773 . 51774) (close-paren 51770 . 51771) (symbol 51769 . 51770) (symbol 51762 . 51768) (open-paren 51761 . 51762) (symbol 51752 . 51760) (punctuation 51751 . 51752) (CHAR 51746 . 51750) (CONST 51740 . 51745) (close-paren 51700 . 51701) (string 51686 . 51696) (RETURN 51668 . 51674) (open-paren 51663 . 51664) (close-paren 51660 . 51661) (symbol 51659 . 51660) (symbol 51652 . 51658) (open-paren 51651 . 51652) (symbol 51642 . 51650) (punctuation 51641 . 51642) (CHAR 51636 . 51640) (CONST 51630 . 51635) (close-paren 51590 . 51591) (RETURN 51574 . 51580) (RETURN 51556 . 51562) (semantic-list 51506 . 51550) (IF 51503 . 51505) (RETURN 51485 . 51491) (semantic-list 51477 . 51482) (IF 51474 . 51476) (open-paren 51408 . 51409) (close-paren 51405 . 51406) (symbol 51402 . 51405) (punctuation 51401 . 51402) (CHAR 51396 . 51400) (CONST 51390 . 51395) (punctuation 51388 . 51389) (symbol 51387 . 51388) (symbol 51380 . 51386) (open-paren 51379 . 51380) (symbol 51371 . 51378) (punctuation 51368 . 51369) (CHAR 51363 . 51367) (CONST 51357 . 51362) (STATIC 51350 . 51356) (close-paren 51120 . 51121) (string 51107 . 51111) (RETURN 51076 . 51082) (open-paren 51072 . 51073) (close-paren 51069 . 51070) (symbol 51066 . 51069) (punctuation 51065 . 51066) (VOID 51060 . 51064) (punctuation 51058 . 51059) (symbol 51054 . 51058) (symbol 51038 . 51053) (punctuation 51036 . 51037) (symbol 51034 . 51036) (punctuation 51032 . 51033) (symbol 51028 . 51032) (open-paren 51027 . 51028) (symbol 51015 . 51027) (INT 51011 . 51014) (close-paren 50983 . 50984) (punctuation 50980 . 50981) (number 50979 . 50980) (RETURN 50972 . 50978) (semantic-list 50796 . 50967) (semantic-list 50753 . 50793) (WHILE 50747 . 50752) (punctuation 50727 . 50728) (semantic-list 50722 . 50727) (SIZEOF 50716 . 50722) (punctuation 50714 . 50715) (symbol 50710 . 50713) (open-paren 50630 . 50631) (close-paren 50627 . 50628) (symbol 50624 . 50627) (punctuation 50623 . 50624) (VOID 50618 . 50622) (punctuation 50616 . 50617) (symbol 50611 . 50616) (INT 50607 . 50610) (punctuation 50605 . 50606) (symbol 50601 . 50605) (symbol 50584 . 50600) (punctuation 50582 . 50583) (symbol 50580 . 50582) (punctuation 50578 . 50579) (symbol 50574 . 50578) (open-paren 50573 . 50574) (symbol 50560 . 50573) (INT 50556 . 50559) (close-paren 50527 . 50528) (string 50515 . 50519) (RETURN 50486 . 50492) (open-paren 50482 . 50483) (close-paren 50479 . 50480) (symbol 50477 . 50479) (punctuation 50476 . 50477) (symbol 50471 . 50475) (punctuation 50469 . 50470) (symbol 50468 . 50469) (punctuation 50467 . 50468) (symbol 50460 . 50466) (punctuation 50458 . 50459) (symbol 50451 . 50458) (punctuation 50450 . 50451) (punctuation 50449 . 50450) (CHAR 50444 . 50448) (open-paren 50443 . 50444) (symbol 50435 . 50443) (symbol 50428 . 50434) (close-paren 50325 . 50326) (RETURN 50310 . 50316) (semantic-list 50259 . 50268) (IF 50256 . 50258) (semantic-list 49890 . 50251) (semantic-list 49876 . 49887) (IF 49873 . 49875) (semantic-list 49356 . 49860) (semantic-list 49329 . 49353) (WHILE 49323 . 49328) (open-paren 49198 . 49199) (close-paren 49195 . 49196) (symbol 49193 . 49195) (punctuation 49192 . 49193) (symbol 49187 . 49191) (punctuation 49185 . 49186) (symbol 49180 . 49185) (INT 49176 . 49179) (punctuation 49174 . 49175) (symbol 49173 . 49174) (punctuation 49172 . 49173) (symbol 49165 . 49171) (punctuation 49163 . 49164) (symbol 49156 . 49163) (punctuation 49155 . 49156) (punctuation 49154 . 49155) (CHAR 49149 . 49153) (open-paren 49148 . 49149) (symbol 49139 . 49148) (symbol 49132 . 49138) (close-paren 48743 . 48744) (punctuation 48740 . 48741) (number 48739 . 48740) (RETURN 48732 . 48738) (semantic-list 48684 . 48727) (semantic-list 48651 . 48681) (IF 48648 . 48650) (punctuation 48642 . 48643) (number 48641 . 48642) (RETURN 48634 . 48640) (semantic-list 48593 . 48630) (IF 48590 . 48592) (punctuation 48584 . 48585) (number 48583 . 48584) (RETURN 48576 . 48582) (semantic-list 48509 . 48572) (IF 48506 . 48508) (punctuation 48500 . 48501) (number 48499 . 48500) (RETURN 48492 . 48498) (semantic-list 48442 . 48488) (IF 48439 . 48441) (open-paren 48389 . 48390) (close-paren 48386 . 48387) (symbol 48383 . 48386) (symbol 48376 . 48382) (punctuation 48374 . 48375) (symbol 48370 . 48374) (punctuation 48369 . 48370) (VOID 48364 . 48368) (CONST 48358 . 48363) (punctuation 48356 . 48357) (symbol 48352 . 48356) (punctuation 48351 . 48352) (CHAR 48346 . 48350) (CONST 48340 . 48345) (open-paren 48339 . 48340) (symbol 48320 . 48339) (INT 48316 . 48319) (close-paren 48156 . 48157) (punctuation 48153 . 48154) (number 48152 . 48153) (RETURN 48145 . 48151) (semantic-list 48091 . 48125) (semantic-list 48055 . 48088) (IF 48052 . 48054) (punctuation 48046 . 48047) (number 48045 . 48046) (RETURN 48038 . 48044) (semantic-list 48006 . 48034) (IF 48003 . 48005) (punctuation 47997 . 47998) (number 47996 . 47997) (RETURN 47989 . 47995) (semantic-list 47978 . 47985) (IF 47975 . 47977) (open-paren 47957 . 47958) (close-paren 47954 . 47955) (symbol 47951 . 47954) (symbol 47944 . 47950) (punctuation 47942 . 47943) (symbol 47938 . 47942) (punctuation 47937 . 47938) (VOID 47932 . 47936) (CONST 47926 . 47931) (punctuation 47924 . 47925) (symbol 47920 . 47924) (punctuation 47918 . 47919) (CHAR 47914 . 47918) (CONST 47908 . 47913) (open-paren 47907 . 47908) (symbol 47893 . 47907) (INT 47889 . 47892) (close-paren 47820 . 47821) (semantic-list 47766 . 47818) (semantic-list 47759 . 47763) (IF 47756 . 47758) (open-paren 47752 . 47753) (close-paren 47749 . 47750) (symbol 47747 . 47749) (punctuation 47746 . 47747) (symbol 47737 . 47745) (STRUCT 47730 . 47736) (open-paren 47729 . 47730) (symbol 47716 . 47729) (VOID 47711 . 47715) (close-paren 47687 . 47688) (RETURN 47675 . 47681) (punctuation 47627 . 47628) (punctuation 47626 . 47627) (symbol 47624 . 47626) (semantic-list 47545 . 47619) (semantic-list 47509 . 47542) (IF 47506 . 47508) (punctuation 47409 . 47410) (punctuation 47408 . 47409) (symbol 47406 . 47408) (semantic-list 47320 . 47385) (semantic-list 47300 . 47317) (IF 47297 . 47299) (punctuation 47269 . 47270) (punctuation 47268 . 47269) (symbol 47266 . 47268) (RETURN 47216 . 47222) (semantic-list 47207 . 47212) (IF 47204 . 47206) (RETURN 47145 . 47151) (semantic-list 47109 . 47141) (IF 47106 . 47108) (RETURN 47046 . 47052) (semantic-list 47020 . 47042) (IF 47017 . 47019) (open-paren 46941 . 46942) (close-paren 46938 . 46939) (symbol 46934 . 46938) (punctuation 46932 . 46933) (CHAR 46928 . 46932) (CONST 46922 . 46927) (open-paren 46921 . 46922) (symbol 46908 . 46921) (punctuation 46906 . 46907) (symbol 46898 . 46906) (STRUCT 46891 . 46897) (close-paren 46773 . 46774) (punctuation 46758 . 46759) (punctuation 46757 . 46758) (punctuation 46756 . 46757) (symbol 46742 . 46756) (semantic-list 46692 . 46739) (semantic-list 46685 . 46690) (IF 46682 . 46684) (open-paren 46679 . 46680) (close-paren 46677 . 46678) (symbol 46675 . 46677) (punctuation 46673 . 46674) (symbol 46669 . 46673) (open-paren 46668 . 46669) (symbol 46661 . 46668) (VOID 46656 . 46660) (close-paren 46639 . 46640) (RETURN 46619 . 46625) (punctuation 46615 . 46616) (punctuation 46614 . 46615) (punctuation 46613 . 46614) (symbol 46599 . 46613) (semantic-list 46571 . 46595) (IF 46568 . 46570) (open-paren 46278 . 46279) (close-paren 46275 . 46276) (symbol 46271 . 46275) (punctuation 46269 . 46270) (CHAR 46265 . 46269) (CONST 46259 . 46264) (punctuation 46257 . 46258) (symbol 46253 . 46257) (punctuation 46251 . 46252) (CHAR 46247 . 46251) (CONST 46241 . 46246) (open-paren 46240 . 46241) (symbol 46234 . 46240) (punctuation 46232 . 46233) (symbol 46228 . 46232) (close-paren 46172 . 46173) (string 45851 . 45855) (semantic-list 45811 . 45822) (IF 45808 . 45810) (ELSE 45803 . 45807) (string 45796 . 45798) (semantic-list 45757 . 45767) (IF 45754 . 45756) (semantic-list 45730 . 45743) (punctuation 45728 . 45729) (semantic-list 45710 . 45723) (semantic-list 45661 . 45675) (IF 45658 . 45660) (ELSE 45653 . 45657) (punctuation 45582 . 45583) (number 45580 . 45582) (punctuation 45579 . 45580) (punctuation 45578 . 45579) (number 45577 . 45578) (semantic-list 45568 . 45577) (punctuation 45566 . 45567) (symbol 45563 . 45565) (symbol 45555 . 45562) (CONST 45549 . 45554) (STATIC 45542 . 45548) (punctuation 45538 . 45539) (number 45536 . 45538) (punctuation 45535 . 45536) (punctuation 45534 . 45535) (number 45533 . 45534) (semantic-list 45524 . 45533) (punctuation 45522 . 45523) (symbol 45519 . 45521) (symbol 45511 . 45518) (CONST 45505 . 45510) (STATIC 45498 . 45504) (punctuation 45494 . 45495) (number 45492 . 45494) (punctuation 45491 . 45492) (punctuation 45490 . 45491) (number 45489 . 45490) (semantic-list 45480 . 45489) (punctuation 45478 . 45479) (symbol 45475 . 45477) (symbol 45467 . 45474) (CONST 45461 . 45466) (STATIC 45454 . 45460) (punctuation 45450 . 45451) (number 45448 . 45450) (punctuation 45447 . 45448) (punctuation 45446 . 45447) (number 45445 . 45446) (semantic-list 45436 . 45445) (punctuation 45434 . 45435) (symbol 45431 . 45433) (symbol 45423 . 45430) (CONST 45417 . 45422) (STATIC 45410 . 45416) (punctuation 45406 . 45407) (number 45404 . 45406) (punctuation 45403 . 45404) (punctuation 45402 . 45403) (number 45401 . 45402) (semantic-list 45392 . 45401) (punctuation 45390 . 45391) (symbol 45387 . 45389) (symbol 45379 . 45386) (CONST 45373 . 45378) (STATIC 45366 . 45372) (punctuation 45362 . 45363) (number 45360 . 45362) (punctuation 45359 . 45360) (punctuation 45358 . 45359) (number 45357 . 45358) (semantic-list 45348 . 45357) (punctuation 45346 . 45347) (symbol 45343 . 45345) (symbol 45335 . 45342) (CONST 45329 . 45334) (STATIC 45322 . 45328) (open-paren 45285 . 45286) (close-paren 45282 . 45283) (symbol 45276 . 45282) (INT 45272 . 45275) (punctuation 45270 . 45271) (symbol 45264 . 45270) (punctuation 45262 . 45263) (CHAR 45258 . 45262) (punctuation 45256 . 45257) (symbol 45252 . 45256) (symbol 45244 . 45251) (open-paren 45243 . 45244) (symbol 45225 . 45243) (VOID 45220 . 45224) (close-paren 45153 . 45154) (semantic-list 45049 . 45143) (open-paren 44388 . 44389) (close-paren 44385 . 44386) (symbol 44381 . 44385) (punctuation 44380 . 44381) (CHAR 44375 . 44379) (CONST 44369 . 44374) (open-paren 44368 . 44369) (symbol 44349 . 44368) (symbol 44341 . 44348) (close-paren 44222 . 44223) (punctuation 44203 . 44204) (symbol 44201 . 44203) (RETURN 44194 . 44200) (punctuation 44188 . 44189) (number 44187 . 44188) (punctuation 44186 . 44187) (RETURN 44179 . 44185) (semantic-list 44158 . 44175) (IF 44155 . 44157) (punctuation 44151 . 44152) (number 44150 . 44151) (punctuation 44149 . 44150) (RETURN 44142 . 44148) (semantic-list 44116 . 44138) (IF 44113 . 44115) (open-paren 43501 . 43502) (close-paren 43498 . 43499) (symbol 43494 . 43498) (punctuation 43492 . 43493) (CHAR 43488 . 43492) (CONST 43482 . 43487) (open-paren 43481 . 43482) (symbol 43472 . 43481) (symbol 43464 . 43471) (close-paren 43445 . 43446) (punctuation 43434 . 43435) (number 43433 . 43434) (RETURN 43426 . 43432) (semantic-list 43270 . 43421) (semantic-list 43242 . 43267) (IF 43239 . 43241) (semantic-list 42874 . 42947) (semantic-list 42848 . 42871) (IF 42845 . 42847) (punctuation 42839 . 42840) (number 42838 . 42839) (RETURN 42831 . 42837) (semantic-list 42774 . 42827) (IF 42771 . 42773) (punctuation 42765 . 42766) (number 42764 . 42765) (RETURN 42757 . 42763) (semantic-list 42702 . 42753) (IF 42699 . 42701) (open-paren 42695 . 42696) (close-paren 42692 . 42693) (symbol 42681 . 42692) (INT 42677 . 42680) (punctuation 42675 . 42676) (symbol 42668 . 42675) (punctuation 42666 . 42667) (CHAR 42662 . 42666) (CONST 42656 . 42661) (punctuation 42654 . 42655) (symbol 42648 . 42654) (punctuation 42646 . 42647) (CHAR 42642 . 42646) (CONST 42636 . 42641) (open-paren 42635 . 42636) (symbol 42626 . 42635) (INT 42622 . 42625) (close-paren 42436 . 42437) (punctuation 42425 . 42426) (number 42424 . 42425) (RETURN 42417 . 42423) (semantic-list 42407 . 42412) (semantic-list 42373 . 42378) (semantic-list 42156 . 42344) (semantic-list 42099 . 42150) (WHILE 42094 . 42099) (semantic-list 42036 . 42089) (semantic-list 41974 . 42033) (IF 41972 . 41974) (punctuation 41965 . 41966) (number 41964 . 41965) (RETURN 41957 . 41963) (semantic-list 41897 . 41953) (IF 41895 . 41897) (punctuation 41888 . 41889) (number 41887 . 41888) (RETURN 41880 . 41886) (semantic-list 41850 . 41876) (IF 41848 . 41850) (punctuation 41841 . 41842) (number 41840 . 41841) (RETURN 41833 . 41839) (semantic-list 41786 . 41829) (IF 41783 . 41785) (punctuation 41410 . 41411) (number 41409 . 41410) (RETURN 41402 . 41408) (semantic-list 41347 . 41398) (IF 41344 . 41346) (open-paren 41340 . 41341) (close-paren 41337 . 41338) (symbol 41326 . 41337) (INT 41322 . 41325) (punctuation 41320 . 41321) (symbol 41313 . 41320) (punctuation 41312 . 41313) (CHAR 41307 . 41311) (CONST 41301 . 41306) (punctuation 41299 . 41300) (symbol 41293 . 41299) (punctuation 41292 . 41293) (CHAR 41287 . 41291) (CONST 41281 . 41286) (open-paren 41280 . 41281) (symbol 41271 . 41280) (INT 41267 . 41270) (close-paren 41250 . 41251) (punctuation 41247 . 41248) (number 41246 . 41247) (RETURN 41239 . 41245) (semantic-list 40998 . 41234) (semantic-list 40961 . 40995) (WHILE 40956 . 40961) (punctuation 40932 . 40933) (punctuation 40931 . 40932) (punctuation 40930 . 40931) (symbol 40923 . 40930) (semantic-list 40882 . 40919) (IF 40879 . 40881) (number 40813 . 40814) (punctuation 40812 . 40813) (punctuation 40761 . 40762) (number 40760 . 40761) (RETURN 40753 . 40759) (semantic-list 40729 . 40749) (IF 40726 . 40728) (punctuation 40632 . 40633) (number 40631 . 40632) (RETURN 40624 . 40630) (semantic-list 40530 . 40620) (IF 40527 . 40529) (open-paren 40445 . 40446) (close-paren 40442 . 40443) (symbol 40435 . 40442) (punctuation 40433 . 40434) (CHAR 40429 . 40433) (CONST 40423 . 40428) (punctuation 40421 . 40422) (symbol 40417 . 40421) (punctuation 40415 . 40416) (CHAR 40411 . 40415) (CONST 40405 . 40410) (open-paren 40404 . 40405) (symbol 40381 . 40404) (INT 40377 . 40380) (close-paren 40168 . 40169) (punctuation 40144 . 40145) (RETURN 40137 . 40143) (punctuation 39926 . 39927) (number 39925 . 39926) (RETURN 39918 . 39924) (semantic-list 39892 . 39914) (IF 39889 . 39891) (open-paren 39885 . 39886) (close-paren 39882 . 39883) (symbol 39878 . 39882) (punctuation 39877 . 39878) (CHAR 39872 . 39876) (CONST 39866 . 39871) (open-paren 39865 . 39866) (symbol 39854 . 39865) (INT 39850 . 39853) (close-paren 39833 . 39834) (punctuation 39830 . 39831) (number 39829 . 39830) (RETURN 39822 . 39828) (punctuation 39816 . 39817) (number 39815 . 39816) (RETURN 39808 . 39814) (ELSE 39800 . 39804) (semantic-list 39619 . 39797) (semantic-list 39589 . 39616) (IF 39586 . 39588) (punctuation 39580 . 39581) (number 39579 . 39580) (RETURN 39572 . 39578) (semantic-list 39543 . 39568) (IF 39540 . 39542) (open-paren 39503 . 39504) (close-paren 39500 . 39501) (symbol 39497 . 39500) (punctuation 39495 . 39496) (CHAR 39491 . 39495) (CONST 39485 . 39490) (open-paren 39484 . 39485) (symbol 39472 . 39484) (INT 39468 . 39471) (close-paren 39445 . 39446) (punctuation 39442 . 39443) (number 39441 . 39442) (RETURN 39434 . 39440) (punctuation 39428 . 39429) (number 39427 . 39428) (RETURN 39420 . 39426) (ELSE 39412 . 39416) (semantic-list 39076 . 39409) (semantic-list 39049 . 39076) (IF 39046 . 39048) (open-paren 38985 . 38986) (close-paren 38982 . 38983) (symbol 38979 . 38982) (punctuation 38978 . 38979) (VOID 38973 . 38977) (punctuation 38971 . 38972) (symbol 38967 . 38971) (symbol 38948 . 38966) (punctuation 38946 . 38947) (symbol 38943 . 38946) (punctuation 38941 . 38942) (CHAR 38937 . 38941) (CONST 38931 . 38936) (open-paren 38930 . 38931) (symbol 38919 . 38930) (INT 38915 . 38918) (close-paren 38841 . 38842) (punctuation 38838 . 38839) (number 38837 . 38838) (RETURN 38830 . 38836) (punctuation 38824 . 38825) (number 38823 . 38824) (RETURN 38816 . 38822) (ELSE 38808 . 38812) (semantic-list 38237 . 38805) (semantic-list 38210 . 38237) (IF 38207 . 38209) (open-paren 38146 . 38147) (close-paren 38143 . 38144) (symbol 38140 . 38143) (punctuation 38139 . 38140) (VOID 38134 . 38138) (punctuation 38132 . 38133) (symbol 38120 . 38132) (INT 38116 . 38119) (punctuation 38114 . 38115) (symbol 38103 . 38114) (INT 38099 . 38102) (punctuation 38097 . 38098) (symbol 38093 . 38097) (symbol 38073 . 38092) (punctuation 38071 . 38072) (symbol 38068 . 38071) (punctuation 38066 . 38067) (CHAR 38062 . 38066) (CONST 38056 . 38061) (open-paren 38055 . 38056) (symbol 38043 . 38055) (INT 38039 . 38042) (close-paren 37912 . 37913) (punctuation 37909 . 37910) (number 37908 . 37909) (punctuation 37906 . 37907) (semantic-list 37863 . 37905) (symbol 37855 . 37863) (punctuation 37886 . 37887) (punctuation 37885 . 37886) (string 37874 . 37880) (RETURN 37848 . 37854) (punctuation 37841 . 37842) (number 37840 . 37841) (RETURN 37833 . 37839) (semantic-list 37813 . 37829) (IF 37810 . 37812) (punctuation 37754 . 37755) (number 37753 . 37754) (RETURN 37746 . 37752) (semantic-list 37731 . 37742) (IF 37728 . 37730) (open-paren 37647 . 37648) (close-paren 37644 . 37645) (symbol 37641 . 37644) (symbol 37634 . 37640) (punctuation 37632 . 37633) (symbol 37629 . 37632) (punctuation 37628 . 37629) (CHAR 37623 . 37627) (punctuation 37621 . 37622) (symbol 37618 . 37621) (punctuation 37617 . 37618) (symbol 37600 . 37616) (STRUCT 37593 . 37599) (open-paren 37592 . 37593) (symbol 37577 . 37592) (INT 37573 . 37576) (close-paren 37553 . 37554) (punctuation 37535 . 37536) (punctuation 37534 . 37535) (symbol 37528 . 37534) (punctuation 37527 . 37528) (punctuation 37526 . 37527) (symbol 37523 . 37526) (RETURN 37516 . 37522) (open-paren 37321 . 37322) (close-paren 37318 . 37319) (symbol 37315 . 37318) (punctuation 37314 . 37315) (symbol 37297 . 37313) (STRUCT 37290 . 37296) (open-paren 37289 . 37290) (symbol 37274 . 37289) (punctuation 37272 . 37273) (CHAR 37268 . 37272) (CONST 37262 . 37267) (close-paren 37242 . 37243) (punctuation 37239 . 37240) (number 37238 . 37239) (RETURN 37231 . 37237) (punctuation 37214 . 37215) (punctuation 37213 . 37214) (open-paren 37150 . 37151) (close-paren 37147 . 37148) (symbol 37144 . 37147) (punctuation 37143 . 37144) (symbol 37126 . 37142) (STRUCT 37119 . 37125) (open-paren 37118 . 37119) (symbol 37106 . 37118) (INT 37102 . 37105) (close-paren 37085 . 37086) (punctuation 37066 . 37067) (punctuation 37065 . 37066) (symbol 37058 . 37064) (punctuation 37057 . 37058) (punctuation 37056 . 37057) (symbol 37050 . 37056) (punctuation 37049 . 37050) (punctuation 37048 . 37049) (symbol 37045 . 37048) (RETURN 37038 . 37044) (open-paren 36876 . 36877) (close-paren 36873 . 36874) (symbol 36870 . 36873) (punctuation 36869 . 36870) (symbol 36852 . 36868) (STRUCT 36845 . 36851) (open-paren 36844 . 36845) (symbol 36823 . 36844) (INT 36819 . 36822) (close-paren 36743 . 36744) (punctuation 36717 . 36718) (RETURN 36710 . 36716) (open-paren 36703 . 36704) (close-paren 36700 . 36701) (symbol 36697 . 36700) (punctuation 36696 . 36697) (symbol 36679 . 36695) (STRUCT 36672 . 36678) (open-paren 36671 . 36672) (symbol 36653 . 36671) (INT 36649 . 36652) (close-paren 36629 . 36630) (punctuation 36610 . 36611) (punctuation 36609 . 36610) (symbol 36602 . 36608) (punctuation 36601 . 36602) (punctuation 36600 . 36601) (symbol 36594 . 36600) (punctuation 36593 . 36594) (punctuation 36592 . 36593) (symbol 36589 . 36592) (RETURN 36582 . 36588) (open-paren 36493 . 36494) (close-paren 36490 . 36491) (symbol 36487 . 36490) (punctuation 36486 . 36487) (symbol 36469 . 36485) (STRUCT 36462 . 36468) (open-paren 36461 . 36462) (symbol 36444 . 36461) (INT 36440 . 36443) (close-paren 36420 . 36421) (string 36404 . 36408) (punctuation 36395 . 36396) (punctuation 36394 . 36395) (punctuation 36387 . 36388) (punctuation 36386 . 36387) (punctuation 36375 . 36376) (RETURN 36368 . 36374) (open-paren 36217 . 36218) (close-paren 36214 . 36215) (symbol 36211 . 36214) (punctuation 36210 . 36211) (symbol 36193 . 36209) (STRUCT 36186 . 36192) (open-paren 36185 . 36186) (symbol 36165 . 36185) (INT 36161 . 36164) (close-paren 36135 . 36136) (string 36120 . 36123) (punctuation 36111 . 36112) (punctuation 36110 . 36111) (punctuation 36103 . 36104) (punctuation 36102 . 36103) (punctuation 36091 . 36092) (RETURN 36084 . 36090) (open-paren 35935 . 35936) (close-paren 35932 . 35933) (symbol 35929 . 35932) (punctuation 35928 . 35929) (symbol 35911 . 35927) (STRUCT 35904 . 35910) (open-paren 35903 . 35904) (symbol 35886 . 35903) (INT 35882 . 35885) (close-paren 35857 . 35858) (punctuation 35854 . 35855) (number 35853 . 35854) (RETURN 35846 . 35852) (punctuation 35834 . 35835) (number 35833 . 35834) (RETURN 35826 . 35832) (semantic-list 35779 . 35822) (IF 35776 . 35778) (open-paren 35598 . 35599) (close-paren 35595 . 35596) (symbol 35592 . 35595) (punctuation 35591 . 35592) (symbol 35574 . 35590) (STRUCT 35567 . 35573) (open-paren 35566 . 35567) (symbol 35553 . 35566) (INT 35549 . 35552) (close-paren 35527 . 35528) (punctuation 35524 . 35525) (number 35523 . 35524) (RETURN 35516 . 35522) (semantic-list 35464 . 35505) (semantic-list 35440 . 35461) (IF 35437 . 35439) (punctuation 35406 . 35407) (punctuation 35405 . 35406) (symbol 35402 . 35405) (punctuation 35398 . 35399) (number 35397 . 35398) (RETURN 35390 . 35396) (semantic-list 35368 . 35386) (IF 35365 . 35367) (punctuation 35342 . 35343) (punctuation 35341 . 35342) (symbol 35338 . 35341) (punctuation 34952 . 34953) (punctuation 34951 . 34952) (symbol 34948 . 34951) (semantic-list 34923 . 34944) (IF 34920 . 34922) (punctuation 34916 . 34917) (number 34915 . 34916) (punctuation 34913 . 34914) (semantic-list 34907 . 34912) (symbol 34901 . 34907) (punctuation 34899 . 34900) (symbol 34895 . 34898) (punctuation 34893 . 34894) (symbol 34891 . 34892) (punctuation 34871 . 34872) (punctuation 34870 . 34871) (semantic-list 34849 . 34855) (SIZEOF 34843 . 34849) (number 34840 . 34841) (punctuation 34822 . 34823) (number 34821 . 34822) (RETURN 34814 . 34820) (semantic-list 34772 . 34810) (IF 34769 . 34771) (open-paren 34701 . 34702) (close-paren 34698 . 34699) (symbol 34695 . 34698) (punctuation 34694 . 34695) (symbol 34677 . 34693) (STRUCT 34670 . 34676) (punctuation 34668 . 34669) (symbol 34665 . 34668) (punctuation 34664 . 34665) (CHAR 34659 . 34663) (CONST 34653 . 34658) (open-paren 34652 . 34653) (symbol 34638 . 34652) (INT 34634 . 34637) (close-paren 34599 . 34600) (punctuation 34596 . 34597) (number 34595 . 34596) (RETURN 34588 . 34594) (semantic-list 34554 . 34567) (IF 34551 . 34553) (semantic-list 34519 . 34532) (IF 34516 . 34518) (punctuation 34512 . 34513) (symbol 34497 . 34512) (RETURN 34482 . 34488) (semantic-list 34448 . 34461) (IF 34445 . 34447) (semantic-list 34413 . 34426) (IF 34410 . 34412) (semantic-list 34204 . 34228) (IF 34201 . 34203) (semantic-list 34131 . 34137) (punctuation 34124 . 34125) (semantic-list 34099 . 34105) (punctuation 34091 . 34092) (semantic-list 34045 . 34051) (SIZEOF 34039 . 34045) (number 34036 . 34037) (number 34005 . 34008) (punctuation 33970 . 33971) (punctuation 33969 . 33970) (semantic-list 33965 . 33968) (semantic-list 33777 . 33786) (SIZEOF 33771 . 33777) (number 33768 . 33769) (semantic-list 33703 . 33722) (IF 33700 . 33702) (semantic-list 33369 . 33567) (semantic-list 33355 . 33366) (IF 33352 . 33354) (semantic-list 33176 . 33220) (IF 33173 . 33175) (semantic-list 33012 . 33033) (IF 33009 . 33011) (punctuation 32775 . 32776) (number 32774 . 32775) (RETURN 32767 . 32773) (semantic-list 32711 . 32763) (IF 32708 . 32710) (punctuation 32702 . 32703) (number 32701 . 32702) (RETURN 32694 . 32700) (semantic-list 32646 . 32690) (IF 32643 . 32645) (open-paren 32513 . 32514) (close-paren 32510 . 32511) (symbol 32507 . 32510) (punctuation 32506 . 32507) (VOID 32501 . 32505) (punctuation 32499 . 32500) (symbol 32495 . 32499) (symbol 32483 . 32494) (punctuation 32474 . 32475) (symbol 32471 . 32474) (punctuation 32470 . 32471) (CHAR 32465 . 32469) (CONST 32459 . 32464) (punctuation 32457 . 32458) (symbol 32454 . 32457) (punctuation 32453 . 32454) (CHAR 32448 . 32452) (CONST 32442 . 32447) (open-paren 32441 . 32442) (symbol 32425 . 32441) (INT 32421 . 32424) (close-paren 31794 . 31795) (punctuation 31791 . 31792) (number 31790 . 31791) (RETURN 31783 . 31789) (punctuation 31772 . 31773) (punctuation 31753 . 31754) (semantic-list 31732 . 31753) (WHILE 31727 . 31732) (semantic-list 30819 . 31727) (DO 30817 . 30819) (punctuation 30802 . 30803) (number 30801 . 30802) (RETURN 30794 . 30800) (semantic-list 30759 . 30790) (IF 30756 . 30758) (open-paren 30564 . 30565) (close-paren 30561 . 30562) (symbol 30558 . 30561) (punctuation 30557 . 30558) (VOID 30552 . 30556) (punctuation 30550 . 30551) (symbol 30546 . 30550) (symbol 30534 . 30545) (punctuation 30524 . 30525) (symbol 30518 . 30524) (punctuation 30517 . 30518) (CHAR 30512 . 30516) (CONST 30506 . 30511) (punctuation 30504 . 30505) (symbol 30498 . 30504) (punctuation 30497 . 30498) (CHAR 30492 . 30496) (CONST 30486 . 30491) (punctuation 30484 . 30485) (symbol 30478 . 30484) (punctuation 30477 . 30478) (CHAR 30472 . 30476) (open-paren 30471 . 30472) (symbol 30454 . 30471) (INT 30450 . 30453) (STATIC 30443 . 30449) (close-paren 30319 . 30320) (punctuation 30316 . 30317) (number 30315 . 30316) (RETURN 30308 . 30314) (semantic-list 30259 . 30303) (semantic-list 30224 . 30256) (IF 30221 . 30223) (punctuation 30145 . 30146) (number 30144 . 30145) (RETURN 30137 . 30143) (semantic-list 30112 . 30133) (IF 30109 . 30111) (open-paren 30105 . 30106) (close-paren 30102 . 30103) (symbol 30099 . 30102) (punctuation 30097 . 30098) (CHAR 30093 . 30097) (CONST 30087 . 30092) (open-paren 30086 . 30087) (symbol 30062 . 30086) (INT 30058 . 30061) (close-paren 29979 . 29980) (RETURN 29939 . 29945) (punctuation 29933 . 29934) (number 29932 . 29933) (RETURN 29925 . 29931) (ELSE 29917 . 29921) (semantic-list 29512 . 29914) (semantic-list 29482 . 29509) (IF 29479 . 29481) (open-paren 29403 . 29404) (close-paren 29400 . 29401) (symbol 29397 . 29400) (punctuation 29395 . 29396) (CHAR 29391 . 29395) (CONST 29385 . 29390) (open-paren 29384 . 29385) (symbol 29359 . 29384) (INT 29355 . 29358) (STATIC 29348 . 29354) (close-paren 29343 . 29344) (RETURN 29298 . 29304) (punctuation 29292 . 29293) (number 29291 . 29292) (RETURN 29284 . 29290) (semantic-list 29259 . 29280) (IF 29256 . 29258) (open-paren 29252 . 29253) (close-paren 29249 . 29250) (symbol 29246 . 29249) (punctuation 29245 . 29246) (VOID 29240 . 29244) (punctuation 29238 . 29239) (symbol 29234 . 29238) (symbol 29220 . 29233) (punctuation 29218 . 29219) (symbol 29215 . 29218) (punctuation 29214 . 29215) (CHAR 29209 . 29213) (CONST 29203 . 29208) (open-paren 29202 . 29203) (symbol 29184 . 29202) (INT 29180 . 29183) (close-paren 29175 . 29176) (punctuation 29172 . 29173) (number 29171 . 29172) (RETURN 29164 . 29170) (punctuation 29158 . 29159) (number 29157 . 29158) (RETURN 29150 . 29156) (semantic-list 29122 . 29146) (IF 29119 . 29121) (punctuation 29113 . 29114) (number 29112 . 29113) (RETURN 29105 . 29111) (ELSE 29097 . 29101) (semantic-list 28538 . 29094) (semantic-list 28508 . 28535) (IF 28505 . 28507) (open-paren 28434 . 28435) (close-paren 28431 . 28432) (symbol 28428 . 28431) (punctuation 28427 . 28428) (VOID 28422 . 28426) (punctuation 28420 . 28421) (symbol 28416 . 28420) (symbol 28402 . 28415) (punctuation 28400 . 28401) (symbol 28397 . 28400) (punctuation 28396 . 28397) (CHAR 28391 . 28395) (CONST 28385 . 28390) (open-paren 28384 . 28385) (symbol 28365 . 28384) (INT 28361 . 28364) (STATIC 28354 . 28360) (close-paren 28331 . 28332) (number 28330 . 28331) (open-paren 28329 . 28330) (WHILE 28324 . 28329) (close-paren 28323 . 28324) (punctuation 28314 . 28315) (number 28313 . 28314) (RETURN 28306 . 28312) (punctuation 28294 . 28295) (semantic-list 57120 . 57133) (WHILE 57114 . 57119) (open-paren 56984 . 56985) (close-paren 56981 . 56982) (symbol 56977 . 56981) (symbol 56970 . 56976) (punctuation 56968 . 56969) (symbol 56961 . 56968) (punctuation 56959 . 56960) (VOID 56955 . 56959) (CONST 56949 . 56954) (open-paren 56948 . 56949) (symbol 56940 . 56948) (INT 56936 . 56939) (close-paren 56646 . 56647) (punctuation 56635 . 56636) (semantic-list 56612 . 56635) (semantic-list 56607 . 56612) (RETURN 56600 . 56606) (punctuation 56592 . 56593) (open-paren 56427 . 56428) (close-paren 56424 . 56425) (open-paren 56423 . 56424) (symbol 56413 . 56423) (INT 56409 . 56412) (close-paren 56385 . 56386) (punctuation 56382 . 56383) (number 56375 . 56382) (punctuation 56373 . 56374) (semantic-list 56365 . 56372) (symbol 56348 . 56365) (RETURN 56341 . 56347) (open-paren 56337 . 56338) (close-paren 56334 . 56335) (symbol 56329 . 56334) (punctuation 56328 . 56329) (symbol 56319 . 56327) (open-paren 56318 . 56319) (symbol 56302 . 56318) (DOUBLE 56295 . 56301) (close-paren 56271 . 56272) (punctuation 56268 . 56269) (number 56264 . 56268) (punctuation 56262 . 56263) (semantic-list 56254 . 56261) (symbol 56237 . 56254) (RETURN 56230 . 56236) (open-paren 56226 . 56227) (close-paren 56223 . 56224) (symbol 56218 . 56223) (punctuation 56217 . 56218) (symbol 56208 . 56216) (open-paren 56207 . 56208) (symbol 56190 . 56207) (DOUBLE 56183 . 56189) (close-paren 56158 . 56159) (punctuation 56138 . 56139) (symbol 56134 . 56138) (semantic-list 56126 . 56134) (punctuation 56124 . 56125) (number 56114 . 56123) (punctuation 56112 . 56113) (semantic-list 56065 . 56111) (semantic-list 56057 . 56065) (RETURN 56050 . 56056) (punctuation 56040 . 56041) (open-paren 55846 . 55847) (close-paren 55843 . 55844) (symbol 55838 . 55843) (punctuation 55837 . 55838) (symbol 55828 . 55836) (open-paren 55827 . 55828) (symbol 55810 . 55827) (DOUBLE 55803 . 55809) (close-paren 55778 . 55779) (punctuation 55761 . 55762) (punctuation 55760 . 55761) (punctuation 55754 . 55755) (open-paren 55666 . 55667) (close-paren 55663 . 55664) (symbol 55658 . 55663) (punctuation 55657 . 55658) (symbol 55648 . 55656) (open-paren 55647 . 55648) (symbol 55636 . 55647) (VOID 55631 . 55635) (close-paren 55626 . 55627) (punctuation 55608 . 55609) (punctuation 55607 . 55608) (punctuation 55601 . 55602) (open-paren 55512 . 55513) (close-paren 55509 . 55510) (symbol 55504 . 55509) (punctuation 55503 . 55504) (symbol 55494 . 55502) (open-paren 55493 . 55494) (symbol 55481 . 55493) (VOID 55476 . 55480) (close-paren 55457 . 55458) (open-paren 55208 . 55209) (close-paren 55205 . 55206) (symbol 55193 . 55205) (INT 55189 . 55192) (open-paren 55188 . 55189) (symbol 55182 . 55188) (VOID 55177 . 55181) (close-paren 55157 . 55158) (number 55141 . 55145) (open-paren 55081 . 55082) (close-paren 55078 . 55079) (symbol 55071 . 55078) (INT 55067 . 55070) (open-paren 55066 . 55067) (symbol 55060 . 55066) (VOID 55055 . 55059) (close-paren 55036 . 55037) (semantic-list 54826 . 55008) (semantic-list 54802 . 54823) (WHILE 54796 . 54801) (semantic-list 54508 . 54791) (semantic-list 54483 . 54508) (IF 54480 . 54482) (ELSE 54475 . 54479) (punctuation 54421 . 54422) (number 54419 . 54420) (punctuation 54417 . 54418) (symbol 54410 . 54416) (punctuation 54408 . 54409) (symbol 54404 . 54407) (semantic-list 54352 . 54388) (semantic-list 54342 . 54349) (IF 54339 . 54341) (number 54325 . 54326) (ELSE 54268 . 54272) (semantic-list 54212 . 54228) (IF 54209 . 54211) (ELSE 54204 . 54208) (semantic-list 54148 . 54164) (IF 54145 . 54147) (ELSE 54084 . 54088) (semantic-list 54028 . 54044) (IF 54025 . 54027) (punctuation 53810 . 53811) (number 53808 . 53810) (punctuation 53806 . 53807) (number 53803 . 53805) (punctuation 53801 . 53802) (number 53798 . 53800) (punctuation 53796 . 53797) (number 53793 . 53795) (punctuation 53791 . 53792) (number 53788 . 53790) (punctuation 53786 . 53787) (symbol 53772 . 53785) (symbol 53764 . 53771) (CONST 53758 . 53763) (STATIC 53751 . 53757) (punctuation 53747 . 53748) (number 53745 . 53747) (punctuation 53743 . 53744) (number 53740 . 53742) (punctuation 53738 . 53739) (number 53735 . 53737) (punctuation 53733 . 53734) (number 53730 . 53732) (punctuation 53728 . 53729) (symbol 53713 . 53727) (symbol 53705 . 53712) (CONST 53699 . 53704) (STATIC 53692 . 53698) (punctuation 53688 . 53689) (number 53686 . 53688) (punctuation 53684 . 53685) (number 53681 . 53683) (punctuation 53679 . 53680) (number 53676 . 53678) (punctuation 53674 . 53675) (symbol 53661 . 53673) (symbol 53653 . 53660) (CONST 53647 . 53652) (STATIC 53640 . 53646) (open-paren 53297 . 53298) (close-paren 53294 . 53295) (symbol 53288 . 53294) (symbol 53281 . 53287) (punctuation 53279 . 53280) (symbol 53273 . 53279) (punctuation 53271 . 53272) (CHAR 53267 . 53271) (punctuation 53265 . 53266) (symbol 53259 . 53265) (INT 53255 . 53258) (punctuation 53253 . 53254) (symbol 53249 . 53253) (symbol 53241 . 53248) (open-paren 53240 . 53241) (symbol 53222 . 53240) (VOID 53217 . 53221) (close-paren 53171 . 53172) (punctuation 53137 . 53138) (punctuation 53136 . 53137) (punctuation 53089 . 53090) (punctuation 53088 . 53089) (punctuation 53045 . 53046) (punctuation 53044 . 53045) (punctuation 53003 . 53004) (punctuation 53002 . 53003) (punctuation 52957 . 52958) (punctuation 52956 . 52957) (punctuation 52913 . 52914) (punctuation 52912 . 52913) (semantic-list 52876 . 52895) (SIZEOF 52870 . 52876) (number 52867 . 52868) (semantic-list 52792 . 52849) (ELSE 52788 . 52792) (semantic-list 52731 . 52788) (semantic-list 52723 . 52731) (IF 52720 . 52722) (punctuation 52705 . 52706) (punctuation 52695 . 52696) (punctuation 52687 . 52688) (punctuation 52680 . 52681) (punctuation 52671 . 52672) (open-paren 52625 . 52626) (close-paren 52622 . 52623) (symbol 52616 . 52622) (INT 52612 . 52615) (punctuation 52603 . 52604) (symbol 52597 . 52603) (punctuation 52595 . 52596) (CHAR 52591 . 52595) (CONST 52585 . 52590) (punctuation 52583 . 52584) (symbol 52577 . 52583) (punctuation 52575 . 52576) (CHAR 52571 . 52575) (CONST 52565 . 52570) (punctuation 52563 . 52564) (symbol 52559 . 52563) (punctuation 52557 . 52558) (CHAR 52553 . 52557) (CONST 52547 . 52552) (punctuation 52538 . 52539) (symbol 52535 . 52538) (punctuation 52533 . 52534) (CHAR 52529 . 52533) (CONST 52523 . 52528) (punctuation 52521 . 52522) (symbol 52516 . 52521) (punctuation 52514 . 52515) (CHAR 52510 . 52514) (CONST 52504 . 52509) (punctuation 52502 . 52503) (symbol 52498 . 52502) (punctuation 52496 . 52497) (CHAR 52492 . 52496) (CONST 52486 . 52491) (open-paren 52485 . 52486) (symbol 52467 . 52485) (VOID 52462 . 52466) (punctuation 52211 . 52212) (close-paren 52210 . 52211) (open-paren 51965 . 51966) (symbol 51955 . 51965) (STRUCT 51948 . 51954) (close-paren 51943 . 51944) (string 51920 . 51939) (RETURN 51902 . 51908) (open-paren 51897 . 51898) (close-paren 51894 . 51895) (symbol 51893 . 51894) (symbol 51886 . 51892) (open-paren 51885 . 51886) (symbol 51872 . 51884) (punctuation 51871 . 51872) (CHAR 51866 . 51870) (CONST 51860 . 51865) (close-paren 51809 . 51810) (string 51795 . 51805) (RETURN 51777 . 51783) (open-paren 51773 . 51774) (close-paren 51770 . 51771) (symbol 51769 . 51770) (symbol 51762 . 51768) (open-paren 51761 . 51762) (symbol 51752 . 51760) (punctuation 51751 . 51752) (CHAR 51746 . 51750) (CONST 51740 . 51745) (close-paren 51700 . 51701) (string 51686 . 51696) (RETURN 51668 . 51674) (open-paren 51663 . 51664) (close-paren 51660 . 51661) (symbol 51659 . 51660) (symbol 51652 . 51658) (open-paren 51651 . 51652) (symbol 51642 . 51650) (punctuation 51641 . 51642) (CHAR 51636 . 51640) (CONST 51630 . 51635) (close-paren 51590 . 51591) (RETURN 51574 . 51580) (RETURN 51556 . 51562) (semantic-list 51506 . 51550) (IF 51503 . 51505) (RETURN 51485 . 51491) (semantic-list 51477 . 51482) (IF 51474 . 51476) (open-paren 51408 . 51409) (close-paren 51405 . 51406) (symbol 51402 . 51405) (punctuation 51401 . 51402) (CHAR 51396 . 51400) (CONST 51390 . 51395) (punctuation 51388 . 51389) (symbol 51387 . 51388) (symbol 51380 . 51386) (open-paren 51379 . 51380) (symbol 51371 . 51378) (punctuation 51368 . 51369) (CHAR 51363 . 51367) (CONST 51357 . 51362) (STATIC 51350 . 51356) (close-paren 51120 . 51121) (string 51107 . 51111) (RETURN 51076 . 51082) (open-paren 51072 . 51073) (close-paren 51069 . 51070) (symbol 51066 . 51069) (punctuation 51065 . 51066) (VOID 51060 . 51064) (punctuation 51058 . 51059) (symbol 51054 . 51058) (symbol 51038 . 51053) (punctuation 51036 . 51037) (symbol 51034 . 51036) (punctuation 51032 . 51033) (symbol 51028 . 51032) (open-paren 51027 . 51028) (symbol 51015 . 51027) (INT 51011 . 51014) (close-paren 50983 . 50984) (punctuation 50980 . 50981) (number 50979 . 50980) (RETURN 50972 . 50978) (semantic-list 50796 . 50967) (semantic-list 50753 . 50793) (WHILE 50747 . 50752) (punctuation 50727 . 50728) (semantic-list 50722 . 50727) (SIZEOF 50716 . 50722) (punctuation 50714 . 50715) (symbol 50710 . 50713) (open-paren 50630 . 50631) (close-paren 50627 . 50628) (symbol 50624 . 50627) (punctuation 50623 . 50624) (VOID 50618 . 50622) (punctuation 50616 . 50617) (symbol 50611 . 50616) (INT 50607 . 50610) (punctuation 50605 . 50606) (symbol 50601 . 50605) (symbol 50584 . 50600) (punctuation 50582 . 50583) (symbol 50580 . 50582) (punctuation 50578 . 50579) (symbol 50574 . 50578) (open-paren 50573 . 50574) (symbol 50560 . 50573) (INT 50556 . 50559) (close-paren 50527 . 50528) (string 50515 . 50519) (RETURN 50486 . 50492) (open-paren 50482 . 50483) (close-paren 50479 . 50480) (symbol 50477 . 50479) (punctuation 50476 . 50477) (symbol 50471 . 50475) (punctuation 50469 . 50470) (symbol 50468 . 50469) (punctuation 50467 . 50468) (symbol 50460 . 50466) (punctuation 50458 . 50459) (symbol 50451 . 50458) (punctuation 50450 . 50451) (punctuation 50449 . 50450) (CHAR 50444 . 50448) (open-paren 50443 . 50444) (symbol 50435 . 50443) (symbol 50428 . 50434) (close-paren 50325 . 50326) (RETURN 50310 . 50316) (semantic-list 50259 . 50268) (IF 50256 . 50258) (semantic-list 49890 . 50251) (semantic-list 49876 . 49887) (IF 49873 . 49875) (semantic-list 49356 . 49860) (semantic-list 49329 . 49353) (WHILE 49323 . 49328) (open-paren 49198 . 49199) (close-paren 49195 . 49196) (symbol 49193 . 49195) (punctuation 49192 . 49193) (symbol 49187 . 49191) (punctuation 49185 . 49186) (symbol 49180 . 49185) (INT 49176 . 49179) (punctuation 49174 . 49175) (symbol 49173 . 49174) (punctuation 49172 . 49173) (symbol 49165 . 49171) (punctuation 49163 . 49164) (symbol 49156 . 49163) (punctuation 49155 . 49156) (punctuation 49154 . 49155) (CHAR 49149 . 49153) (open-paren 49148 . 49149) (symbol 49139 . 49148) (symbol 49132 . 49138) (close-paren 48743 . 48744) (punctuation 48740 . 48741) (number 48739 . 48740) (RETURN 48732 . 48738) (semantic-list 48684 . 48727) (semantic-list 48651 . 48681) (IF 48648 . 48650) (punctuation 48642 . 48643) (number 48641 . 48642) (RETURN 48634 . 48640) (semantic-list 48593 . 48630) (IF 48590 . 48592) (punctuation 48584 . 48585) (number 48583 . 48584) (RETURN 48576 . 48582) (semantic-list 48509 . 48572) (IF 48506 . 48508) (punctuation 48500 . 48501) (number 48499 . 48500) (RETURN 48492 . 48498) (semantic-list 48442 . 48488) (IF 48439 . 48441) (open-paren 48389 . 48390) (close-paren 48386 . 48387) (symbol 48383 . 48386) (symbol 48376 . 48382) (punctuation 48374 . 48375) (symbol 48370 . 48374) (punctuation 48369 . 48370) (VOID 48364 . 48368) (CONST 48358 . 48363) (punctuation 48356 . 48357) (symbol 48352 . 48356) (punctuation 48351 . 48352) (CHAR 48346 . 48350) (CONST 48340 . 48345) (open-paren 48339 . 48340) (symbol 48320 . 48339) (INT 48316 . 48319) (close-paren 48156 . 48157) (punctuation 48153 . 48154) (number 48152 . 48153) (RETURN 48145 . 48151) (semantic-list 48091 . 48125) (semantic-list 48055 . 48088) (IF 48052 . 48054) (punctuation 48046 . 48047) (number 48045 . 48046) (RETURN 48038 . 48044) (semantic-list 48006 . 48034) (IF 48003 . 48005) (punctuation 47997 . 47998) (number 47996 . 47997) (RETURN 47989 . 47995) (semantic-list 47978 . 47985) (IF 47975 . 47977) (open-paren 47957 . 47958) (close-paren 47954 . 47955) (symbol 47951 . 47954) (symbol 47944 . 47950) (punctuation 47942 . 47943) (symbol 47938 . 47942) (punctuation 47937 . 47938) (VOID 47932 . 47936) (CONST 47926 . 47931) (punctuation 47924 . 47925) (symbol 47920 . 47924) (punctuation 47918 . 47919) (CHAR 47914 . 47918) (CONST 47908 . 47913) (open-paren 47907 . 47908) (symbol 47893 . 47907) (INT 47889 . 47892) (close-paren 47820 . 47821) (semantic-list 47766 . 47818) (semantic-list 47759 . 47763) (IF 47756 . 47758) (open-paren 47752 . 47753) (close-paren 47749 . 47750) (symbol 47747 . 47749) (punctuation 47746 . 47747) (symbol 47737 . 47745) (STRUCT 47730 . 47736) (open-paren 47729 . 47730) (symbol 47716 . 47729) (VOID 47711 . 47715) (close-paren 47687 . 47688) (RETURN 47675 . 47681) (punctuation 47627 . 47628) (punctuation 47626 . 47627) (symbol 47624 . 47626) (semantic-list 47545 . 47619) (semantic-list 47509 . 47542) (IF 47506 . 47508) (punctuation 47409 . 47410) (punctuation 47408 . 47409) (symbol 47406 . 47408) (semantic-list 47320 . 47385) (semantic-list 47300 . 47317) (IF 47297 . 47299) (punctuation 47269 . 47270) (punctuation 47268 . 47269) (symbol 47266 . 47268) (RETURN 47216 . 47222) (semantic-list 47207 . 47212) (IF 47204 . 47206) (RETURN 47145 . 47151) (semantic-list 47109 . 47141) (IF 47106 . 47108) (RETURN 47046 . 47052) (semantic-list 47020 . 47042) (IF 47017 . 47019) (open-paren 46941 . 46942) (close-paren 46938 . 46939) (symbol 46934 . 46938) (punctuation 46932 . 46933) (CHAR 46928 . 46932) (CONST 46922 . 46927) (open-paren 46921 . 46922) (symbol 46908 . 46921) (punctuation 46906 . 46907) (symbol 46898 . 46906) (STRUCT 46891 . 46897) (close-paren 46773 . 46774) (punctuation 46758 . 46759) (punctuation 46757 . 46758) (punctuation 46756 . 46757) (symbol 46742 . 46756) (semantic-list 46692 . 46739) (semantic-list 46685 . 46690) (IF 46682 . 46684) (open-paren 46679 . 46680) (close-paren 46677 . 46678) (symbol 46675 . 46677) (punctuation 46673 . 46674) (symbol 46669 . 46673) (open-paren 46668 . 46669) (symbol 46661 . 46668) (VOID 46656 . 46660) (close-paren 46639 . 46640) (RETURN 46619 . 46625) (punctuation 46615 . 46616) (punctuation 46614 . 46615) (punctuation 46613 . 46614) (symbol 46599 . 46613) (semantic-list 46571 . 46595) (IF 46568 . 46570) (open-paren 46278 . 46279) (close-paren 46275 . 46276) (symbol 46271 . 46275) (punctuation 46269 . 46270) (CHAR 46265 . 46269) (CONST 46259 . 46264) (punctuation 46257 . 46258) (symbol 46253 . 46257) (punctuation 46251 . 46252) (CHAR 46247 . 46251) (CONST 46241 . 46246) (open-paren 46240 . 46241) (symbol 46234 . 46240) (punctuation 46232 . 46233) (symbol 46228 . 46232) (close-paren 46172 . 46173) (string 45851 . 45855) (semantic-list 45811 . 45822) (IF 45808 . 45810) (ELSE 45803 . 45807) (string 45796 . 45798) (semantic-list 45757 . 45767) (IF 45754 . 45756) (semantic-list 45730 . 45743) (punctuation 45728 . 45729) (semantic-list 45710 . 45723) (semantic-list 45661 . 45675) (IF 45658 . 45660) (ELSE 45653 . 45657) (punctuation 45582 . 45583) (number 45580 . 45582) (punctuation 45579 . 45580) (punctuation 45578 . 45579) (number 45577 . 45578) (semantic-list 45568 . 45577) (punctuation 45566 . 45567) (symbol 45563 . 45565) (symbol 45555 . 45562) (CONST 45549 . 45554) (STATIC 45542 . 45548) (punctuation 45538 . 45539) (number 45536 . 45538) (punctuation 45535 . 45536) (punctuation 45534 . 45535) (number 45533 . 45534) (semantic-list 45524 . 45533) (punctuation 45522 . 45523) (symbol 45519 . 45521) (symbol 45511 . 45518) (CONST 45505 . 45510) (STATIC 45498 . 45504) (punctuation 45494 . 45495) (number 45492 . 45494) (punctuation 45491 . 45492) (punctuation 45490 . 45491) (number 45489 . 45490) (semantic-list 45480 . 45489) (punctuation 45478 . 45479) (symbol 45475 . 45477) (symbol 45467 . 45474) (CONST 45461 . 45466) (STATIC 45454 . 45460) (punctuation 45450 . 45451) (number 45448 . 45450) (punctuation 45447 . 45448) (punctuation 45446 . 45447) (number 45445 . 45446) (semantic-list 45436 . 45445) (punctuation 45434 . 45435) (symbol 45431 . 45433) (symbol 45423 . 45430) (CONST 45417 . 45422) (STATIC 45410 . 45416) (punctuation 45406 . 45407) (number 45404 . 45406) (punctuation 45403 . 45404) (punctuation 45402 . 45403) (number 45401 . 45402) (semantic-list 45392 . 45401) (punctuation 45390 . 45391) (symbol 45387 . 45389) (symbol 45379 . 45386) (CONST 45373 . 45378) (STATIC 45366 . 45372) (punctuation 45362 . 45363) (number 45360 . 45362) (punctuation 45359 . 45360) (punctuation 45358 . 45359) (number 45357 . 45358) (semantic-list 45348 . 45357) (punctuation 45346 . 45347) (symbol 45343 . 45345) (symbol 45335 . 45342) (CONST 45329 . 45334) (STATIC 45322 . 45328) (open-paren 45285 . 45286) (close-paren 45282 . 45283) (symbol 45276 . 45282) (INT 45272 . 45275) (punctuation 45270 . 45271) (symbol 45264 . 45270) (punctuation 45262 . 45263) (CHAR 45258 . 45262) (punctuation 45256 . 45257) (symbol 45252 . 45256) (symbol 45244 . 45251) (open-paren 45243 . 45244) (symbol 45225 . 45243) (VOID 45220 . 45224) (close-paren 45153 . 45154) (semantic-list 45049 . 45143) (open-paren 44388 . 44389) (close-paren 44385 . 44386) (symbol 44381 . 44385) (punctuation 44380 . 44381) (CHAR 44375 . 44379) (CONST 44369 . 44374) (open-paren 44368 . 44369) (symbol 44349 . 44368) (symbol 44341 . 44348) (close-paren 44222 . 44223) (punctuation 44203 . 44204) (symbol 44201 . 44203) (RETURN 44194 . 44200) (punctuation 44188 . 44189) (number 44187 . 44188) (punctuation 44186 . 44187) (RETURN 44179 . 44185) (semantic-list 44158 . 44175) (IF 44155 . 44157) (punctuation 44151 . 44152) (number 44150 . 44151) (punctuation 44149 . 44150) (RETURN 44142 . 44148) (semantic-list 44116 . 44138) (IF 44113 . 44115) (open-paren 43501 . 43502) (close-paren 43498 . 43499) (symbol 43494 . 43498) (punctuation 43492 . 43493) (CHAR 43488 . 43492) (CONST 43482 . 43487) (open-paren 43481 . 43482) (symbol 43472 . 43481) (symbol 43464 . 43471) (close-paren 43445 . 43446) (punctuation 43434 . 43435) (number 43433 . 43434) (RETURN 43426 . 43432) (semantic-list 43270 . 43421) (semantic-list 43242 . 43267) (IF 43239 . 43241) (semantic-list 42874 . 42947) (semantic-list 42848 . 42871) (IF 42845 . 42847) (punctuation 42839 . 42840) (number 42838 . 42839) (RETURN 42831 . 42837) (semantic-list 42774 . 42827) (IF 42771 . 42773) (punctuation 42765 . 42766) (number 42764 . 42765) (RETURN 42757 . 42763) (semantic-list 42702 . 42753) (IF 42699 . 42701) (open-paren 42695 . 42696) (close-paren 42692 . 42693) (symbol 42681 . 42692) (INT 42677 . 42680) (punctuation 42675 . 42676) (symbol 42668 . 42675) (punctuation 42666 . 42667) (CHAR 42662 . 42666) (CONST 42656 . 42661) (punctuation 42654 . 42655) (symbol 42648 . 42654) (punctuation 42646 . 42647) (CHAR 42642 . 42646) (CONST 42636 . 42641) (open-paren 42635 . 42636) (symbol 42626 . 42635) (INT 42622 . 42625) (close-paren 42436 . 42437) (punctuation 42425 . 42426) (number 42424 . 42425) (RETURN 42417 . 42423) (semantic-list 42407 . 42412) (semantic-list 42373 . 42378) (semantic-list 42156 . 42344) (semantic-list 42099 . 42150) (WHILE 42094 . 42099) (semantic-list 42036 . 42089) (semantic-list 41974 . 42033) (IF 41972 . 41974) (punctuation 41965 . 41966) (number 41964 . 41965) (RETURN 41957 . 41963) (semantic-list 41897 . 41953) (IF 41895 . 41897) (punctuation 41888 . 41889) (number 41887 . 41888) (RETURN 41880 . 41886) (semantic-list 41850 . 41876) (IF 41848 . 41850) (punctuation 41841 . 41842) (number 41840 . 41841) (RETURN 41833 . 41839) (semantic-list 41786 . 41829) (IF 41783 . 41785) (punctuation 41410 . 41411) (number 41409 . 41410) (RETURN 41402 . 41408) (semantic-list 41347 . 41398) (IF 41344 . 41346) (open-paren 41340 . 41341) (close-paren 41337 . 41338) (symbol 41326 . 41337) (INT 41322 . 41325) (punctuation 41320 . 41321) (symbol 41313 . 41320) (punctuation 41312 . 41313) (CHAR 41307 . 41311) (CONST 41301 . 41306) (punctuation 41299 . 41300) (symbol 41293 . 41299) (punctuation 41292 . 41293) (CHAR 41287 . 41291) (CONST 41281 . 41286) (open-paren 41280 . 41281) (symbol 41271 . 41280) (INT 41267 . 41270) (close-paren 41250 . 41251) (punctuation 41247 . 41248) (number 41246 . 41247) (RETURN 41239 . 41245) (semantic-list 40998 . 41234) (semantic-list 40961 . 40995) (WHILE 40956 . 40961) (punctuation 40932 . 40933) (punctuation 40931 . 40932) (punctuation 40930 . 40931) (symbol 40923 . 40930) (semantic-list 40882 . 40919) (IF 40879 . 40881) (number 40813 . 40814) (punctuation 40812 . 40813) (punctuation 40761 . 40762) (number 40760 . 40761) (RETURN 40753 . 40759) (semantic-list 40729 . 40749) (IF 40726 . 40728) (punctuation 40632 . 40633) (number 40631 . 40632) (RETURN 40624 . 40630) (semantic-list 40530 . 40620) (IF 40527 . 40529) (open-paren 40445 . 40446) (close-paren 40442 . 40443) (symbol 40435 . 40442) (punctuation 40433 . 40434) (CHAR 40429 . 40433) (CONST 40423 . 40428) (punctuation 40421 . 40422) (symbol 40417 . 40421) (punctuation 40415 . 40416) (CHAR 40411 . 40415) (CONST 40405 . 40410) (open-paren 40404 . 40405) (symbol 40381 . 40404) (INT 40377 . 40380) (close-paren 40168 . 40169) (punctuation 40144 . 40145) (RETURN 40137 . 40143) (punctuation 39926 . 39927) (number 39925 . 39926) (RETURN 39918 . 39924) (semantic-list 39892 . 39914) (IF 39889 . 39891) (open-paren 39885 . 39886) (close-paren 39882 . 39883) (symbol 39878 . 39882) (punctuation 39877 . 39878) (CHAR 39872 . 39876) (CONST 39866 . 39871) (open-paren 39865 . 39866) (symbol 39854 . 39865) (INT 39850 . 39853) (close-paren 39833 . 39834) (punctuation 39830 . 39831) (number 39829 . 39830) (RETURN 39822 . 39828) (punctuation 39816 . 39817) (number 39815 . 39816) (RETURN 39808 . 39814) (ELSE 39800 . 39804) (semantic-list 39619 . 39797) (semantic-list 39589 . 39616) (IF 39586 . 39588) (punctuation 39580 . 39581) (number 39579 . 39580) (RETURN 39572 . 39578) (semantic-list 39543 . 39568) (IF 39540 . 39542) (open-paren 39503 . 39504) (close-paren 39500 . 39501) (symbol 39497 . 39500) (punctuation 39495 . 39496) (CHAR 39491 . 39495) (CONST 39485 . 39490) (open-paren 39484 . 39485) (symbol 39472 . 39484) (INT 39468 . 39471) (close-paren 39445 . 39446) (punctuation 39442 . 39443) (number 39441 . 39442) (RETURN 39434 . 39440) (punctuation 39428 . 39429) (number 39427 . 39428) (RETURN 39420 . 39426) (ELSE 39412 . 39416) (semantic-list 39076 . 39409) (semantic-list 39049 . 39076) (IF 39046 . 39048) (open-paren 38985 . 38986) (close-paren 38982 . 38983) (symbol 38979 . 38982) (punctuation 38978 . 38979) (VOID 38973 . 38977) (punctuation 38971 . 38972) (symbol 38967 . 38971) (symbol 38948 . 38966) (punctuation 38946 . 38947) (symbol 38943 . 38946) (punctuation 38941 . 38942) (CHAR 38937 . 38941) (CONST 38931 . 38936) (open-paren 38930 . 38931) (symbol 38919 . 38930) (INT 38915 . 38918) (close-paren 38841 . 38842) (punctuation 38838 . 38839) (number 38837 . 38838) (RETURN 38830 . 38836) (punctuation 38824 . 38825) (number 38823 . 38824) (RETURN 38816 . 38822) (ELSE 38808 . 38812) (semantic-list 38237 . 38805) (semantic-list 38210 . 38237) (IF 38207 . 38209) (open-paren 38146 . 38147) (close-paren 38143 . 38144) (symbol 38140 . 38143) (punctuation 38139 . 38140) (VOID 38134 . 38138) (punctuation 38132 . 38133) (symbol 38120 . 38132) (INT 38116 . 38119) (punctuation 38114 . 38115) (symbol 38103 . 38114) (INT 38099 . 38102) (punctuation 38097 . 38098) (symbol 38093 . 38097) (symbol 38073 . 38092) (punctuation 38071 . 38072) (symbol 38068 . 38071) (punctuation 38066 . 38067) (CHAR 38062 . 38066) (CONST 38056 . 38061) (open-paren 38055 . 38056) (symbol 38043 . 38055) (INT 38039 . 38042) (close-paren 37912 . 37913) (punctuation 37909 . 37910) (number 37908 . 37909) (punctuation 37906 . 37907) (semantic-list 37863 . 37905) (symbol 37855 . 37863) (punctuation 37886 . 37887) (punctuation 37885 . 37886) (string 37874 . 37880) (RETURN 37848 . 37854) (punctuation 37841 . 37842) (number 37840 . 37841) (RETURN 37833 . 37839) (semantic-list 37813 . 37829) (IF 37810 . 37812) (punctuation 37754 . 37755) (number 37753 . 37754) (RETURN 37746 . 37752) (semantic-list 37731 . 37742) (IF 37728 . 37730) (open-paren 37647 . 37648) (close-paren 37644 . 37645) (symbol 37641 . 37644) (symbol 37634 . 37640) (punctuation 37632 . 37633) (symbol 37629 . 37632) (punctuation 37628 . 37629) (CHAR 37623 . 37627) (punctuation 37621 . 37622) (symbol 37618 . 37621) (punctuation 37617 . 37618) (symbol 37600 . 37616) (STRUCT 37593 . 37599) (open-paren 37592 . 37593) (symbol 37577 . 37592) (INT 37573 . 37576) (close-paren 37553 . 37554) (punctuation 37535 . 37536) (punctuation 37534 . 37535) (symbol 37528 . 37534) (punctuation 37527 . 37528) (punctuation 37526 . 37527) (symbol 37523 . 37526) (RETURN 37516 . 37522) (open-paren 37321 . 37322) (close-paren 37318 . 37319) (symbol 37315 . 37318) (punctuation 37314 . 37315) (symbol 37297 . 37313) (STRUCT 37290 . 37296) (open-paren 37289 . 37290) (symbol 37274 . 37289) (punctuation 37272 . 37273) (CHAR 37268 . 37272) (CONST 37262 . 37267) (close-paren 37242 . 37243) (punctuation 37239 . 37240) (number 37238 . 37239) (RETURN 37231 . 37237) (punctuation 37214 . 37215) (punctuation 37213 . 37214) (open-paren 37150 . 37151) (close-paren 37147 . 37148) (symbol 37144 . 37147) (punctuation 37143 . 37144) (symbol 37126 . 37142) (STRUCT 37119 . 37125) (open-paren 37118 . 37119) (symbol 37106 . 37118) (INT 37102 . 37105) (close-paren 37085 . 37086) (punctuation 37066 . 37067) (punctuation 37065 . 37066) (symbol 37058 . 37064) (punctuation 37057 . 37058) (punctuation 37056 . 37057) (symbol 37050 . 37056) (punctuation 37049 . 37050) (punctuation 37048 . 37049) (symbol 37045 . 37048) (RETURN 37038 . 37044) (open-paren 36876 . 36877) (close-paren 36873 . 36874) (symbol 36870 . 36873) (punctuation 36869 . 36870) (symbol 36852 . 36868) (STRUCT 36845 . 36851) (open-paren 36844 . 36845) (symbol 36823 . 36844) (INT 36819 . 36822) (close-paren 36743 . 36744) (punctuation 36717 . 36718) (RETURN 36710 . 36716) (open-paren 36703 . 36704) (close-paren 36700 . 36701) (symbol 36697 . 36700) (punctuation 36696 . 36697) (symbol 36679 . 36695) (STRUCT 36672 . 36678) (open-paren 36671 . 36672) (symbol 36653 . 36671) (INT 36649 . 36652) (close-paren 36629 . 36630) (punctuation 36610 . 36611) (punctuation 36609 . 36610) (symbol 36602 . 36608) (punctuation 36601 . 36602) (punctuation 36600 . 36601) (symbol 36594 . 36600) (punctuation 36593 . 36594) (punctuation 36592 . 36593) (symbol 36589 . 36592) (RETURN 36582 . 36588) (open-paren 36493 . 36494) (close-paren 36490 . 36491) (symbol 36487 . 36490) (punctuation 36486 . 36487) (symbol 36469 . 36485) (STRUCT 36462 . 36468) (open-paren 36461 . 36462) (symbol 36444 . 36461) (INT 36440 . 36443) (close-paren 36420 . 36421) (string 36404 . 36408) (punctuation 36395 . 36396) (punctuation 36394 . 36395) (punctuation 36387 . 36388) (punctuation 36386 . 36387) (punctuation 36375 . 36376) (RETURN 36368 . 36374) (open-paren 36217 . 36218) (close-paren 36214 . 36215) (symbol 36211 . 36214) (punctuation 36210 . 36211) (symbol 36193 . 36209) (STRUCT 36186 . 36192) (open-paren 36185 . 36186) (symbol 36165 . 36185) (INT 36161 . 36164) (close-paren 36135 . 36136) (string 36120 . 36123) (punctuation 36111 . 36112) (punctuation 36110 . 36111) (punctuation 36103 . 36104) (punctuation 36102 . 36103) (punctuation 36091 . 36092) (RETURN 36084 . 36090) (open-paren 35935 . 35936) (close-paren 35932 . 35933) (symbol 35929 . 35932) (punctuation 35928 . 35929) (symbol 35911 . 35927) (STRUCT 35904 . 35910) (open-paren 35903 . 35904) (symbol 35886 . 35903) (INT 35882 . 35885) (close-paren 35857 . 35858) (punctuation 35854 . 35855) (number 35853 . 35854) (RETURN 35846 . 35852) (punctuation 35834 . 35835) (number 35833 . 35834) (RETURN 35826 . 35832) (semantic-list 35779 . 35822) (IF 35776 . 35778) (open-paren 35598 . 35599) (close-paren 35595 . 35596) (symbol 35592 . 35595) (punctuation 35591 . 35592) (symbol 35574 . 35590) (STRUCT 35567 . 35573) (open-paren 35566 . 35567) (symbol 35553 . 35566) (INT 35549 . 35552) (close-paren 35527 . 35528) (punctuation 35524 . 35525) (number 35523 . 35524) (RETURN 35516 . 35522) (semantic-list 35464 . 35505) (semantic-list 35440 . 35461) (IF 35437 . 35439) (punctuation 35406 . 35407) (punctuation 35405 . 35406) (symbol 35402 . 35405) (punctuation 35398 . 35399) (number 35397 . 35398) (RETURN 35390 . 35396) (semantic-list 35368 . 35386) (IF 35365 . 35367) (punctuation 35342 . 35343) (punctuation 35341 . 35342) (symbol 35338 . 35341) (punctuation 34952 . 34953) (punctuation 34951 . 34952) (symbol 34948 . 34951) (semantic-list 34923 . 34944) (IF 34920 . 34922) (punctuation 34916 . 34917) (number 34915 . 34916) (punctuation 34913 . 34914) (semantic-list 34907 . 34912) (symbol 34901 . 34907) (punctuation 34899 . 34900) (symbol 34895 . 34898) (punctuation 34893 . 34894) (symbol 34891 . 34892) (punctuation 34871 . 34872) (punctuation 34870 . 34871) (semantic-list 34849 . 34855) (SIZEOF 34843 . 34849) (number 34840 . 34841) (punctuation 34822 . 34823) (number 34821 . 34822) (RETURN 34814 . 34820) (semantic-list 34772 . 34810) (IF 34769 . 34771) (open-paren 34701 . 34702) (close-paren 34698 . 34699) (symbol 34695 . 34698) (punctuation 34694 . 34695) (symbol 34677 . 34693) (STRUCT 34670 . 34676) (punctuation 34668 . 34669) (symbol 34665 . 34668) (punctuation 34664 . 34665) (CHAR 34659 . 34663) (CONST 34653 . 34658) (open-paren 34652 . 34653) (symbol 34638 . 34652) (INT 34634 . 34637) (close-paren 34599 . 34600) (punctuation 34596 . 34597) (number 34595 . 34596) (RETURN 34588 . 34594) (semantic-list 34554 . 34567) (IF 34551 . 34553) (semantic-list 34519 . 34532) (IF 34516 . 34518) (punctuation 34512 . 34513) (symbol 34497 . 34512) (RETURN 34482 . 34488) (semantic-list 34448 . 34461) (IF 34445 . 34447) (semantic-list 34413 . 34426) (IF 34410 . 34412) (semantic-list 34204 . 34228) (IF 34201 . 34203) (semantic-list 34131 . 34137) (punctuation 34124 . 34125) (semantic-list 34099 . 34105) (punctuation 34091 . 34092) (semantic-list 34045 . 34051) (SIZEOF 34039 . 34045) (number 34036 . 34037) (number 34005 . 34008) (punctuation 33970 . 33971) (punctuation 33969 . 33970) (semantic-list 33965 . 33968) (semantic-list 33777 . 33786) (SIZEOF 33771 . 33777) (number 33768 . 33769) (semantic-list 33703 . 33722) (IF 33700 . 33702) (semantic-list 33369 . 33567) (semantic-list 33355 . 33366) (IF 33352 . 33354) (semantic-list 33176 . 33220) (IF 33173 . 33175) (semantic-list 33012 . 33033) (IF 33009 . 33011) (punctuation 32775 . 32776) (number 32774 . 32775) (RETURN 32767 . 32773) (semantic-list 32711 . 32763) (IF 32708 . 32710) (punctuation 32702 . 32703) (number 32701 . 32702) (RETURN 32694 . 32700) (semantic-list 32646 . 32690) (IF 32643 . 32645) (open-paren 32513 . 32514) (close-paren 32510 . 32511) (symbol 32507 . 32510) (punctuation 32506 . 32507) (VOID 32501 . 32505) (punctuation 32499 . 32500) (symbol 32495 . 32499) (symbol 32483 . 32494) (punctuation 32474 . 32475) (symbol 32471 . 32474) (punctuation 32470 . 32471) (CHAR 32465 . 32469) (CONST 32459 . 32464) (punctuation 32457 . 32458) (symbol 32454 . 32457) (punctuation 32453 . 32454) (CHAR 32448 . 32452) (CONST 32442 . 32447) (open-paren 32441 . 32442) (symbol 32425 . 32441) (INT 32421 . 32424) (close-paren 31794 . 31795) (punctuation 31791 . 31792) (number 31790 . 31791) (RETURN 31783 . 31789) (punctuation 31772 . 31773) (punctuation 31753 . 31754) (semantic-list 31732 . 31753) (WHILE 31727 . 31732) (semantic-list 30819 . 31727) (DO 30817 . 30819) (punctuation 30802 . 30803) (number 30801 . 30802) (RETURN 30794 . 30800) (semantic-list 30759 . 30790) (IF 30756 . 30758) (open-paren 30564 . 30565) (close-paren 30561 . 30562) (symbol 30558 . 30561) (punctuation 30557 . 30558) (VOID 30552 . 30556) (punctuation 30550 . 30551) (symbol 30546 . 30550) (symbol 30534 . 30545) (punctuation 30524 . 30525) (symbol 30518 . 30524) (punctuation 30517 . 30518) (CHAR 30512 . 30516) (CONST 30506 . 30511) (punctuation 30504 . 30505) (symbol 30498 . 30504) (punctuation 30497 . 30498) (CHAR 30492 . 30496) (CONST 30486 . 30491) (punctuation 30484 . 30485) (symbol 30478 . 30484) (punctuation 30477 . 30478) (CHAR 30472 . 30476) (open-paren 30471 . 30472) (symbol 30454 . 30471) (INT 30450 . 30453) (STATIC 30443 . 30449) (close-paren 30319 . 30320) (punctuation 30316 . 30317) (number 30315 . 30316) (RETURN 30308 . 30314) (semantic-list 30259 . 30303) (semantic-list 30224 . 30256) (IF 30221 . 30223) (punctuation 30145 . 30146) (number 30144 . 30145) (RETURN 30137 . 30143) (semantic-list 30112 . 30133) (IF 30109 . 30111) (open-paren 30105 . 30106) (close-paren 30102 . 30103) (symbol 30099 . 30102) (punctuation 30097 . 30098) (CHAR 30093 . 30097) (CONST 30087 . 30092) (open-paren 30086 . 30087) (symbol 30062 . 30086) (INT 30058 . 30061) (close-paren 29979 . 29980) (RETURN 29939 . 29945) (punctuation 29933 . 29934) (number 29932 . 29933) (RETURN 29925 . 29931) (ELSE 29917 . 29921) (semantic-list 29512 . 29914) (semantic-list 29482 . 29509) (IF 29479 . 29481) (open-paren 29403 . 29404) (close-paren 29400 . 29401) (symbol 29397 . 29400) (punctuation 29395 . 29396) (CHAR 29391 . 29395) (CONST 29385 . 29390) (open-paren 29384 . 29385) (symbol 29359 . 29384) (INT 29355 . 29358) (STATIC 29348 . 29354) (close-paren 29343 . 29344) (RETURN 29298 . 29304) (punctuation 29292 . 29293) (number 29291 . 29292) (RETURN 29284 . 29290) (semantic-list 29259 . 29280) (IF 29256 . 29258) (open-paren 29252 . 29253) (close-paren 29249 . 29250) (symbol 29246 . 29249) (punctuation 29245 . 29246) (VOID 29240 . 29244) (punctuation 29238 . 29239) (symbol 29234 . 29238) (symbol 29220 . 29233) (punctuation 29218 . 29219) (symbol 29215 . 29218) (punctuation 29214 . 29215) (CHAR 29209 . 29213) (CONST 29203 . 29208) (open-paren 29202 . 29203) (symbol 29184 . 29202) (INT 29180 . 29183) (close-paren 29175 . 29176) (punctuation 29172 . 29173) (number 29171 . 29172) (RETURN 29164 . 29170) (punctuation 29158 . 29159) (number 29157 . 29158) (RETURN 29150 . 29156) (semantic-list 29122 . 29146) (IF 29119 . 29121) (punctuation 29113 . 29114) (number 29112 . 29113) (RETURN 29105 . 29111) (ELSE 29097 . 29101) (semantic-list 28538 . 29094) (semantic-list 28508 . 28535) (IF 28505 . 28507) (open-paren 28434 . 28435) (close-paren 28431 . 28432) (symbol 28428 . 28431) (punctuation 28427 . 28428) (VOID 28422 . 28426) (punctuation 28420 . 28421) (symbol 28416 . 28420) (symbol 28402 . 28415) (punctuation 28400 . 28401) (symbol 28397 . 28400) (punctuation 28396 . 28397) (CHAR 28391 . 28395) (CONST 28385 . 28390) (open-paren 28384 . 28385) (symbol 28365 . 28384) (INT 28361 . 28364) (STATIC 28354 . 28360) (close-paren 28331 . 28332) (number 28330 . 28331) (open-paren 28329 . 28330) (WHILE 28324 . 28329) (close-paren 28323 . 28324) (punctuation 28314 . 28315) (number 28313 . 28314) (RETURN 28306 . 28312) (punctuation 28294 . 28295))
    :lexical-table 
        '(("LOG_DBG" . ((number "0" 98872 . 98873)))
          ("PATH_CHAR_TEST" (spp-arg-list ("c" "mask") 24850 . 24859) . ((semantic-list "(pathchr_table[(unsigned char)(c)] & (mask))" 24860 . 24904)))
          ("STAT_STRUCT" . ((STRUCT "struct" 1423 . 1429) (symbol "stat" 1430 . 1434)))
          ("SIZE_BITS" . ((semantic-list "(sizeof(size_t) * 8)" 8729 . 8749)))
          ("TRAV_RETURN_0" . ((DO "do" 28273 . 28275) (semantic-list "{	\\" 28275 . 28279)))
          ("GB18030_BOM" . ((string "\"\\x84\\x31\\x95\\x33\"" 67095 . 67113)))
          ("ASPRINTF_MAX" . ((number "1048576" 8132 . 8139)))
          ("UTF8_BOM" . ((string "\"\\xEF\\xBB\\xBF\"" 66910 . 66924)))
          ("LOG_VALID" (spp-arg-list ("id") 98944 . 98948) . ((semantic-list "((id) >= LOG_DBG && (id) <= MAX_LOGS)" 98949 . 98986)))
          ("UTF16LE_BOM" . ((string "\"\\xFF\\xFE\"" 66947 . 66957)))
          ("UTF16BE_BOM" . ((string "\"\\xFE\\xFF\"" 66980 . 66990)))
          ("UTF32LE_BOM" . ((string "\"\\xFF\\xFE\\x00\\x00\"" 67013 . 67031)))
          ("UTF32BE_BOM" . ((string "\"\\x00\\x00\\xFE\\xFF\"" 67054 . 67072)))
          ("ERRBUF_LEN" . ((number "128" 90975 . 90978)))
          ("LOG_USER" . ((number "1" 98906 . 98907)))
          )

    )
   )
  :file "!home!revir!workspace!new!safesitetask!utils!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2"
  )

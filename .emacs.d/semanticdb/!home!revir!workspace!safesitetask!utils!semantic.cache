;; Object utils/
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "utils/"
  :tables
  (list
    (semanticdb-table "cutil.c"
      :major-mode 'c-mode
      :tags 
        '( ("cutil.h" include nil nil [1 19])
            ("locale.h" include (:system-flag t) nil [21 40])
            ("wchar.h" include (:system-flag t) nil [42 60])
            ("sys/types.h" include (:system-flag t) nil [1032 1054])
            ("sys/statfs.h" include (:system-flag t) nil [1069 1092])
            ("sys/time.h" include (:system-flag t) nil [1108 1129])
            ("sys/wait.h" include (:system-flag t) nil [1151 1172])
            ("fcntl.h" include (:system-flag t) nil [1189 1207])
            ("utime.h" include (:system-flag t) nil [1227 1245])
            ("signal.h" include (:system-flag t) nil [1261 1280])
            ("stddef.h" include (:system-flag t) nil [1302 1321])
            ("STAT_STRUCT" variable (:constant-flag t) nil [1495 1506])
            ("g_opened_files" variable
               (:typemodifiers ("static")
                :type "int")
                nil [1529 1555])
            ("cutil_init" function (:type "void") nil [1780 2835])
            ("cutil_exit" function (:type "void") nil [2839 3457])
            ("lowercase_str" function
               (:arguments 
                  ( ("str" variable
                       (:pointer 1
                        :type "char")
                        (reparse-symbol arg-sub-list) [7204 7214]))                  
                :type "int")
                nil [7185 7359])
            ("uppercase_str" function
               (:arguments 
                  ( ("str" variable
                       (:pointer 1
                        :type "char")
                        (reparse-symbol arg-sub-list) [7416 7426]))                  
                :type "int")
                nil [7397 7571])
            ("strdup_lower" function
               (:pointer 1
                :arguments 
                  ( ("s" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [7616 7630]))                  
                :type "char")
                nil [7596 7742])
            ("strdup_upper" function
               (:pointer 1
                :arguments 
                  ( ("s" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [7787 7801]))                  
                :type "char")
                nil [7767 7915])
            ("substrdup" function
               (:pointer 1
                :arguments 
                  ( ("beg" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [7955 7971])
                    ("end" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [7972 7988]))                  
                :type "char")
                nil [7937 8191])
            ("ASPRINTF_MAX" variable (:constant-flag t) nil [8203 8215])
            ("aprintf" function
               (:pointer 1
                :arguments 
                  ( ("fmt" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [8271 8287])
                    ("..." variable (:type "vararg") (reparse-symbol arg-sub-list) [8288 8292]))                  
                :type "char")
                nil [8256 8791])
            ("SIZE_BITS" variable (:constant-flag t) nil [8803 8812])
            ("hash_pjw" function
               (:arguments 
                  ( ("x" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [8963 8977])
                    ("tablesize" variable (:type ("size_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [8978 8995]))                  
                :type ("size_t" type (:type "class") nil nil))
                nil [8946 9134])
            ("strndup" function
               (:pointer 1
                :arguments 
                  ( ("s" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [9254 9268])
                    ("n" variable (:type ("size_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [9269 9278]))                  
                :type "char")
                nil [9240 9505])
            ("strsep" function
               (:pointer 1
                :arguments 
                  ( ("stringp" variable
                       (:pointer 2
                        :type "char")
                        (reparse-symbol arg-sub-list) [9589 9604])
                    ("delim" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [9605 9623]))                  
                :type "char")
                nil [9575 10261])
            ("charmap" variable
               (:dereference 1
                :typemodifiers ("static")
                :type "unsigned char")
                nil [10334 12068])
            ("strcasecmp" function
               (:arguments 
                  ( ("s1" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [12108 12123])
                    ("s2" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [12124 12139]))                  
                :type "int")
                nil [12093 12412])
            ("strncasecmp" function
               (:arguments 
                  ( ("s1" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [12432 12447])
                    ("s2" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [12448 12462])
                    ("length" variable (:type ("size_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [12463 12477]))                  
                :type "int")
                nil [12416 12793])
            ("memrchr" function
               (:pointer 1
                :arguments 
                  ( ("s" variable
                       (:pointer 1
                        :constant-flag t
                        :type "void")
                        (reparse-symbol arg-sub-list) [12859 12873])
                    ("c" variable (:type "int") (reparse-symbol arg-sub-list) [12874 12880])
                    ("n" variable (:type ("size_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [12881 12890]))                  
                :type "void")
                nil [12845 13119])
            ("strnstr" function
               (:pointer 1
                :arguments 
                  ( ("s" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [13166 13180])
                    ("find" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [13181 13198])
                    ("slen" variable (:type ("size_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [13199 13211]))                  
                :type "char")
                nil [13152 13521])
            ("strcasestr" function
               (:pointer 1
                :arguments 
                  ( ("s" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [13575 13589])
                    ("find" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [13590 13607]))                  
                :type "char")
                nil [13558 13960])
            ("strncasestr" function
               (:pointer 1
                :arguments 
                  ( ("s" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [14049 14063])
                    ("find" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [14064 14081])
                    ("slen" variable (:type ("size_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [14082 14094]))                  
                :type "char")
                nil [14031 14509])
            ("path_valid" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("path" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [14776 14793])
                    ("absolute" variable (:type "int") (reparse-symbol arg-sub-list) [14794 14807]))                  
                :type "int")
                nil [14754 15102])
            ("is_absolute_path" function
               (:arguments 
                  ( ("path" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [15153 15170]))                  
                :type "int")
                nil [15132 15397])
            ("is_root_path" function
               (:arguments 
                  ( ("path" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [15436 15453]))                  
                :type "int")
                nil [15419 15520])
            ("path_find_file_name" function
               (:pointer 1
                :constant-flag t
                :arguments 
                  ( ("path" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [15818 15835]))                  
                :type "char")
                nil [15786 16320])
            ("path_find_extension" function
               (:pointer 1
                :constant-flag t
                :arguments 
                  ( ("path" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [16534 16551]))                  
                :type "char")
                nil [16502 16969])
            ("path_find_directory" function
               (:arguments 
                  ( ("path" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [17174 17191])
                    ("outbuf" variable
                       (:pointer 1
                        :type "char")
                        (reparse-symbol arg-sub-list) [17192 17205])
                    ("outlen" variable (:type ("size_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [17206 17220]))                  
                :type "int")
                nil [17150 18181])
            ("path_file_exists" function
               (:arguments 
                  ( ("path" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [18227 18244]))                  
                :type "int")
                nil [18206 18605])
            ("path_is_directory" function
               (:arguments 
                  ( ("path" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [18648 18665]))                  
                :type "int")
                nil [18626 19057])
            ("path_is_file" function
               (:arguments 
                  ( ("path" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [19102 19119]))                  
                :type "int")
                nil [19085 19553])
            ("relative_path" function
               (:arguments 
                  ( ("src" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [19794 19810])
                    ("dst" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [19811 19827])
                    ("sep" variable (:type "char") (reparse-symbol arg-sub-list) [19828 19837])
                    ("outbuf" variable
                       (:pointer 1
                        :type "char")
                        (reparse-symbol arg-sub-list) [19838 19851])
                    ("slen" variable (:type ("size_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [19852 19864]))                  
                :type "int")
                nil [19776 20764])
            ("normalize_dir_path" function
               (:pointer 1
                :typemodifiers ("static")
                :arguments 
                  ( ("dir" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [20846 20862]))                  
                :type "char")
                nil [20814 21132])
            ("unique_file" function
               (:arguments 
                  ( ("path" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [21169 21186])
                    ("buf" variable
                       (:pointer 1
                        :type "char")
                        (reparse-symbol arg-sub-list) [21187 21197])
                    ("len" variable (:type ("size_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [21198 21209]))                  
                :type "int")
                nil [21153 22106])
            ("unique_dir" function
               (:arguments 
                  ( ("path" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [22165 22182])
                    ("buf" variable
                       (:pointer 1
                        :type "char")
                        (reparse-symbol arg-sub-list) [22183 22193])
                    ("len" variable (:type ("size_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [22194 22205]))                  
                :type "int")
                nil [22150 22867])
            ("" type
               (:members 
                  ( ("pathchr_not_unix" variable
                       (:constant-flag t
                        :default-value (22915 22916)
                        :type "int")
                        (reparse-symbol enumsubparts) [22893 22916])
                    ("pathchr_not_windows" variable
                       (:constant-flag t
                        :default-value (22966 22967)
                        :type "int")
                        (reparse-symbol enumsubparts) [22944 22967])
                    ("pathchr_control" variable
                       (:constant-flag t
                        :default-value (23021 23022)
                        :type "int")
                        (reparse-symbol enumsubparts) [22999 23022]))                  
                :type "enum")
                nil [22885 23045])
            ("U" variable (:constant-flag t) nil [23057 23058])
            ("W" variable (:constant-flag t) nil [23085 23086])
            ("C" variable (:constant-flag t) nil [23116 23117])
            ("UW" variable (:constant-flag t) nil [23145 23147])
            ("UWC" variable (:constant-flag t) nil [23161 23164])
            ("pathchr_table" variable
               (:dereference 1
                :typemodifiers ("static")
                :constant-flag t
                :type "unsigned char")
                nil [23174 24908])
            ("PATH_CHAR_TEST" variable (:constant-flag t) nil [24920 24934])
            ("path_char_illegal" function
               (:arguments 
                  ( ("ch" variable (:type "char") (reparse-symbol arg-sub-list) [25095 25103]))                  
                :type "int")
                nil [25073 25236])
            ("path_char_blankspace" function
               (:arguments 
                  ( ("path" variable
                       (:pointer 1
                        :type "char")
                        (reparse-symbol arg-sub-list) [25289 25300]))                  
                :type "void")
                nil [25263 25426])
            ("path_char_escape" function
               (:pointer 1
                :arguments 
                  ( ("path" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [25553 25570]))                  
                :type "char")
                nil [25530 26139])
            ("create_directory" function
               (:arguments 
                  ( ("dir" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [26247 26263]))                  
                :type "int")
                nil [26226 26581])
            ("create_directories" function
               (:arguments 
                  ( ("dir" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [26717 26733]))                  
                :type "int")
                nil [26694 27977])
            ("delete_directory" function
               (:arguments 
                  ( ("dir" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [28017 28033]))                  
                :type "int")
                nil [27996 28331])
            ("TRAV_RETURN_0" variable (:constant-flag t) nil [28343 28356])
            ("trav_dir_end" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("ctx" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [28379 28383]))                  
                :type "int")
                nil [28365 28384])
            ("buf" variable
               (:dereference 1
                :type "char")
                nil [28522 28541])
            ("ctx" variable (:type ("trav_dir_context" type
                 (:prototype t
                  :type "struct")
                  nil nil)) nil [28544 28572])
            ("succ" variable (:type "int") nil [28575 28584])
            ("_delete_directories" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("dir" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [29409 29413])
                    ("" variable (:type ("func" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [29414 29419])
                    ("" variable (:type ("arg" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [29420 29424]))                  
                :type "int")
                nil [29389 29425])
            ("buf" variable
               (:dereference 1
                :type "char")
                nil [29491 29510])
            ("ctx" variable (:type ("trav_dir_context" type
                 (:prototype t
                  :type "struct")
                  nil nil)) nil [29513 29541])
            ("empty" variable (:type "int") nil [29544 29558])
            ("delete_directory" variable (:type ("empty" type (:type "class") nil nil)) nil [30030 30061])
            ("ctx" variable (:type ("trav_dir_context" type
                 (:prototype t
                  :type "struct")
                  nil nil)) nil [30652 30680])
            ("spath" variable
               (:dereference 1
                :type "char")
                nil [30683 30706])
            ("dpath" variable
               (:dereference 1
                :type "char")
                nil [30720 30743])
            ("srclen" variable (:type ("size_t" type (:type "class") nil nil)) nil [30758 30789])
            ("dstlen" variable (:type ("size_t" type (:type "class") nil nil)) nil [30792 30823])
            ("succ" variable (:type "int") nil [30826 30835])
            ("trav_dir_end" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("ctx" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [31857 31861]))                  
                :type "int")
                nil [31843 31862])
            ("sdir" variable
               (:pointer 1
                :type "char")
                nil [32601 32623])
            ("ddir" variable
               (:pointer 1
                :type "char")
                nil [32601 32623])
            ("p" variable
               (:pointer 1
                :type "char")
                nil [32601 32623])
            ("dbuf" variable
               (:dereference 1
                :type "char")
                nil [32626 32662])
            ("lastdir" variable
               (:dereference 1
                :type "char")
                nil [32626 32662])
            ("slen" variable (:type ("size_t" type (:type "class") nil nil)) nil [32693 32711])
            ("dlen" variable (:type ("size_t" type (:type "class") nil nil)) nil [32693 32711])
            ("ret" variable (:type "int") nil [32714 32722])
            ("sdir" variable (:type "int") nil [32880 32911])
            ("ddir" variable (:type "int") nil [32914 32945])
            ("slen" variable (:type "int") nil [32948 32968])
            ("dlen" variable (:type "int") nil [32971 32991])
            ("copy_dirs_error" variable (:type ("goto" type (:type "class") nil nil)) nil [33121 33142])
            ("p" variable (:type "int") nil [33221 33244])
            ("copy_dirs_error" variable (:type ("goto" type (:type "class") nil nil)) nil [33308 33329])
            ("p" variable (:type "int") nil [33400 33423])
            ("p" variable (:type "int") nil [33744 33781])
            ("copy_dirs_error" variable (:type ("goto" type (:type "class") nil nil)) nil [33810 33831])
            ("memset" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("lastdir" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [33843 33851]))                  
                :type "int")
                nil [33836 33872])
            ("ASSERT" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("strlen" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [34043 34052])
                    ("" variable (:type ("MIN_PATH" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [34056 34065]))                  
                :type "int")
                nil [34036 34066])
            ("strncpy" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("lastdir" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [34077 34085])
                    ("" variable (:type ("p" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [34086 34088]))                  
                :type "int")
                nil [34069 34094])
            ("memset" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("dbuf" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [34114 34119]))                  
                :type "int")
                nil [34107 34137])
            ("strcpy" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("dbuf" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [34147 34152])
                    ("" variable (:type ("ddir" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [34153 34158]))                  
                :type "int")
                nil [34140 34159])
            ("strncpy" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("dbuf" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [34170 34176])
                    ("" variable (:type ("strlen" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [34177 34189])
                    ("" variable (:type ("lastdir" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [34191 34199])
                    ("" variable (:type ("MAX_PATH" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [34200 34209])
                    ("" variable (:type ("strlen" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [34209 34221]))                  
                :type "int")
                nil [34162 34223])
            ("dbuf" variable
               (:dereference 1
                :type "int")
                nil [34254 34282])
            ("copy_dirs_error" variable (:type ("goto" type (:type "class") nil nil)) nil [34316 34337])
            ("create_directory" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("dbuf" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [34374 34379]))                  
                :type "int")
                nil [34357 34380])
            ("dbuf" variable
               (:dereference 1
                :type "int")
                nil [34398 34433])
            ("ret" variable (:type "int") nil [34436 34489])
            ("xfree" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("sdir" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [34520 34525]))                  
                :type "int")
                nil [34514 34526])
            ("xfree" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("ddir" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [34555 34560]))                  
                :type "int")
                nil [34549 34561])
            ("ret" variable (:type "int") nil [34573 34577])
            ("xfree" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("sdir" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [34626 34631]))                  
                :type "int")
                nil [34620 34632])
            ("xfree" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("ddir" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [34661 34666]))                  
                :type "int")
                nil [34655 34667])
            ("p" variable
               (:pointer 1
                :constant-flag t
                :type "char")
                nil [34789 34803])
            ("memset" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("ctx" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [34919 34923]))                  
                :type "int")
                nil [34912 34941])
            ("strcpy" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("ctx" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [34951 34955])
                    ("" variable (:type ("basedir" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [34956 34964])
                    ("" variable (:type ("dir" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [34965 34969]))                  
                :type "int")
                nil [34944 34970])
            ("basedir" variable
               (:dereference 1
                :type "int")
                nil [35037 35070])
            ("dir" variable (:type "int") nil [35427 35446])
            ("pentry" variable (:type "int") nil [35491 35518])
            ("strcmp" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("ctx" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [36183 36187])
                    ("" variable (:type ("pentry" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [36188 36195])
                    ("" variable (:type ("d_name" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [36196 36203]))                  
                :type "int")
                nil [36176 36209])
            ("strcmp" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("ctx" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [36467 36471])
                    ("" variable (:type ("pentry" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [36472 36479])
                    ("" variable (:type ("d_name" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [36480 36487]))                  
                :type "int")
                nil [36460 36494])
            ("DT_DIR" variable (:type "int") nil [36696 36703])
            ("trav_entry_is_dir" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("ctx" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [36820 36824]))                  
                :type "int")
                nil [36802 36825])
            ("DT_REG" variable (:type "int") nil [37213 37220])
            ("closedir" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("ctx" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [37355 37359])
                    ("" variable (:type ("dir" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [37360 37364]))                  
                :type "int")
                nil [37346 37365])
            ("d_name" variable (:type "int") nil [37681 37688])
            ("filename" variable
               (:pointer 1
                :constant-flag t
                :type "char")
                nil [37796 37817])
            ("tlen" variable (:type ("size_t" type (:type "class") nil nil)) nil [37820 37832])
            ("filename" variable (:type "int") nil [37838 37870])
            ("tlen" variable (:type "int") nil [37905 37952])
            ("buf" variable
               (:dereference 1
                :type "char")
                nil [38295 38316])
            ("ctx" variable (:type ("trav_dir_context" type
                 (:prototype t
                  :type "struct")
                  nil nil)) nil [38319 38347])
            ("buf" variable
               (:dereference 1
                :type "char")
                nil [39134 39155])
            ("ctx" variable (:type ("trav_dir_context" type
                 (:prototype t
                  :type "struct")
                  nil nil)) nil [39158 39186])
            ("ctx" variable (:type ("trav_dir_context" type
                 (:prototype t
                  :type "struct")
                  nil nil)) nil [39652 39680])
            ("unlink" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("path" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [40297 40302]))                  
                :type "int")
                nil [40290 40303])
            ("pbuf" variable
               (:dereference 1
                :type "char")
                nil [40594 40620])
            ("p" variable
               (:pointer 1
                :type "char")
                nil [40594 40620])
            ("top_len" variable (:type ("size_t" type (:type "class") nil nil)) nil [40623 40638])
            ("strncpy" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("pbuf" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [40937 40942])
                    ("" variable (:type ("path" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [40943 40948])
                    ("" variable (:type ("MAX_PATH" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [40949 40958]))                  
                :type "int")
                nil [40929 40961])
            ("top_len" variable (:type "int") nil [40995 41021])
            ("fd1" variable (:type "int") nil [41868 41885])
            ("fd2" variable (:type "int") nil [41868 41885])
            ("size" variable (:type "int") nil [41868 41885])
            ("buf" variable
               (:dereference 1
                :type "char")
                nil [41888 41903])
            ("file" variable (:type ("stat" type
                 (:prototype t
                  :type "struct")
                  nil nil)) nil [41906 41923])
            ("TEMP_FAILURE_RETRY" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("close" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [42513 42523]))                  
                :type "int")
                nil [42494 42525])
            ("TEMP_FAILURE_RETRY" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("close" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [42547 42557]))                  
                :type "int")
                nil [42528 42559])
            ("st" variable (:type ("stat" type
                 (:prototype t
                  :type "struct")
                  nil nil)) nil [44240 44255])
            ("st_size" variable (:type "int") nil [44349 44357])
            ("Byte" variable
               (:typemodifiers ("static")
                :constant-flag t
                :type ("int64_t" type (:type "class") nil nil))
                nil [45434 45464])
            ("reach_size_unit" variable (:constant-flag t) nil [45767 45782])
            ("snprintf" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("outbuf" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [45834 45841])
                    ("" variable (:type ("outlen" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [45842 45849])
                    ("" variable (:type ("fmt" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [45850 45854])
                    ("" variable (:type ("size" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [45868 45874])
                    ("" variable (:type ("unit" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [45888 45893]))                  
                :type "int")
                nil [45825 45894])
            ("snprintf" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("outbuf" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [45925 45932])
                    ("" variable (:type ("outlen" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [45933 45940]))                  
                :type "int")
                nil [45916 45945])
            ("snprintf" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("outbuf" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [45980 45987])
                    ("" variable (:type ("outlen" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [45988 45995]))                  
                :type "int")
                nil [45971 46002])
            ("g_opened_files" variable
               (:typemodifiers ("static")
                :type "int")
                nil [46339 46369])
            ("fp" variable
               (:pointer 1
                :type ("FILE" type (:type "class") nil nil))
                nil [46427 46436])
            ("fp" variable (:type "int") nil [46771 46774])
            ("fclose" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("fp" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [46913 46916]))                  
                :type "int")
                nil [46906 46917])
            ("fm" variable
               (:pointer 1
                :type ("file_mem" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [47090 47110])
            ("fp" variable
               (:pointer 1
                :type ("FILE" type (:type "class") nil nil))
                nil [47113 47122])
            ("length" variable (:type ("int64_t" type (:type "class") nil nil)) nil [47125 47140])
            ("readed" variable (:type ("size_t" type (:type "class") nil nil)) nil [47143 47157])
            ("NULL" variable (:type "int") nil [47198 47203])
            ("length" variable (:type "int") nil [47223 47248])
            ("NULL" variable (:type "int") nil [47297 47302])
            ("fp" variable (:type "int") nil [47322 47346])
            ("NULL" variable (:type "int") nil [47368 47373])
            ("fm" variable (:type "int") nil [47378 47408])
            ("length" variable (:type "int") nil [47415 47439])
            ("content" variable (:type "int") nil [47555 47596])
            ("readed" variable (:type "int") nil [47601 47648])
            ("content" variable
               (:dereference 1
                :type "int")
                nil [47773 47800])
            ("xfclose" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("fp" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [47811 47814]))                  
                :type "int")
                nil [47803 47815])
            ("fm" variable (:type "int") nil [47827 47830])
            ("fp" variable
               (:pointer 1
                :type ("FILE" type (:type "class") nil nil))
                nil [48106 48115])
            ("xfclose" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("fp" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [48283 48286]))                  
                :type "int")
                nil [48275 48287])
            ("tmpdir" variable
               (:dereference 1
                :type "char")
                nil [48538 48579])
            ("tmpfile" variable
               (:dereference 1
                :type "char")
                nil [48538 48579])
            ("origptr" variable
               (:pointer 1
                :type "char")
                nil [49347 49371])
            ("mallptr" variable
               (:pointer 1
                :type "char")
                nil [49347 49371])
            ("count" variable (:type ("size_t" type (:type "class") nil nil)) nil [49374 49398])
            ("nm" variable (:type ("size_t" type (:type "class") nil nil)) nil [49374 49398])
            ("ch" variable (:type "int") nil [49401 49408])
            ("origptr" variable (:type "int") nil [49413 49432])
            ("mallptr" variable (:type "int") nil [49435 49450])
            ("count" variable (:type "int") nil [49453 49463])
            ("lineptr" variable
               (:pointer 1
                :type "int")
                nil [50417 50436])
            ("n" variable
               (:pointer 1
                :type "int")
                nil [50439 50450])
            ("count" variable (:type "int") nil [50462 50468])
            ("get_delim" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("lineptr" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [50648 50656])
                    ("" variable (:type ("n" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [50657 50659])
                    ("" variable (:type ("fp" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [50666 50669]))                  
                :type "int")
                nil [50638 50670])
            ("buf" variable
               (:dereference 1
                :type "char")
                nil [50779 50802])
            ("block" variable
               (:pointer 1
                :type "char")
                nil [50779 50802])
            ("len" variable (:type ("size_t" type (:type "class") nil nil)) nil [50805 50824])
            ("nblock" variable (:type ("size_t" type (:type "class") nil nil)) nil [50805 50824])
            ("ret" variable (:type "int") nil [50827 50835])
            ("block" variable (:type "int") nil [50840 50852])
            ("nblock" variable (:type "int") nil [50876 50887])
            ("foreach_block" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("fp" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [51242 51245])
                    ("" variable (:type ("func" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [51246 51251])
                    ("" variable (:type ("arg" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [51258 51262]))                  
                :type "int")
                nil [51228 51263])
            ("output" variable
               (:dereference 1
                :typemodifiers ("static")
                :type "char")
                nil [51558 51581])
            ("tm" variable
               (:pointer 1
                :type ("tm" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [51585 51615])
            ("NULL" variable (:type "int") nil [51637 51642])
            ("NULL" variable (:type "int") nil [51708 51713])
            ("output" variable (:type "int") nil [51726 51733])
            ("fmttime" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [51828 51830]))                  
                :type "int")
                nil [51820 51843])
            ("fmttime" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [51937 51939]))                  
                :type "int")
                nil [51929 51952])
            ("fmttime" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [52062 52064]))                  
                :type "int")
                nil [52054 52086])
            ("year" variable
               (:dereference 1
                :type "char")
                nil [52114 52139])
            ("month" variable
               (:dereference 1
                :type "char")
                nil [52142 52168])
            ("day" variable
               (:dereference 1
                :type "char")
                nil [52171 52195])
            ("hour" variable
               (:dereference 1
                :type "char")
                nil [52198 52223])
            ("minute" variable
               (:dereference 1
                :type "char")
                nil [52226 52253])
            ("second" variable
               (:dereference 1
                :type "char")
                nil [52256 52283])
            ("millisecond" variable
               (:dereference 1
                :type "char")
                nil [52286 52318])
            ("microsecond" variable
               (:dereference 1
                :type "char")
                nil [52321 52353])
            ("tu_locale_single" variable
               (:typemodifiers ("static")
                :type ("time_units" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [52361 52403])
            ("tu_locale_plural" variable
               (:typemodifiers ("static")
                :type ("time_units" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [52405 52447])
            ("tu_single_init" variable
               (:typemodifiers ("static")
                :type "int")
                nil [52449 52479])
            ("tu_plural_init" variable
               (:typemodifiers ("static")
                :type "int")
                nil [52481 52511])
            ("intl" variable
               (:pointer 1
                :type ("time_units" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [52774 52798])
            ("ASSERT" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable
                       (:reference 1
                        :type ("year" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [52810 52817])
                    ("" variable
                       (:reference 1
                        :type ("month" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [52818 52826])
                    ("" variable
                       (:reference 1
                        :type ("day" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [52827 52833])
                    ("" variable
                       (:reference 1
                        :type ("hour" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [52834 52841])
                    ("" variable
                       (:reference 1
                        :type ("minute" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [52842 52851])
                    ("" variable (:type ("second" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [52852 52859]))                  
                :type "int")
                nil [52803 52860])
            ("memset" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("intl" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [53006 53011]))                  
                :type "int")
                nil [52999 53042])
            ("strncpy" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("intl" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [53053 53058])
                    ("" variable (:type ("year" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [53059 53064])
                    ("" variable (:type ("year" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [53065 53070])
                    ("" variable (:type ("TIME_UNIT_MAX" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [53071 53085]))                  
                :type "int")
                nil [53045 53086])
            ("strncpy" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("intl" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [53097 53102])
                    ("" variable (:type ("month" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [53103 53109])
                    ("" variable (:type ("month" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [53110 53116])
                    ("" variable (:type ("TIME_UNIT_MAX" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [53117 53131]))                  
                :type "int")
                nil [53089 53132])
            ("strncpy" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("intl" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [53143 53148])
                    ("" variable (:type ("day" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [53149 53153])
                    ("" variable (:type ("day" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [53154 53158])
                    ("" variable (:type ("TIME_UNIT_MAX" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [53159 53173]))                  
                :type "int")
                nil [53135 53174])
            ("strncpy" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("intl" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [53185 53190])
                    ("" variable (:type ("hour" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [53191 53196])
                    ("" variable (:type ("hour" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [53197 53202])
                    ("" variable (:type ("TIME_UNIT_MAX" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [53203 53217]))                  
                :type "int")
                nil [53177 53218])
            ("strncpy" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("intl" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [53229 53234])
                    ("" variable (:type ("minute" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [53235 53242])
                    ("" variable (:type ("minute" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [53243 53250])
                    ("" variable (:type ("TIME_UNIT_MAX" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [53251 53265]))                  
                :type "int")
                nil [53221 53266])
            ("strncpy" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("intl" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [53277 53282])
                    ("" variable (:type ("second" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [53283 53290])
                    ("" variable (:type ("second" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [53291 53298])
                    ("" variable (:type ("TIME_UNIT_MAX" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [53299 53313]))                  
                :type "int")
                nil [53269 53314])
            ("tu_en_single" variable
               (:typemodifiers ("static")
                :type ("time_units" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [53446 53540])
            ("tu_en_plural" variable
               (:typemodifiers ("static")
                :type ("time_units" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [53543 53643])
            ("secs_per_second" variable
               (:typemodifiers ("static")
                :constant-flag t
                :type ("int64_t" type (:type "class") nil nil))
                nil [53648 53689])
            ("secs_per_minute" variable
               (:typemodifiers ("static")
                :constant-flag t
                :type ("int64_t" type (:type "class") nil nil))
                nil [53692 53734])
            ("secs_per_hour" variable
               (:typemodifiers ("static")
                :constant-flag t
                :type ("int64_t" type (:type "class") nil nil))
                nil [53737 53782])
            ("pos" variable (:type "int") nil [53961 53974])
            ("cut" variable (:type "int") nil [53961 53974])
            ("nyear" variable (:type ("int64_t" type (:type "class") nil nil)) nil [53977 54025])
            ("nmonth" variable (:type ("int64_t" type (:type "class") nil nil)) nil [53977 54025])
            ("nday" variable (:type ("int64_t" type (:type "class") nil nil)) nil [53977 54025])
            ("nhour" variable (:type ("int64_t" type (:type "class") nil nil)) nil [53977 54025])
            ("nminute" variable (:type ("int64_t" type (:type "class") nil nil)) nil [53977 54025])
            ("nsecond" variable (:type ("int64_t" type (:type "class") nil nil)) nil [53977 54025])
            ("year_s" variable
               (:pointer 1
                :constant-flag t
                :type "char")
                nil [54028 54096])
            ("month_s" variable
               (:pointer 1
                :constant-flag t
                :type "char")
                nil [54028 54096])
            ("day_s" variable
               (:pointer 1
                :constant-flag t
                :type "char")
                nil [54028 54096])
            ("hour_s" variable
               (:pointer 1
                :constant-flag t
                :type "char")
                nil [54028 54096])
            ("minute_s" variable
               (:pointer 1
                :constant-flag t
                :type "char")
                nil [54028 54096])
            ("second_s" variable
               (:pointer 1
                :constant-flag t
                :type "char")
                nil [54028 54096])
            ("units_single" variable
               (:pointer 1
                :type ("time_units" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [54099 54146])
            ("units_plural" variable
               (:pointer 1
                :type ("time_units" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [54099 54146])
            ("units_single" variable (:type "int") nil [54193 54226])
            ("units_single" variable (:type "int") nil [54237 54266])
            ("units_plural" variable (:type "int") nil [54313 54346])
            ("units_plural" variable (:type "int") nil [54377 54410])
            ("units_plural" variable (:type "int") nil [54421 54450])
            ("memset" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("outbuf" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [54462 54469])
                    ("" variable (:type ("outlen" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [54473 54480]))                  
                :type "int")
                nil [54455 54481])
            ("pos" variable (:type "int") nil [54538 54546])
            ("cutoff" variable
               (:suffix ":10"
                :type "int")
                nil [54568 54580])
            ("reach_time_unit" variable (:constant-flag t) nil [54592 54607])
            ("Sleep" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type ("seconds" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [55278 55290]))                  
                :type "int")
                nil [55272 55292])
            ("Sleep" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("milliseconds" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [55578 55591]))                  
                :type "int")
                nil [55572 55592])
            ("QueryPerformanceCounter" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("meter" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [55747 55753])
                    ("" variable (:type ("start" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [55754 55760]))                  
                :type "int")
                nil [55722 55761])
            ("QueryPerformanceCounter" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("meter" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [55900 55906])
                    ("" variable (:type ("stop" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [55907 55912]))                  
                :type "int")
                nil [55875 55913])
            ("freq" variable (:type ("LARGE_INTEGER" type (:type "class") nil nil)) nil [56137 56156])
            ("QueryPerformanceFrequency" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("freq" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [56186 56191]))                  
                :type "int")
                nil [56159 56192])
            ("QuadPart" variable (:type "int") nil [56284 56293])
            ("li" variable (:type ("LARGE_INTEGER" type (:type "class") nil nil)) nil [56693 56710])
            ("QueryPerformanceCounter" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("li" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [56738 56741]))                  
                :type "int")
                nil [56713 56742])
            ("IsASCII" variable (:type "int") nil [57133 57149])
            ("start" variable
               (:pointer 1
                :type "unsigned char")
                nil [57152 57199])
            ("end" variable
               (:pointer 1
                :type "unsigned char")
                nil [57202 57254])
            ("IsASCII" variable (:type "int") nil [57379 57387])
            ("IsUTF8" variable (:type "int") nil [58063 58078])
            ("start" variable
               (:pointer 1
                :type "unsigned char")
                nil [58081 58128])
            ("end" variable
               (:pointer 1
                :type "unsigned char")
                nil [58131 58183])
            ("IsUTF8" variable (:type "int") nil [59034 59041])
            ("IsGB2312" variable (:type "int") nil [59116 59133])
            ("start" variable
               (:pointer 1
                :type "unsigned char")
                nil [59136 59183])
            ("end" variable
               (:pointer 1
                :type "unsigned char")
                nil [59186 59238])
            ("IsGB2312" variable (:type "int") nil [60024 60033])
            ("IsGBK" variable (:type "int") nil [60102 60116])
            ("start" variable
               (:pointer 1
                :type "unsigned char")
                nil [60119 60166])
            ("end" variable
               (:pointer 1
                :type "unsigned char")
                nil [60169 60221])
            ("IsGBK" variable (:type "int") nil [61962 61968])
            ("MATCH_CHARSET_RETURN" variable (:constant-flag t) nil [61983 62003])
            ("strncpy" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("outbuf" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [62065 62072])
                    ("" variable (:type ("csname" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [62073 62080])
                    ("" variable (:type ("outlen" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [62081 62088]))                  
                :type "int")
                nil [62057 62091])
            ("outbuf" variable
               (:dereference 1
                :type "int")
                nil [62096 62118])
            ("ascii" variable (:type ("uint" type (:type "class") nil nil)) nil [62682 62693])
            ("utf8" variable (:type ("uint" type (:type "class") nil nil)) nil [62696 62706])
            ("gb2312" variable (:type ("uint" type (:type "class") nil nil)) nil [62709 62721])
            ("gbk" variable (:type ("uint" type (:type "class") nil nil)) nil [62724 62733])
            ("gb18030" variable (:type ("uint" type (:type "class") nil nil)) nil [62736 62749])
            ("unknown" variable (:type ("uint" type (:type "class") nil nil)) nil [62752 62765])
            ("max_line" variable (:type ("uint" type (:type "class") nil nil)) nil [62770 62784])
            ("count" variable (:type ("uint" type (:type "class") nil nil)) nil [62787 62798])
            ("fci" variable
               (:pointer 1
                :type ("file_charset_info" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [62907 62970])
            ("fp" variable
               (:pointer 1
                :type ("FILE" type (:type "class") nil nil))
                nil [63685 63694])
            ("fci" variable
               (:pointer 1
                :type ("file_charset_info" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [63697 63727])
            ("fp" variable (:type "int") nil [63786 63810])
            ("fci" variable (:type "int") nil [63960 64000])
            ("memset" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("fci" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [64010 64014]))                  
                :type "int")
                nil [64003 64052])
            ("max_line" variable
               (:suffix ":0"
                :type "int")
                nil [64103 64116])
            ("foreach_line" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("fp" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [64148 64151])
                    ("" variable (:type ("get_line_charset" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [64152 64169])
                    ("" variable (:type ("fci" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [64170 64174]))                  
                :type "int")
                nil [64135 64175])
            ("xfclose" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("fp" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [64186 64189]))                  
                :type "int")
                nil [64178 64190])
            ("not_reached" function
               (:prototype-flag t
                :type "int")
                nil [65430 65444])
            ("FOUND_FILE_BOM" variable (:constant-flag t) nil [65471 65485])
            ("fseek" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("fp" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [65561 65564])
                    ("" variable (:type ("len" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [65568 65572])
                    ("" variable (:type ("SEEK_CUR" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [65573 65582]))                  
                :type "int")
                nil [65555 65583])
            ("cslen" variable (:type ("size_t" type (:type "class") nil nil)) nil [65927 65949])
            ("len" variable (:type ("size_t" type (:type "class") nil nil)) nil [65927 65949])
            ("utf16le" variable (:type "int") nil [65952 65981])
            ("utf16be" variable (:type "int") nil [65952 65981])
            ("fread" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("buf" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [66057 66062])
                    ("" variable (:type ("len" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [66063 66067])
                    ("" variable (:type ("fp" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [66074 66077]))                  
                :type "int")
                nil [66044 66078])
            ("fseek" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("fp" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [66935 66938])
                    ("" variable (:type ("len" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [66954 66958])
                    ("" variable (:type ("SEEK_CUR" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [66959 66968]))                  
                :type "int")
                nil [66929 66969])
            ("UTF8_BOM" variable (:constant-flag t) nil [67045 67053])
            ("UTF16LE_BOM" variable (:constant-flag t) nil [67079 67090])
            ("UTF16BE_BOM" variable (:constant-flag t) nil [67112 67123])
            ("UTF32LE_BOM" variable (:constant-flag t) nil [67145 67156])
            ("UTF32BE_BOM" variable (:constant-flag t) nil [67186 67197])
            ("GB18030_BOM" variable (:constant-flag t) nil [67227 67238])
            ("ELSEIF_FILE_BOM" variable (:constant-flag t) nil [67270 67285])
            ("len" variable (:type ("size_t" type (:type "class") nil nil)) nil [67588 67603])
            ("len" variable (:type "int") nil [67986 67990])
            ("UTF8_ASCII" variable (:constant-flag t) nil [68109 68119])
            ("UTF8_FIRST" variable (:constant-flag t) nil [68164 68174])
            ("UTF8_OTHER" variable (:constant-flag t) nil [68219 68229])
            ("utf8" variable (:type "int") nil [68321 68326])
            ("count" variable (:type "int") nil [68329 68343])
            ("count" variable (:type "int") nil [68514 68520])
            ("utf8" variable (:type "int") nil [68809 68814])
            ("p" variable
               (:pointer 1
                :constant-flag t
                :type ("byte" type (:type "class") nil nil))
                nil [68817 68850])
            ("strcpy" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("outbuf" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [68936 68943])
                    ("" variable (:type ("utf8" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [68944 68949]))                  
                :type "int")
                nil [68929 68950])
            ("slen" variable (:type "int") nil [68961 68966])
            ("count" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) nil [69149 69177])
            ("count" variable (:type "int") nil [69273 69279])
            ("_Source" variable
               (:pointer 1
                :constant-flag t
                :type "char")
                nil [69854 69880])
            ("_Dest" variable (:type "int") nil [70071 70077])
            ("_Source" variable
               (:pointer 1
                :constant-flag t
                :type "wchar_t")
                nil [70583 70612])
            ("_Dest" variable (:type "int") nil [70783 70789])
            ("lcs" variable (:type "int") nil [75477 75481])
            ("strcpy" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("lang" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [76031 76036]))                  
                :type "int")
                nil [76024 76046])
            ("strcpy" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("lang" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [76111 76116]))                  
                :type "int")
                nil [76104 76126])
            ("strcpy" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("lang" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [76170 76175]))                  
                :type "int")
                nil [76163 76185])
            ("strcpy" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("lang" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [76217 76222]))                  
                :type "int")
                nil [76210 76232])
            ("lang" variable (:type "int") nil [76256 76261])
            ("mem" variable (:type "int") nil [78687 78691])
            ("mem" variable (:type "int") nil [78743 78747])
            ("log_dprintf" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("LOG_ERROR" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [82039 82049]))                  
                :type "int")
                nil [82027 82066])
            ("INVALID_PROCESS" variable (:type "int") nil [82076 82092])
            ("null_fd" variable (:type "int") nil [82133 82153])
            ("new_fd" variable (:type "int") nil [82133 82153])
            ("null_fd" variable (:type "int") nil [82157 82215])
            ("new_fd" variable (:type "int") nil [82317 82374])
            ("TEMP_FAILURE_RETRY" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("close" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [82533 82547]))                  
                :type "int")
                nil [82514 82549])
            ("signal" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("SIGHUP" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [82577 82584])
                    ("" variable (:type ("SIG_DFL" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [82585 82593]))                  
                :type "int")
                nil [82570 82594])
            ("signal" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("SIGINT" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [82604 82611])
                    ("" variable (:type ("SIG_DFL" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [82612 82620]))                  
                :type "int")
                nil [82597 82621])
            ("signal" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("SIGILL" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [82631 82638])
                    ("" variable (:type ("SIG_DFL" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [82639 82647]))                  
                :type "int")
                nil [82624 82648])
            ("signal" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("SIGABRT" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [82658 82666])
                    ("" variable (:type ("SIG_DFL" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [82667 82675]))                  
                :type "int")
                nil [82651 82676])
            ("signal" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("SIGFPE" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [82686 82693])
                    ("" variable (:type ("SIG_DFL" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [82694 82702]))                  
                :type "int")
                nil [82679 82703])
            ("signal" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("SIGBUS" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [82713 82720])
                    ("" variable (:type ("SIG_DFL" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [82721 82729]))                  
                :type "int")
                nil [82706 82730])
            ("signal" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("SIGSEGV" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [82740 82748])
                    ("" variable (:type ("SIG_DFL" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [82749 82757]))                  
                :type "int")
                nil [82733 82758])
            ("signal" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("SIGSYS" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [82768 82775])
                    ("" variable (:type ("SIG_DFL" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [82776 82784]))                  
                :type "int")
                nil [82761 82785])
            ("signal" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("SIGTERM" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [82795 82803])
                    ("" variable (:type ("SIG_DFL" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [82804 82812]))                  
                :type "int")
                nil [82788 82813])
            ("execl" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("executable_and_param" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [82859 82880])
                    ("" variable (:type ("NULL" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [82881 82886]))                  
                :type "int")
                nil [82830 82887])
            ("_exit" function
               (:prototype-flag t
                :type "int")
                nil [82914 82925])
            ("pid" variable (:type "int") nil [82939 82943])
            ("status" variable (:type "int") nil [83312 83328])
            ("wait_per_cycle" variable
               (:constant-flag t
                :type "int")
                nil [83403 83433])
            ("time_waited" variable (:type "int") nil [83450 83470])
            ("msleep" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("wait_per_cycle" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [83505 83520]))                  
                :type "int")
                nil [83498 83521])
            ("ret_pid" variable (:type "int") nil [83525 83590])
            ("wait_per_cycle" variable (:type "int") nil [83609 83624])
            ("exit_code" variable
               (:pointer 1
                :type "int")
                nil [83810 83826])
            ("exit_code" variable
               (:pointer 1
                :type "int")
                nil [83903 83936])
            ("tries" variable (:type "int") nil [84422 84437])
            ("sleep_ms" variable (:type "unsigned int") nil [84440 84462])
            ("kMaxSleepMs" variable
               (:constant-flag t
                :type "unsigned int")
                nil [84465 84499])
            ("exited" variable (:type "int") nil [84502 84517])
            ("CloseHandle" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [86320 86322]))                  
                :type "int")
                nil [86308 86323])
            ("counter" variable (:type "int") nil [86842 86850])
            ("mta" variable (:type ("pthread_mutexattr_t" type (:type "class") nil nil)) nil [88692 88716])
            ("ts" variable (:type ("timespec" type
                 (:prototype t
                  :type "struct")
                  nil nil)) nil [89981 90000])
            ("seconds" variable (:type "int") nil [90003 90019])
            ("ms" variable (:type "int") nil [90003 90019])
            ("seconds" variable (:type "int") nil [90024 90054])
            ("tv_sec" variable (:type "int") nil [90105 90122])
            ("stf" variable (:type ("statfs" type
                 (:prototype t
                  :type "struct")
                  nil nil)) nil [91603 91621])
            ("fsu_total" variable (:type "int") nil [91677 91716])
            ("fsu_free" variable (:type "int") nil [91725 91762])
            ("fsu_avail" variable (:type "int") nil [91771 91810])
            ("fsu_files" variable (:type "int") nil [91819 91843])
            ("fsu_ffree" variable (:type "int") nil [91852 91876])
            ("ERRBUF_LEN" variable (:constant-flag t) nil [92113 92123])
            ("p" variable
               (:pointer 1
                :type "int")
                nil [98972 98986])
            ("p" variable
               (:pointer 1
                :type "int")
                nil [98990 98997])
            ("i" variable (:type ("size_t" type (:type "class") nil nil)) nil [99416 99425])
            ("i" variable (:type "int") nil [99435 99441])
            ("len" variable (:type "int") nil [99446 99450])
            ("buf" variable (:type "int") nil [99565 99569])
            ("ptr" variable
               (:pointer 1
                :type "void")
                nil [99788 99798])
            ("NULL" variable (:type "int") nil [99849 99854])
            ("ptr" variable (:type "int") nil [99895 99899])
            ("LOG_VALID" variable (:constant-flag t) nil [100138 100147])
            ("log_min_severity" variable
               (:typemodifiers ("static")
                :type "int")
                nil [100393 100425])
            ("log_debug_stderr" variable
               (:typemodifiers ("static")
                :type "int")
                nil [100443 100475])
            ("log_min_severity" variable (:type "int") nil [100707 100735])
            ("log_debug_stderr" variable (:type "int") nil [100785 100811])
            ("i" variable (:type "int") nil [100854 100860])
            ("i" variable (:type "int") nil [100868 100874])
            ("log_files" variable
               (:dereference 1
                :type "int")
                nil [100903 100923])
            ("mutex_init" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("log_locks" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [100939 100951]))                  
                :type "int")
                nil [100927 100953])
            ("i" variable (:type "int") nil [101040 101046])
            ("i" variable (:type "int") nil [101133 101139])
            ("log_lock" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("i" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [101177 101179]))                  
                :type "int")
                nil [101168 101180])
            ("log_unlock" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("i" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [101481 101483]))                  
                :type "int")
                nil [101470 101484])
            ("LOG_INVALID" variable (:type "int") nil [101500 101512])
            ("log_unlock" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("LOG_DEBUG" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [101757 101767]))                  
                :type "int")
                nil [101746 101768])
            ("LOG_DEBUG" variable (:type "int") nil [101779 101789])
            ("setvbuf" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("log_files" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [101896 101916])
                    ("" variable (:type ("NULL" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [101918 101923])
                    ("" variable (:type ("_IOLBF" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [101924 101931]))                  
                :type "int")
                nil [101888 101938])
            ("log_unlock" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("LOG_DEBUG" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [102110 102120]))                  
                :type "int")
                nil [102099 102121])
            ("LOG_DEBUG" variable (:type "int") nil [102132 102142])
            ("LOG_INVALID" variable (:type "int") nil [102183 102195])
            ("fp" variable
               (:pointer 1
                :type ("FILE" type (:type "class") nil nil))
                nil [102258 102267])
            ("args" variable (:type ("va_list" type (:type "class") nil nil)) nil [102270 102283])
            ("log_unlock" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("log_id" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [102398 102405]))                  
                :type "int")
                nil [102387 102406])
            ("fp" variable
               (:pointer 1
                :type ("FILE" type (:type "class") nil nil))
                nil [102713 102722])
            ("t" variable (:type ("time_t" type (:type "class") nil nil)) nil [102725 102734])
            ("p" variable
               (:pointer 1
                :constant-flag t
                :type "char")
                nil [102755 102769])
            ("args" variable (:type ("va_list" type (:type "class") nil nil)) nil [102772 102785])
            ("level" variable (:type "int") nil [102788 102798])
            ("log_unlock" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("log_id" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [103075 103082]))                  
                :type "int")
                nil [103064 103083])
            ("argsd" variable (:type ("va_list" type (:type "class") nil nil)) nil [103647 103661])
            ("va_start" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("argsd" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [103680 103686])
                    ("" variable (:type ("fmt" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [103687 103691]))                  
                :type "int")
                nil [103671 103692])
            ("vfprintf" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("stderr" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [103711 103718])
                    ("" variable (:type ("fmt" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [103719 103723])
                    ("" variable (:type ("argsd" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [103724 103730]))                  
                :type "int")
                nil [103702 103731])
            ("va_end" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("argsd" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [103748 103754]))                  
                :type "int")
                nil [103741 103755])
            ("fputc" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("fp" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [103840 103843]))                  
                :type "int")
                nil [103828 103844])
            ("fputc" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("stderr" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [103907 103914]))                  
                :type "int")
                nil [103895 103915])
            ("xfclose" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("log_files" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [104332 104349]))                  
                :type "int")
                nil [104324 104351])
            ("log_files" variable
               (:dereference 1
                :type "int")
                nil [104355 104380])
            ("i" variable (:type "int") nil [104537 104543])
            ("i" variable (:type "int") nil [104551 104557])
            ("ver" variable
               (:pointer 1
                :type "char")
                nil [109887 109905])
            ("p" variable
               (:pointer 1
                :type "char")
                nil [109887 109905])
            ("q" variable
               (:pointer 1
                :type "char")
                nil [109887 109905])
            ("id" variable (:type "int") nil [109908 109919])
            ("major" variable
               (:pointer 1
                :type "int")
                nil [109978 109989])
            ("minor" variable
               (:pointer 1
                :type "int")
                nil [110003 110014])
            ("revision" variable
               (:pointer 1
                :type "int")
                nil [110031 110045])
            ("build" variable
               (:pointer 1
                :type "int")
                nil [110059 110070])
            ("suffix" variable
               (:pointer 1
                :type "int")
                nil [110085 110100])
            ("strncpy" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("suffix" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [110185 110192])
                    ("" variable (:type ("p" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [110193 110195])
                    ("" variable (:type ("slen" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [110198 110203]))                  
                :type "int")
                nil [110177 110204])
            ("suffix" variable
               (:dereference 1
                :type "int")
                nil [110208 110230])
            ("q" variable (:type "int") nil [110314 110322])
            ("major" variable
               (:pointer 1
                :type "int")
                nil [110388 110416])
            ("minor" variable
               (:pointer 1
                :type "int")
                nil [110451 110479])
            ("revision" variable
               (:pointer 1
                :type "int")
                nil [110517 110548])
            ("build" variable
               (:pointer 1
                :type "int")
                nil [110583 110611])
            ("major1" variable (:type "int") nil [110822 110860])
            ("minor1" variable (:type "int") nil [110822 110860])
            ("revision1" variable (:type "int") nil [110822 110860])
            ("build1" variable (:type "int") nil [110822 110860])
            ("major2" variable (:type "int") nil [110863 110901])
            ("minor2" variable (:type "int") nil [110863 110901])
            ("revision2" variable (:type "int") nil [110863 110901])
            ("build2" variable (:type "int") nil [110863 110901])
            ("init" variable
               (:typemodifiers ("static")
                :type "int")
                nil [111814 111834])
            ("proc" variable
               (:dereference 1
                :type "char")
                nil [112141 112155])
            ("n" variable (:type ("ssize_t" type (:type "class") nil nil)) nil [112159 112169])
            ("sprintf" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("proc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [112181 112186])
                    ("" variable (:type ("getpid" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [112203 112211]))                  
                :type "int")
                nil [112173 112213])
            ("n" variable (:type "int") nil [112217 112252])
            ("path" variable
               (:dereference 1
                :type "int")
                nil [112287 112302])
            ("path" variable
               (:dereference 1
                :type "int")
                nil [112315 112330])
            ("init" variable (:type "int") nil [112355 112364])
            ("path" variable (:type "int") nil [112380 112385])
            ("path" variable
               (:pointer 1
                :constant-flag t
                :type "char")
                nil [112467 112496])
            ("slash_end" variable
               (:pointer 1
                :constant-flag t
                :type "char")
                nil [112467 112496])
            ("path" variable (:type "int") nil [112555 112560])
            ("init" variable
               (:typemodifiers ("static")
                :type "int")
                nil [112831 112851])
            ("path" variable
               (:pointer 1
                :constant-flag t
                :type "char")
                nil [112874 112912])
            ("dir" variable
               (:dereference 1
                :type "int")
                nil [113128 113142])
            ("init" variable (:type "int") nil [113148 113157])
            ("dir" variable (:type "int") nil [113173 113177])
            ("len" variable (:type "int") nil [113335 113343])
            ("path" variable
               (:dereference 1
                :type "int")
                nil [113822 113848])
            ("path" variable (:type "int") nil [113890 113895])
            ("len" variable (:type "int") nil [114461 114469])
            ("path" variable
               (:dereference 1
                :type "int")
                nil [115009 115035])
            ("path" variable (:type "int") nil [115077 115082])
            ("init" variable
               (:typemodifiers ("static")
                :type "int")
                nil [115248 115268])
            ("len" variable (:type "int") nil [115291 115299])
            ("strcpy" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("path" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [115673 115678]))                  
                :type "int")
                nil [115666 115688])
            ("len" variable (:type "int") nil [115692 115700])
            ("path" variable
               (:dereference 1
                :type "int")
                nil [115863 115878])
            ("init" variable (:type "int") nil [115884 115893])
            ("path" variable (:type "int") nil [115909 115914])
            ("prefix_use" variable
               (:pointer 1
                :constant-flag t
                :type "char")
                nil [116204 116242])
            ("prefix_use" variable (:type "int") nil [116273 116293])
            ("tempname" variable
               (:pointer 1
                :type "char")
                nil [116891 116936])
            ("strncpy" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("outbuf" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [116980 116987])
                    ("" variable (:type ("tempname" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [116988 116997])
                    ("" variable (:type ("outlen" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [116998 117005]))                  
                :type "int")
                nil [116972 117006])
            ("tempname" variable
               (:dereference 1
                :type "int")
                nil [117010 117036])
            ("free" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("tempname" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [117045 117054]))                  
                :type "int")
                nil [117040 117055])
            ("tmpfile" variable (:type "int") nil [117315 117323])
            ("KEY_MAX" variable (:constant-flag t) nil [117338 117345])
            ("VAL_MAX" variable (:constant-flag t) nil [117360 117367])
            ("i" variable (:type ("int64_t" type (:type "class") nil nil)) nil [118973 118987])
            ("i" variable (:type "int") nil [119031 119033])
            ("cnt" variable (:type "int") nil [119097 119109])
            ("cnt" variable (:type "int") nil [119133 119137])
            ("cnt" variable (:type "int") nil [119175 119179])
            ("cnt" variable (:type "int") nil [119189 119193]))          
      :file "cutil.c"
      :pointmax 119914
      :fsize 132714
      :lastmodtime '(20902 216 157968 278000)
      :unmatched-syntax '((close-paren 119880 . 119881) (punctuation 119869 . 119870) (number 119868 . 119869) (RETURN 119861 . 119867) (open-paren 119236 . 119237) (close-paren 119233 . 119234) (open-paren 119232 . 119233) (symbol 119217 . 119232) (INT 119213 . 119216) (close-paren 119195 . 119196) (RETURN 119182 . 119188) (punctuation 119174 . 119175) (punctuation 119173 . 119174) (close-paren 119168 . 119169) (number 119167 . 119168) (punctuation 119165 . 119166) (punctuation 119164 . 119165) (semantic-list 119149 . 119163) (open-paren 119148 . 119149) (WHILE 119142 . 119147) (punctuation 119132 . 119133) (punctuation 119131 . 119132) (close-paren 119126 . 119127) (number 119125 . 119126) (punctuation 119123 . 119124) (symbol 119116 . 119122) (open-paren 119115 . 119116) (IF 119112 . 119114) (open-paren 119093 . 119094) (close-paren 119090 . 119091) (symbol 119084 . 119090) (symbol 119076 . 119083) (open-paren 119075 . 119076) (symbol 119066 . 119074) (INT 119062 . 119065) (close-paren 119035 . 119036) (RETURN 119024 . 119030) (punctuation 119018 . 119019) (close-paren 119017 . 119018) (symbol 119016 . 119017) (punctuation 119015 . 119016) (punctuation 119013 . 119014) (symbol 119007 . 119013) (string 119004 . 119007) (punctuation 119002 . 119003) (symbol 118999 . 119002) (open-paren 118998 . 118999) (symbol 118992 . 118998) (open-paren 118969 . 118970) (close-paren 118966 . 118967) (symbol 118963 . 118966) (punctuation 118961 . 118962) (CHAR 118957 . 118961) (CONST 118951 . 118956) (open-paren 118950 . 118951) (symbol 118940 . 118950) (symbol 118932 . 118939) (close-paren 118908 . 118909) (punctuation 118905 . 118906) (number 118904 . 118905) (RETURN 118897 . 118903) (punctuation 118891 . 118892) (number 118890 . 118891) (RETURN 118883 . 118889) (close-paren 118878 . 118879) (number 118877 . 118878) (punctuation 118875 . 118876) (semantic-list 118853 . 118874) (symbol 118845 . 118853) (open-paren 118844 . 118845) (IF 118841 . 118843) (open-paren 118837 . 118838) (close-paren 118834 . 118835) (symbol 118831 . 118834) (INT 118827 . 118830) (punctuation 118825 . 118826) (symbol 118822 . 118825) (punctuation 118820 . 118821) (CHAR 118816 . 118820) (punctuation 118814 . 118815) (symbol 118813 . 118814) (symbol 118805 . 118812) (open-paren 118804 . 118805) (symbol 118794 . 118804) (INT 118790 . 118793) (close-paren 118723 . 118724) (punctuation 118714 . 118715) (close-paren 118713 . 118714) (symbol 118710 . 118713) (open-paren 118709 . 118710) (symbol 118701 . 118709) (punctuation 118700 . 118701) (RETURN 118693 . 118699) (open-paren 118444 . 118445) (close-paren 118442 . 118443) (symbol 118439 . 118442) (punctuation 118437 . 118438) (CHAR 118433 . 118437) (CONST 118427 . 118432) (open-paren 118426 . 118427) (symbol 118417 . 118426) (INT 118413 . 118416) (close-paren 118367 . 118368) (punctuation 118357 . 118358) (close-paren 118356 . 118357) (symbol 118353 . 118356) (open-paren 118352 . 118353) (symbol 118346 . 118352) (RETURN 118339 . 118345) (open-paren 117965 . 117966) (close-paren 117962 . 117963) (symbol 117959 . 117962) (punctuation 117957 . 117958) (CHAR 117953 . 117957) (CONST 117947 . 117952) (open-paren 117946 . 117947) (symbol 117939 . 117946) (punctuation 117937 . 117938) (CHAR 117933 . 117937) (CONST 117927 . 117932) (close-paren 117834 . 117835) (punctuation 117825 . 117826) (close-paren 117824 . 117825) (number 117823 . 117824) (punctuation 117821 . 117822) (symbol 117818 . 117821) (punctuation 117816 . 117817) (symbol 117813 . 117816) (open-paren 117812 . 117813) (symbol 117806 . 117812) (punctuation 117805 . 117806) (RETURN 117798 . 117804) (open-paren 117500 . 117501) (close-paren 117498 . 117499) (symbol 117495 . 117498) (punctuation 117493 . 117494) (CHAR 117489 . 117493) (CONST 117483 . 117488) (punctuation 117481 . 117482) (symbol 117478 . 117481) (punctuation 117476 . 117477) (CHAR 117472 . 117476) (CONST 117466 . 117471) (open-paren 117465 . 117466) (symbol 117458 . 117465) (INT 117454 . 117457) (close-paren 117325 . 117326) (RETURN 117308 . 117314) (punctuation 117302 . 117303) (string 117298 . 117302) (punctuation 117296 . 117297) (close-paren 117294 . 117295) (number 117293 . 117294) (open-paren 117292 . 117293) (symbol 117285 . 117292) (close-paren 117280 . 117281) (semantic-list 117237 . 117280) (symbol 117218 . 117237) (semantic-list 117250 . 117252) (punctuation 117217 . 117218) (open-paren 117216 . 117217) (IF 117213 . 117215) (punctuation 117206 . 117207) (close-paren 117205 . 117206) (symbol 117197 . 117205) (open-paren 117196 . 117197) (symbol 117189 . 117196) (CHAR 117184 . 117188) (STATIC 117177 . 117183) (open-paren 117173 . 117174) (close-paren 117170 . 117171) (symbol 117164 . 117170) (punctuation 117162 . 117163) (CHAR 117158 . 117162) (CONST 117152 . 117157) (open-paren 117151 . 117152) (symbol 117138 . 117151) (punctuation 117136 . 117137) (CHAR 117132 . 117136) (CONST 117126 . 117131) (close-paren 117081 . 117082) (punctuation 117070 . 117071) (number 117069 . 117070) (RETURN 117062 . 117068) (close-paren 117058 . 117059) (punctuation 116967 . 116968) (number 116966 . 116967) (RETURN 116959 . 116965) (semantic-list 116943 . 116954) (IF 116940 . 116942) (open-paren 116886 . 116887) (punctuation 116431 . 116432) (number 116430 . 116431) (RETURN 116423 . 116429) (close-paren 116418 . 116419) (semantic-list 116410 . 116418) (symbol 116392 . 116410) (punctuation 116391 . 116392) (punctuation 116390 . 116391) (punctuation 116389 . 116390) (semantic-list 116376 . 116384) (symbol 116364 . 116376) (open-paren 116363 . 116364) (IF 116360 . 116362) (punctuation 116354 . 116355) (number 116353 . 116354) (RETURN 116346 . 116352) (close-paren 116341 . 116342) (symbol 116333 . 116341) (punctuation 116331 . 116332) (symbol 116324 . 116330) (punctuation 116322 . 116323) (punctuation 116321 . 116322) (symbol 116314 . 116320) (punctuation 116313 . 116314) (punctuation 116311 . 116312) (punctuation 116310 . 116311) (symbol 116303 . 116309) (punctuation 116302 . 116303) (open-paren 116301 . 116302) (IF 116298 . 116300) (close-paren 116268 . 116269) (semantic-list 116265 . 116268) (symbol 116259 . 116265) (punctuation 116257 . 116258) (punctuation 116256 . 116257) (symbol 116249 . 116255) (open-paren 116248 . 116249) (IF 116245 . 116247) (open-paren 116200 . 116201) (close-paren 116197 . 116198) (symbol 116191 . 116197) (symbol 116184 . 116190) (punctuation 116182 . 116183) (symbol 116176 . 116182) (punctuation 116175 . 116176) (CHAR 116170 . 116174) (punctuation 116160 . 116161) (symbol 116154 . 116160) (punctuation 116153 . 116154) (CHAR 116148 . 116152) (CONST 116142 . 116147) (punctuation 116140 . 116141) (symbol 116134 . 116140) (punctuation 116132 . 116133) (CHAR 116128 . 116132) (CONST 116122 . 116127) (open-paren 116121 . 116122) (symbol 116102 . 116121) (INT 116098 . 116101) (close-paren 115916 . 115917) (RETURN 115902 . 115908) (close-paren 115896 . 115897) (ELSE 115854 . 115858) (semantic-list 115780 . 115850) (semantic-list 115730 . 115776) (IF 115727 . 115729) (string 115679 . 115686) (open-paren 115286 . 115287) (close-paren 115282 . 115283) (symbol 115278 . 115282) (punctuation 115277 . 115278) (open-paren 115276 . 115277) (IF 115273 . 115275) (punctuation 115244 . 115245) (close-paren 115243 . 115244) (symbol 115235 . 115243) (open-paren 115234 . 115235) (symbol 115230 . 115234) (CHAR 115225 . 115229) (STATIC 115218 . 115224) (open-paren 115214 . 115215) (close-paren 115211 . 115212) (open-paren 115210 . 115211) (symbol 115198 . 115210) (punctuation 115197 . 115198) (CHAR 115192 . 115196) (CONST 115186 . 115191) (close-paren 115084 . 115085) (RETURN 115070 . 115076) (punctuation 115064 . 115065) (string 115060 . 115064) (punctuation 115058 . 115059) (close-paren 115056 . 115057) (number 115055 . 115056) (open-paren 115054 . 115055) (symbol 115050 . 115054) (ELSE 115042 . 115046) (close-paren 115038 . 115039) (semantic-list 114974 . 115004) (IF 114971 . 114973) (open-paren 114966 . 114967) (close-paren 114962 . 114963) (number 114961 . 114962) (punctuation 114959 . 114960) (symbol 114950 . 114958) (punctuation 114948 . 114949) (symbol 114944 . 114947) (punctuation 114942 . 114943) (punctuation 114941 . 114942) (number 114939 . 114940) (punctuation 114937 . 114938) (symbol 114933 . 114936) (open-paren 114932 . 114933) (IF 114929 . 114931) (punctuation 114925 . 114926) (close-paren 114924 . 114925) (symbol 114920 . 114924) (open-paren 114919 . 114920) (symbol 114913 . 114919) (punctuation 114911 . 114912) (symbol 114907 . 114910) (punctuation 114880 . 114881) (string 114876 . 114880) (punctuation 114874 . 114875) (close-paren 114872 . 114873) (number 114871 . 114872) (punctuation 114870 . 114871) (symbol 114862 . 114870) (open-paren 114861 . 114862) (symbol 114857 . 114861) (punctuation 114853 . 114854) (close-paren 114852 . 114853) (symbol 114844 . 114852) (punctuation 114842 . 114843) (semantic-list 114834 . 114842) (symbol 114828 . 114834) (string 114835 . 114841) (punctuation 114826 . 114827) (symbol 114822 . 114826) (open-paren 114821 . 114822) (symbol 114814 . 114821) (punctuation 114457 . 114458) (close-paren 114456 . 114457) (symbol 114448 . 114456) (open-paren 114447 . 114448) (symbol 114443 . 114447) (CHAR 114438 . 114442) (STATIC 114431 . 114437) (open-paren 114427 . 114428) (close-paren 114424 . 114425) (open-paren 114423 . 114424) (symbol 114411 . 114423) (punctuation 114410 . 114411) (CHAR 114406 . 114410) (CONST 114400 . 114405) (close-paren 114292 . 114293) (punctuation 114289 . 114290) (number 114288 . 114289) (RETURN 114281 . 114287) (punctuation 114254 . 114255) (number 114253 . 114254) (RETURN 114246 . 114252) (close-paren 114241 . 114242) (semantic-list 114236 . 114241) (symbol 114231 . 114236) (open-paren 114230 . 114231) (IF 114227 . 114229) (open-paren 113959 . 113960) (close-paren 113956 . 113957) (symbol 113953 . 113956) (punctuation 113952 . 113953) (CHAR 113947 . 113951) (CONST 113941 . 113946) (open-paren 113940 . 113941) (symbol 113925 . 113940) (INT 113921 . 113924) (close-paren 113897 . 113898) (RETURN 113883 . 113889) (punctuation 113877 . 113878) (string 113873 . 113877) (punctuation 113871 . 113872) (close-paren 113869 . 113870) (number 113868 . 113869) (open-paren 113867 . 113868) (symbol 113863 . 113867) (ELSE 113855 . 113859) (close-paren 113851 . 113852) (semantic-list 113787 . 113817) (IF 113784 . 113786) (open-paren 113779 . 113780) (close-paren 113775 . 113776) (number 113774 . 113775) (punctuation 113772 . 113773) (symbol 113763 . 113771) (punctuation 113761 . 113762) (symbol 113757 . 113760) (punctuation 113755 . 113756) (punctuation 113754 . 113755) (number 113752 . 113753) (punctuation 113750 . 113751) (symbol 113746 . 113749) (open-paren 113745 . 113746) (IF 113742 . 113744) (punctuation 113738 . 113739) (close-paren 113737 . 113738) (symbol 113733 . 113737) (open-paren 113732 . 113733) (symbol 113726 . 113732) (punctuation 113724 . 113725) (symbol 113720 . 113723) (punctuation 113693 . 113694) (string 113689 . 113693) (punctuation 113687 . 113688) (close-paren 113685 . 113686) (number 113684 . 113685) (open-paren 113683 . 113684) (symbol 113679 . 113683) (close-paren 113674 . 113675) (semantic-list 113658 . 113674) (symbol 113652 . 113658) (punctuation 113651 . 113652) (open-paren 113650 . 113651) (IF 113647 . 113649) (punctuation 113331 . 113332) (close-paren 113330 . 113331) (symbol 113322 . 113330) (open-paren 113321 . 113322) (symbol 113317 . 113321) (CHAR 113312 . 113316) (STATIC 113305 . 113311) (open-paren 113301 . 113302) (close-paren 113298 . 113299) (open-paren 113297 . 113298) (symbol 113282 . 113297) (punctuation 113280 . 113281) (CHAR 113276 . 113280) (CONST 113270 . 113275) (close-paren 113179 . 113180) (RETURN 113166 . 113172) (close-paren 113160 . 113161) (ELSE 113119 . 113123) (semantic-list 112941 . 113115) (semantic-list 112919 . 112937) (IF 112916 . 112918) (open-paren 112869 . 112870) (close-paren 112865 . 112866) (symbol 112861 . 112865) (punctuation 112860 . 112861) (open-paren 112859 . 112860) (IF 112856 . 112858) (punctuation 112827 . 112828) (close-paren 112826 . 112827) (symbol 112818 . 112826) (open-paren 112817 . 112818) (symbol 112814 . 112817) (CHAR 112809 . 112813) (STATIC 112802 . 112808) (open-paren 112798 . 112799) (close-paren 112795 . 112796) (open-paren 112794 . 112795) (symbol 112779 . 112794) (punctuation 112777 . 112778) (CHAR 112773 . 112777) (CONST 112767 . 112772) (close-paren 112680 . 112681) (punctuation 112677 . 112678) (close-paren 112676 . 112677) (symbol 112672 . 112676) (open-paren 112671 . 112672) (symbol 112665 . 112671) (punctuation 112663 . 112664) (symbol 112658 . 112662) (RETURN 112651 . 112657) (punctuation 112645 . 112646) (number 112644 . 112645) (punctuation 112643 . 112644) (symbol 112634 . 112643) (RETURN 112627 . 112633) (close-paren 112622 . 112623) (symbol 112613 . 112622) (open-paren 112612 . 112613) (IF 112609 . 112611) (punctuation 112605 . 112606) (close-paren 112604 . 112605) (symbol 112591 . 112604) (punctuation 112589 . 112590) (symbol 112585 . 112589) (open-paren 112584 . 112585) (symbol 112577 . 112584) (punctuation 112575 . 112576) (symbol 112565 . 112574) (RETURN 112548 . 112554) (close-paren 112543 . 112544) (semantic-list 112540 . 112543) (symbol 112536 . 112540) (punctuation 112535 . 112536) (open-paren 112534 . 112535) (IF 112531 . 112533) (punctuation 112527 . 112528) (close-paren 112526 . 112527) (open-paren 112525 . 112526) (symbol 112509 . 112525) (punctuation 112507 . 112508) (symbol 112502 . 112506) (open-paren 112463 . 112464) (close-paren 112460 . 112461) (open-paren 112459 . 112460) (symbol 112443 . 112459) (punctuation 112441 . 112442) (CHAR 112437 . 112441) (CONST 112431 . 112436) (close-paren 112387 . 112388) (RETURN 112373 . 112379) (close-paren 112367 . 112368) (ELSE 112306 . 112310) (semantic-list 112259 . 112282) (IF 112256 . 112258) (semantic-list 112209 . 112211) (string 112187 . 112201) (open-paren 111852 . 111853) (close-paren 111848 . 111849) (symbol 111844 . 111848) (punctuation 111843 . 111844) (open-paren 111842 . 111843) (IF 111839 . 111841) (punctuation 111810 . 111811) (close-paren 111809 . 111810) (symbol 111801 . 111809) (open-paren 111800 . 111801) (symbol 111796 . 111800) (CHAR 111791 . 111795) (STATIC 111784 . 111790) (open-paren 111780 . 111781) (close-paren 111777 . 111778) (open-paren 111776 . 111777) (symbol 111760 . 111776) (punctuation 111758 . 111759) (CHAR 111754 . 111758) (CONST 111748 . 111753) (close-paren 111492 . 111493) (punctuation 111489 . 111490) (number 111488 . 111489) (RETURN 111481 . 111487) (punctuation 111458 . 111459) (number 111457 . 111458) (punctuation 111456 . 111457) (RETURN 111449 . 111455) (close-paren 111444 . 111445) (symbol 111438 . 111444) (punctuation 111436 . 111437) (symbol 111429 . 111435) (open-paren 111428 . 111429) (IF 111425 . 111427) (ELSE 111420 . 111424) (punctuation 111416 . 111417) (number 111415 . 111416) (RETURN 111408 . 111414) (close-paren 111403 . 111404) (symbol 111397 . 111403) (punctuation 111395 . 111396) (symbol 111388 . 111394) (open-paren 111387 . 111388) (IF 111384 . 111386) (punctuation 111353 . 111354) (number 111352 . 111353) (punctuation 111351 . 111352) (RETURN 111344 . 111350) (close-paren 111339 . 111340) (symbol 111330 . 111339) (punctuation 111328 . 111329) (symbol 111318 . 111327) (open-paren 111317 . 111318) (IF 111314 . 111316) (ELSE 111309 . 111313) (punctuation 111305 . 111306) (number 111304 . 111305) (RETURN 111297 . 111303) (close-paren 111292 . 111293) (symbol 111283 . 111292) (punctuation 111281 . 111282) (symbol 111271 . 111280) (open-paren 111270 . 111271) (IF 111267 . 111269) (punctuation 111237 . 111238) (number 111236 . 111237) (punctuation 111235 . 111236) (RETURN 111228 . 111234) (close-paren 111223 . 111224) (symbol 111217 . 111223) (punctuation 111215 . 111216) (symbol 111208 . 111214) (open-paren 111207 . 111208) (IF 111204 . 111206) (ELSE 111199 . 111203) (punctuation 111195 . 111196) (number 111194 . 111195) (RETURN 111187 . 111193) (close-paren 111182 . 111183) (symbol 111176 . 111182) (punctuation 111174 . 111175) (symbol 111167 . 111173) (open-paren 111166 . 111167) (IF 111163 . 111165) (punctuation 111135 . 111136) (number 111134 . 111135) (punctuation 111133 . 111134) (RETURN 111126 . 111132) (close-paren 111121 . 111122) (symbol 111115 . 111121) (punctuation 111113 . 111114) (symbol 111106 . 111112) (open-paren 111105 . 111106) (IF 111102 . 111104) (ELSE 111097 . 111101) (punctuation 111093 . 111094) (number 111092 . 111093) (RETURN 111085 . 111091) (close-paren 111080 . 111081) (symbol 111074 . 111080) (punctuation 111072 . 111073) (symbol 111065 . 111071) (open-paren 111064 . 111065) (IF 111061 . 111063) (punctuation 111040 . 111041) (close-paren 111039 . 111040) (number 111038 . 111039) (punctuation 111036 . 111037) (symbol 111032 . 111036) (punctuation 111030 . 111031) (symbol 111024 . 111030) (punctuation 111023 . 111024) (punctuation 111021 . 111022) (symbol 111012 . 111021) (punctuation 111011 . 111012) (punctuation 111009 . 111010) (symbol 111003 . 111009) (punctuation 111002 . 111003) (punctuation 111000 . 111001) (symbol 110994 . 111000) (punctuation 110993 . 110994) (punctuation 110991 . 110992) (symbol 110989 . 110991) (open-paren 110988 . 110989) (symbol 110975 . 110988) (punctuation 110971 . 110972) (close-paren 110970 . 110971) (number 110969 . 110970) (punctuation 110967 . 110968) (symbol 110963 . 110967) (punctuation 110961 . 110962) (symbol 110955 . 110961) (punctuation 110954 . 110955) (punctuation 110952 . 110953) (symbol 110943 . 110952) (punctuation 110942 . 110943) (punctuation 110940 . 110941) (symbol 110934 . 110940) (punctuation 110933 . 110934) (punctuation 110931 . 110932) (symbol 110925 . 110931) (punctuation 110924 . 110925) (punctuation 110922 . 110923) (symbol 110920 . 110922) (open-paren 110919 . 110920) (symbol 110906 . 110919) (open-paren 110818 . 110819) (close-paren 110815 . 110816) (symbol 110813 . 110815) (punctuation 110811 . 110812) (CHAR 110807 . 110811) (CONST 110801 . 110806) (punctuation 110799 . 110800) (symbol 110797 . 110799) (punctuation 110795 . 110796) (CHAR 110791 . 110795) (CONST 110785 . 110790) (open-paren 110784 . 110785) (symbol 110769 . 110784) (INT 110765 . 110768) (close-paren 110675 . 110676) (punctuation 110672 . 110673) (number 110671 . 110672) (RETURN 110664 . 110670) (punctuation 110660 . 110661) (close-paren 110659 . 110660) (symbol 110656 . 110659) (open-paren 110655 . 110656) (symbol 110650 . 110655) (close-paren 110644 . 110645) (punctuation 110640 . 110641) (punctuation 110639 . 110640) (punctuation 110638 . 110639) (symbol 110636 . 110638) (punctuation 110629 . 110630) (BREAK 110624 . 110629) (ELSE 110615 . 110619) (semantic-list 110560 . 110578) (IF 110557 . 110559) (ELSE 110552 . 110556) (semantic-list 110491 . 110512) (IF 110488 . 110490) (ELSE 110483 . 110487) (semantic-list 110428 . 110446) (IF 110425 . 110427) (ELSE 110420 . 110424) (semantic-list 110365 . 110383) (IF 110362 . 110364) (open-paren 110357 . 110358) (close-paren 110353 . 110354) (semantic-list 110344 . 110353) (symbol 110338 . 110344) (string 110349 . 110352) (punctuation 110345 . 110346) (punctuation 110336 . 110337) (symbol 110334 . 110335) (open-paren 110333 . 110334) (WHILE 110327 . 110332) (punctuation 110310 . 110311) (close-paren 110309 . 110310) (symbol 110302 . 110309) (open-paren 110301 . 110302) (symbol 110294 . 110301) (punctuation 110292 . 110293) (close-paren 110290 . 110291) (symbol 110283 . 110290) (punctuation 110281 . 110282) (symbol 110279 . 110280) (punctuation 110277 . 110278) (symbol 110270 . 110277) (open-paren 110269 . 110270) (symbol 110261 . 110269) (punctuation 110259 . 110260) (symbol 110257 . 110258) (punctuation 110255 . 110256) (symbol 110251 . 110254) (close-paren 110233 . 110234) (number 110195 . 110196) (punctuation 110194 . 110195) (open-paren 110172 . 110173) (close-paren 110168 . 110169) (symbol 110162 . 110168) (punctuation 110160 . 110161) (punctuation 110159 . 110160) (symbol 110157 . 110158) (open-paren 110156 . 110157) (IF 110153 . 110155) (punctuation 110149 . 110150) (close-paren 110148 . 110149) (string 110145 . 110148) (punctuation 110143 . 110144) (symbol 110136 . 110143) (semantic-list 110129 . 110136) (open-paren 110128 . 110129) (symbol 110122 . 110128) (punctuation 110120 . 110121) (symbol 110118 . 110119) (close-paren 110083 . 110084) (symbol 110077 . 110083) (open-paren 110076 . 110077) (IF 110073 . 110075) (close-paren 110057 . 110058) (symbol 110052 . 110057) (open-paren 110051 . 110052) (IF 110048 . 110050) (close-paren 110029 . 110030) (symbol 110021 . 110029) (open-paren 110020 . 110021) (IF 110017 . 110019) (close-paren 110001 . 110002) (symbol 109996 . 110001) (open-paren 109995 . 109996) (IF 109992 . 109994) (close-paren 109976 . 109977) (symbol 109971 . 109976) (open-paren 109970 . 109971) (IF 109967 . 109969) (punctuation 109949 . 109950) (number 109948 . 109949) (RETURN 109941 . 109947) (close-paren 109936 . 109937) (symbol 109929 . 109936) (punctuation 109928 . 109929) (open-paren 109927 . 109928) (IF 109924 . 109926) (open-paren 109883 . 109884) (close-paren 109880 . 109881) (symbol 109876 . 109880) (symbol 109869 . 109875) (punctuation 109867 . 109868) (symbol 109861 . 109867) (punctuation 109860 . 109861) (CHAR 109855 . 109859) (punctuation 109853 . 109854) (symbol 109848 . 109853) (punctuation 109847 . 109848) (INT 109843 . 109846) (punctuation 109841 . 109842) (symbol 109833 . 109841) (punctuation 109832 . 109833) (INT 109828 . 109831) (punctuation 109819 . 109820) (symbol 109814 . 109819) (punctuation 109813 . 109814) (INT 109809 . 109812) (punctuation 109807 . 109808) (symbol 109802 . 109807) (punctuation 109801 . 109802) (INT 109797 . 109800) (punctuation 109795 . 109796) (symbol 109788 . 109795) (punctuation 109786 . 109787) (CHAR 109782 . 109786) (CONST 109776 . 109781) (open-paren 109775 . 109776) (symbol 109762 . 109775) (INT 109758 . 109761) (close-paren 104672 . 104673) (punctuation 104669 . 104670) (close-paren 104668 . 104669) (symbol 104659 . 104668) (open-paren 104658 . 104659) (symbol 104649 . 104658) (punctuation 104645 . 104646) (close-paren 104644 . 104645) (open-paren 104643 . 104644) (symbol 104628 . 104643) (open-paren 104624 . 104625) (close-paren 104621 . 104622) (open-paren 104620 . 104621) (symbol 104607 . 104620) (VOID 104602 . 104606) (close-paren 104597 . 104598) (punctuation 104594 . 104595) (close-paren 104593 . 104594) (symbol 104592 . 104593) (open-paren 104591 . 104592) (symbol 104582 . 104591) (close-paren 104577 . 104578) (punctuation 104576 . 104577) (punctuation 104575 . 104576) (symbol 104574 . 104575) (punctuation 104572 . 104573) (number 104571 . 104572) (punctuation 104570 . 104571) (symbol 104562 . 104570) (punctuation 104560 . 104561) (symbol 104558 . 104559) (open-paren 104550 . 104551) (FOR 104546 . 104549) (open-paren 104533 . 104534) (close-paren 104530 . 104531) (open-paren 104529 . 104530) (symbol 104514 . 104529) (VOID 104509 . 104513) (close-paren 104504 . 104505) (punctuation 104501 . 104502) (close-paren 104500 . 104501) (symbol 104494 . 104500) (open-paren 104493 . 104494) (symbol 104483 . 104493) (close-paren 104477 . 104478) (punctuation 104473 . 104474) (punctuation 104472 . 104473) (punctuation 104471 . 104472) (symbol 104457 . 104471) (semantic-list 104431 . 104452) (IF 104428 . 104430) (semantic-list 104341 . 104349) (open-paren 104319 . 104320) (close-paren 104315 . 104316) (semantic-list 104307 . 104315) (symbol 104298 . 104307) (open-paren 104297 . 104298) (IF 104294 . 104296) (punctuation 104288 . 104289) (close-paren 104287 . 104288) (symbol 104281 . 104287) (open-paren 104280 . 104281) (symbol 104272 . 104280) (punctuation 104266 . 104267) (RETURN 104260 . 104266) (close-paren 104255 . 104256) (semantic-list #("((id) >= LOG_DEBUG && (id) <= MAX_LOGS)" 0 1 (macros (("id" symbol "log_id" 104248 . 104254)))) 104238 . 104255) (punctuation 104237 . 104238) (open-paren 104236 . 104237) (IF 104233 . 104235) (open-paren 104229 . 104230) (close-paren 104226 . 104227) (symbol 104220 . 104226) (INT 104216 . 104219) (open-paren 104215 . 104216) (symbol 104206 . 104215) (VOID 104201 . 104205) (close-paren 104182 . 104183) (punctuation 104179 . 104180) (close-paren 104178 . 104179) (symbol 104172 . 104178) (open-paren 104171 . 104172) (symbol 104161 . 104171) (punctuation 104155 . 104156) (close-paren 104154 . 104155) (semantic-list 104146 . 104154) (symbol 104137 . 104146) (open-paren 104136 . 104137) (symbol 104130 . 104136) (close-paren 104125 . 104126) (semantic-list 104117 . 104125) (symbol 104108 . 104117) (open-paren 104107 . 104108) (IF 104104 . 104106) (punctuation 104098 . 104099) (close-paren 104097 . 104098) (symbol 104091 . 104097) (open-paren 104090 . 104091) (symbol 104082 . 104090) (open-paren 104078 . 104079) (close-paren 104075 . 104076) (symbol 104069 . 104075) (INT 104065 . 104068) (open-paren 104064 . 104065) (symbol 104055 . 104064) (VOID 104050 . 104054) (close-paren 104045 . 104046) (punctuation 104042 . 104043) (close-paren 104041 . 104042) (string 104020 . 104041) (open-paren 104019 . 104020) (symbol 104009 . 104019) (close-paren 104004 . 104005) (symbol 103995 . 104004) (punctuation 103993 . 103994) (punctuation 103992 . 103993) (symbol 103986 . 103991) (open-paren 103985 . 103986) (IF 103982 . 103984) (punctuation 103939 . 103940) (close-paren 103938 . 103939) (symbol 103932 . 103938) (open-paren 103931 . 103932) (symbol 103921 . 103931) (close-paren 103917 . 103918) (string 103901 . 103905) (semantic-list 103850 . 103891) (IF 103847 . 103849) (string 103834 . 103838) (open-paren 103824 . 103825) (close-paren 103817 . 103818) (string 103813 . 103817) (punctuation 103811 . 103812) (punctuation 103810 . 103811) (symbol 103808 . 103809) (punctuation 103807 . 103808) (open-paren 103806 . 103807) (IF 103803 . 103805) (punctuation 103799 . 103800) (number 103798 . 103799) (punctuation 103796 . 103797) (close-paren 103794 . 103795) (symbol 103791 . 103794) (open-paren 103790 . 103791) (symbol 103784 . 103790) (punctuation 103782 . 103783) (symbol 103778 . 103781) (punctuation 103776 . 103777) (symbol 103774 . 103775) (close-paren 103761 . 103762) (open-paren 103638 . 103639) (close-paren 103632 . 103633) (symbol 103616 . 103632) (punctuation 103614 . 103615) (punctuation 103613 . 103614) (symbol 103603 . 103612) (punctuation 103601 . 103602) (punctuation 103600 . 103601) (symbol 103593 . 103599) (open-paren 103592 . 103593) (IF 103589 . 103591) (punctuation 103584 . 103585) (close-paren 103583 . 103584) (symbol 103579 . 103583) (open-paren 103578 . 103579) (symbol 103572 . 103578) (punctuation 103568 . 103569) (close-paren 103567 . 103568) (symbol 103563 . 103567) (punctuation 103561 . 103562) (symbol 103558 . 103561) (punctuation 103556 . 103557) (symbol 103554 . 103556) (open-paren 103553 . 103554) (symbol 103545 . 103553) (punctuation 103541 . 103542) (close-paren 103540 . 103541) (symbol 103537 . 103540) (punctuation 103535 . 103536) (symbol 103531 . 103535) (open-paren 103530 . 103531) (symbol 103522 . 103530) (punctuation 103508 . 103509) (close-paren 103507 . 103508) (semantic-list 103500 . 103507) (symbol 103482 . 103500) (punctuation 103480 . 103481) (string 103473 . 103480) (punctuation 103471 . 103472) (symbol 103465 . 103471) (open-paren 103464 . 103465) (symbol 103457 . 103464) (close-paren 103453 . 103454) (symbol 103437 . 103453) (punctuation 103435 . 103436) (punctuation 103434 . 103435) (symbol 103424 . 103433) (punctuation 103422 . 103423) (punctuation 103421 . 103422) (symbol 103414 . 103420) (open-paren 103413 . 103414) (IF 103410 . 103412) (punctuation 103405 . 103406) (close-paren 103404 . 103405) (semantic-list 103397 . 103404) (symbol 103379 . 103397) (punctuation 103377 . 103378) (string 103370 . 103377) (punctuation 103368 . 103369) (symbol 103366 . 103368) (open-paren 103365 . 103366) (symbol 103358 . 103365) (punctuation 103344 . 103345) (close-paren 103343 . 103344) (symbol 103338 . 103343) (punctuation 103336 . 103337) (string 103331 . 103336) (punctuation 103329 . 103330) (symbol 103323 . 103329) (open-paren 103322 . 103323) (symbol 103315 . 103322) (close-paren 103311 . 103312) (symbol 103295 . 103311) (punctuation 103293 . 103294) (punctuation 103292 . 103293) (symbol 103282 . 103291) (punctuation 103280 . 103281) (punctuation 103279 . 103280) (symbol 103272 . 103278) (open-paren 103271 . 103272) (IF 103268 . 103270) (punctuation 103264 . 103265) (close-paren 103263 . 103264) (symbol 103258 . 103263) (punctuation 103256 . 103257) (string 103251 . 103256) (punctuation 103249 . 103250) (symbol 103247 . 103249) (open-paren 103246 . 103247) (symbol 103238 . 103245) (punctuation 103231 . 103232) (close-paren 103230 . 103231) (semantic-list 103226 . 103230) (symbol 103217 . 103226) (punctuation 103227 . 103228) (punctuation 103215 . 103216) (string 103196 . 103215) (punctuation 103194 . 103195) (semantic-list 103187 . 103194) (SIZEOF 103181 . 103187) (punctuation 103179 . 103180) (symbol 103174 . 103179) (open-paren 103173 . 103174) (symbol 103165 . 103173) (punctuation 103161 . 103162) (close-paren 103160 . 103161) (semantic-list 103153 . 103160) (SIZEOF 103147 . 103153) (punctuation 103145 . 103146) (number 103144 . 103145) (punctuation 103142 . 103143) (symbol 103137 . 103142) (open-paren 103136 . 103137) (symbol 103130 . 103136) (punctuation 103126 . 103127) (close-paren 103125 . 103126) (symbol 103121 . 103125) (open-paren 103120 . 103121) (symbol 103116 . 103120) (punctuation 103114 . 103115) (symbol 103112 . 103113) (close-paren 103097 . 103098) (punctuation 103093 . 103094) (RETURN 103087 . 103093) (open-paren 103059 . 103060) (close-paren 103055 . 103056) (semantic-list 103031 . 103055) (punctuation 103030 . 103031) (open-paren 103029 . 103030) (IF 103026 . 103028) (punctuation 103020 . 103021) (close-paren 103019 . 103020) (symbol 103013 . 103019) (open-paren 103012 . 103013) (symbol 103004 . 103012) (punctuation 102990 . 102991) (RETURN 102984 . 102990) (close-paren 102979 . 102980) (symbol 102970 . 102979) (punctuation 102968 . 102969) (punctuation 102967 . 102968) (symbol 102961 . 102966) (open-paren 102960 . 102961) (IF 102957 . 102959) (punctuation 102935 . 102936) (RETURN 102929 . 102935) (close-paren 102924 . 102925) (symbol 102908 . 102924) (punctuation 102906 . 102907) (symbol 102900 . 102905) (open-paren 102899 . 102900) (IF 102896 . 102898) (punctuation 102892 . 102893) (close-paren 102891 . 102892) (symbol 102882 . 102891) (punctuation 102880 . 102881) (semantic-list 102859 . 102880) (symbol 102855 . 102859) (open-paren 102854 . 102855) (symbol 102850 . 102854) (punctuation 102848 . 102849) (symbol 102842 . 102847) (punctuation 102836 . 102837) (RETURN 102830 . 102836) (close-paren 102825 . 102826) (semantic-list #("((id) >= LOG_DEBUG && (id) <= MAX_LOGS)" 0 1 (macros (("id" symbol "log_id" 102818 . 102824)))) 102808 . 102825) (punctuation 102807 . 102808) (open-paren 102806 . 102807) (IF 102803 . 102805) (punctuation 102751 . 102752) (close-paren 102750 . 102751) (number 102748 . 102750) (open-paren 102747 . 102748) (symbol 102742 . 102747) (CHAR 102737 . 102741) (open-paren 102709 . 102710) (close-paren 102706 . 102707) (punctuation 102705 . 102706) (punctuation 102704 . 102705) (punctuation 102703 . 102704) (punctuation 102701 . 102702) (symbol 102698 . 102701) (punctuation 102697 . 102698) (CHAR 102692 . 102696) (CONST 102686 . 102691) (punctuation 102684 . 102685) (symbol 102676 . 102684) (INT 102672 . 102675) (punctuation 102670 . 102671) (symbol 102664 . 102670) (INT 102660 . 102663) (open-paren 102659 . 102660) (symbol 102649 . 102659) (VOID 102644 . 102648) (close-paren 102563 . 102564) (punctuation 102560 . 102561) (close-paren 102559 . 102560) (symbol 102553 . 102559) (open-paren 102552 . 102553) (symbol 102542 . 102552) (punctuation 102497 . 102498) (close-paren 102496 . 102497) (symbol 102492 . 102496) (open-paren 102491 . 102492) (symbol 102485 . 102491) (punctuation 102481 . 102482) (close-paren 102480 . 102481) (symbol 102476 . 102480) (punctuation 102474 . 102475) (symbol 102471 . 102474) (punctuation 102469 . 102470) (symbol 102467 . 102469) (open-paren 102466 . 102467) (symbol 102458 . 102466) (punctuation 102454 . 102455) (close-paren 102453 . 102454) (symbol 102450 . 102453) (punctuation 102448 . 102449) (symbol 102444 . 102448) (open-paren 102443 . 102444) (symbol 102435 . 102443) (close-paren 102420 . 102421) (punctuation 102416 . 102417) (RETURN 102410 . 102416) (open-paren 102382 . 102383) (close-paren 102378 . 102379) (semantic-list 102354 . 102378) (punctuation 102353 . 102354) (open-paren 102352 . 102353) (IF 102349 . 102351) (punctuation 102343 . 102344) (close-paren 102342 . 102343) (symbol 102336 . 102342) (open-paren 102335 . 102336) (symbol 102327 . 102335) (punctuation 102321 . 102322) (RETURN 102315 . 102321) (close-paren 102310 . 102311) (semantic-list #("((id) >= LOG_DEBUG && (id) <= MAX_LOGS)" 0 1 (macros (("id" symbol "log_id" 102303 . 102309)))) 102293 . 102310) (punctuation 102292 . 102293) (open-paren 102291 . 102292) (IF 102288 . 102290) (open-paren 102254 . 102255) (close-paren 102251 . 102252) (punctuation 102250 . 102251) (punctuation 102249 . 102250) (punctuation 102248 . 102249) (punctuation 102246 . 102247) (symbol 102243 . 102246) (punctuation 102242 . 102243) (CHAR 102237 . 102241) (CONST 102231 . 102236) (punctuation 102229 . 102230) (symbol 102223 . 102229) (INT 102219 . 102222) (open-paren 102218 . 102219) (symbol 102207 . 102218) (VOID 102202 . 102206) (close-paren 102197 . 102198) (RETURN 102176 . 102182) (punctuation 102172 . 102173) (close-paren 102171 . 102172) (symbol 102162 . 102171) (open-paren 102161 . 102162) (symbol 102151 . 102161) (close-paren 102145 . 102146) (RETURN 102125 . 102131) (punctuation 102092 . 102093) (punctuation 102091 . 102092) (punctuation 102090 . 102091) (symbol 102076 . 102090) (number 101932 . 101936) (semantic-list 101905 . 101916) (open-paren 101883 . 101884) (close-paren 101879 . 101880) (semantic-list 101868 . 101879) (symbol 101859 . 101868) (open-paren 101858 . 101859) (IF 101855 . 101857) (punctuation 101851 . 101852) (close-paren 101850 . 101851) (symbol 101846 . 101850) (punctuation 101844 . 101845) (symbol 101840 . 101844) (open-paren 101839 . 101840) (symbol 101833 . 101839) (punctuation 101831 . 101832) (close-paren 101829 . 101830) (symbol 101820 . 101829) (open-paren 101819 . 101820) (symbol 101810 . 101819) (close-paren 101792 . 101793) (RETURN 101772 . 101778) (open-paren 101741 . 101742) (close-paren 101737 . 101738) (semantic-list 101726 . 101737) (symbol 101717 . 101726) (open-paren 101716 . 101717) (IF 101713 . 101715) (punctuation 101694 . 101695) (close-paren 101693 . 101694) (symbol 101684 . 101693) (open-paren 101683 . 101684) (symbol 101675 . 101683) (punctuation 101669 . 101670) (close-paren 101668 . 101669) (string 101665 . 101668) (punctuation 101663 . 101664) (string 101658 . 101662) (punctuation 101656 . 101657) (symbol 101649 . 101655) (open-paren 101648 . 101649) (punctuation 101646 . 101647) (close-paren 101644 . 101645) (string 101641 . 101644) (punctuation 101639 . 101640) (string 101634 . 101638) (punctuation 101632 . 101633) (symbol 101625 . 101631) (open-paren 101624 . 101625) (punctuation 101622 . 101623) (symbol 101615 . 101621) (punctuation 101613 . 101614) (symbol 101608 . 101612) (punctuation 101607 . 101608) (CHAR 101602 . 101606) (CONST 101596 . 101601) (open-paren 101592 . 101593) (close-paren 101589 . 101590) (symbol 101583 . 101589) (INT 101579 . 101582) (punctuation 101577 . 101578) (symbol 101571 . 101577) (INT 101567 . 101570) (punctuation 101565 . 101566) (symbol 101561 . 101565) (punctuation 101560 . 101561) (CHAR 101555 . 101559) (CONST 101549 . 101554) (open-paren 101548 . 101549) (symbol 101539 . 101548) (INT 101535 . 101538) (close-paren 101514 . 101515) (RETURN 101493 . 101499) (close-paren 101487 . 101488) (semantic-list 101215 . 101464) (semantic-list 101189 . 101211) (IF 101186 . 101188) (open-paren 101163 . 101164) (close-paren 101159 . 101160) (punctuation 101158 . 101159) (punctuation 101157 . 101158) (symbol 101156 . 101157) (punctuation 101154 . 101155) (number 101153 . 101154) (punctuation 101152 . 101153) (symbol 101144 . 101152) (punctuation 101142 . 101143) (symbol 101140 . 101141) (open-paren 101132 . 101133) (FOR 101128 . 101131) (punctuation 101122 . 101123) (close-paren 101121 . 101122) (string 101118 . 101121) (punctuation 101116 . 101117) (string 101111 . 101115) (punctuation 101109 . 101110) (symbol 101102 . 101108) (open-paren 101101 . 101102) (punctuation 101099 . 101100) (close-paren 101097 . 101098) (string 101094 . 101097) (punctuation 101092 . 101093) (string 101087 . 101091) (punctuation 101085 . 101086) (symbol 101078 . 101084) (open-paren 101077 . 101078) (punctuation 101075 . 101076) (symbol 101068 . 101074) (punctuation 101066 . 101067) (symbol 101061 . 101065) (punctuation 101060 . 101061) (CHAR 101055 . 101059) (CONST 101049 . 101054) (open-paren 101036 . 101037) (close-paren 101033 . 101034) (symbol 101027 . 101033) (INT 101023 . 101026) (punctuation 101021 . 101022) (symbol 101015 . 101021) (INT 101011 . 101014) (punctuation 101009 . 101010) (symbol 101005 . 101009) (punctuation 101004 . 101005) (CHAR 100999 . 101003) (CONST 100993 . 100998) (open-paren 100992 . 100993) (symbol 100984 . 100992) (INT 100980 . 100983) (close-paren 100959 . 100960) (close-paren 100956 . 100957) (semantic-list 100948 . 100951) (punctuation 100938 . 100939) (open-paren 100898 . 100899) (close-paren 100894 . 100895) (punctuation 100893 . 100894) (punctuation 100892 . 100893) (symbol 100891 . 100892) (punctuation 100889 . 100890) (number 100888 . 100889) (punctuation 100887 . 100888) (symbol 100879 . 100887) (punctuation 100877 . 100878) (symbol 100875 . 100876) (open-paren 100867 . 100868) (FOR 100863 . 100866) (open-paren 100850 . 100851) (close-paren 100847 . 100848) (open-paren 100846 . 100847) (symbol 100838 . 100846) (VOID 100833 . 100837) (close-paren 100813 . 100814) (open-paren 100781 . 100782) (close-paren 100778 . 100779) (symbol 100772 . 100778) (INT 100768 . 100771) (open-paren 100767 . 100768) (symbol 100747 . 100767) (VOID 100742 . 100746) (close-paren 100737 . 100738) (open-paren 100703 . 100704) (close-paren 100700 . 100701) (symbol 100692 . 100700) (INT 100688 . 100691) (open-paren 100687 . 100688) (symbol 100675 . 100687) (VOID 100670 . 100674) (close-paren 100665 . 100666) (punctuation 100662 . 100663) (close-paren 100661 . 100662) (semantic-list 100653 . 100661) (symbol 100644 . 100653) (punctuation 100643 . 100644) (open-paren 100642 . 100643) (symbol 100630 . 100642) (open-paren 100626 . 100627) (close-paren 100623 . 100624) (symbol 100617 . 100623) (INT 100613 . 100616) (open-paren 100612 . 100613) (symbol 100602 . 100612) (VOID 100597 . 100601) (INLINE 100590 . 100596) (STATIC 100583 . 100589) (close-paren 100578 . 100579) (punctuation 100575 . 100576) (close-paren 100574 . 100575) (semantic-list 100566 . 100574) (symbol 100557 . 100566) (punctuation 100556 . 100557) (open-paren 100555 . 100556) (symbol 100545 . 100555) (open-paren 100541 . 100542) (close-paren 100538 . 100539) (symbol 100532 . 100538) (INT 100528 . 100531) (open-paren 100527 . 100528) (symbol 100519 . 100527) (VOID 100514 . 100518) (INLINE 100507 . 100513) (STATIC 100500 . 100506) (punctuation 100388 . 100389) (close-paren 100387 . 100388) (number 100386 . 100387) (punctuation 100385 . 100386) (symbol 100377 . 100385) (open-paren 100376 . 100377) (symbol 100367 . 100376) (symbol 100359 . 100366) (STATIC 100352 . 100358) (punctuation 100349 . 100350) (close-paren 100348 . 100349) (number 100347 . 100348) (punctuation 100346 . 100347) (symbol 100338 . 100346) (open-paren 100337 . 100338) (symbol 100328 . 100337) (punctuation 100326 . 100327) (symbol 100322 . 100326) (STATIC 100315 . 100321) (punctuation 100310 . 100311) (close-paren 100309 . 100310) (string 100302 . 100309) (punctuation 100301 . 100302) (string 100294 . 100301) (punctuation 100293 . 100294) (string 100283 . 100293) (punctuation 100282 . 100283) (string 100275 . 100282) (punctuation 100274 . 100275) (string 100265 . 100274) (punctuation 100264 . 100265) (string 100256 . 100264) (punctuation 100255 . 100256) (string 100249 . 100255) (punctuation 100248 . 100249) (string 100241 . 100248) (open-paren 100237 . 100238) (punctuation 100235 . 100236) (close-paren 100233 . 100234) (open-paren 100232 . 100233) (symbol 100214 . 100232) (punctuation 100212 . 100213) (CHAR 100208 . 100212) (CONST 100202 . 100207) (STATIC 100195 . 100201) (close-paren 99901 . 99902) (RETURN 99888 . 99894) (punctuation 99882 . 99883) (close-paren 99881 . 99882) (symbol 99878 . 99881) (punctuation 99877 . 99878) (punctuation 99875 . 99876) (string 99871 . 99875) (punctuation 99869 . 99870) (symbol 99866 . 99869) (open-paren 99865 . 99866) (symbol 99859 . 99865) (RETURN 99842 . 99848) (close-paren 99837 . 99838) (semantic-list 99832 . 99837) (SIZEOF 99826 . 99832) (punctuation 99824 . 99825) (punctuation 99823 . 99824) (number 99821 . 99822) (punctuation 99819 . 99820) (semantic-list 99813 . 99818) (symbol 99807 . 99813) (open-paren 99806 . 99807) (IF 99803 . 99805) (open-paren 99784 . 99785) (close-paren 99781 . 99782) (symbol 99778 . 99781) (punctuation 99777 . 99778) (CHAR 99772 . 99776) (CONST 99766 . 99771) (open-paren 99765 . 99766) (symbol 99755 . 99765) (punctuation 99753 . 99754) (VOID 99749 . 99753) (close-paren 99716 . 99717) (punctuation 99713 . 99714) (number 99712 . 99713) (RETURN 99705 . 99711) (punctuation 99699 . 99700) (number 99698 . 99699) (RETURN 99691 . 99697) (close-paren 99686 . 99687) (number 99685 . 99686) (punctuation 99683 . 99684) (semantic-list 99661 . 99682) (symbol 99653 . 99661) (string 99672 . 99676) (open-paren 99652 . 99653) (IF 99649 . 99651) (open-paren 99645 . 99646) (close-paren 99642 . 99643) (symbol 99639 . 99642) (INT 99635 . 99638) (punctuation 99633 . 99634) (symbol 99630 . 99633) (punctuation 99628 . 99629) (CHAR 99624 . 99628) (punctuation 99622 . 99623) (symbol 99619 . 99622) (punctuation 99618 . 99619) (VOID 99613 . 99617) (open-paren 99612 . 99613) (symbol 99602 . 99612) (INT 99598 . 99601) (close-paren 99571 . 99572) (RETURN 99558 . 99564) (punctuation 99552 . 99553) (string 99548 . 99552) (punctuation 99546 . 99547) (close-paren 99544 . 99545) (number 99543 . 99544) (punctuation 99542 . 99543) (symbol 99536 . 99542) (open-paren 99535 . 99536) (symbol 99532 . 99535) (punctuation 99528 . 99529) (close-paren 99527 . 99528) (semantic-list 99524 . 99527) (semantic-list 99502 . 99524) (punctuation 99500 . 99501) (string 99493 . 99500) (punctuation 99491 . 99492) (number 99490 . 99491) (punctuation 99489 . 99490) (symbol 99488 . 99489) (punctuation 99486 . 99487) (symbol 99479 . 99485) (punctuation 99477 . 99478) (number 99476 . 99477) (punctuation 99475 . 99476) (symbol 99474 . 99475) (punctuation 99472 . 99473) (symbol 99468 . 99471) (open-paren 99467 . 99468) (symbol 99459 . 99467) (close-paren 99454 . 99455) (punctuation 99453 . 99454) (punctuation 99452 . 99453) (symbol 99451 . 99452) (punctuation 99444 . 99445) (symbol 99442 . 99443) (open-paren 99434 . 99435) (FOR 99430 . 99433) (punctuation 99412 . 99413) (close-paren 99411 . 99412) (symbol 99405 . 99411) (open-paren 99404 . 99405) (symbol 99397 . 99404) (close-paren 99396 . 99397) (punctuation 99395 . 99396) (CHAR 99391 . 99395) (open-paren 99390 . 99391) (punctuation 99388 . 99389) (symbol 99384 . 99387) (punctuation 99383 . 99384) (CHAR 99378 . 99382) (punctuation 99374 . 99375) (number 99373 . 99374) (punctuation 99371 . 99372) (number 99369 . 99370) (punctuation 99367 . 99368) (symbol 99363 . 99366) (punctuation 99361 . 99362) (symbol 99354 . 99360) (INT 99350 . 99353) (open-paren 99310 . 99311) (close-paren 99307 . 99308) (symbol 99304 . 99307) (symbol 99297 . 99303) (punctuation 99295 . 99296) (symbol 99291 . 99295) (punctuation 99290 . 99291) (VOID 99285 . 99289) (CONST 99279 . 99284) (open-paren 99278 . 99279) (symbol 99271 . 99278) (punctuation 99269 . 99270) (CHAR 99265 . 99269) (close-paren 99233 . 99234) (open-paren 99174 . 99175) (close-paren 99171 . 99172) (open-paren 99170 . 99171) (symbol 99155 . 99170) (VOID 99150 . 99154) (close-paren 99126 . 99127) (open-paren 99071 . 99072) (close-paren 99068 . 99069) (open-paren 99067 . 99068) (symbol 99056 . 99067) (VOID 99051 . 99055) (close-paren 99024 . 99025) (close-paren 99000 . 99001) (open-paren 98967 . 98968) (punctuation 98440 . 98441) (close-paren 98439 . 98440) (symbol 98436 . 98439) (punctuation 98434 . 98435) (string 98419 . 98434) (punctuation 98417 . 98418) (symbol 98409 . 98417) (open-paren 98408 . 98409) (symbol 98397 . 98408) (open-paren 98392 . 98393) (close-paren 98389 . 98390) (symbol 98386 . 98389) (punctuation 98384 . 98385) (CHAR 98380 . 98384) (CONST 98374 . 98379) (open-paren 98373 . 98374) (symbol 98363 . 98373) (VOID 98358 . 98362) (close-paren 93011 . 93012) (punctuation 93000 . 93001) (close-paren 92999 . 93000) (open-paren 92998 . 92999) (symbol 92980 . 92998) (RETURN 92973 . 92979) (open-paren 92914 . 92915) (close-paren 92911 . 92912) (open-paren 92910 . 92911) (symbol 92896 . 92910) (punctuation 92894 . 92895) (CHAR 92890 . 92894) (CONST 92884 . 92889) (close-paren 92879 . 92880) (punctuation 92876 . 92877) (close-paren 92875 . 92876) (symbol 92870 . 92875) (open-paren 92869 . 92870) (symbol 92861 . 92869) (RETURN 92854 . 92860) (open-paren 92850 . 92851) (close-paren 92847 . 92848) (open-paren 92846 . 92847) (symbol 92828 . 92846) (punctuation 92826 . 92827) (CHAR 92822 . 92826) (CONST 92816 . 92821) (close-paren 91904 . 91905) (punctuation 91901 . 91902) (number 91900 . 91901) (RETURN 91893 . 91899) (close-paren 91879 . 91880) (punctuation 91851 . 91852) (punctuation 91850 . 91851) (symbol 91847 . 91850) (punctuation 91818 . 91819) (punctuation 91817 . 91818) (symbol 91814 . 91817) (punctuation 91770 . 91771) (punctuation 91769 . 91770) (symbol 91766 . 91769) (punctuation 91724 . 91725) (punctuation 91723 . 91724) (symbol 91720 . 91723) (punctuation 91676 . 91677) (punctuation 91675 . 91676) (symbol 91672 . 91675) (punctuation 91665 . 91666) (number 91664 . 91665) (RETURN 91657 . 91663) (semantic-list 91628 . 91652) (IF 91625 . 91627) (open-paren 91598 . 91599) (punctuation 91173 . 91174) (number 91172 . 91173) (RETURN 91165 . 91171) (close-paren 91160 . 91161) (symbol 91157 . 91160) (punctuation 91156 . 91157) (punctuation 91154 . 91155) (punctuation 91153 . 91154) (semantic-list 91143 . 91152) (symbol 91133 . 91143) (number 91150 . 91151) (punctuation 91132 . 91133) (open-paren 91131 . 91132) (IF 91128 . 91130) (open-paren 91124 . 91125) (close-paren 91121 . 91122) (symbol 91118 . 91121) (punctuation 91117 . 91118) (symbol 91108 . 91116) (STRUCT 91101 . 91107) (punctuation 91099 . 91100) (symbol 91095 . 91099) (punctuation 91093 . 91094) (CHAR 91089 . 91093) (CONST 91083 . 91088) (open-paren 91082 . 91083) (symbol 91070 . 91082) (INT 91066 . 91069) (close-paren 91021 . 91022) (punctuation 91010 . 91011) (close-paren 91009 . 91010) (symbol 90989 . 91009) (open-paren 90988 . 90989) (symbol 90981 . 90988) (RETURN 90974 . 90980) (open-paren 90874 . 90875) (close-paren 90871 . 90872) (open-paren 90870 . 90871) (symbol 90850 . 90870) (INT 90846 . 90849) (close-paren 90606 . 90607) (punctuation 90595 . 90596) (close-paren 90594 . 90595) (symbol 90590 . 90594) (open-paren 90589 . 90590) (symbol 90569 . 90589) (open-paren 90525 . 90526) (close-paren 90522 . 90523) (symbol 90518 . 90522) (punctuation 90517 . 90518) (symbol 90510 . 90516) (open-paren 90509 . 90510) (symbol 90497 . 90509) (VOID 90492 . 90496) (close-paren 90487 . 90488) (punctuation 90476 . 90477) (close-paren 90475 . 90476) (symbol 90471 . 90475) (open-paren 90470 . 90471) (symbol 90448 . 90470) (open-paren 90388 . 90389) (close-paren 90385 . 90386) (symbol 90381 . 90385) (punctuation 90380 . 90381) (symbol 90373 . 90379) (open-paren 90372 . 90373) (symbol 90357 . 90372) (VOID 90352 . 90356) (close-paren 90347 . 90348) (punctuation 90336 . 90337) (close-paren 90335 . 90336) (symbol 90331 . 90335) (open-paren 90330 . 90331) (symbol 90311 . 90330) (open-paren 90254 . 90255) (close-paren 90251 . 90252) (symbol 90247 . 90251) (punctuation 90246 . 90247) (symbol 90239 . 90245) (open-paren 90238 . 90239) (symbol 90227 . 90238) (VOID 90222 . 90226) (close-paren 90217 . 90218) (punctuation 90206 . 90207) (close-paren 90205 . 90206) (symbol 90203 . 90205) (punctuation 90202 . 90203) (punctuation 90200 . 90201) (symbol 90195 . 90200) (punctuation 90193 . 90194) (symbol 90189 . 90193) (open-paren 90188 . 90189) (symbol 90166 . 90188) (punctuation 90165 . 90166) (RETURN 90158 . 90164) (punctuation 90154 . 90155) (number 90150 . 90154) (punctuation 90148 . 90149) (number 90143 . 90147) (punctuation 90141 . 90142) (symbol 90138 . 90140) (punctuation 90136 . 90137) (symbol 90128 . 90135) (punctuation 90127 . 90128) (symbol 90125 . 90127) (punctuation 90104 . 90105) (symbol 90102 . 90104) (punctuation 90086 . 90087) (number 90082 . 90086) (punctuation 90080 . 90081) (symbol 90067 . 90079) (punctuation 90065 . 90066) (symbol 90062 . 90064) (open-paren 89893 . 89894) (close-paren 89890 . 89891) (symbol 89878 . 89890) (INT 89874 . 89877) (punctuation 89872 . 89873) (symbol 89867 . 89872) (punctuation 89866 . 89867) (symbol 89858 . 89865) (punctuation 89856 . 89857) (symbol 89852 . 89856) (punctuation 89851 . 89852) (symbol 89844 . 89850) (open-paren 89843 . 89844) (symbol 89829 . 89843) (INT 89825 . 89828) (close-paren 89820 . 89821) (punctuation 89809 . 89810) (close-paren 89808 . 89809) (symbol 89803 . 89808) (punctuation 89801 . 89802) (symbol 89797 . 89801) (open-paren 89796 . 89797) (symbol 89779 . 89796) (open-paren 89702 . 89703) (close-paren 89699 . 89700) (symbol 89694 . 89699) (punctuation 89693 . 89694) (symbol 89685 . 89692) (punctuation 89683 . 89684) (symbol 89679 . 89683) (punctuation 89678 . 89679) (symbol 89671 . 89677) (open-paren 89670 . 89671) (symbol 89661 . 89670) (VOID 89656 . 89660) (close-paren 89651 . 89652) (punctuation 89640 . 89641) (close-paren 89639 . 89640) (symbol 89635 . 89639) (punctuation 89633 . 89634) (symbol 89629 . 89633) (open-paren 89628 . 89629) (symbol 89611 . 89628) (open-paren 89548 . 89549) (close-paren 89545 . 89546) (symbol 89541 . 89545) (punctuation 89540 . 89541) (symbol 89533 . 89539) (open-paren 89532 . 89533) (symbol 89523 . 89532) (VOID 89518 . 89522) (close-paren 89472 . 89473) (punctuation 89461 . 89462) (close-paren 89460 . 89461) (symbol 89456 . 89460) (open-paren 89455 . 89456) (symbol 89434 . 89455) (open-paren 89377 . 89378) (close-paren 89374 . 89375) (symbol 89370 . 89374) (punctuation 89368 . 89369) (symbol 89361 . 89368) (open-paren 89360 . 89361) (symbol 89347 . 89360) (VOID 89342 . 89346) (close-paren 89337 . 89338) (punctuation 89326 . 89327) (number 89325 . 89326) (RETURN 89318 . 89324) (open-paren 89156 . 89157) (close-paren 89153 . 89154) (symbol 89149 . 89153) (punctuation 89148 . 89149) (symbol 89140 . 89147) (open-paren 89139 . 89140) (symbol 89126 . 89139) (INT 89122 . 89125) (close-paren 89117 . 89118) (punctuation 89106 . 89107) (close-paren 89105 . 89106) (symbol 89101 . 89105) (open-paren 89100 . 89101) (symbol 89080 . 89100) (open-paren 89024 . 89025) (close-paren 89021 . 89022) (symbol 89017 . 89021) (punctuation 89016 . 89017) (symbol 89008 . 89015) (open-paren 89007 . 89008) (symbol 88995 . 89007) (VOID 88990 . 88994) (close-paren 88985 . 88986) (punctuation 88974 . 88975) (close-paren 88973 . 88974) (symbol 88969 . 88973) (open-paren 88968 . 88969) (symbol 88950 . 88968) (open-paren 88894 . 88895) (close-paren 88891 . 88892) (symbol 88887 . 88891) (punctuation 88886 . 88887) (symbol 88878 . 88885) (open-paren 88877 . 88878) (symbol 88867 . 88877) (VOID 88862 . 88866) (close-paren 88857 . 88858) (punctuation 88847 . 88848) (close-paren 88846 . 88847) (symbol 88843 . 88846) (punctuation 88842 . 88843) (punctuation 88840 . 88841) (symbol 88836 . 88840) (open-paren 88835 . 88836) (symbol 88817 . 88835) (punctuation 88811 . 88812) (close-paren 88810 . 88811) (symbol 88787 . 88810) (punctuation 88785 . 88786) (symbol 88782 . 88785) (punctuation 88781 . 88782) (open-paren 88780 . 88781) (symbol 88755 . 88780) (punctuation 88749 . 88750) (close-paren 88748 . 88749) (symbol 88745 . 88748) (punctuation 88744 . 88745) (open-paren 88743 . 88744) (symbol 88721 . 88743) (open-paren 88519 . 88520) (close-paren 88516 . 88517) (symbol 88512 . 88516) (punctuation 88511 . 88512) (symbol 88503 . 88510) (open-paren 88502 . 88503) (symbol 88492 . 88502) (VOID 88487 . 88491) (close-paren 88467 . 88468) (open-paren 88300 . 88301) (close-paren 88297 . 88298) (symbol 88293 . 88297) (punctuation 88291 . 88292) (symbol 88280 . 88291) (open-paren 88279 . 88280) (symbol 88267 . 88279) (INT 88263 . 88266) (close-paren 88258 . 88259) (open-paren 88108 . 88109) (close-paren 88105 . 88106) (symbol 88101 . 88105) (punctuation 88099 . 88100) (symbol 88088 . 88099) (open-paren 88087 . 88088) (symbol 88076 . 88087) (VOID 88071 . 88075) (close-paren 88066 . 88067) (open-paren 87901 . 87902) (close-paren 87898 . 87899) (symbol 87894 . 87898) (punctuation 87892 . 87893) (symbol 87881 . 87892) (open-paren 87880 . 87881) (symbol 87868 . 87880) (INT 87864 . 87867) (close-paren 87859 . 87860) (open-paren 87683 . 87684) (close-paren 87680 . 87681) (symbol 87676 . 87680) (punctuation 87674 . 87675) (symbol 87663 . 87674) (open-paren 87662 . 87663) (symbol 87653 . 87662) (VOID 87648 . 87652) (close-paren 87643 . 87644) (open-paren 87493 . 87494) (close-paren 87490 . 87491) (symbol 87486 . 87490) (punctuation 87484 . 87485) (symbol 87473 . 87484) (open-paren 87472 . 87473) (symbol 87463 . 87472) (VOID 87458 . 87462) (close-paren 87442 . 87443) (open-paren 87372 . 87373) (close-paren 87369 . 87370) (symbol 87368 . 87369) (punctuation 87367 . 87368) (symbol 87358 . 87366) (open-paren 87357 . 87358) (symbol 87347 . 87357) (VOID 87342 . 87346) (close-paren 87337 . 87338) (open-paren 87267 . 87268) (close-paren 87264 . 87265) (symbol 87263 . 87264) (punctuation 87262 . 87263) (symbol 87253 . 87261) (open-paren 87252 . 87253) (symbol 87242 . 87252) (VOID 87237 . 87241) (close-paren 87232 . 87233) (open-paren 87154 . 87155) (close-paren 87151 . 87152) (symbol 87150 . 87151) (punctuation 87149 . 87150) (symbol 87140 . 87148) (punctuation 87138 . 87139) (symbol 87137 . 87138) (LONG 87132 . 87136) (open-paren 87131 . 87132) (symbol 87121 . 87131) (VOID 87116 . 87120) (close-paren 87111 . 87112) (open-paren 87036 . 87037) (close-paren 87033 . 87034) (symbol 87032 . 87033) (punctuation 87031 . 87032) (symbol 87022 . 87030) (punctuation 87020 . 87021) (symbol 87019 . 87020) (LONG 87014 . 87018) (open-paren 87013 . 87014) (symbol 87003 . 87013) (VOID 86998 . 87002) (close-paren 86993 . 86994) (open-paren 86895 . 86896) (close-paren 86892 . 86893) (symbol 86891 . 86892) (LONG 86886 . 86890) (punctuation 86884 . 86885) (symbol 86883 . 86884) (punctuation 86882 . 86883) (symbol 86873 . 86881) (open-paren 86872 . 86873) (symbol 86862 . 86872) (VOID 86857 . 86861) (close-paren 86852 . 86853) (punctuation 86841 . 86842) (punctuation 86840 . 86841) (symbol 86839 . 86840) (RETURN 86832 . 86838) (open-paren 86828 . 86829) (close-paren 86825 . 86826) (symbol 86824 . 86825) (punctuation 86823 . 86824) (symbol 86814 . 86822) (CONST 86808 . 86813) (open-paren 86807 . 86808) (symbol 86796 . 86807) (LONG 86791 . 86795) (close-paren 86382 . 86383) (punctuation 86379 . 86380) (number 86378 . 86379) (RETURN 86371 . 86377) (punctuation 86357 . 86358) (close-paren 86356 . 86357) (symbol 86355 . 86356) (open-paren 86354 . 86355) (symbol 86343 . 86354) (close-paren 86339 . 86340) (punctuation 86335 . 86336) (number 86334 . 86335) (RETURN 86327 . 86333) (open-paren 86303 . 86304) (close-paren 86299 . 86300) (semantic-list 86285 . 86299) (symbol 86268 . 86285) (punctuation 86267 . 86268) (punctuation 86265 . 86266) (punctuation 86264 . 86265) (symbol 86254 . 86263) (open-paren 86253 . 86254) (IF 86250 . 86252) (punctuation 86246 . 86247) (close-paren 86245 . 86246) (symbol 86237 . 86245) (punctuation 86235 . 86236) (symbol 86234 . 86235) (open-paren 86233 . 86234) (symbol 86214 . 86233) (open-paren 86139 . 86140) (close-paren 86136 . 86137) (symbol 86127 . 86136) (punctuation 86126 . 86127) (symbol 86113 . 86125) (punctuation 86111 . 86112) (symbol 86110 . 86111) (symbol 86101 . 86109) (open-paren 86100 . 86101) (symbol 86089 . 86100) (INT 86085 . 86088) (close-paren 86068 . 86069) (punctuation 86057 . 86058) (close-paren 86056 . 86057) (symbol 86047 . 86056) (semantic-list 86037 . 86047) (open-paren 86036 . 86037) (symbol 86024 . 86036) (open-paren 85939 . 85940) (close-paren 85936 . 85937) (symbol 85927 . 85936) (symbol 85920 . 85926) (open-paren 85919 . 85920) (symbol 85908 . 85919) (VOID 85903 . 85907) (close-paren 85886 . 85887) (punctuation 85883 . 85884) (number 85882 . 85883) (RETURN 85875 . 85881) (punctuation 85861 . 85862) (number 85860 . 85861) (RETURN 85853 . 85859) (close-paren 85848 . 85849) (symbol 85828 . 85848) (punctuation 85826 . 85827) (punctuation 85825 . 85826) (symbol 85823 . 85824) (punctuation 85822 . 85823) (open-paren 85821 . 85822) (IF 85818 . 85820) (punctuation 85814 . 85815) (close-paren 85813 . 85814) (symbol 85809 . 85813) (punctuation 85807 . 85808) (number 85806 . 85807) (punctuation 85804 . 85805) (symbol 85801 . 85804) (punctuation 85799 . 85800) (symbol 85795 . 85799) (punctuation 85793 . 85794) (symbol 85784 . 85793) (punctuation 85782 . 85783) (symbol 85778 . 85782) (open-paren 85777 . 85778) (symbol 85763 . 85777) (close-paren 85762 . 85763) (symbol 85756 . 85762) (open-paren 85755 . 85756) (punctuation 85753 . 85754) (symbol 85751 . 85752) (punctuation 85750 . 85751) (open-paren 85362 . 85363) (close-paren 85359 . 85360) (symbol 85350 . 85359) (INT 85346 . 85349) (punctuation 85344 . 85345) (symbol 85341 . 85344) (punctuation 85340 . 85341) (VOID 85335 . 85339) (punctuation 85333 . 85334) (symbol 85329 . 85333) (symbol 85315 . 85328) (punctuation 85313 . 85314) (symbol 85312 . 85313) (punctuation 85310 . 85311) (symbol 85302 . 85310) (open-paren 85301 . 85302) (symbol 85288 . 85301) (INT 85284 . 85287) (close-paren 85038 . 85039) (punctuation 85028 . 85029) (number 85027 . 85028) (RETURN 85020 . 85026) (close-paren 85016 . 85017) (semantic-list 84903 . 85014) (semantic-list 84891 . 84900) (IF 84888 . 84890) (semantic-list 84541 . 84857) (semantic-list 84527 . 84540) (WHILE 84521 . 84526) (open-paren 84418 . 84419) (close-paren 84415 . 84416) (symbol 84411 . 84415) (open-paren 84410 . 84411) (IF 84407 . 84409) (punctuation 84387 . 84388) (number 84386 . 84387) (RETURN 84379 . 84385) (close-paren 84375 . 84376) (semantic-list 84357 . 84375) (symbol 84353 . 84357) (open-paren 84352 . 84353) (IF 84349 . 84351) (open-paren 84063 . 84064) (close-paren 84060 . 84061) (symbol 84056 . 84060) (INT 84052 . 84055) (punctuation 84050 . 84051) (symbol 84041 . 84050) (INT 84037 . 84040) (punctuation 84035 . 84036) (symbol 84028 . 84035) (symbol 84018 . 84027) (open-paren 84017 . 84018) (symbol 84005 . 84017) (INT 84001 . 84004) (close-paren 83987 . 83988) (punctuation 83977 . 83978) (number 83976 . 83977) (RETURN 83969 . 83975) (close-paren 83950 . 83951) (punctuation 83947 . 83948) (number 83946 . 83947) (RETURN 83939 . 83945) (semantic-list 83888 . 83899) (IF 83885 . 83887) (open-paren 83881 . 83882) (close-paren 83879 . 83880) (semantic-list 83871 . 83879) (symbol 83862 . 83871) (open-paren 83861 . 83862) (IF 83858 . 83860) (close-paren 83840 . 83841) (punctuation 83837 . 83838) (number 83836 . 83837) (RETURN 83829 . 83835) (semantic-list 83795 . 83806) (IF 83792 . 83794) (open-paren 83788 . 83789) (close-paren 83786 . 83787) (semantic-list 83778 . 83786) (symbol 83767 . 83778) (open-paren 83766 . 83767) (IF 83763 . 83765) (punctuation 83741 . 83742) (number 83740 . 83741) (RETURN 83733 . 83739) (close-paren 83729 . 83730) (semantic-list 83714 . 83729) (symbol 83706 . 83714) (number 83727 . 83728) (punctuation 83726 . 83727) (punctuation 83724 . 83725) (punctuation 83723 . 83724) (open-paren 83705 . 83706) (IF 83702 . 83704) (close-paren 83698 . 83699) (punctuation 83695 . 83696) (BREAK 83690 . 83695) (semantic-list 83630 . 83686) (IF 83627 . 83629) (punctuation 83607 . 83608) (punctuation 83606 . 83607) (symbol 83594 . 83605) (open-paren 83494 . 83495) (close-paren 83492 . 83493) (number 83491 . 83492) (punctuation 83489 . 83490) (punctuation 83488 . 83489) (symbol 83480 . 83487) (open-paren 83479 . 83480) (WHILE 83473 . 83478) (punctuation 83400 . 83401) (close-paren 83399 . 83400) (semantic-list 83372 . 83399) (symbol 83365 . 83372) (punctuation 83382 . 83383) (open-paren 83364 . 83365) (symbol 83346 . 83364) (punctuation 83344 . 83345) (symbol 83336 . 83343) (symbol 83330 . 83335) (open-paren 83057 . 83058) (close-paren 83055 . 83056) (symbol 83046 . 83055) (punctuation 83045 . 83046) (INT 83041 . 83044) (punctuation 83039 . 83040) (symbol 83027 . 83039) (INT 83023 . 83026) (punctuation 83021 . 83022) (symbol 83014 . 83021) (symbol 83004 . 83013) (open-paren 83003 . 83004) (symbol 82991 . 83003) (INT 82987 . 82990) (close-paren 82951 . 82952) (RETURN 82932 . 82938) (close-paren 82927 . 82928) (number 82920 . 82923) (string 82853 . 82857) (string 82847 . 82851) (string 82836 . 82845) (semantic-list 82538 . 82547) (semantic-list 82405 . 82491) (semantic-list 82380 . 82404) (IF 82377 . 82379) (semantic-list 82235 . 82313) (semantic-list 82221 . 82234) (IF 82218 . 82220) (open-paren 82117 . 82118) (close-paren 82114 . 82115) (number 82113 . 82114) (punctuation 82111 . 82112) (punctuation 82110 . 82111) (symbol 82106 . 82109) (open-paren 82105 . 82106) (IF 82102 . 82104) (ELSE 82097 . 82101) (close-paren 82094 . 82095) (RETURN 82069 . 82075) (string 82050 . 82064) (open-paren 82023 . 82024) (close-paren 82020 . 82021) (number 82019 . 82020) (punctuation 82017 . 82018) (symbol 82013 . 82016) (open-paren 82012 . 82013) (IF 82009 . 82011) (punctuation 82006 . 82007) (close-paren 82005 . 82006) (open-paren 82004 . 82005) (symbol 82000 . 82004) (punctuation 81998 . 81999) (symbol 81994 . 81997) (symbol 81988 . 81993) (open-paren 80782 . 80783) (close-paren 80780 . 80781) (symbol 80760 . 80780) (punctuation 80758 . 80759) (CHAR 80754 . 80758) (CONST 80748 . 80753) (open-paren 80747 . 80748) (symbol 80733 . 80747) (symbol 80723 . 80732) (close-paren 78749 . 78750) (RETURN 78736 . 78742) (punctuation 78730 . 78731) (number 78728 . 78730) (punctuation 78726 . 78727) (punctuation 78725 . 78726) (punctuation 78723 . 78724) (punctuation 78722 . 78723) (symbol 78721 . 78722) (punctuation 78720 . 78721) (close-paren 78715 . 78716) (number 78714 . 78715) (punctuation 78712 . 78713) (punctuation 78710 . 78711) (punctuation 78709 . 78710) (symbol 78703 . 78709) (open-paren 78702 . 78703) (WHILE 78696 . 78701) (close-paren 78686 . 78687) (punctuation 78685 . 78686) (CHAR 78681 . 78685) (open-paren 78680 . 78681) (punctuation 78678 . 78679) (symbol 78676 . 78677) (punctuation 78675 . 78676) (CHAR 78670 . 78674) (open-paren 78666 . 78667) (close-paren 78663 . 78664) (symbol 78657 . 78663) (symbol 78650 . 78656) (punctuation 78648 . 78649) (symbol 78645 . 78648) (punctuation 78644 . 78645) (VOID 78639 . 78643) (open-paren 78638 . 78639) (symbol 78631 . 78638) (punctuation 78629 . 78630) (VOID 78625 . 78629) (close-paren 76271 . 76272) (RETURN 76249 . 76255) (close-paren 76245 . 76246) (punctuation 76241 . 76242) (BREAK 76236 . 76241) (string 76223 . 76230) (punctuation 76205 . 76206) (DEFAULT 76198 . 76205) (punctuation 76194 . 76195) (BREAK 76189 . 76194) (string 76176 . 76183) (punctuation 76148 . 76149) (number 76144 . 76148) (CASE 76139 . 76143) (punctuation 76135 . 76136) (BREAK 76130 . 76135) (string 76117 . 76124) (punctuation 76090 . 76091) (number 76086 . 76090) (CASE 76081 . 76085) (punctuation 76068 . 76069) (number 76064 . 76068) (CASE 76059 . 76063) (punctuation 76055 . 76056) (BREAK 76050 . 76055) (string 76037 . 76044) (punctuation 76010 . 76011) (number 76006 . 76010) (CASE 76001 . 76005) (open-paren 75997 . 75998) (close-paren 75993 . 75994) (symbol 75989 . 75993) (open-paren 75988 . 75989) (SWITCH 75982 . 75988) (punctuation 75902 . 75903) (close-paren 75901 . 75902) (open-paren 75900 . 75901) (symbol 75880 . 75900) (punctuation 75878 . 75879) (symbol 75873 . 75877) (symbol 75868 . 75872) (punctuation 75564 . 75565) (close-paren 75563 . 75564) (number 75561 . 75563) (open-paren 75560 . 75561) (symbol 75556 . 75560) (CHAR 75551 . 75555) (STATIC 75544 . 75550) (open-paren 75540 . 75541) (close-paren 75537 . 75538) (open-paren 75536 . 75537) (symbol 75524 . 75536) (punctuation 75523 . 75524) (CHAR 75518 . 75522) (CONST 75512 . 75517) (close-paren 75491 . 75492) (RETURN 75470 . 75476) (punctuation 75466 . 75467) (close-paren 75465 . 75466) (semantic-list 75463 . 75465) (symbol 75457 . 75463) (punctuation 75455 . 75456) (string 75449 . 75455) (punctuation 75447 . 75448) (semantic-list 75442 . 75447) (SIZEOF 75436 . 75442) (punctuation 75434 . 75435) (symbol 75431 . 75434) (open-paren 75430 . 75431) (symbol 75422 . 75430) (punctuation 75418 . 75419) (close-paren 75417 . 75418) (number 75415 . 75417) (open-paren 75414 . 75415) (symbol 75411 . 75414) (CHAR 75406 . 75410) (STATIC 75399 . 75405) (open-paren 75162 . 75163) (close-paren 75159 . 75160) (open-paren 75158 . 75159) (symbol 75148 . 75158) (punctuation 75147 . 75148) (CHAR 75142 . 75146) (CONST 75136 . 75141) (close-paren 70799 . 70800) (RETURN 70776 . 70782) (punctuation 70772 . 70773) (close-paren 70771 . 70772) (symbol 70762 . 70771) (punctuation 70760 . 70761) (symbol 70754 . 70760) (open-paren 70753 . 70754) (symbol 70744 . 70753) (punctuation 70738 . 70739) (close-paren 70737 . 70738) (symbol 70731 . 70737) (punctuation 70730 . 70731) (symbol 70723 . 70730) (punctuation 70722 . 70723) (symbol 70717 . 70722) (open-paren 70716 . 70717) (symbol 70708 . 70716) (punctuation 70704 . 70705) (close-paren 70703 . 70704) (symbol 70697 . 70703) (punctuation 70695 . 70696) (number 70694 . 70695) (open-paren 70693 . 70694) (symbol 70686 . 70693) (close-paren 70685 . 70686) (punctuation 70684 . 70685) (CHAR 70680 . 70684) (open-paren 70679 . 70680) (punctuation 70677 . 70678) (symbol 70671 . 70676) (punctuation 70670 . 70671) (CHAR 70665 . 70669) (punctuation 70661 . 70662) (number 70660 . 70661) (punctuation 70658 . 70659) (close-paren 70656 . 70657) (number 70655 . 70656) (punctuation 70653 . 70654) (symbol 70646 . 70653) (punctuation 70644 . 70645) (symbol 70640 . 70644) (open-paren 70639 . 70640) (symbol 70631 . 70639) (punctuation 70629 . 70630) (symbol 70622 . 70628) (symbol 70615 . 70621) (punctuation 70577 . 70578) (close-paren 70576 . 70577) (semantic-list 70565 . 70576) (SIZEOF 70559 . 70565) (punctuation 70557 . 70558) (semantic-list 70543 . 70557) (symbol 70534 . 70543) (punctuation 70532 . 70533) (symbol 70523 . 70532) (open-paren 70522 . 70523) (symbol 70515 . 70522) (punctuation 70511 . 70512) (close-paren 70510 . 70511) (number 70508 . 70510) (open-paren 70507 . 70508) (symbol 70498 . 70507) (CHAR 70493 . 70497) (open-paren 70153 . 70154) (close-paren 70150 . 70151) (symbol 70147 . 70150) (punctuation 70145 . 70146) (WCHAR 70138 . 70145) (CONST 70132 . 70137) (open-paren 70131 . 70132) (symbol 70120 . 70131) (punctuation 70118 . 70119) (CHAR 70114 . 70118) (close-paren 70087 . 70088) (RETURN 70064 . 70070) (punctuation 70060 . 70061) (close-paren 70059 . 70060) (symbol 70050 . 70059) (punctuation 70048 . 70049) (symbol 70042 . 70048) (open-paren 70041 . 70042) (symbol 70032 . 70041) (punctuation 70026 . 70027) (close-paren 70025 . 70026) (symbol 70019 . 70025) (punctuation 70018 . 70019) (symbol 70011 . 70018) (punctuation 70010 . 70011) (symbol 70005 . 70010) (open-paren 70004 . 70005) (symbol 69996 . 70004) (punctuation 69992 . 69993) (close-paren 69991 . 69992) (semantic-list 69982 . 69991) (SIZEOF 69976 . 69982) (punctuation 69974 . 69975) (symbol 69968 . 69974) (open-paren 69967 . 69968) (symbol 69960 . 69967) (close-paren 69959 . 69960) (punctuation 69958 . 69959) (WCHAR 69951 . 69958) (open-paren 69950 . 69951) (punctuation 69948 . 69949) (symbol 69942 . 69947) (punctuation 69941 . 69942) (WCHAR 69933 . 69940) (punctuation 69929 . 69930) (number 69928 . 69929) (punctuation 69926 . 69927) (close-paren 69924 . 69925) (number 69923 . 69924) (punctuation 69921 . 69922) (symbol 69914 . 69921) (punctuation 69912 . 69913) (symbol 69908 . 69912) (open-paren 69907 . 69908) (symbol 69899 . 69907) (punctuation 69897 . 69898) (symbol 69890 . 69896) (symbol 69883 . 69889) (punctuation 69850 . 69851) (close-paren 69849 . 69850) (string 69847 . 69849) (punctuation 69845 . 69846) (symbol 69839 . 69845) (open-paren 69838 . 69839) (symbol 69829 . 69838) (punctuation 69823 . 69824) (close-paren 69822 . 69823) (semantic-list 69811 . 69822) (SIZEOF 69805 . 69811) (punctuation 69803 . 69804) (semantic-list 69789 . 69803) (symbol 69780 . 69789) (punctuation 69778 . 69779) (symbol 69769 . 69778) (open-paren 69768 . 69769) (symbol 69761 . 69768) (punctuation 69757 . 69758) (close-paren 69756 . 69757) (number 69754 . 69756) (open-paren 69753 . 69754) (symbol 69744 . 69753) (CHAR 69739 . 69743) (open-paren 69425 . 69426) (close-paren 69422 . 69423) (symbol 69419 . 69422) (punctuation 69417 . 69418) (CHAR 69413 . 69417) (CONST 69407 . 69412) (open-paren 69406 . 69407) (symbol 69395 . 69406) (punctuation 69393 . 69394) (WCHAR 69386 . 69393) (close-paren 69300 . 69301) (punctuation 69297 . 69298) (number 69296 . 69297) (punctuation 69295 . 69296) (RETURN 69288 . 69294) (close-paren 69282 . 69283) (RETURN 69266 . 69272) (semantic-list 69196 . 69262) (semantic-list 69184 . 69192) (IF 69181 . 69183) (open-paren 69144 . 69145) (close-paren 69140 . 69141) (symbol 69135 . 69140) (punctuation 69133 . 69134) (punctuation 69132 . 69133) (symbol 69130 . 69131) (open-paren 69129 . 69130) (IF 69126 . 69128) (close-paren 69105 . 69106) (punctuation 69101 . 69102) (punctuation 69100 . 69101) (punctuation 69099 . 69100) (symbol 69098 . 69099) (punctuation 69091 . 69092) (number 69090 . 69091) (punctuation 69089 . 69090) (RETURN 69082 . 69088) (semantic-list 69060 . 69077) (IF 69057 . 69059) (ELSE 69052 . 69056) (punctuation 69047 . 69048) (BREAK 69042 . 69047) (semantic-list 69001 . 69037) (IF 68998 . 69000) (open-paren 68993 . 68994) (close-paren 68992 . 68993) (symbol 68987 . 68992) (punctuation 68985 . 68986) (punctuation 68984 . 68985) (symbol 68982 . 68983) (open-paren 68981 . 68982) (WHILE 68975 . 68980) (close-paren 68969 . 68970) (RETURN 68954 . 68960) (semantic-list 68916 . 68924) (IF 68913 . 68915) (open-paren 68908 . 68909) (close-paren 68904 . 68905) (symbol 68900 . 68904) (punctuation 68898 . 68899) (punctuation 68897 . 68898) (symbol 68888 . 68896) (open-paren 68887 . 68888) (IF 68884 . 68886) (punctuation 68878 . 68879) (number 68877 . 68878) (punctuation 68876 . 68877) (RETURN 68869 . 68875) (close-paren 68864 . 68865) (symbol 68860 . 68864) (punctuation 68859 . 68860) (open-paren 68858 . 68859) (IF 68855 . 68857) (close-paren 68808 . 68809) (punctuation 68807 . 68808) (symbol 68803 . 68807) (open-paren 68802 . 68803) (punctuation 68800 . 68801) (symbol 68794 . 68799) (punctuation 68793 . 68794) (symbol 68788 . 68792) (CONST 68782 . 68787) (punctuation 68778 . 68779) (close-paren 68777 . 68778) (symbol 68773 . 68777) (open-paren 68772 . 68773) (symbol 68766 . 68772) (punctuation 68764 . 68765) (symbol 68759 . 68763) (symbol 68752 . 68758) (open-paren 68748 . 68749) (close-paren 68745 . 68746) (symbol 68737 . 68745) (symbol 68730 . 68736) (punctuation 68728 . 68729) (symbol 68722 . 68728) (punctuation 68720 . 68721) (CHAR 68716 . 68720) (punctuation 68714 . 68715) (symbol 68710 . 68714) (punctuation 68708 . 68709) (CHAR 68704 . 68708) (CONST 68698 . 68703) (open-paren 68697 . 68698) (symbol 68688 . 68697) (INT 68684 . 68687) (close-paren 68522 . 68523) (RETURN 68507 . 68513) (close-paren 68501 . 68502) (punctuation 68497 . 68498) (punctuation 68496 . 68497) (punctuation 68495 . 68496) (symbol 68494 . 68495) (punctuation 68487 . 68488) (number 68486 . 68487) (punctuation 68485 . 68486) (RETURN 68478 . 68484) (semantic-list 68456 . 68473) (IF 68453 . 68455) (ELSE 68448 . 68452) (punctuation 68443 . 68444) (punctuation 68442 . 68443) (punctuation 68441 . 68442) (symbol 68436 . 68441) (semantic-list 68395 . 68431) (IF 68392 . 68394) (open-paren 68387 . 68388) (close-paren 68386 . 68387) (symbol 68385 . 68386) (punctuation 68384 . 68385) (open-paren 68383 . 68384) (WHILE 68377 . 68382) (punctuation 68371 . 68372) (number 68370 . 68371) (punctuation 68369 . 68370) (RETURN 68362 . 68368) (close-paren 68357 . 68358) (symbol 68353 . 68357) (punctuation 68352 . 68353) (open-paren 68351 . 68352) (IF 68348 . 68350) (close-paren 68320 . 68321) (punctuation 68319 . 68320) (symbol 68315 . 68319) (open-paren 68314 . 68315) (punctuation 68312 . 68313) (symbol 68310 . 68311) (punctuation 68309 . 68310) (symbol 68304 . 68308) (open-paren 68300 . 68301) (close-paren 68297 . 68298) (symbol 68293 . 68297) (punctuation 68291 . 68292) (CHAR 68287 . 68291) (CONST 68281 . 68286) (open-paren 68280 . 68281) (symbol 68272 . 68280) (INT 68268 . 68271) (close-paren 67992 . 67993) (punctuation 67984 . 67985) (punctuation 67983 . 67984) (close-paren 67981 . 67982) (symbol 67979 . 67981) (punctuation 67977 . 67978) (number 67976 . 67977) (punctuation 67974 . 67975) (symbol 67971 . 67974) (punctuation 67969 . 67970) (symbol 67966 . 67969) (open-paren 67965 . 67966) (symbol 67959 . 67965) (RETURN 67952 . 67958) (punctuation 67948 . 67949) (punctuation 67930 . 67931) (number 67929 . 67930) (RETURN 67922 . 67928) (close-paren 67917 . 67918) (symbol 67914 . 67917) (punctuation 67913 . 67914) (open-paren 67912 . 67913) (IF 67909 . 67911) (punctuation 67652 . 67653) (close-paren 67651 . 67652) (number 67650 . 67651) (open-paren 67649 . 67650) (IF 67646 . 67648) (punctuation 67640 . 67641) (number 67639 . 67640) (RETURN 67632 . 67638) (close-paren 67627 . 67628) (symbol 67620 . 67627) (punctuation 67619 . 67620) (punctuation 67617 . 67618) (punctuation 67616 . 67617) (symbol 67613 . 67615) (punctuation 67612 . 67613) (open-paren 67611 . 67612) (IF 67608 . 67610) (punctuation 67584 . 67585) (close-paren 67583 . 67584) (number 67582 . 67583) (open-paren 67581 . 67582) (symbol 67578 . 67581) (symbol 67573 . 67577) (open-paren 67569 . 67570) (close-paren 67566 . 67567) (symbol 67559 . 67566) (punctuation 67557 . 67558) (CHAR 67553 . 67557) (CONST 67547 . 67552) (punctuation 67545 . 67546) (symbol 67543 . 67545) (punctuation 67542 . 67543) (symbol 67537 . 67541) (open-paren 67536 . 67537) (symbol 67522 . 67536) (INT 67518 . 67521) (close-paren 67403 . 67404) (punctuation 67393 . 67394) (close-paren 67392 . 67393) (symbol 67391 . 67392) (open-paren 67390 . 67391) (symbol 67384 . 67390) (punctuation 67382 . 67383) (symbol 67378 . 67381) (punctuation 67372 . 67373) (close-paren 67371 . 67372) (semantic-list 67366 . 67371) (SIZEOF 67360 . 67366) (punctuation 67358 . 67359) (symbol 67357 . 67358) (punctuation 67355 . 67356) (symbol 67352 . 67355) (semantic-list 67345 . 67352) (open-paren 67344 . 67345) (symbol 67337 . 67344) (open-paren 67328 . 67329) (close-paren 67327 . 67328) (close-paren 67326 . 67327) (symbol 67325 . 67326) (punctuation 67323 . 67324) (symbol 67316 . 67323) (open-paren 67315 . 67316) (symbol 67309 . 67315) (punctuation 67308 . 67309) (open-paren 67307 . 67308) (IF 67304 . 67306) (ELSE 67299 . 67303) (close-paren 66988 . 66989) (close-paren 66985 . 66986) (punctuation 66981 . 66982) (number 66980 . 66981) (RETURN 66973 . 66979) (punctuation 66953 . 66954) (number 66952 . 66953) (punctuation 66951 . 66952) (semantic-list 66939 . 66951) (open-paren 66924 . 66925) (ELSE 66917 . 66921) (semantic-list #("{			\\" 0 1 (macros (("s" string "\"UTF-16BE\"" 66903 . 66913)))) 66888 . 66914) (close-paren 66883 . 66884) (symbol 66876 . 66883) (open-paren 66875 . 66876) (IF 66872 . 66874) (ELSE 66867 . 66871) (semantic-list #("{			\\" 0 1 (macros (("s" string "\"UTF-16LE\"" 66853 . 66863)))) 66838 . 66864) (close-paren 66833 . 66834) (symbol 66826 . 66833) (open-paren 66825 . 66826) (IF 66822 . 66824) (punctuation 66818 . 66819) (symbol 66814 . 66818) (close-paren 66809 . 66810) (semantic-list 66429 . 66806) (semantic-list 66415 . 66425) (IF 66412 . 66414) (ELSE 66407 . 66411) (semantic-list 66296 . 66403) (semantic-list 66282 . 66292) (IF 66279 . 66281) (ELSE 66274 . 66278) (semantic-list 66111 . 66270) (semantic-list 66097 . 66107) (IF 66094 . 66096) (punctuation 66087 . 66088) (punctuation 66086 . 66087) (punctuation 66085 . 66086) (symbol 66082 . 66085) (number 66071 . 66072) (number 66068 . 66069) (punctuation 66061 . 66062) (semantic-list 66050 . 66057) (open-paren 66039 . 66040) (close-paren 66038 . 66039) (semantic-list 66034 . 66038) (symbol 66030 . 66034) (punctuation 66029 . 66030) (open-paren 66028 . 66029) (WHILE 66023 . 66028) (punctuation 66017 . 66018) (number 66016 . 66017) (RETURN 66009 . 66015) (close-paren 66004 . 66005) (symbol 65998 . 66004) (punctuation 65997 . 65998) (punctuation 65995 . 65996) (punctuation 65994 . 65995) (symbol 65991 . 65993) (punctuation 65990 . 65991) (open-paren 65989 . 65990) (IF 65986 . 65988) (punctuation 65923 . 65924) (close-paren 65922 . 65923) (number 65920 . 65922) (open-paren 65919 . 65920) (symbol 65916 . 65919) (CHAR 65911 . 65915) (UNSIGNED 65902 . 65910) (open-paren 65898 . 65899) (close-paren 65895 . 65896) (symbol 65889 . 65895) (symbol 65882 . 65888) (punctuation 65880 . 65881) (symbol 65874 . 65880) (punctuation 65873 . 65874) (CHAR 65868 . 65872) (punctuation 65866 . 65867) (symbol 65864 . 65866) (punctuation 65863 . 65864) (symbol 65858 . 65862) (open-paren 65857 . 65858) (symbol 65844 . 65857) (INT 65840 . 65843) (close-paren 65695 . 65696) (punctuation 65684 . 65685) (number 65683 . 65684) (RETURN 65676 . 65682) (punctuation 65668 . 65669) (string 65664 . 65668) (punctuation 65662 . 65663) (close-paren 65660 . 65661) (symbol 65655 . 65660) (open-paren 65654 . 65655) (symbol 65648 . 65654) (punctuation 65639 . 65640) (close-paren 65638 . 65639) (symbol 65637 . 65638) (punctuation 65635 . 65636) (symbol 65629 . 65635) (open-paren 65628 . 65629) (symbol 65622 . 65628) (close-paren 65609 . 65610) (punctuation 65598 . 65599) (number 65597 . 65598) (RETURN 65590 . 65596) (punctuation 65567 . 65568) (number 65566 . 65567) (punctuation 65565 . 65566) (open-paren 65546 . 65547) (close-paren 65545 . 65546) (number 65544 . 65545) (punctuation 65542 . 65543) (symbol 65536 . 65541) (punctuation 65534 . 65535) (symbol 65527 . 65533) (open-paren 65526 . 65527) (IF 65523 . 65525) (punctuation 65514 . 65515) (close-paren 65513 . 65514) (symbol 65512 . 65513) (open-paren 65511 . 65512) (symbol 65505 . 65511) (punctuation 65503 . 65504) (symbol 65497 . 65502) (close-paren 65458 . 65459) (punctuation 65455 . 65456) (number 65454 . 65455) (RETURN 65447 . 65453) (semantic-list 64257 . 65425) (punctuation 64237 . 64238) (number 64236 . 64237) (RETURN 64229 . 64235) (semantic-list 64212 . 64225) (IF 64209 . 64211) (punctuation 64101 . 64102) (number 64099 . 64100) (punctuation 64097 . 64098) (symbol 64088 . 64096) (punctuation 64086 . 64087) (symbol 64077 . 64085) (punctuation 64076 . 64077) (punctuation 64075 . 64076) (symbol 64072 . 64075) (semantic-list 64024 . 64050) (SIZEOF 64018 . 64024) (number 64015 . 64016) (semantic-list 63898 . 63955) (semantic-list 63860 . 63895) (IF 63857 . 63859) (punctuation 63833 . 63834) (number 63832 . 63833) (RETURN 63825 . 63831) (semantic-list 63816 . 63821) (IF 63813 . 63815) (punctuation 63780 . 63781) (number 63779 . 63780) (RETURN 63772 . 63778) (semantic-list 63735 . 63768) (IF 63732 . 63734) (open-paren 63681 . 63682) (close-paren 63678 . 63679) (symbol 63670 . 63678) (INT 63666 . 63669) (punctuation 63664 . 63665) (symbol 63653 . 63664) (punctuation 63651 . 63652) (DOUBLE 63645 . 63651) (punctuation 63636 . 63637) (symbol 63630 . 63636) (symbol 63623 . 63629) (punctuation 63621 . 63622) (symbol 63615 . 63621) (punctuation 63614 . 63615) (CHAR 63609 . 63613) (punctuation 63607 . 63608) (symbol 63603 . 63607) (punctuation 63601 . 63602) (CHAR 63597 . 63601) (CONST 63591 . 63596) (open-paren 63590 . 63591) (symbol 63574 . 63590) (INT 63570 . 63573) (close-paren 63317 . 63318) (punctuation 63314 . 63315) (number 63313 . 63314) (RETURN 63306 . 63312) (punctuation 63300 . 63301) (number 63299 . 63300) (RETURN 63292 . 63298) (semantic-list 63240 . 63288) (IF 63237 . 63239) (punctuation 63216 . 63217) (punctuation 63215 . 63216) (punctuation 63214 . 63215) (symbol 63209 . 63214) (punctuation 63208 . 63209) (punctuation 63207 . 63208) (symbol 63204 . 63207) (punctuation 63184 . 63185) (punctuation 63183 . 63184) (punctuation 63182 . 63183) (symbol 63175 . 63182) (punctuation 63174 . 63175) (punctuation 63173 . 63174) (symbol 63170 . 63173) (ELSE 63162 . 63166) (punctuation 63158 . 63159) (punctuation 63157 . 63158) (punctuation 63156 . 63157) (symbol 63153 . 63156) (punctuation 63152 . 63153) (punctuation 63151 . 63152) (symbol 63148 . 63151) (semantic-list 63125 . 63144) (IF 63122 . 63124) (ELSE 63117 . 63121) (punctuation 63113 . 63114) (punctuation 63112 . 63113) (punctuation 63111 . 63112) (symbol 63105 . 63111) (punctuation 63104 . 63105) (punctuation 63103 . 63104) (symbol 63100 . 63103) (semantic-list 63074 . 63096) (IF 63071 . 63073) (ELSE 63066 . 63070) (punctuation 63062 . 63063) (punctuation 63061 . 63062) (punctuation 63060 . 63061) (symbol 63056 . 63060) (punctuation 63055 . 63056) (punctuation 63054 . 63055) (symbol 63051 . 63054) (semantic-list 63027 . 63047) (IF 63024 . 63026) (ELSE 63019 . 63023) (punctuation 63015 . 63016) (punctuation 63014 . 63015) (punctuation 63013 . 63014) (symbol 63008 . 63013) (punctuation 63007 . 63008) (punctuation 63006 . 63007) (symbol 63003 . 63006) (semantic-list 62978 . 62999) (IF 62975 . 62977) (open-paren 62903 . 62904) (close-paren 62900 . 62901) (symbol 62897 . 62900) (punctuation 62896 . 62897) (VOID 62891 . 62895) (punctuation 62889 . 62890) (symbol 62884 . 62889) (symbol 62877 . 62883) (punctuation 62875 . 62876) (symbol 62872 . 62875) (symbol 62865 . 62871) (punctuation 62863 . 62864) (symbol 62859 . 62863) (punctuation 62858 . 62859) (CHAR 62853 . 62857) (open-paren 62852 . 62853) (symbol 62836 . 62852) (INT 62832 . 62835) (STATIC 62825 . 62831) (punctuation 62801 . 62802) (close-paren 62800 . 62801) (open-paren 62678 . 62679) (symbol 62661 . 62678) (STRUCT 62654 . 62660) (close-paren 62598 . 62599) (punctuation 62595 . 62596) (number 62594 . 62595) (RETURN 62587 . 62593) (punctuation 62581 . 62582) (punctuation 62545 . 62546) (punctuation 62503 . 62504) (semantic-list 62341 . 62387) (semantic-list 62330 . 62341) (IF 62327 . 62329) (open-paren 62323 . 62324) (close-paren 62320 . 62321) (symbol 62311 . 62320) (INT 62307 . 62310) (punctuation 62305 . 62306) (symbol 62299 . 62305) (symbol 62292 . 62298) (punctuation 62290 . 62291) (symbol 62284 . 62290) (punctuation 62283 . 62284) (CHAR 62278 . 62282) (punctuation 62276 . 62277) (symbol 62272 . 62276) (symbol 62265 . 62271) (punctuation 62263 . 62264) (symbol 62260 . 62263) (punctuation 62258 . 62259) (VOID 62254 . 62258) (CONST 62248 . 62253) (open-paren 62247 . 62248) (symbol 62236 . 62247) (INT 62232 . 62235) (close-paren 62135 . 62136) (punctuation 62134 . 62135) (number 62133 . 62134) (RETURN 62126 . 62132) (number 62088 . 62089) (punctuation 62087 . 62088) (open-paren 62050 . 62051) (close-paren 62049 . 62050) (semantic-list 62038 . 62049) (symbol 62032 . 62038) (punctuation 62031 . 62032) (punctuation 62030 . 62031) (symbol 62027 . 62030) (open-paren 62026 . 62027) (IF 62023 . 62025) (close-paren 61970 . 61971) (RETURN 61955 . 61961) (semantic-list 60248 . 61950) (semantic-list 60232 . 60245) (WHILE 60226 . 60231) (open-paren 60098 . 60099) (close-paren 60095 . 60096) (symbol 60091 . 60095) (symbol 60084 . 60090) (punctuation 60082 . 60083) (symbol 60075 . 60082) (punctuation 60073 . 60074) (VOID 60069 . 60073) (CONST 60063 . 60068) (open-paren 60062 . 60063) (symbol 60056 . 60062) (INT 60052 . 60055) (close-paren 60035 . 60036) (RETURN 60017 . 60023) (semantic-list 59265 . 60012) (semantic-list 59249 . 59262) (WHILE 59243 . 59248) (open-paren 59112 . 59113) (close-paren 59109 . 59110) (symbol 59105 . 59109) (symbol 59098 . 59104) (punctuation 59096 . 59097) (symbol 59089 . 59096) (punctuation 59087 . 59088) (VOID 59083 . 59087) (CONST 59077 . 59082) (open-paren 59076 . 59077) (symbol 59067 . 59076) (INT 59063 . 59066) (close-paren 59043 . 59044) (RETURN 59027 . 59033) (semantic-list 58208 . 59024) (semantic-list 58192 . 58205) (WHILE 58186 . 58191) (open-paren 58059 . 58060) (close-paren 58056 . 58057) (symbol 58052 . 58056) (symbol 58045 . 58051) (punctuation 58043 . 58044) (symbol 58036 . 58043) (punctuation 58034 . 58035) (VOID 58030 . 58034) (CONST 58024 . 58029) (open-paren 58023 . 58024) (symbol 58016 . 58023) (INT 58012 . 58015) (close-paren 57389 . 57390) (RETURN 57372 . 57378) (semantic-list 57281 . 57367) (semantic-list 57265 . 57278) (WHILE 57259 . 57264) (open-paren 57129 . 57130) (close-paren 57126 . 57127) (symbol 57122 . 57126) (symbol 57115 . 57121) (punctuation 57113 . 57114) (symbol 57106 . 57113) (punctuation 57104 . 57105) (VOID 57100 . 57104) (CONST 57094 . 57099) (open-paren 57093 . 57094) (symbol 57085 . 57093) (INT 57081 . 57084) (close-paren 56791 . 56792) (punctuation 56780 . 56781) (semantic-list 56757 . 56780) (semantic-list 56752 . 56757) (RETURN 56745 . 56751) (punctuation 56737 . 56738) (open-paren 56572 . 56573) (close-paren 56569 . 56570) (open-paren 56568 . 56569) (symbol 56558 . 56568) (INT 56554 . 56557) (close-paren 56530 . 56531) (punctuation 56527 . 56528) (number 56520 . 56527) (punctuation 56518 . 56519) (semantic-list 56510 . 56517) (symbol 56493 . 56510) (RETURN 56486 . 56492) (open-paren 56482 . 56483) (close-paren 56479 . 56480) (symbol 56474 . 56479) (punctuation 56473 . 56474) (symbol 56464 . 56472) (open-paren 56463 . 56464) (symbol 56447 . 56463) (DOUBLE 56440 . 56446) (close-paren 56416 . 56417) (punctuation 56413 . 56414) (number 56409 . 56413) (punctuation 56407 . 56408) (semantic-list 56399 . 56406) (symbol 56382 . 56399) (RETURN 56375 . 56381) (open-paren 56371 . 56372) (close-paren 56368 . 56369) (symbol 56363 . 56368) (punctuation 56362 . 56363) (symbol 56353 . 56361) (open-paren 56352 . 56353) (symbol 56335 . 56352) (DOUBLE 56328 . 56334) (close-paren 56303 . 56304) (punctuation 56283 . 56284) (symbol 56279 . 56283) (semantic-list 56271 . 56279) (punctuation 56269 . 56270) (number 56259 . 56268) (punctuation 56257 . 56258) (semantic-list 56210 . 56256) (semantic-list 56202 . 56210) (RETURN 56195 . 56201) (punctuation 56185 . 56186) (open-paren 55991 . 55992) (close-paren 55988 . 55989) (symbol 55983 . 55988) (punctuation 55982 . 55983) (symbol 55973 . 55981) (open-paren 55972 . 55973) (symbol 55955 . 55972) (DOUBLE 55948 . 55954) (close-paren 55923 . 55924) (punctuation 55906 . 55907) (punctuation 55905 . 55906) (punctuation 55899 . 55900) (open-paren 55811 . 55812) (close-paren 55808 . 55809) (symbol 55803 . 55808) (punctuation 55802 . 55803) (symbol 55793 . 55801) (open-paren 55792 . 55793) (symbol 55781 . 55792) (VOID 55776 . 55780) (close-paren 55771 . 55772) (punctuation 55753 . 55754) (punctuation 55752 . 55753) (punctuation 55746 . 55747) (open-paren 55657 . 55658) (close-paren 55654 . 55655) (symbol 55649 . 55654) (punctuation 55648 . 55649) (symbol 55639 . 55647) (open-paren 55638 . 55639) (symbol 55626 . 55638) (VOID 55621 . 55625) (close-paren 55602 . 55603) (open-paren 55353 . 55354) (close-paren 55350 . 55351) (symbol 55338 . 55350) (INT 55334 . 55337) (open-paren 55333 . 55334) (symbol 55327 . 55333) (VOID 55322 . 55326) (close-paren 55302 . 55303) (number 55286 . 55290) (open-paren 55226 . 55227) (close-paren 55223 . 55224) (symbol 55216 . 55223) (INT 55212 . 55215) (open-paren 55211 . 55212) (symbol 55205 . 55211) (VOID 55200 . 55204) (close-paren 55181 . 55182) (semantic-list 54971 . 55153) (semantic-list 54947 . 54968) (WHILE 54941 . 54946) (semantic-list 54653 . 54936) (semantic-list 54628 . 54653) (IF 54625 . 54627) (ELSE 54620 . 54624) (punctuation 54566 . 54567) (number 54564 . 54565) (punctuation 54562 . 54563) (symbol 54555 . 54561) (punctuation 54553 . 54554) (symbol 54549 . 54552) (semantic-list 54497 . 54533) (semantic-list 54487 . 54494) (IF 54484 . 54486) (number 54470 . 54471) (ELSE 54413 . 54417) (semantic-list 54357 . 54373) (IF 54354 . 54356) (ELSE 54349 . 54353) (semantic-list 54293 . 54309) (IF 54290 . 54292) (ELSE 54229 . 54233) (semantic-list 54173 . 54189) (IF 54170 . 54172) (punctuation 53955 . 53956) (number 53953 . 53955) (punctuation 53951 . 53952) (number 53948 . 53950) (punctuation 53946 . 53947) (number 53943 . 53945) (punctuation 53941 . 53942) (number 53938 . 53940) (punctuation 53936 . 53937) (number 53933 . 53935) (punctuation 53931 . 53932) (symbol 53917 . 53930) (symbol 53909 . 53916) (CONST 53903 . 53908) (STATIC 53896 . 53902) (punctuation 53892 . 53893) (number 53890 . 53892) (punctuation 53888 . 53889) (number 53885 . 53887) (punctuation 53883 . 53884) (number 53880 . 53882) (punctuation 53878 . 53879) (number 53875 . 53877) (punctuation 53873 . 53874) (symbol 53858 . 53872) (symbol 53850 . 53857) (CONST 53844 . 53849) (STATIC 53837 . 53843) (punctuation 53833 . 53834) (number 53831 . 53833) (punctuation 53829 . 53830) (number 53826 . 53828) (punctuation 53824 . 53825) (number 53821 . 53823) (punctuation 53819 . 53820) (symbol 53806 . 53818) (symbol 53798 . 53805) (CONST 53792 . 53797) (STATIC 53785 . 53791) (open-paren 53442 . 53443) (close-paren 53439 . 53440) (symbol 53433 . 53439) (symbol 53426 . 53432) (punctuation 53424 . 53425) (symbol 53418 . 53424) (punctuation 53416 . 53417) (CHAR 53412 . 53416) (punctuation 53410 . 53411) (symbol 53404 . 53410) (INT 53400 . 53403) (punctuation 53398 . 53399) (symbol 53394 . 53398) (symbol 53386 . 53393) (open-paren 53385 . 53386) (symbol 53367 . 53385) (VOID 53362 . 53366) (close-paren 53316 . 53317) (punctuation 53282 . 53283) (punctuation 53281 . 53282) (punctuation 53234 . 53235) (punctuation 53233 . 53234) (punctuation 53190 . 53191) (punctuation 53189 . 53190) (punctuation 53148 . 53149) (punctuation 53147 . 53148) (punctuation 53102 . 53103) (punctuation 53101 . 53102) (punctuation 53058 . 53059) (punctuation 53057 . 53058) (semantic-list 53021 . 53040) (SIZEOF 53015 . 53021) (number 53012 . 53013) (semantic-list 52937 . 52994) (ELSE 52933 . 52937) (semantic-list 52876 . 52933) (semantic-list 52868 . 52876) (IF 52865 . 52867) (punctuation 52850 . 52851) (punctuation 52840 . 52841) (punctuation 52832 . 52833) (punctuation 52825 . 52826) (punctuation 52816 . 52817) (open-paren 52770 . 52771) (close-paren 52767 . 52768) (symbol 52761 . 52767) (INT 52757 . 52760) (punctuation 52748 . 52749) (symbol 52742 . 52748) (punctuation 52740 . 52741) (CHAR 52736 . 52740) (CONST 52730 . 52735) (punctuation 52728 . 52729) (symbol 52722 . 52728) (punctuation 52720 . 52721) (CHAR 52716 . 52720) (CONST 52710 . 52715) (punctuation 52708 . 52709) (symbol 52704 . 52708) (punctuation 52702 . 52703) (CHAR 52698 . 52702) (CONST 52692 . 52697) (punctuation 52683 . 52684) (symbol 52680 . 52683) (punctuation 52678 . 52679) (CHAR 52674 . 52678) (CONST 52668 . 52673) (punctuation 52666 . 52667) (symbol 52661 . 52666) (punctuation 52659 . 52660) (CHAR 52655 . 52659) (CONST 52649 . 52654) (punctuation 52647 . 52648) (symbol 52643 . 52647) (punctuation 52641 . 52642) (CHAR 52637 . 52641) (CONST 52631 . 52636) (open-paren 52630 . 52631) (symbol 52612 . 52630) (VOID 52607 . 52611) (punctuation 52356 . 52357) (close-paren 52355 . 52356) (open-paren 52110 . 52111) (symbol 52100 . 52110) (STRUCT 52093 . 52099) (close-paren 52088 . 52089) (string 52065 . 52084) (RETURN 52047 . 52053) (open-paren 52042 . 52043) (close-paren 52039 . 52040) (symbol 52038 . 52039) (symbol 52031 . 52037) (open-paren 52030 . 52031) (symbol 52017 . 52029) (punctuation 52016 . 52017) (CHAR 52011 . 52015) (CONST 52005 . 52010) (close-paren 51954 . 51955) (string 51940 . 51950) (RETURN 51922 . 51928) (open-paren 51918 . 51919) (close-paren 51915 . 51916) (symbol 51914 . 51915) (symbol 51907 . 51913) (open-paren 51906 . 51907) (symbol 51897 . 51905) (punctuation 51896 . 51897) (CHAR 51891 . 51895) (CONST 51885 . 51890) (close-paren 51845 . 51846) (string 51831 . 51841) (RETURN 51813 . 51819) (open-paren 51808 . 51809) (close-paren 51805 . 51806) (symbol 51804 . 51805) (symbol 51797 . 51803) (open-paren 51796 . 51797) (symbol 51787 . 51795) (punctuation 51786 . 51787) (CHAR 51781 . 51785) (CONST 51775 . 51780) (close-paren 51735 . 51736) (RETURN 51719 . 51725) (RETURN 51701 . 51707) (semantic-list 51651 . 51695) (IF 51648 . 51650) (RETURN 51630 . 51636) (semantic-list 51622 . 51627) (IF 51619 . 51621) (open-paren 51553 . 51554) (close-paren 51550 . 51551) (symbol 51547 . 51550) (punctuation 51546 . 51547) (CHAR 51541 . 51545) (CONST 51535 . 51540) (punctuation 51533 . 51534) (symbol 51532 . 51533) (symbol 51525 . 51531) (open-paren 51524 . 51525) (symbol 51516 . 51523) (punctuation 51513 . 51514) (CHAR 51508 . 51512) (CONST 51502 . 51507) (STATIC 51495 . 51501) (close-paren 51265 . 51266) (string 51252 . 51256) (RETURN 51221 . 51227) (open-paren 51217 . 51218) (close-paren 51214 . 51215) (symbol 51211 . 51214) (punctuation 51210 . 51211) (VOID 51205 . 51209) (punctuation 51203 . 51204) (symbol 51199 . 51203) (symbol 51183 . 51198) (punctuation 51181 . 51182) (symbol 51179 . 51181) (punctuation 51177 . 51178) (symbol 51173 . 51177) (open-paren 51172 . 51173) (symbol 51160 . 51172) (INT 51156 . 51159) (close-paren 51128 . 51129) (punctuation 51125 . 51126) (number 51124 . 51125) (RETURN 51117 . 51123) (semantic-list 50941 . 51112) (semantic-list 50898 . 50938) (WHILE 50892 . 50897) (punctuation 50872 . 50873) (semantic-list 50867 . 50872) (SIZEOF 50861 . 50867) (punctuation 50859 . 50860) (symbol 50855 . 50858) (open-paren 50775 . 50776) (close-paren 50772 . 50773) (symbol 50769 . 50772) (punctuation 50768 . 50769) (VOID 50763 . 50767) (punctuation 50761 . 50762) (symbol 50756 . 50761) (INT 50752 . 50755) (punctuation 50750 . 50751) (symbol 50746 . 50750) (symbol 50729 . 50745) (punctuation 50727 . 50728) (symbol 50725 . 50727) (punctuation 50723 . 50724) (symbol 50719 . 50723) (open-paren 50718 . 50719) (symbol 50705 . 50718) (INT 50701 . 50704) (close-paren 50672 . 50673) (string 50660 . 50664) (RETURN 50631 . 50637) (open-paren 50627 . 50628) (close-paren 50624 . 50625) (symbol 50622 . 50624) (punctuation 50621 . 50622) (symbol 50616 . 50620) (punctuation 50614 . 50615) (symbol 50613 . 50614) (punctuation 50612 . 50613) (symbol 50605 . 50611) (punctuation 50603 . 50604) (symbol 50596 . 50603) (punctuation 50595 . 50596) (punctuation 50594 . 50595) (CHAR 50589 . 50593) (open-paren 50588 . 50589) (symbol 50580 . 50588) (symbol 50573 . 50579) (close-paren 50470 . 50471) (RETURN 50455 . 50461) (semantic-list 50404 . 50413) (IF 50401 . 50403) (semantic-list 50035 . 50396) (semantic-list 50021 . 50032) (IF 50018 . 50020) (semantic-list 49501 . 50005) (semantic-list 49474 . 49498) (WHILE 49468 . 49473) (open-paren 49343 . 49344) (close-paren 49340 . 49341) (symbol 49338 . 49340) (punctuation 49337 . 49338) (symbol 49332 . 49336) (punctuation 49330 . 49331) (symbol 49325 . 49330) (INT 49321 . 49324) (punctuation 49319 . 49320) (symbol 49318 . 49319) (punctuation 49317 . 49318) (symbol 49310 . 49316) (punctuation 49308 . 49309) (symbol 49301 . 49308) (punctuation 49300 . 49301) (punctuation 49299 . 49300) (CHAR 49294 . 49298) (open-paren 49293 . 49294) (symbol 49284 . 49293) (symbol 49277 . 49283) (close-paren 48888 . 48889) (punctuation 48885 . 48886) (number 48884 . 48885) (RETURN 48877 . 48883) (semantic-list 48829 . 48872) (semantic-list 48796 . 48826) (IF 48793 . 48795) (punctuation 48787 . 48788) (number 48786 . 48787) (RETURN 48779 . 48785) (semantic-list 48738 . 48775) (IF 48735 . 48737) (punctuation 48729 . 48730) (number 48728 . 48729) (RETURN 48721 . 48727) (semantic-list 48654 . 48717) (IF 48651 . 48653) (punctuation 48645 . 48646) (number 48644 . 48645) (RETURN 48637 . 48643) (semantic-list 48587 . 48633) (IF 48584 . 48586) (open-paren 48534 . 48535) (close-paren 48531 . 48532) (symbol 48528 . 48531) (symbol 48521 . 48527) (punctuation 48519 . 48520) (symbol 48515 . 48519) (punctuation 48514 . 48515) (VOID 48509 . 48513) (CONST 48503 . 48508) (punctuation 48501 . 48502) (symbol 48497 . 48501) (punctuation 48496 . 48497) (CHAR 48491 . 48495) (CONST 48485 . 48490) (open-paren 48484 . 48485) (symbol 48465 . 48484) (INT 48461 . 48464) (close-paren 48301 . 48302) (punctuation 48298 . 48299) (number 48297 . 48298) (RETURN 48290 . 48296) (semantic-list 48236 . 48270) (semantic-list 48200 . 48233) (IF 48197 . 48199) (punctuation 48191 . 48192) (number 48190 . 48191) (RETURN 48183 . 48189) (semantic-list 48151 . 48179) (IF 48148 . 48150) (punctuation 48142 . 48143) (number 48141 . 48142) (RETURN 48134 . 48140) (semantic-list 48123 . 48130) (IF 48120 . 48122) (open-paren 48102 . 48103) (close-paren 48099 . 48100) (symbol 48096 . 48099) (symbol 48089 . 48095) (punctuation 48087 . 48088) (symbol 48083 . 48087) (punctuation 48082 . 48083) (VOID 48077 . 48081) (CONST 48071 . 48076) (punctuation 48069 . 48070) (symbol 48065 . 48069) (punctuation 48063 . 48064) (CHAR 48059 . 48063) (CONST 48053 . 48058) (open-paren 48052 . 48053) (symbol 48038 . 48052) (INT 48034 . 48037) (close-paren 47965 . 47966) (semantic-list 47911 . 47963) (semantic-list 47904 . 47908) (IF 47901 . 47903) (open-paren 47897 . 47898) (close-paren 47894 . 47895) (symbol 47892 . 47894) (punctuation 47891 . 47892) (symbol 47882 . 47890) (STRUCT 47875 . 47881) (open-paren 47874 . 47875) (symbol 47861 . 47874) (VOID 47856 . 47860) (close-paren 47832 . 47833) (RETURN 47820 . 47826) (punctuation 47772 . 47773) (punctuation 47771 . 47772) (symbol 47769 . 47771) (semantic-list 47690 . 47764) (semantic-list 47654 . 47687) (IF 47651 . 47653) (punctuation 47554 . 47555) (punctuation 47553 . 47554) (symbol 47551 . 47553) (semantic-list 47465 . 47530) (semantic-list 47445 . 47462) (IF 47442 . 47444) (punctuation 47414 . 47415) (punctuation 47413 . 47414) (symbol 47411 . 47413) (RETURN 47361 . 47367) (semantic-list 47352 . 47357) (IF 47349 . 47351) (RETURN 47290 . 47296) (semantic-list 47254 . 47286) (IF 47251 . 47253) (RETURN 47191 . 47197) (semantic-list 47165 . 47187) (IF 47162 . 47164) (open-paren 47086 . 47087) (close-paren 47083 . 47084) (symbol 47079 . 47083) (punctuation 47077 . 47078) (CHAR 47073 . 47077) (CONST 47067 . 47072) (open-paren 47066 . 47067) (symbol 47053 . 47066) (punctuation 47051 . 47052) (symbol 47043 . 47051) (STRUCT 47036 . 47042) (close-paren 46918 . 46919) (punctuation 46903 . 46904) (punctuation 46902 . 46903) (punctuation 46901 . 46902) (symbol 46887 . 46901) (semantic-list 46837 . 46884) (semantic-list 46830 . 46835) (IF 46827 . 46829) (open-paren 46824 . 46825) (close-paren 46822 . 46823) (symbol 46820 . 46822) (punctuation 46818 . 46819) (symbol 46814 . 46818) (open-paren 46813 . 46814) (symbol 46806 . 46813) (VOID 46801 . 46805) (close-paren 46784 . 46785) (RETURN 46764 . 46770) (punctuation 46760 . 46761) (punctuation 46759 . 46760) (punctuation 46758 . 46759) (symbol 46744 . 46758) (semantic-list 46716 . 46740) (IF 46713 . 46715) (open-paren 46423 . 46424) (close-paren 46420 . 46421) (symbol 46416 . 46420) (punctuation 46414 . 46415) (CHAR 46410 . 46414) (CONST 46404 . 46409) (punctuation 46402 . 46403) (symbol 46398 . 46402) (punctuation 46396 . 46397) (CHAR 46392 . 46396) (CONST 46386 . 46391) (open-paren 46385 . 46386) (symbol 46379 . 46385) (punctuation 46377 . 46378) (symbol 46373 . 46377) (close-paren 46317 . 46318) (string 45996 . 46000) (semantic-list 45956 . 45967) (IF 45953 . 45955) (ELSE 45948 . 45952) (string 45941 . 45943) (semantic-list 45902 . 45912) (IF 45899 . 45901) (semantic-list 45875 . 45888) (punctuation 45873 . 45874) (semantic-list 45855 . 45868) (semantic-list 45806 . 45820) (IF 45803 . 45805) (ELSE 45798 . 45802) (punctuation 45727 . 45728) (number 45725 . 45727) (punctuation 45724 . 45725) (punctuation 45723 . 45724) (number 45722 . 45723) (semantic-list 45713 . 45722) (punctuation 45711 . 45712) (symbol 45708 . 45710) (symbol 45700 . 45707) (CONST 45694 . 45699) (STATIC 45687 . 45693) (punctuation 45683 . 45684) (number 45681 . 45683) (punctuation 45680 . 45681) (punctuation 45679 . 45680) (number 45678 . 45679) (semantic-list 45669 . 45678) (punctuation 45667 . 45668) (symbol 45664 . 45666) (symbol 45656 . 45663) (CONST 45650 . 45655) (STATIC 45643 . 45649) (punctuation 45639 . 45640) (number 45637 . 45639) (punctuation 45636 . 45637) (punctuation 45635 . 45636) (number 45634 . 45635) (semantic-list 45625 . 45634) (punctuation 45623 . 45624) (symbol 45620 . 45622) (symbol 45612 . 45619) (CONST 45606 . 45611) (STATIC 45599 . 45605) (punctuation 45595 . 45596) (number 45593 . 45595) (punctuation 45592 . 45593) (punctuation 45591 . 45592) (number 45590 . 45591) (semantic-list 45581 . 45590) (punctuation 45579 . 45580) (symbol 45576 . 45578) (symbol 45568 . 45575) (CONST 45562 . 45567) (STATIC 45555 . 45561) (punctuation 45551 . 45552) (number 45549 . 45551) (punctuation 45548 . 45549) (punctuation 45547 . 45548) (number 45546 . 45547) (semantic-list 45537 . 45546) (punctuation 45535 . 45536) (symbol 45532 . 45534) (symbol 45524 . 45531) (CONST 45518 . 45523) (STATIC 45511 . 45517) (punctuation 45507 . 45508) (number 45505 . 45507) (punctuation 45504 . 45505) (punctuation 45503 . 45504) (number 45502 . 45503) (semantic-list 45493 . 45502) (punctuation 45491 . 45492) (symbol 45488 . 45490) (symbol 45480 . 45487) (CONST 45474 . 45479) (STATIC 45467 . 45473) (open-paren 45430 . 45431) (close-paren 45427 . 45428) (symbol 45421 . 45427) (INT 45417 . 45420) (punctuation 45415 . 45416) (symbol 45409 . 45415) (punctuation 45407 . 45408) (CHAR 45403 . 45407) (punctuation 45401 . 45402) (symbol 45397 . 45401) (symbol 45389 . 45396) (open-paren 45388 . 45389) (symbol 45370 . 45388) (VOID 45365 . 45369) (close-paren 45298 . 45299) (semantic-list 45194 . 45288) (open-paren 44533 . 44534) (close-paren 44530 . 44531) (symbol 44526 . 44530) (punctuation 44525 . 44526) (CHAR 44520 . 44524) (CONST 44514 . 44519) (open-paren 44513 . 44514) (symbol 44494 . 44513) (symbol 44486 . 44493) (close-paren 44367 . 44368) (punctuation 44348 . 44349) (symbol 44346 . 44348) (RETURN 44339 . 44345) (punctuation 44333 . 44334) (number 44332 . 44333) (punctuation 44331 . 44332) (RETURN 44324 . 44330) (semantic-list 44303 . 44320) (IF 44300 . 44302) (punctuation 44296 . 44297) (number 44295 . 44296) (punctuation 44294 . 44295) (RETURN 44287 . 44293) (semantic-list 44261 . 44283) (IF 44258 . 44260) (open-paren 43646 . 43647) (close-paren 43643 . 43644) (symbol 43639 . 43643) (punctuation 43637 . 43638) (CHAR 43633 . 43637) (CONST 43627 . 43632) (open-paren 43626 . 43627) (symbol 43617 . 43626) (symbol 43609 . 43616) (close-paren 43590 . 43591) (punctuation 43579 . 43580) (number 43578 . 43579) (RETURN 43571 . 43577) (semantic-list 43415 . 43566) (semantic-list 43387 . 43412) (IF 43384 . 43386) (semantic-list 43019 . 43092) (semantic-list 42993 . 43016) (IF 42990 . 42992) (punctuation 42984 . 42985) (number 42983 . 42984) (RETURN 42976 . 42982) (semantic-list 42919 . 42972) (IF 42916 . 42918) (punctuation 42910 . 42911) (number 42909 . 42910) (RETURN 42902 . 42908) (semantic-list 42847 . 42898) (IF 42844 . 42846) (open-paren 42840 . 42841) (close-paren 42837 . 42838) (symbol 42826 . 42837) (INT 42822 . 42825) (punctuation 42820 . 42821) (symbol 42813 . 42820) (punctuation 42811 . 42812) (CHAR 42807 . 42811) (CONST 42801 . 42806) (punctuation 42799 . 42800) (symbol 42793 . 42799) (punctuation 42791 . 42792) (CHAR 42787 . 42791) (CONST 42781 . 42786) (open-paren 42780 . 42781) (symbol 42771 . 42780) (INT 42767 . 42770) (close-paren 42581 . 42582) (punctuation 42570 . 42571) (number 42569 . 42570) (RETURN 42562 . 42568) (semantic-list 42552 . 42557) (semantic-list 42518 . 42523) (semantic-list 42301 . 42489) (semantic-list 42244 . 42295) (WHILE 42239 . 42244) (semantic-list 42181 . 42234) (semantic-list 42119 . 42178) (IF 42117 . 42119) (punctuation 42110 . 42111) (number 42109 . 42110) (RETURN 42102 . 42108) (semantic-list 42042 . 42098) (IF 42040 . 42042) (punctuation 42033 . 42034) (number 42032 . 42033) (RETURN 42025 . 42031) (semantic-list 41995 . 42021) (IF 41993 . 41995) (punctuation 41986 . 41987) (number 41985 . 41986) (RETURN 41978 . 41984) (semantic-list 41931 . 41974) (IF 41928 . 41930) (punctuation 41555 . 41556) (number 41554 . 41555) (RETURN 41547 . 41553) (semantic-list 41492 . 41543) (IF 41489 . 41491) (open-paren 41485 . 41486) (close-paren 41482 . 41483) (symbol 41471 . 41482) (INT 41467 . 41470) (punctuation 41465 . 41466) (symbol 41458 . 41465) (punctuation 41457 . 41458) (CHAR 41452 . 41456) (CONST 41446 . 41451) (punctuation 41444 . 41445) (symbol 41438 . 41444) (punctuation 41437 . 41438) (CHAR 41432 . 41436) (CONST 41426 . 41431) (open-paren 41425 . 41426) (symbol 41416 . 41425) (INT 41412 . 41415) (close-paren 41395 . 41396) (punctuation 41392 . 41393) (number 41391 . 41392) (RETURN 41384 . 41390) (semantic-list 41143 . 41379) (semantic-list 41106 . 41140) (WHILE 41101 . 41106) (punctuation 41077 . 41078) (punctuation 41076 . 41077) (punctuation 41075 . 41076) (symbol 41068 . 41075) (semantic-list 41027 . 41064) (IF 41024 . 41026) (number 40958 . 40959) (punctuation 40957 . 40958) (punctuation 40906 . 40907) (number 40905 . 40906) (RETURN 40898 . 40904) (semantic-list 40874 . 40894) (IF 40871 . 40873) (punctuation 40777 . 40778) (number 40776 . 40777) (RETURN 40769 . 40775) (semantic-list 40675 . 40765) (IF 40672 . 40674) (open-paren 40590 . 40591) (close-paren 40587 . 40588) (symbol 40580 . 40587) (punctuation 40578 . 40579) (CHAR 40574 . 40578) (CONST 40568 . 40573) (punctuation 40566 . 40567) (symbol 40562 . 40566) (punctuation 40560 . 40561) (CHAR 40556 . 40560) (CONST 40550 . 40555) (open-paren 40549 . 40550) (symbol 40526 . 40549) (INT 40522 . 40525) (close-paren 40313 . 40314) (punctuation 40289 . 40290) (RETURN 40282 . 40288) (punctuation 40071 . 40072) (number 40070 . 40071) (RETURN 40063 . 40069) (semantic-list 40037 . 40059) (IF 40034 . 40036) (open-paren 40030 . 40031) (close-paren 40027 . 40028) (symbol 40023 . 40027) (punctuation 40022 . 40023) (CHAR 40017 . 40021) (CONST 40011 . 40016) (open-paren 40010 . 40011) (symbol 39999 . 40010) (INT 39995 . 39998) (close-paren 39978 . 39979) (punctuation 39975 . 39976) (number 39974 . 39975) (RETURN 39967 . 39973) (punctuation 39961 . 39962) (number 39960 . 39961) (RETURN 39953 . 39959) (ELSE 39945 . 39949) (semantic-list 39764 . 39942) (semantic-list 39734 . 39761) (IF 39731 . 39733) (punctuation 39725 . 39726) (number 39724 . 39725) (RETURN 39717 . 39723) (semantic-list 39688 . 39713) (IF 39685 . 39687) (open-paren 39648 . 39649) (close-paren 39645 . 39646) (symbol 39642 . 39645) (punctuation 39640 . 39641) (CHAR 39636 . 39640) (CONST 39630 . 39635) (open-paren 39629 . 39630) (symbol 39617 . 39629) (INT 39613 . 39616) (close-paren 39590 . 39591) (punctuation 39587 . 39588) (number 39586 . 39587) (RETURN 39579 . 39585) (punctuation 39573 . 39574) (number 39572 . 39573) (RETURN 39565 . 39571) (ELSE 39557 . 39561) (semantic-list 39221 . 39554) (semantic-list 39194 . 39221) (IF 39191 . 39193) (open-paren 39130 . 39131) (close-paren 39127 . 39128) (symbol 39124 . 39127) (punctuation 39123 . 39124) (VOID 39118 . 39122) (punctuation 39116 . 39117) (symbol 39112 . 39116) (symbol 39093 . 39111) (punctuation 39091 . 39092) (symbol 39088 . 39091) (punctuation 39086 . 39087) (CHAR 39082 . 39086) (CONST 39076 . 39081) (open-paren 39075 . 39076) (symbol 39064 . 39075) (INT 39060 . 39063) (close-paren 38986 . 38987) (punctuation 38983 . 38984) (number 38982 . 38983) (RETURN 38975 . 38981) (punctuation 38969 . 38970) (number 38968 . 38969) (RETURN 38961 . 38967) (ELSE 38953 . 38957) (semantic-list 38382 . 38950) (semantic-list 38355 . 38382) (IF 38352 . 38354) (open-paren 38291 . 38292) (close-paren 38288 . 38289) (symbol 38285 . 38288) (punctuation 38284 . 38285) (VOID 38279 . 38283) (punctuation 38277 . 38278) (symbol 38265 . 38277) (INT 38261 . 38264) (punctuation 38259 . 38260) (symbol 38248 . 38259) (INT 38244 . 38247) (punctuation 38242 . 38243) (symbol 38238 . 38242) (symbol 38218 . 38237) (punctuation 38216 . 38217) (symbol 38213 . 38216) (punctuation 38211 . 38212) (CHAR 38207 . 38211) (CONST 38201 . 38206) (open-paren 38200 . 38201) (symbol 38188 . 38200) (INT 38184 . 38187) (close-paren 38057 . 38058) (punctuation 38054 . 38055) (number 38053 . 38054) (punctuation 38051 . 38052) (semantic-list 38008 . 38050) (symbol 38000 . 38008) (punctuation 38031 . 38032) (punctuation 38030 . 38031) (string 38019 . 38025) (RETURN 37993 . 37999) (punctuation 37986 . 37987) (number 37985 . 37986) (RETURN 37978 . 37984) (semantic-list 37958 . 37974) (IF 37955 . 37957) (punctuation 37899 . 37900) (number 37898 . 37899) (RETURN 37891 . 37897) (semantic-list 37876 . 37887) (IF 37873 . 37875) (open-paren 37792 . 37793) (close-paren 37789 . 37790) (symbol 37786 . 37789) (symbol 37779 . 37785) (punctuation 37777 . 37778) (symbol 37774 . 37777) (punctuation 37773 . 37774) (CHAR 37768 . 37772) (punctuation 37766 . 37767) (symbol 37763 . 37766) (punctuation 37762 . 37763) (symbol 37745 . 37761) (STRUCT 37738 . 37744) (open-paren 37737 . 37738) (symbol 37722 . 37737) (INT 37718 . 37721) (close-paren 37698 . 37699) (punctuation 37680 . 37681) (punctuation 37679 . 37680) (symbol 37673 . 37679) (punctuation 37672 . 37673) (punctuation 37671 . 37672) (symbol 37668 . 37671) (RETURN 37661 . 37667) (open-paren 37466 . 37467) (close-paren 37463 . 37464) (symbol 37460 . 37463) (punctuation 37459 . 37460) (symbol 37442 . 37458) (STRUCT 37435 . 37441) (open-paren 37434 . 37435) (symbol 37419 . 37434) (punctuation 37417 . 37418) (CHAR 37413 . 37417) (CONST 37407 . 37412) (close-paren 37387 . 37388) (punctuation 37384 . 37385) (number 37383 . 37384) (RETURN 37376 . 37382) (punctuation 37359 . 37360) (punctuation 37358 . 37359) (open-paren 37295 . 37296) (close-paren 37292 . 37293) (symbol 37289 . 37292) (punctuation 37288 . 37289) (symbol 37271 . 37287) (STRUCT 37264 . 37270) (open-paren 37263 . 37264) (symbol 37251 . 37263) (INT 37247 . 37250) (close-paren 37230 . 37231) (punctuation 37211 . 37212) (punctuation 37210 . 37211) (symbol 37203 . 37209) (punctuation 37202 . 37203) (punctuation 37201 . 37202) (symbol 37195 . 37201) (punctuation 37194 . 37195) (punctuation 37193 . 37194) (symbol 37190 . 37193) (RETURN 37183 . 37189) (open-paren 36960 . 36961) (close-paren 36957 . 36958) (symbol 36954 . 36957) (punctuation 36953 . 36954) (symbol 36936 . 36952) (STRUCT 36929 . 36935) (open-paren 36928 . 36929) (symbol 36907 . 36928) (INT 36903 . 36906) (close-paren 36827 . 36828) (punctuation 36801 . 36802) (RETURN 36794 . 36800) (open-paren 36787 . 36788) (close-paren 36784 . 36785) (symbol 36781 . 36784) (punctuation 36780 . 36781) (symbol 36763 . 36779) (STRUCT 36756 . 36762) (open-paren 36755 . 36756) (symbol 36737 . 36755) (INT 36733 . 36736) (close-paren 36713 . 36714) (punctuation 36694 . 36695) (punctuation 36693 . 36694) (symbol 36686 . 36692) (punctuation 36685 . 36686) (punctuation 36684 . 36685) (symbol 36678 . 36684) (punctuation 36677 . 36678) (punctuation 36676 . 36677) (symbol 36673 . 36676) (RETURN 36666 . 36672) (open-paren 36577 . 36578) (close-paren 36574 . 36575) (symbol 36571 . 36574) (punctuation 36570 . 36571) (symbol 36553 . 36569) (STRUCT 36546 . 36552) (open-paren 36545 . 36546) (symbol 36528 . 36545) (INT 36524 . 36527) (close-paren 36504 . 36505) (string 36488 . 36492) (punctuation 36479 . 36480) (punctuation 36478 . 36479) (punctuation 36471 . 36472) (punctuation 36470 . 36471) (punctuation 36459 . 36460) (RETURN 36452 . 36458) (open-paren 36301 . 36302) (close-paren 36298 . 36299) (symbol 36295 . 36298) (punctuation 36294 . 36295) (symbol 36277 . 36293) (STRUCT 36270 . 36276) (open-paren 36269 . 36270) (symbol 36249 . 36269) (INT 36245 . 36248) (close-paren 36219 . 36220) (string 36204 . 36207) (punctuation 36195 . 36196) (punctuation 36194 . 36195) (punctuation 36187 . 36188) (punctuation 36186 . 36187) (punctuation 36175 . 36176) (RETURN 36168 . 36174) (open-paren 36019 . 36020) (close-paren 36016 . 36017) (symbol 36013 . 36016) (punctuation 36012 . 36013) (symbol 35995 . 36011) (STRUCT 35988 . 35994) (open-paren 35987 . 35988) (symbol 35970 . 35987) (INT 35966 . 35969) (close-paren 35941 . 35942) (punctuation 35938 . 35939) (number 35937 . 35938) (RETURN 35930 . 35936) (punctuation 35918 . 35919) (number 35917 . 35918) (RETURN 35910 . 35916) (semantic-list 35863 . 35906) (IF 35860 . 35862) (open-paren 35682 . 35683) (close-paren 35679 . 35680) (symbol 35676 . 35679) (punctuation 35675 . 35676) (symbol 35658 . 35674) (STRUCT 35651 . 35657) (open-paren 35650 . 35651) (symbol 35637 . 35650) (INT 35633 . 35636) (close-paren 35611 . 35612) (punctuation 35608 . 35609) (number 35607 . 35608) (RETURN 35600 . 35606) (semantic-list 35548 . 35589) (semantic-list 35524 . 35545) (IF 35521 . 35523) (punctuation 35490 . 35491) (punctuation 35489 . 35490) (symbol 35486 . 35489) (punctuation 35482 . 35483) (number 35481 . 35482) (RETURN 35474 . 35480) (semantic-list 35452 . 35470) (IF 35449 . 35451) (punctuation 35426 . 35427) (punctuation 35425 . 35426) (symbol 35422 . 35425) (punctuation 35036 . 35037) (punctuation 35035 . 35036) (symbol 35032 . 35035) (semantic-list 35007 . 35028) (IF 35004 . 35006) (punctuation 35000 . 35001) (number 34999 . 35000) (punctuation 34997 . 34998) (semantic-list 34991 . 34996) (symbol 34985 . 34991) (punctuation 34983 . 34984) (symbol 34979 . 34982) (punctuation 34977 . 34978) (symbol 34975 . 34976) (punctuation 34955 . 34956) (punctuation 34954 . 34955) (semantic-list 34933 . 34939) (SIZEOF 34927 . 34933) (number 34924 . 34925) (punctuation 34906 . 34907) (number 34905 . 34906) (RETURN 34898 . 34904) (semantic-list 34856 . 34894) (IF 34853 . 34855) (open-paren 34785 . 34786) (close-paren 34782 . 34783) (symbol 34779 . 34782) (punctuation 34778 . 34779) (symbol 34761 . 34777) (STRUCT 34754 . 34760) (punctuation 34752 . 34753) (symbol 34749 . 34752) (punctuation 34748 . 34749) (CHAR 34743 . 34747) (CONST 34737 . 34742) (open-paren 34736 . 34737) (symbol 34722 . 34736) (INT 34718 . 34721) (close-paren 34683 . 34684) (punctuation 34680 . 34681) (number 34679 . 34680) (RETURN 34672 . 34678) (semantic-list 34638 . 34651) (IF 34635 . 34637) (semantic-list 34603 . 34616) (IF 34600 . 34602) (punctuation 34596 . 34597) (symbol 34581 . 34596) (RETURN 34566 . 34572) (semantic-list 34532 . 34545) (IF 34529 . 34531) (semantic-list 34497 . 34510) (IF 34494 . 34496) (semantic-list 34288 . 34312) (IF 34285 . 34287) (semantic-list 34215 . 34221) (punctuation 34208 . 34209) (semantic-list 34183 . 34189) (punctuation 34175 . 34176) (semantic-list 34129 . 34135) (SIZEOF 34123 . 34129) (number 34120 . 34121) (number 34089 . 34092) (punctuation 34054 . 34055) (punctuation 34053 . 34054) (semantic-list 34049 . 34052) (semantic-list 33861 . 33870) (SIZEOF 33855 . 33861) (number 33852 . 33853) (semantic-list 33787 . 33806) (IF 33784 . 33786) (semantic-list 33453 . 33651) (semantic-list 33439 . 33450) (IF 33436 . 33438) (semantic-list 33260 . 33304) (IF 33257 . 33259) (semantic-list 33096 . 33117) (IF 33093 . 33095) (punctuation 32859 . 32860) (number 32858 . 32859) (RETURN 32851 . 32857) (semantic-list 32795 . 32847) (IF 32792 . 32794) (punctuation 32786 . 32787) (number 32785 . 32786) (RETURN 32778 . 32784) (semantic-list 32730 . 32774) (IF 32727 . 32729) (open-paren 32597 . 32598) (close-paren 32594 . 32595) (symbol 32591 . 32594) (punctuation 32590 . 32591) (VOID 32585 . 32589) (punctuation 32583 . 32584) (symbol 32579 . 32583) (symbol 32567 . 32578) (punctuation 32558 . 32559) (symbol 32555 . 32558) (punctuation 32554 . 32555) (CHAR 32549 . 32553) (CONST 32543 . 32548) (punctuation 32541 . 32542) (symbol 32538 . 32541) (punctuation 32537 . 32538) (CHAR 32532 . 32536) (CONST 32526 . 32531) (open-paren 32525 . 32526) (symbol 32509 . 32525) (INT 32505 . 32508) (close-paren 31878 . 31879) (punctuation 31875 . 31876) (number 31874 . 31875) (RETURN 31867 . 31873) (punctuation 31856 . 31857) (punctuation 31837 . 31838) (semantic-list 31816 . 31837) (WHILE 31811 . 31816) (semantic-list 30903 . 31811) (DO 30901 . 30903) (punctuation 30886 . 30887) (number 30885 . 30886) (RETURN 30878 . 30884) (semantic-list 30843 . 30874) (IF 30840 . 30842) (open-paren 30648 . 30649) (close-paren 30645 . 30646) (symbol 30642 . 30645) (punctuation 30641 . 30642) (VOID 30636 . 30640) (punctuation 30634 . 30635) (symbol 30630 . 30634) (symbol 30618 . 30629) (punctuation 30608 . 30609) (symbol 30602 . 30608) (punctuation 30601 . 30602) (CHAR 30596 . 30600) (CONST 30590 . 30595) (punctuation 30588 . 30589) (symbol 30582 . 30588) (punctuation 30581 . 30582) (CHAR 30576 . 30580) (CONST 30570 . 30575) (punctuation 30568 . 30569) (symbol 30562 . 30568) (punctuation 30561 . 30562) (CHAR 30556 . 30560) (open-paren 30555 . 30556) (symbol 30538 . 30555) (INT 30534 . 30537) (STATIC 30527 . 30533) (close-paren 30403 . 30404) (punctuation 30400 . 30401) (number 30399 . 30400) (RETURN 30392 . 30398) (semantic-list 30343 . 30387) (semantic-list 30308 . 30340) (IF 30305 . 30307) (punctuation 30229 . 30230) (number 30228 . 30229) (RETURN 30221 . 30227) (semantic-list 30196 . 30217) (IF 30193 . 30195) (open-paren 30189 . 30190) (close-paren 30186 . 30187) (symbol 30183 . 30186) (punctuation 30181 . 30182) (CHAR 30177 . 30181) (CONST 30171 . 30176) (open-paren 30170 . 30171) (symbol 30146 . 30170) (INT 30142 . 30145) (close-paren 30063 . 30064) (RETURN 30023 . 30029) (punctuation 30017 . 30018) (number 30016 . 30017) (RETURN 30009 . 30015) (ELSE 30001 . 30005) (semantic-list 29596 . 29998) (semantic-list 29566 . 29593) (IF 29563 . 29565) (open-paren 29487 . 29488) (close-paren 29484 . 29485) (symbol 29481 . 29484) (punctuation 29479 . 29480) (CHAR 29475 . 29479) (CONST 29469 . 29474) (open-paren 29468 . 29469) (symbol 29443 . 29468) (INT 29439 . 29442) (STATIC 29432 . 29438) (close-paren 29427 . 29428) (RETURN 29382 . 29388) (punctuation 29376 . 29377) (number 29375 . 29376) (RETURN 29368 . 29374) (semantic-list 29343 . 29364) (IF 29340 . 29342) (open-paren 29336 . 29337) (close-paren 29333 . 29334) (symbol 29330 . 29333) (punctuation 29329 . 29330) (VOID 29324 . 29328) (punctuation 29322 . 29323) (symbol 29318 . 29322) (symbol 29304 . 29317) (punctuation 29302 . 29303) (symbol 29299 . 29302) (punctuation 29298 . 29299) (CHAR 29293 . 29297) (CONST 29287 . 29292) (open-paren 29286 . 29287) (symbol 29268 . 29286) (INT 29264 . 29267) (close-paren 29259 . 29260) (punctuation 29256 . 29257) (number 29255 . 29256) (RETURN 29248 . 29254) (punctuation 29242 . 29243) (number 29241 . 29242) (RETURN 29234 . 29240) (semantic-list 29206 . 29230) (IF 29203 . 29205) (punctuation 29197 . 29198) (number 29196 . 29197) (RETURN 29189 . 29195) (ELSE 29181 . 29185) (semantic-list 28622 . 29178) (semantic-list 28592 . 28619) (IF 28589 . 28591) (open-paren 28518 . 28519) (close-paren 28515 . 28516) (symbol 28512 . 28515) (punctuation 28511 . 28512) (VOID 28506 . 28510) (punctuation 28504 . 28505) (symbol 28500 . 28504) (symbol 28486 . 28499) (punctuation 28484 . 28485) (symbol 28481 . 28484) (punctuation 28480 . 28481) (CHAR 28475 . 28479) (CONST 28469 . 28474) (open-paren 28468 . 28469) (symbol 28449 . 28468) (INT 28445 . 28448) (STATIC 28438 . 28444) (close-paren 28415 . 28416) (number 28414 . 28415) (open-paren 28413 . 28414) (WHILE 28408 . 28413) (close-paren 28407 . 28408) (punctuation 28398 . 28399) (number 28397 . 28398) (RETURN 28390 . 28396) (punctuation 28378 . 28379))
      :lexical-table 
        '(("PATH_CHAR_TEST" (spp-arg-list ("c" "mask") 24934 . 24943) . ((semantic-list "(pathchr_table[(unsigned char)(c)] & (mask))" 24944 . 24988)))
          ("STAT_STRUCT" . ((STRUCT "struct" 1507 . 1513) (symbol "stat" 1514 . 1518)))
          ("SIZE_BITS" . ((semantic-list "(sizeof(size_t) * 8)" 8813 . 8833)))
          ("TRAV_RETURN_0" . ((DO "do" 28357 . 28359) (semantic-list "{	\\" 28359 . 28363)))
          ("GB18030_BOM" . ((string "\"\\x84\\x31\\x95\\x33\"" 67240 . 67258)))
          ("ASPRINTF_MAX" . ((number "1048576" 8216 . 8223)))
          ("UTF8_BOM" . ((string "\"\\xEF\\xBB\\xBF\"" 67055 . 67069)))
          ("LOG_VALID" (spp-arg-list ("id") 100147 . 100151) . ((semantic-list "((id) >= LOG_DEBUG && (id) <= MAX_LOGS)" 100152 . 100191)))
          ("UTF16LE_BOM" . ((string "\"\\xFF\\xFE\"" 67092 . 67102)))
          ("UTF16BE_BOM" . ((string "\"\\xFE\\xFF\"" 67125 . 67135)))
          ("UTF32LE_BOM" . ((string "\"\\xFF\\xFE\\x00\\x00\"" 67158 . 67176)))
          ("UTF32BE_BOM" . ((string "\"\\x00\\x00\\xFE\\xFF\"" 67199 . 67217)))
          ("ERRBUF_LEN" . ((number "128" 92124 . 92127)))
          )
)
    (semanticdb-table "cutil.h"
      :major-mode 'c-mode
      :tags 
        '( ("__CUTIL_H" variable (:constant-flag t) nil [1180 1189])
            ("config.h" include nil nil [1204 1223])
            ("reboot_system" function
               (:typemodifiers ("extern" "\"C\"")
                :type "int"
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [33434 33456])
            ("shutdown_system" function
               (:typemodifiers ("extern" "\"C\"")
                :type "int"
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [33385 33409])
            ("numdigit" function
               (:typemodifiers ("extern" "\"C\"")
                :type "int"
                :arguments 
                  ( ("number" variable (:type ("int64_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [33325 33340]))                  
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [33310 33341])
            ("str_to_num" function
               (:typemodifiers ("extern" "\"C\"")
                :type ("int64_t" type (:type "class") nil nil)
                :arguments 
                  ( ("str" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [33264 33280]))                  
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [33244 33281])
            ("DEPRECATED" variable
               (:typemodifiers ("extern" "\"C\"")
                :type "int")
                (reparse-symbol extern-c-contents) [33213 33224])
            ("get_env" function
               (:typemodifiers ("extern" "\"C\"")
                :type "char"
                :arguments 
                  ( ("key" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [33108 33124]))                  
                :constant-flag t
                :pointer 1
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [33088 33125])
            ("unset_env" function
               (:typemodifiers ("extern" "\"C\"")
                :type "int"
                :arguments 
                  ( ("key" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [33047 33063]))                  
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [33031 33064])
            ("set_env" function
               (:typemodifiers ("extern" "\"C\"")
                :type "int"
                :arguments 
                  ( ("key" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [32977 32993])
                    ("val" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [32994 33010]))                  
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [32963 33011])
            ("get_temp_file" function
               (:typemodifiers ("extern" "\"C\"")
                :type "char"
                :arguments 
                  ( ("prefix" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [32890 32909]))                  
                :constant-flag t
                :pointer 1
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [32864 32910])
            ("get_temp_file_under" function
               (:typemodifiers ("extern" "\"C\"")
                :type "int"
                :arguments 
                  ( ("dir" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [32764 32780])
                    ("prefix" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [32781 32800])
                    ("outbuf" variable
                       (:pointer 1
                        :type "char")
                        (reparse-symbol arg-sub-list) [32834 32847])
                    ("outlen" variable (:type ("size_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [32848 32862]))                  
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [32738 32863])
            ("get_temp_dir" function
               (:typemodifiers ("extern" "\"C\"")
                :type "char"
                :constant-flag t
                :pointer 1
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [32679 32706])
            ("get_home_dir" function
               (:typemodifiers ("extern" "\"C\"")
                :type "char"
                :constant-flag t
                :pointer 1
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [32606 32633])
            ("set_current_dir" function
               (:typemodifiers ("extern" "\"C\"")
                :type "int"
                :arguments 
                  ( ("dir" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [32562 32578]))                  
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [32540 32579])
            ("get_current_dir" function
               (:typemodifiers ("extern" "\"C\"")
                :type "char"
                :constant-flag t
                :pointer 1
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [32480 32510])
            ("get_execute_dir" function
               (:typemodifiers ("extern" "\"C\"")
                :type "char"
                :constant-flag t
                :pointer 1
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [32419 32449])
            ("get_execute_name" function
               (:typemodifiers ("extern" "\"C\"")
                :type "char"
                :constant-flag t
                :pointer 1
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [32361 32392])
            ("get_execute_path" function
               (:typemodifiers ("extern" "\"C\"")
                :type "char"
                :constant-flag t
                :pointer 1
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [32293 32324])
            ("version_compare" function
               (:typemodifiers ("extern" "\"C\"")
                :type "int"
                :arguments 
                  ( ("v1" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [31986 32001])
                    ("v2" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [32002 32017]))                  
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [31966 32018])
            ("version_parse" function
               (:typemodifiers ("extern" "\"C\"")
                :type "int"
                :arguments 
                  ( ("version" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [31830 31850])
                    ("major" variable
                       (:pointer 1
                        :type "int")
                        (reparse-symbol arg-sub-list) [31851 31862])
                    ("minor" variable
                       (:pointer 1
                        :type "int")
                        (reparse-symbol arg-sub-list) [31863 31874])
                    ("revision" variable
                       (:pointer 1
                        :type "int")
                        (reparse-symbol arg-sub-list) [31911 31925])
                    ("build" variable
                       (:pointer 1
                        :type "int")
                        (reparse-symbol arg-sub-list) [31926 31937])
                    ("suffix" variable
                       (:pointer 1
                        :type "char")
                        (reparse-symbol arg-sub-list) [31938 31951])
                    ("plen" variable (:type ("size_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [31952 31964]))                  
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [31812 31965])
            ("log_dprintf" variable
               (:typemodifiers ("extern" "\"C\"")
                :constant-flag t)
                (reparse-symbol extern-c-contents) [29987 29998])
            ("set_log_debug_stderr" function
               (:typemodifiers ("extern" "\"C\"")
                :type "void"
                :arguments 
                  ( ("enable" variable (:type "int") (reparse-symbol arg-sub-list) [29648 29659]))                  
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [29622 29660])
            ("log_close_all" function
               (:typemodifiers ("extern" "\"C\"")
                :type "void"
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [29568 29589])
            ("log_close_users" function
               (:typemodifiers ("extern" "\"C\"")
                :type "void"
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [29511 29534])
            ("log_dclose" variable
               (:typemodifiers ("extern" "\"C\"")
                :constant-flag t)
                (reparse-symbol extern-c-contents) [29459 29469])
            ("log_close" function
               (:typemodifiers ("extern" "\"C\"")
                :type "void"
                :arguments 
                  ( ("log_id" variable (:type "int") (reparse-symbol arg-sub-list) [29411 29422]))                  
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [29396 29423])
            ("log_dflush" variable
               (:typemodifiers ("extern" "\"C\"")
                :constant-flag t)
                (reparse-symbol extern-c-contents) [29369 29379])
            ("log_flush" function
               (:typemodifiers ("extern" "\"C\"")
                :type "void"
                :arguments 
                  ( ("log_id" variable (:type "int") (reparse-symbol arg-sub-list) [29317 29328]))                  
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [29302 29329])
            ("PRINTF_FORMAT" function
               (:typemodifiers ("extern" "\"C\"")
                :type "int"
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [29265 29284])
            ("PRINTF_FORMAT" function
               (:typemodifiers ("extern" "\"C\"")
                :type "int"
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [29171 29190])
            ("log_dopen" function
               (:typemodifiers ("extern" "\"C\"")
                :type "int"
                :arguments 
                  ( ("path" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [29061 29078])
                    ("append" variable (:type "int") (reparse-symbol arg-sub-list) [29079 29090])
                    ("binary" variable (:type "int") (reparse-symbol arg-sub-list) [29091 29102]))                  
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [29046 29103])
            ("log_open" function
               (:typemodifiers ("extern" "\"C\"")
                :type "int"
                :arguments 
                  ( ("path" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [28983 29000])
                    ("append" variable (:type "int") (reparse-symbol arg-sub-list) [29001 29012])
                    ("binary" variable (:type "int") (reparse-symbol arg-sub-list) [29013 29024]))                  
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [28969 29025])
            ("log_severity" function
               (:typemodifiers ("extern" "\"C\"")
                :type "void"
                :arguments 
                  ( ("severity" variable (:type "int") (reparse-symbol arg-sub-list) [28924 28937]))                  
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [28906 28938])
            ("log_init" function
               (:typemodifiers ("extern" "\"C\"")
                :type "void"
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [28860 28876])
            ("LogSeverity" type
               (:typemodifiers ("extern" "\"C\"")
                :type "enum"
                :members 
                  ( ("LOG_DEBUG" variable
                       (:constant-flag t
                        :default-value (28570 28571)
                        :type "int")
                        (reparse-symbol enumsubparts) [28558 28571])
                    ("LOG_INFO" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [28599 28608])
                    ("LOG_NOTICE" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [28635 28646])
                    ("LOG_WARNING" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [28673 28685])
                    ("LOG_ERROR" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [28711 28721])
                    ("LOG_CRIT" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [28748 28757])
                    ("LOG_ALERT" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [28784 28794])
                    ("LOG_FATAL" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [28821 28831]))                  )
                (reparse-symbol extern-c-contents) [28538 28858])
            ("LOG_INVALID" variable
               (:typemodifiers ("extern" "\"C\"")
                :constant-flag t)
                (reparse-symbol extern-c-contents) [28437 28448])
            ("MAX_LOGS" variable
               (:typemodifiers ("extern" "\"C\"")
                :constant-flag t)
                (reparse-symbol extern-c-contents) [28385 28393])
            ("stdarg.h" include
               (:typemodifiers ("extern" "\"C\"")
                :system-flag t)
                (reparse-symbol extern-c-contents) [28253 28272])
            ("str_to_ptr" function
               (:typemodifiers ("extern" "\"C\"")
                :type "void"
                :arguments 
                  ( ("str" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [27993 28009]))                  
                :pointer 1
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [27975 28010])
            ("ptr_to_str" function
               (:typemodifiers ("extern" "\"C\"")
                :type "int"
                :arguments 
                  ( ("ptr" variable
                       (:pointer 1
                        :type "void")
                        (reparse-symbol arg-sub-list) [27910 27920])
                    ("buf" variable
                       (:pointer 1
                        :type "char")
                        (reparse-symbol arg-sub-list) [27921 27931])
                    ("len" variable (:type "int") (reparse-symbol arg-sub-list) [27932 27940]))                  
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [27893 27941])
            ("hexdump" function
               (:typemodifiers ("extern" "\"C\"")
                :type "char"
                :arguments 
                  ( ("data" variable
                       (:pointer 1
                        :constant-flag t
                        :type "void")
                        (reparse-symbol arg-sub-list) [27810 27827])
                    ("len" variable (:type ("size_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [27828 27839]))                  
                :pointer 1
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [27795 27840])
            ("get_last_error" function
               (:typemodifiers ("extern" "\"C\"")
                :type "char"
                :constant-flag t
                :pointer 1
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [27706 27735])
            ("get_last_error_std" function
               (:typemodifiers ("extern" "\"C\"")
                :type "char"
                :constant-flag t
                :pointer 1
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [27631 27664])
            ("not_implemented" function
               (:typemodifiers ("extern" "\"C\"")
                :type "void"
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [27453 27477])
            ("not_reached" function
               (:typemodifiers ("extern" "\"C\"")
                :type "void"
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [27398 27418])
            ("fatal_exit" function
               (:typemodifiers ("extern" "\"C\"")
                :type "void"
                :arguments 
                  ( ("msg" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [27344 27360]))                  
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [27327 27361])
            ("VERIFY" variable
               (:typemodifiers ("extern" "\"C\"")
                :constant-flag t)
                (reparse-symbol extern-c-contents) [27271 27277])
            ("ASSERT" variable
               (:typemodifiers ("extern" "\"C\"")
                :constant-flag t)
                (reparse-symbol extern-c-contents) [27241 27247])
            ("errno.h" include
               (:typemodifiers ("extern" "\"C\"")
                :system-flag t)
                (reparse-symbol extern-c-contents) [27031 27049])
            ("number_of_processors" function
               (:typemodifiers ("extern" "\"C\"")
                :type "int"
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [26778 26806])
            ("get_fs_usage" function
               (:typemodifiers ("extern" "\"C\"")
                :type "int"
                :arguments 
                  ( ("absolute_path" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [26702 26728])
                    ("fsp" variable
                       (:pointer 1
                        :type ("fs_usage" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [26729 26750]))                  
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [26684 26751])
            ("fs_usage" type
               (:typemodifiers ("extern" "\"C\"")
                :type "struct"
                :members 
                  ( ("fsu_total" variable (:type ("uint64_t" type (:type "class") nil nil)) (reparse-symbol classsubparts) [26430 26449])
                    ("fsu_free" variable (:type ("uint64_t" type (:type "class") nil nil)) (reparse-symbol classsubparts) [26478 26496])
                    ("fsu_avail" variable (:type ("uint64_t" type (:type "class") nil nil)) (reparse-symbol classsubparts) [26531 26550])
                    ("fsu_files" variable (:type ("uint64_t" type (:type "class") nil nil)) (reparse-symbol classsubparts) [26585 26604])
                    ("fsu_ffree" variable (:type ("uint64_t" type (:type "class") nil nil)) (reparse-symbol classsubparts) [26633 26652]))                  )
                (reparse-symbol extern-c-contents) [26411 26682])
            ("CONDVAR_UNSUPPORT" variable
               (:typemodifiers ("extern" "\"C\"")
                :constant-flag t)
                (reparse-symbol extern-c-contents) [25723 25740])
            ("mutex_destroy" function
               (:typemodifiers ("extern" "\"C\"")
                :type "void"
                :arguments 
                  ( ("lock" variable
                       (:pointer 1
                        :type ("mutex_t" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [25480 25494]))                  
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [25461 25495])
            ("mutex_trylock" function
               (:typemodifiers ("extern" "\"C\"")
                :type "int"
                :arguments 
                  ( ("lock" variable
                       (:pointer 1
                        :type ("mutex_t" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [25416 25430]))                  
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [25397 25431])
            ("mutex_unlock" function
               (:typemodifiers ("extern" "\"C\"")
                :type "void"
                :arguments 
                  ( ("lock" variable
                       (:pointer 1
                        :type ("mutex_t" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [25357 25371]))                  
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [25339 25372])
            ("mutex_lock" function
               (:typemodifiers ("extern" "\"C\"")
                :type "void"
                :arguments 
                  ( ("lock" variable
                       (:pointer 1
                        :type ("mutex_t" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [25298 25312]))                  
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [25282 25313])
            ("mutex_init" function
               (:typemodifiers ("extern" "\"C\"")
                :type "void"
                :arguments 
                  ( ("lock" variable
                       (:pointer 1
                        :type ("mutex_t" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [25240 25254]))                  
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [25224 25255])
            ("mutex_t" type
               (:typemodifiers ("extern" "\"C\"")
                :type "typedef"
                :superclasses "CRITICAL_SECTION"
                :typedef ("CRITICAL_SECTION" type (:type "class") nil nil))
                (reparse-symbol extern-c-contents) [25182 25215])
            ("spin_is_lock" function
               (:typemodifiers ("extern" "\"C\"")
                :type "int"
                :arguments 
                  ( ("lock" variable
                       (:pointer 1
                        :type ("spin_lock_t" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [24989 25007]))                  
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [24971 25008])
            ("spin_trylock" function
               (:typemodifiers ("extern" "\"C\"")
                :type "int"
                :arguments 
                  ( ("lock" variable
                       (:pointer 1
                        :type ("spin_lock_t" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [24929 24947]))                  
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [24911 24948])
            ("spin_unlock" function
               (:typemodifiers ("extern" "\"C\"")
                :type "void"
                :arguments 
                  ( ("lock" variable
                       (:pointer 1
                        :type ("spin_lock_t" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [24871 24889]))                  
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [24854 24890])
            ("spin_lock" function
               (:typemodifiers ("extern" "\"C\"")
                :type "void"
                :arguments 
                  ( ("lock" variable
                       (:pointer 1
                        :type ("spin_lock_t" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [24813 24831]))                  
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [24798 24832])
            ("spin_init" function
               (:typemodifiers ("extern" "\"C\"")
                :type "void"
                :arguments 
                  ( ("lock" variable
                       (:pointer 1
                        :type ("spin_lock_t" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [24756 24774]))                  
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [24741 24775])
            ("spin_lock_t" type
               (:typemodifiers ("extern" "\"C\"")
                :type "typedef"
                :typedef ("" type
                     (:members 
                        ( ("spin_" variable
                             (:typemodifiers ("volatile")
                              :type "long")
                              (reparse-symbol classsubparts) [24705 24725]))                        
                      :type "struct")
                      nil nil))
                (reparse-symbol extern-c-contents) [24687 24739])
            ("atomic_dec" function
               (:typemodifiers ("extern" "\"C\"")
                :type "void"
                :arguments 
                  ( ("v" variable
                       (:pointer 1
                        :type ("atomic_t" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [24620 24632]))                  
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [24604 24633])
            ("atomic_inc" function
               (:typemodifiers ("extern" "\"C\"")
                :type "void"
                :arguments 
                  ( ("v" variable
                       (:pointer 1
                        :type ("atomic_t" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [24590 24602]))                  
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [24574 24603])
            ("atomic_sub" function
               (:typemodifiers ("extern" "\"C\"")
                :type "void"
                :arguments 
                  ( ("i" variable (:type "long") (reparse-symbol arg-sub-list) [24552 24559])
                    ("v" variable
                       (:pointer 1
                        :type ("atomic_t" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [24560 24572]))                  
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [24536 24573])
            ("atomic_add" function
               (:typemodifiers ("extern" "\"C\"")
                :type "void"
                :arguments 
                  ( ("i" variable (:type "long") (reparse-symbol arg-sub-list) [24514 24521])
                    ("v" variable
                       (:pointer 1
                        :type ("atomic_t" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [24522 24534]))                  
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [24498 24535])
            ("atomic_set" function
               (:typemodifiers ("extern" "\"C\"")
                :type "void"
                :arguments 
                  ( ("v" variable
                       (:pointer 1
                        :type ("atomic_t" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [24476 24488])
                    ("i" variable (:type "long") (reparse-symbol arg-sub-list) [24489 24496]))                  
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [24460 24497])
            ("atomic_read" function
               (:typemodifiers ("extern" "\"C\"")
                :type "long"
                :arguments 
                  ( ("v" variable
                       (:pointer 1
                        :constant-flag t
                        :type ("atomic_t" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [24440 24458]))                  
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [24423 24459])
            ("atomic_t" type
               (:typemodifiers ("extern" "\"C\"")
                :type "typedef"
                :typedef ("" type
                     (:members 
                        ( ("counter" variable
                             (:typemodifiers ("volatile")
                              :type "long")
                              (reparse-symbol classsubparts) [24388 24410]))                        
                      :type "struct")
                      nil nil))
                (reparse-symbol extern-c-contents) [24370 24421])
            ("thread_join" function
               (:typemodifiers ("extern" "\"C\"")
                :type "int"
                :arguments 
                  ( ("t" variable (:type ("thread_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [24031 24042])
                    ("exit_code" variable
                       (:pointer 1
                        :type ("thread_ret_t" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [24043 24067]))                  
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [24014 24068])
            ("thread_exit" function
               (:typemodifiers ("extern" "\"C\"")
                :type "void"
                :arguments 
                  ( ("exit_code" variable (:type ("size_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [23971 23988]))                  
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [23954 23989])
            ("thread_create" function
               (:typemodifiers ("extern" "\"C\"")
                :type "int"
                :arguments 
                  ( ("t" variable
                       (:pointer 1
                        :type ("thread_t" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [23882 23894])
                    ("proc" variable (:type ("thread_proc_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [23895 23914])
                    ("arg" variable
                       (:pointer 1
                        :type "void")
                        (reparse-symbol arg-sub-list) [23915 23925])
                    ("stacksize" variable (:type "int") (reparse-symbol arg-sub-list) [23926 23940]))                  
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [23863 23941])
            ("thread_proc_t" variable
               (:typemodifiers ("extern" "\"C\"")
                :type ("thread_ret_t" type (:type "class") nil nil)
                :functionpointer-flag t)
                (reparse-symbol extern-c-contents) [23808 23861])
            ("INVALID_THREAD" variable
               (:typemodifiers ("extern" "\"C\"")
                :constant-flag t)
                (reparse-symbol extern-c-contents) [23762 23776])
            ("THREAD_CALLTYPE" variable
               (:typemodifiers ("extern" "\"C\"")
                :constant-flag t)
                (reparse-symbol extern-c-contents) [23738 23753])
            ("thread_ret_t" type
               (:typemodifiers ("extern" "\"C\"")
                :type "typedef"
                :superclasses "void"
                :pointer 1
                :typedef ("void"))
                (reparse-symbol extern-c-contents) [23702 23729])
            ("thread_t" type
               (:typemodifiers ("extern" "\"C\"")
                :type "typedef"
                :superclasses "pthread_t"
                :typedef ("pthread_t" type (:type "class") nil nil))
                (reparse-symbol extern-c-contents) [23674 23701])
            ("pthread.h" include
               (:typemodifiers ("extern" "\"C\"")
                :system-flag t)
                (reparse-symbol extern-c-contents) [23653 23673])
            ("process_kill" function
               (:typemodifiers ("extern" "\"C\"")
                :type "int"
                :arguments 
                  ( ("process" variable (:type ("process_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [23089 23107])
                    ("exit_code" variable (:type "int") (reparse-symbol arg-sub-list) [23108 23122])
                    ("wait" variable (:type "int") (reparse-symbol arg-sub-list) [23123 23132]))                  
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [23072 23133])
            ("process_wait" function
               (:typemodifiers ("extern" "\"C\"")
                :type "int"
                :arguments 
                  ( ("process" variable (:type ("process_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [23002 23020])
                    ("milliseconds" variable (:type "int") (reparse-symbol arg-sub-list) [23021 23038])
                    ("exit_code" variable
                       (:pointer 1
                        :type "int")
                        (reparse-symbol arg-sub-list) [23039 23054]))                  
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [22985 23055])
            ("process_create" function
               (:typemodifiers ("extern" "\"C\"")
                :type ("process_t" type (:type "class") nil nil)
                :arguments 
                  ( ("executable_and_param" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [22931 22964]))                  
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [22906 22965])
            ("INVALID_PROCESS" variable
               (:typemodifiers ("extern" "\"C\"")
                :constant-flag t)
                (reparse-symbol extern-c-contents) [22880 22895])
            ("process_t" type
               (:typemodifiers ("extern" "\"C\"")
                :type "typedef"
                :superclasses "pid_t"
                :typedef ("pid_t" type (:type "class") nil nil))
                (reparse-symbol extern-c-contents) [22847 22871])
            ("memfrob" function
               (:typemodifiers ("extern" "\"C\"")
                :type "void"
                :arguments 
                  ( ("mem" variable
                       (:pointer 1
                        :type "void")
                        (reparse-symbol arg-sub-list) [22205 22215])
                    ("length" variable (:type ("size_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [22216 22230]))                  
                :pointer 1
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [22191 22231])
            ("get_language" function
               (:typemodifiers ("extern" "\"C\"")
                :type "char"
                :constant-flag t
                :pointer 1
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [21528 21555])
            ("get_locale" function
               (:typemodifiers ("extern" "\"C\"")
                :type "char"
                :constant-flag t
                :pointer 1
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [21458 21483])
            ("wcs_to_mbcs" function
               (:typemodifiers ("extern" "\"C\"")
                :type "char"
                :arguments 
                  ( ("src" variable
                       (:pointer 1
                        :constant-flag t
                        :type "wchar_t")
                        (reparse-symbol arg-sub-list) [20035 20054]))                  
                :pointer 1
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [20014 20055])
            ("mbcs_to_wcs" function
               (:typemodifiers ("extern" "\"C\"")
                :type "wchar_t"
                :arguments 
                  ( ("src" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [19958 19974]))                  
                :pointer 1
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [19937 19975])
            ("utf8_trim" function
               (:typemodifiers ("extern" "\"C\"")
                :type "int"
                :arguments 
                  ( ("u8" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [19824 19839])
                    ("outbuf" variable
                       (:pointer 1
                        :type "char")
                        (reparse-symbol arg-sub-list) [19840 19853])
                    ("max_byte" variable (:type ("size_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [19854 19870]))                  
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [19810 19871])
            ("utf8_len" function
               (:typemodifiers ("extern" "\"C\"")
                :type "int"
                :arguments 
                  ( ("u8" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [19734 19749]))                  
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [19721 19750])
            ("write_file_bom" function
               (:typemodifiers ("extern" "\"C\"")
                :type "int"
                :arguments 
                  ( ("fp" variable
                       (:pointer 1
                        :type ("FILE" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [19663 19672])
                    ("charset" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [19673 19693]))                  
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [19644 19694])
            ("read_file_bom" function
               (:typemodifiers ("extern" "\"C\"")
                :type "int"
                :arguments 
                  ( ("fp" variable
                       (:pointer 1
                        :type ("FILE" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [19582 19591])
                    ("outbuf" variable
                       (:pointer 1
                        :type "char")
                        (reparse-symbol arg-sub-list) [19592 19605])
                    ("outlen" variable (:type ("size_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [19606 19620]))                  
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [19564 19621])
            ("get_file_charset" function
               (:typemodifiers ("extern" "\"C\"")
                :type "int"
                :arguments 
                  ( ("file" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [19457 19474])
                    ("outbuf" variable
                       (:pointer 1
                        :type "char")
                        (reparse-symbol arg-sub-list) [19475 19488])
                    ("outlen" variable (:type ("size_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [19489 19503])
                    ("probability" variable
                       (:pointer 1
                        :type "double")
                        (reparse-symbol arg-sub-list) [19527 19547])
                    ("max_line" variable (:type "int") (reparse-symbol arg-sub-list) [19548 19561]))                  
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [19436 19562])
            ("get_charset" function
               (:typemodifiers ("extern" "\"C\"")
                :type "int"
                :arguments 
                  ( ("str" variable
                       (:pointer 1
                        :constant-flag t
                        :type "void")
                        (reparse-symbol arg-sub-list) [19303 19319])
                    ("size" variable (:type ("size_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [19320 19332])
                    ("outbuf" variable
                       (:pointer 1
                        :type "char")
                        (reparse-symbol arg-sub-list) [19338 19351])
                    ("outlen" variable (:type ("size_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [19352 19366])
                    ("can_ascii" variable (:type "int") (reparse-symbol arg-sub-list) [19367 19381]))                  
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [19287 19382])
            ("is_gbk" function
               (:typemodifiers ("extern" "\"C\"")
                :type "int"
                :arguments 
                  ( ("str" variable
                       (:pointer 1
                        :constant-flag t
                        :type "void")
                        (reparse-symbol arg-sub-list) [19227 19243])
                    ("size" variable (:type ("size_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [19244 19256]))                  
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [19216 19257])
            ("is_gb2312" function
               (:typemodifiers ("extern" "\"C\"")
                :type "int"
                :arguments 
                  ( ("str" variable
                       (:pointer 1
                        :constant-flag t
                        :type "void")
                        (reparse-symbol arg-sub-list) [19155 19171])
                    ("size" variable (:type ("size_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [19172 19184]))                  
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [19141 19185])
            ("is_utf8" function
               (:typemodifiers ("extern" "\"C\"")
                :type "int"
                :arguments 
                  ( ("str" variable
                       (:pointer 1
                        :constant-flag t
                        :type "void")
                        (reparse-symbol arg-sub-list) [19080 19096])
                    ("size" variable (:type ("size_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [19097 19109]))                  
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [19068 19110])
            ("is_ascii" function
               (:typemodifiers ("extern" "\"C\"")
                :type "int"
                :arguments 
                  ( ("str" variable
                       (:pointer 1
                        :constant-flag t
                        :type "void")
                        (reparse-symbol arg-sub-list) [19008 19024])
                    ("size" variable (:type ("size_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [19025 19037]))                  
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [18995 19038])
            ("MAX_CHARSET" variable
               (:typemodifiers ("extern" "\"C\"")
                :constant-flag t)
                (reparse-symbol extern-c-contents) [18899 18910])
            ("get_random" function
               (:typemodifiers ("extern" "\"C\"")
                :type "int"
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [18621 18639])
            ("utimer_elapsed_s" function
               (:typemodifiers ("extern" "\"C\"")
                :type "double"
                :arguments 
                  ( ("meter" variable
                       (:pointer 1
                        :type ("utimer_t" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [18578 18594]))                  
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [18554 18595])
            ("utimer_elapsed_ms" function
               (:typemodifiers ("extern" "\"C\"")
                :type "double"
                :arguments 
                  ( ("meter" variable
                       (:pointer 1
                        :type ("utimer_t" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [18511 18527]))                  
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [18486 18528])
            ("utimer_elapsed_us" function
               (:typemodifiers ("extern" "\"C\"")
                :type "double"
                :arguments 
                  ( ("meter" variable
                       (:pointer 1
                        :type ("utimer_t" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [18443 18459]))                  
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [18418 18460])
            ("utimer_stop" function
               (:typemodifiers ("extern" "\"C\"")
                :type "void"
                :arguments 
                  ( ("timer" variable
                       (:pointer 1
                        :type ("utimer_t" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [18377 18393]))                  
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [18360 18394])
            ("utimer_start" function
               (:typemodifiers ("extern" "\"C\"")
                :type "void"
                :arguments 
                  ( ("timer" variable
                       (:pointer 1
                        :type ("utimer_t" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [18320 18336]))                  
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [18302 18337])
            ("utimer_t" type
               (:typemodifiers ("extern" "\"C\"")
                :type "typedef"
                :typedef ("" type
                     (:members 
                        ( ("start" variable (:type ("timeval" type
                               (:prototype t
                                :type "struct")
                                nil nil)) (reparse-symbol classsubparts) [18175 18196])
                          ("stop" variable (:type ("timeval" type
                               (:prototype t
                                :type "struct")
                                nil nil)) (reparse-symbol classsubparts) [18198 18218]))                        
                      :type "struct")
                      nil nil))
                (reparse-symbol extern-c-contents) [18143 18300])
            ("msleep" function
               (:typemodifiers ("extern" "\"C\"")
                :type "void"
                :arguments 
                  ( ("milliseconds" variable (:type "int") (reparse-symbol arg-sub-list) [18085 18102]))                  
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [18073 18103])
            ("ssleep" function
               (:typemodifiers ("extern" "\"C\"")
                :type "void"
                :arguments 
                  ( ("seconds" variable (:type "int") (reparse-symbol arg-sub-list) [18033 18045]))                  
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [18021 18046])
            ("TIME_SPAN_BUFSIZE" variable
               (:typemodifiers ("extern" "\"C\"")
                :constant-flag t)
                (reparse-symbol extern-c-contents) [17961 17978])
            ("TIME_BUFSIZE" variable
               (:typemodifiers ("extern" "\"C\"")
                :constant-flag t)
                (reparse-symbol extern-c-contents) [17906 17918])
            ("time_span_readable" function
               (:typemodifiers ("extern" "\"C\"")
                :type "void"
                :arguments 
                  ( ("seconds" variable (:type ("int64_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [17792 17808])
                    ("accurate" variable (:type "int") (reparse-symbol arg-sub-list) [17809 17822])
                    ("outbuf" variable
                       (:pointer 1
                        :type "char")
                        (reparse-symbol arg-sub-list) [17823 17836])
                    ("outlen" variable (:type ("size_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [17837 17851]))                  
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [17768 17852])
            ("time_unit_localize" function
               (:typemodifiers ("extern" "\"C\"")
                :type "void"
                :arguments 
                  ( ("year" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [17609 17626])
                    ("month" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [17627 17645])
                    ("day" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [17646 17662])
                    ("hour" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [17690 17707])
                    ("minute" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [17708 17727])
                    ("second" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [17728 17747])
                    ("plural" variable (:type "int") (reparse-symbol arg-sub-list) [17754 17765]))                  
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [17585 17766])
            ("TIME_UNIT_MAX" variable
               (:typemodifiers ("extern" "\"C\"")
                :constant-flag t)
                (reparse-symbol extern-c-contents) [17567 17580])
            ("datetime_str" function
               (:typemodifiers ("extern" "\"C\"")
                :type "char"
                :arguments 
                  ( ("" variable (:type ("time_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [17492 17499]))                  
                :constant-flag t
                :pointer 1
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [17466 17500])
            ("date_str" function
               (:typemodifiers ("extern" "\"C\"")
                :type "char"
                :arguments 
                  ( ("" variable (:type ("time_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [17410 17417]))                  
                :constant-flag t
                :pointer 1
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [17388 17418])
            ("time_str" function
               (:typemodifiers ("extern" "\"C\"")
                :type "char"
                :arguments 
                  ( ("" variable (:type ("time_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [17332 17339]))                  
                :constant-flag t
                :pointer 1
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [17310 17340])
            ("time.h" include
               (:typemodifiers ("extern" "\"C\"")
                :system-flag t)
                (reparse-symbol extern-c-contents) [17277 17294])
            ("foreach_line" function
               (:typemodifiers ("extern" "\"C\"")
                :type "int"
                :arguments 
                  ( ("fp" variable
                       (:pointer 1
                        :type ("FILE" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [16976 16985])
                    ("func" variable (:type ("foreach_line_cb" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [16986 17007])
                    ("arg" variable
                       (:pointer 1
                        :type "void")
                        (reparse-symbol arg-sub-list) [17008 17018]))                  
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [16957 17019])
            ("foreach_block" function
               (:typemodifiers ("extern" "\"C\"")
                :type "int"
                :arguments 
                  ( ("fp" variable
                       (:pointer 1
                        :type ("FILE" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [16867 16876])
                    ("func" variable (:type ("foreach_block_cb" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [16877 16899])
                    ("delim" variable (:type "int") (reparse-symbol arg-sub-list) [16900 16910])
                    ("arg" variable
                       (:pointer 1
                        :type "void")
                        (reparse-symbol arg-sub-list) [16911 16921]))                  
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [16848 16922])
            ("foreach_line_cb" variable
               (:typemodifiers ("extern" "\"C\"")
                :type "int"
                :functionpointer-flag t)
                (reparse-symbol extern-c-contents) [16744 16816])
            ("foreach_block_cb" variable
               (:typemodifiers ("extern" "\"C\"")
                :type "int"
                :functionpointer-flag t)
                (reparse-symbol extern-c-contents) [16634 16708])
            ("get_line" function
               (:typemodifiers ("extern" "\"C\"")
                :type ("size_t" type (:type "class") nil nil)
                :arguments 
                  ( ("lineptr" variable
                       (:pointer 2
                        :type "char")
                        (reparse-symbol arg-sub-list) [16565 16580])
                    ("n" variable
                       (:pointer 1
                        :type ("size_t" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [16581 16591])
                    ("fp" variable
                       (:pointer 1
                        :type ("FILE" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [16592 16601]))                  
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [16548 16602])
            ("get_delim" function
               (:typemodifiers ("extern" "\"C\"")
                :type ("size_t" type (:type "class") nil nil)
                :arguments 
                  ( ("lineptr" variable
                       (:pointer 2
                        :type "char")
                        (reparse-symbol arg-sub-list) [16467 16482])
                    ("n" variable
                       (:pointer 1
                        :type ("size_t" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [16483 16493])
                    ("delim" variable (:type "int") (reparse-symbol arg-sub-list) [16494 16504])
                    ("fp" variable
                       (:pointer 1
                        :type ("FILE" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [16505 16514]))                  
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [16450 16515])
            ("touch" variable
               (:typemodifiers ("extern" "\"C\"")
                :constant-flag t)
                (reparse-symbol extern-c-contents) [16409 16414])
            ("write_mem_file_safe" function
               (:typemodifiers ("extern" "\"C\"")
                :type "int"
                :arguments 
                  ( ("file" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [16325 16342])
                    ("data" variable
                       (:pointer 1
                        :constant-flag t
                        :type "void")
                        (reparse-symbol arg-sub-list) [16343 16360])
                    ("len" variable (:type ("size_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [16361 16372]))                  
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [16300 16373])
            ("write_mem_file" function
               (:typemodifiers ("extern" "\"C\"")
                :type "int"
                :arguments 
                  ( ("file" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [16230 16247])
                    ("data" variable
                       (:pointer 1
                        :constant-flag t
                        :type "void")
                        (reparse-symbol arg-sub-list) [16248 16265])
                    ("len" variable (:type ("size_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [16266 16277]))                  
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [16210 16278])
            ("free_file_mem" function
               (:typemodifiers ("extern" "\"C\"")
                :type "void"
                :arguments 
                  ( ("fm" variable
                       (:pointer 1
                        :type ("file_mem" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [16146 16166]))                  
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [16127 16167])
            ("read_file_mem" function
               (:typemodifiers ("extern" "\"C\"")
                :type ("file_mem" type
                     (:prototype t
                      :type "struct")
                      nil nil)
                :arguments 
                  ( ("file" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [16082 16099]))                  
                :pointer 1
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [16051 16100])
            ("file_mem" type
               (:typemodifiers ("extern" "\"C\"")
                :type "struct"
                :members 
                  ( ("content" variable
                       (:pointer 1
                        :type "char")
                        (reparse-symbol classsubparts) [15950 15964])
                    ("length" variable (:type ("size_t" type (:type "class") nil nil)) (reparse-symbol classsubparts) [15992 16006]))                  )
                (reparse-symbol extern-c-contents) [15932 16036])
            ("xfclose" function
               (:typemodifiers ("extern" "\"C\"")
                :type "void"
                :arguments 
                  ( ("fp" variable
                       (:pointer 1
                        :type ("FILE" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [15883 15892]))                  
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [15869 15893])
            ("xfopen" function
               (:typemodifiers ("extern" "\"C\"")
                :type ("FILE" type (:type "class") nil nil)
                :arguments 
                  ( ("file" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [15814 15831])
                    ("mode" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [15832 15849]))                  
                :pointer 1
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [15800 15850])
            ("file_size_readable" function
               (:typemodifiers ("extern" "\"C\"")
                :type "void"
                :arguments 
                  ( ("size" variable (:type ("int64_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [15718 15731])
                    ("outbuf" variable
                       (:pointer 1
                        :type "char")
                        (reparse-symbol arg-sub-list) [15732 15745])
                    ("outlen" variable (:type "int") (reparse-symbol arg-sub-list) [15746 15757]))                  
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [15693 15758])
            ("get_file_disk_usage" function
               (:typemodifiers ("extern" "\"C\"")
                :type ("int64_t" type (:type "class") nil nil)
                :arguments 
                  ( ("absolute_path" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [15634 15660]))                  
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [15605 15661])
            ("file_size" function
               (:typemodifiers ("extern" "\"C\"")
                :type ("int64_t" type (:type "class") nil nil)
                :arguments 
                  ( ("path" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [15551 15568]))                  
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [15532 15569])
            ("delete_file_empty_updir" function
               (:typemodifiers ("extern" "\"C\"")
                :type "int"
                :arguments 
                  ( ("path" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [15465 15482])
                    ("top_dir" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [15483 15503]))                  
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [15435 15504])
            ("delete_file" function
               (:typemodifiers ("extern" "\"C\"")
                :type "int"
                :arguments 
                  ( ("path" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [15395 15412]))                  
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [15377 15413])
            ("move_file" function
               (:typemodifiers ("extern" "\"C\"")
                :type "int"
                :arguments 
                  ( ("exists" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [15306 15325])
                    ("newfile" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [15326 15346])
                    ("overwritten" variable (:type "int") (reparse-symbol arg-sub-list) [15347 15363]))                  
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [15290 15364])
            ("copy_file" function
               (:typemodifiers ("extern" "\"C\"")
                :type "int"
                :arguments 
                  ( ("exists" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [15220 15239])
                    ("newfile" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [15240 15260])
                    ("overwritten" variable (:type "int") (reparse-symbol arg-sub-list) [15261 15277]))                  
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [15204 15278])
            ("is_empty_dir" function
               (:typemodifiers ("extern" "\"C\"")
                :type "int"
                :arguments 
                  ( ("dir" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [15147 15163]))                  
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [15128 15164])
            ("foreach_dir" function
               (:typemodifiers ("extern" "\"C\"")
                :type "int"
                :arguments 
                  ( ("dir" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [15047 15063])
                    ("func" variable (:type ("foreach_dir_func_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [15064 15088])
                    ("arg" variable
                       (:pointer 1
                        :type "void")
                        (reparse-symbol arg-sub-list) [15089 15099]))                  
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [15029 15100])
            ("foreach_file" function
               (:typemodifiers ("extern" "\"C\"")
                :type "int"
                :arguments 
                  ( ("dir" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [14909 14925])
                    ("func" variable (:type ("foreach_file_func_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [14926 14951])
                    ("recursively" variable (:type "int") (reparse-symbol arg-sub-list) [14982 14998])
                    ("regular_only" variable (:type "int") (reparse-symbol arg-sub-list) [14999 15016])
                    ("arg" variable
                       (:pointer 1
                        :type "void")
                        (reparse-symbol arg-sub-list) [15017 15027]))                  
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [14890 15028])
            ("foreach_dir_func_t" type
               (:typemodifiers ("extern" "\"C\"")
                :type "typedef"
                :superclasses "foreach_file_func_t"
                :typedef ("foreach_file_func_t" type (:type "class") nil nil))
                (reparse-symbol extern-c-contents) [14819 14867])
            ("foreach_file_func_t" variable
               (:typemodifiers ("extern" "\"C\"")
                :type "int"
                :functionpointer-flag t)
                (reparse-symbol extern-c-contents) [14745 14802])
            ("trav_entry_is_regular" function
               (:typemodifiers ("extern" "\"C\"")
                :type "int"
                :arguments 
                  ( ("ctx" variable
                       (:pointer 1
                        :type ("trav_dir_context" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [14684 14713]))                  
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [14656 14714])
            ("trav_entry_is_file" function
               (:typemodifiers ("extern" "\"C\"")
                :type "int"
                :arguments 
                  ( ("ctx" variable
                       (:pointer 1
                        :type ("trav_dir_context" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [14606 14635]))                  
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [14581 14636])
            ("trav_entry_is_dir" function
               (:typemodifiers ("extern" "\"C\"")
                :type "int"
                :arguments 
                  ( ("ctx" variable
                       (:pointer 1
                        :type ("trav_dir_context" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [14531 14560]))                  
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [14507 14561])
            ("trav_entry_is_dotdot" function
               (:typemodifiers ("extern" "\"C\"")
                :type "int"
                :arguments 
                  ( ("ctx" variable
                       (:pointer 1
                        :type ("trav_dir_context" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [14453 14482]))                  
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [14426 14483])
            ("trav_entry_is_dot" function
               (:typemodifiers ("extern" "\"C\"")
                :type "int"
                :arguments 
                  ( ("ctx" variable
                       (:pointer 1
                        :type ("trav_dir_context" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [14373 14402]))                  
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [14349 14403])
            ("trav_entry_path" function
               (:typemodifiers ("extern" "\"C\"")
                :type "int"
                :arguments 
                  ( ("ctx" variable
                       (:pointer 1
                        :type ("trav_dir_context" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [14282 14311])
                    ("buf" variable
                       (:pointer 1
                        :type "char")
                        (reparse-symbol arg-sub-list) [14312 14322])
                    ("len" variable (:type ("size_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [14323 14334]))                  
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [14260 14335])
            ("trav_entry_name" function
               (:typemodifiers ("extern" "\"C\"")
                :type "char"
                :arguments 
                  ( ("ctx" variable
                       (:pointer 1
                        :type ("trav_dir_context" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [14210 14239]))                  
                :constant-flag t
                :pointer 1
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [14181 14240])
            ("trav_dir_end" function
               (:typemodifiers ("extern" "\"C\"")
                :type "int"
                :arguments 
                  ( ("ctx" variable
                       (:pointer 1
                        :type ("trav_dir_context" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [14131 14160]))                  
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [14112 14161])
            ("trav_dir_next" function
               (:typemodifiers ("extern" "\"C\"")
                :type "int"
                :arguments 
                  ( ("ctx" variable
                       (:pointer 1
                        :type ("trav_dir_context" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [14064 14093]))                  
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [14044 14094])
            ("trav_dir_begin" function
               (:typemodifiers ("extern" "\"C\"")
                :type "int"
                :arguments 
                  ( ("dir" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [13983 13999])
                    ("ctx" variable
                       (:pointer 1
                        :type ("trav_dir_context" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [14000 14029]))                  
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [13962 14030])
            ("trav_dir_context" type
               (:typemodifiers ("extern" "\"C\"")
                :type "struct"
                :members 
                  ( ("basedir" variable
                       (:dereference 1
                        :type "char")
                        (reparse-symbol classsubparts) [13739 13764])
                    ("dir" variable
                       (:pointer 1
                        :type ("DIR" type (:type "class") nil nil))
                        (reparse-symbol classsubparts) [13913 13925])
                    ("pentry" variable
                       (:pointer 1
                        :type ("dirent" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol classsubparts) [13927 13950]))                  )
                (reparse-symbol extern-c-contents) [13713 13960])
            ("copy_directories" function
               (:typemodifiers ("extern" "\"C\"")
                :type "int"
                :arguments 
                  ( ("srcdir" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [13575 13594])
                    ("dstdir" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [13595 13614])
                    ("func" variable (:type ("copy_dir_cb" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [13671 13688])
                    ("arg" variable
                       (:pointer 1
                        :type "void")
                        (reparse-symbol arg-sub-list) [13689 13699]))                  
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [13552 13700])
            ("copy_dir_cb" variable
               (:typemodifiers ("extern" "\"C\"")
                :type "int"
                :functionpointer-flag t)
                (reparse-symbol extern-c-contents) [13372 13507])
            ("delete_empty_directories" function
               (:typemodifiers ("extern" "\"C\"")
                :type "int"
                :arguments 
                  ( ("dir" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [13302 13318]))                  
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [13271 13319])
            ("delete_directories" function
               (:typemodifiers ("extern" "\"C\"")
                :type "int"
                :arguments 
                  ( ("dir" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [13200 13216])
                    ("func" variable (:type ("delete_dir_cb" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [13217 13236])
                    ("arg" variable
                       (:pointer 1
                        :type "void")
                        (reparse-symbol arg-sub-list) [13237 13247]))                  
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [13175 13248])
            ("delete_dir_cb" variable
               (:typemodifiers ("extern" "\"C\"")
                :type "int"
                :functionpointer-flag t)
                (reparse-symbol extern-c-contents) [13064 13136])
            ("delete_directory" function
               (:typemodifiers ("extern" "\"C\"")
                :type "int"
                :arguments 
                  ( ("dir" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [13009 13025]))                  
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [12986 13026])
            ("create_directories" function
               (:typemodifiers ("extern" "\"C\"")
                :type "int"
                :arguments 
                  ( ("dir" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [12945 12961]))                  
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [12920 12962])
            ("create_directory" function
               (:typemodifiers ("extern" "\"C\"")
                :type "int"
                :arguments 
                  ( ("dir" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [12867 12883]))                  
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [12844 12884])
            ("path_char_blankspace" function
               (:typemodifiers ("extern" "\"C\"")
                :type "void"
                :arguments 
                  ( ("path" variable
                       (:pointer 1
                        :type "char")
                        (reparse-symbol arg-sub-list) [12788 12799]))                  
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [12761 12800])
            ("path_char_escape" function
               (:typemodifiers ("extern" "\"C\"")
                :type "char"
                :arguments 
                  ( ("path" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [12702 12719]))                  
                :pointer 1
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [12678 12720])
            ("path_char_illegal" function
               (:typemodifiers ("extern" "\"C\"")
                :type "int"
                :arguments 
                  ( ("ch" variable (:type "char") (reparse-symbol arg-sub-list) [12632 12640]))                  
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [12608 12641])
            ("unique_dir" function
               (:typemodifiers ("extern" "\"C\"")
                :type "int"
                :arguments 
                  ( ("path" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [12543 12560])
                    ("buf" variable
                       (:pointer 1
                        :type "char")
                        (reparse-symbol arg-sub-list) [12561 12571])
                    ("len" variable (:type ("size_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [12572 12583]))                  
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [12526 12584])
            ("unique_file" function
               (:typemodifiers ("extern" "\"C\"")
                :type "int"
                :arguments 
                  ( ("path" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [12462 12479])
                    ("buf" variable
                       (:pointer 1
                        :type "char")
                        (reparse-symbol arg-sub-list) [12480 12490])
                    ("len" variable (:type ("size_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [12491 12502]))                  
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [12444 12503])
            ("relative_path" function
               (:typemodifiers ("extern" "\"C\"")
                :type "int"
                :arguments 
                  ( ("src" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [12308 12324])
                    ("dst" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [12325 12341])
                    ("sep" variable (:type "char") (reparse-symbol arg-sub-list) [12342 12351])
                    ("buf" variable
                       (:pointer 1
                        :type "char")
                        (reparse-symbol arg-sub-list) [12360 12370])
                    ("slen" variable (:type ("size_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [12371 12383]))                  
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [12288 12384])
            ("path_is_file" function
               (:typemodifiers ("extern" "\"C\"")
                :type "int"
                :arguments 
                  ( ("path" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [12242 12259]))                  
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [12223 12260])
            ("path_is_directory" function
               (:typemodifiers ("extern" "\"C\"")
                :type "int"
                :arguments 
                  ( ("path" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [12180 12197]))                  
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [12156 12198])
            ("path_file_exists" function
               (:typemodifiers ("extern" "\"C\"")
                :type "int"
                :arguments 
                  ( ("path" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [12108 12125]))                  
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [12085 12126])
            ("path_find_directory" function
               (:typemodifiers ("extern" "\"C\"")
                :type "int"
                :arguments 
                  ( ("path" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [12001 12018])
                    ("buf" variable
                       (:pointer 1
                        :type "char")
                        (reparse-symbol arg-sub-list) [12019 12029])
                    ("len" variable (:type ("size_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [12030 12041]))                  
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [11975 12042])
            ("path_find_extension" function
               (:typemodifiers ("extern" "\"C\"")
                :type "char"
                :arguments 
                  ( ("path" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [11924 11941]))                  
                :constant-flag t
                :pointer 1
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [11892 11942])
            ("path_find_file_name" function
               (:typemodifiers ("extern" "\"C\"")
                :type "char"
                :arguments 
                  ( ("path" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [11833 11850]))                  
                :constant-flag t
                :pointer 1
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [11801 11851])
            ("is_root_path" function
               (:typemodifiers ("extern" "\"C\"")
                :type "int"
                :arguments 
                  ( ("path" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [11737 11754]))                  
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [11718 11755])
            ("is_absolute_path" function
               (:typemodifiers ("extern" "\"C\"")
                :type "int"
                :arguments 
                  ( ("path" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [11665 11682]))                  
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [11642 11683])
            ("seek_off_t" variable
               (:typemodifiers ("extern" "\"C\"")
                :constant-flag t)
                (reparse-symbol extern-c-contents) [11562 11572])
            ("MIN_PATH" variable
               (:typemodifiers ("extern" "\"C\"")
                :constant-flag t)
                (reparse-symbol extern-c-contents) [11238 11246])
            ("LINE_END_STR" variable
               (:typemodifiers ("extern" "\"C\"")
                :constant-flag t)
                (reparse-symbol extern-c-contents) [11211 11223])
            ("PATH_SEP_WSTR" variable
               (:typemodifiers ("extern" "\"C\"")
                :constant-flag t)
                (reparse-symbol extern-c-contents) [11183 11196])
            ("PATH_SEP_STR" variable
               (:typemodifiers ("extern" "\"C\"")
                :constant-flag t)
                (reparse-symbol extern-c-contents) [11157 11169])
            ("PATH_SEP_WCHAR" variable
               (:typemodifiers ("extern" "\"C\"")
                :constant-flag t)
                (reparse-symbol extern-c-contents) [11128 11142])
            ("PATH_SEP_CHAR" variable
               (:typemodifiers ("extern" "\"C\"")
                :constant-flag t)
                (reparse-symbol extern-c-contents) [11101 11114])
            ("BOUNDED_TO_ALLOCA" variable
               (:typemodifiers ("extern" "\"C\"")
                :constant-flag t)
                (reparse-symbol extern-c-contents) [10250 10267])
            ("hash_pjw" function
               (:typemodifiers ("extern" "\"C\"")
                :type ("size_t" type (:type "class") nil nil)
                :arguments 
                  ( ("s" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [10162 10176])
                    ("tablesize" variable (:type ("size_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [10177 10194]))                  
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [10145 10195])
            ("strncasestr" function
               (:typemodifiers ("extern" "\"C\"")
                :type "char"
                :arguments 
                  ( ("s" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [10060 10074])
                    ("find" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [10075 10092])
                    ("slen" variable (:type ("size_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [10093 10105]))                  
                :pointer 1
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [10042 10106])
            ("memrchr" function
               (:typemodifiers ("extern" "\"C\"")
                :type "void"
                :arguments 
                  ( ("s" variable
                       (:pointer 1
                        :constant-flag t
                        :type "void")
                        (reparse-symbol arg-sub-list) [9944 9958])
                    ("c" variable (:type "int") (reparse-symbol arg-sub-list) [9959 9965])
                    ("n" variable (:type ("size_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [9966 9975]))                  
                :pointer 1
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [9930 9976])
            ("strcasestr" function
               (:typemodifiers ("extern" "\"C\"")
                :type "char"
                :arguments 
                  ( ("s" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [9860 9874])
                    ("find" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [9875 9892]))                  
                :pointer 1
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [9843 9893])
            ("strnstr" function
               (:typemodifiers ("extern" "\"C\"")
                :type "char"
                :arguments 
                  ( ("s" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [9764 9778])
                    ("find" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [9779 9796])
                    ("slen" variable (:type ("size_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [9797 9809]))                  
                :pointer 1
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [9750 9810])
            ("strncasecmp" function
               (:typemodifiers ("extern" "\"C\"")
                :type "int"
                :arguments 
                  ( ("s1" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [9665 9680])
                    ("s2" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [9681 9696])
                    ("n" variable (:type ("size_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [9697 9706]))                  
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [9648 9707])
            ("strcasecmp" function
               (:typemodifiers ("extern" "\"C\"")
                :type "int"
                :arguments 
                  ( ("s1" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [9588 9603])
                    ("s2" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [9604 9619]))                  
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [9572 9620])
            ("strsep" function
               (:typemodifiers ("extern" "\"C\"")
                :type "char"
                :arguments 
                  ( ("stringp" variable
                       (:pointer 2
                        :type "char")
                        (reparse-symbol arg-sub-list) [9386 9401])
                    ("delim" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [9402 9420]))                  
                :pointer 1
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [9373 9421])
            ("strndup" function
               (:typemodifiers ("extern" "\"C\"")
                :type "char"
                :arguments 
                  ( ("s" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [9302 9316])
                    ("n" variable (:type ("size_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [9317 9326]))                  
                :pointer 1
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [9288 9327])
            ("aprintf" function
               (:typemodifiers ("extern" "\"C\"")
                :type "char"
                :arguments 
                  ( ("fmt" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [9130 9146])
                    ("..." variable (:type "vararg") (reparse-symbol arg-sub-list) [9147 9151]))                  
                :pointer 1
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [9115 9152])
            ("substrdup" function
               (:typemodifiers ("extern" "\"C\"")
                :type "char"
                :arguments 
                  ( ("beg" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [9028 9044])
                    ("end" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [9045 9061]))                  
                :pointer 1
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [9011 9062])
            ("strdup_null" variable
               (:typemodifiers ("extern" "\"C\"")
                :constant-flag t)
                (reparse-symbol extern-c-contents) [8945 8956])
            ("strdup_upper" function
               (:typemodifiers ("extern" "\"C\"")
                :type "char"
                :arguments 
                  ( ("s" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [8889 8903]))                  
                :pointer 1
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [8869 8904])
            ("strdup_lower" function
               (:typemodifiers ("extern" "\"C\"")
                :type "char"
                :arguments 
                  ( ("s" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [8822 8836]))                  
                :pointer 1
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [8802 8837])
            ("uppercase_str" function
               (:typemodifiers ("extern" "\"C\"")
                :type "int"
                :arguments 
                  ( ("str" variable
                       (:pointer 1
                        :type "char")
                        (reparse-symbol arg-sub-list) [8744 8754]))                  
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [8725 8755])
            ("lowercase_str" function
               (:typemodifiers ("extern" "\"C\"")
                :type "int"
                :arguments 
                  ( ("str" variable
                       (:pointer 1
                        :type "char")
                        (reparse-symbol arg-sub-list) [8668 8678]))                  
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [8649 8679])
            ("xstrncpy" variable
               (:typemodifiers ("extern" "\"C\"")
                :constant-flag t)
                (reparse-symbol extern-c-contents) [8566 8574])
            ("STRNIEQ" variable
               (:typemodifiers ("extern" "\"C\"")
                :constant-flag t)
                (reparse-symbol extern-c-contents) [8433 8440])
            ("STRIEQ" variable
               (:typemodifiers ("extern" "\"C\"")
                :constant-flag t)
                (reparse-symbol extern-c-contents) [8327 8333])
            ("STREQ" variable
               (:typemodifiers ("extern" "\"C\"")
                :constant-flag t)
                (reparse-symbol extern-c-contents) [8244 8249])
            ("xisxdigit" variable
               (:typemodifiers ("extern" "\"C\"")
                :constant-flag t)
                (reparse-symbol extern-c-contents) [8204 8213])
            ("xisupper" variable
               (:typemodifiers ("extern" "\"C\"")
                :constant-flag t)
                (reparse-symbol extern-c-contents) [8167 8175])
            ("xisspace" variable
               (:typemodifiers ("extern" "\"C\"")
                :constant-flag t)
                (reparse-symbol extern-c-contents) [8130 8138])
            ("xispunct" variable
               (:typemodifiers ("extern" "\"C\"")
                :constant-flag t)
                (reparse-symbol extern-c-contents) [8093 8101])
            ("xisprint" variable
               (:typemodifiers ("extern" "\"C\"")
                :constant-flag t)
                (reparse-symbol extern-c-contents) [8056 8064])
            ("xislower" variable
               (:typemodifiers ("extern" "\"C\"")
                :constant-flag t)
                (reparse-symbol extern-c-contents) [8019 8027])
            ("xisgraph" variable
               (:typemodifiers ("extern" "\"C\"")
                :constant-flag t)
                (reparse-symbol extern-c-contents) [7982 7990])
            ("xisdigit" variable
               (:typemodifiers ("extern" "\"C\"")
                :constant-flag t)
                (reparse-symbol extern-c-contents) [7945 7953])
            ("xiscntrl" variable
               (:typemodifiers ("extern" "\"C\"")
                :constant-flag t)
                (reparse-symbol extern-c-contents) [7908 7916])
            ("xisalnum" variable
               (:typemodifiers ("extern" "\"C\"")
                :constant-flag t)
                (reparse-symbol extern-c-contents) [7871 7879])
            ("xisalpha" variable
               (:typemodifiers ("extern" "\"C\"")
                :constant-flag t)
                (reparse-symbol extern-c-contents) [7834 7842])
            ("xisascii" variable
               (:typemodifiers ("extern" "\"C\"")
                :constant-flag t)
                (reparse-symbol extern-c-contents) [7797 7805])
            ("string.h" include
               (:typemodifiers ("extern" "\"C\"")
                :system-flag t)
                (reparse-symbol extern-c-contents) [7746 7765])
            ("ctype.h" include
               (:typemodifiers ("extern" "\"C\"")
                :system-flag t)
                (reparse-symbol extern-c-contents) [7727 7745])
            ("zero_mem" variable
               (:typemodifiers ("extern" "\"C\"")
                :constant-flag t)
                (reparse-symbol extern-c-contents) [7467 7475])
            ("zero_array" variable
               (:typemodifiers ("extern" "\"C\"")
                :constant-flag t)
                (reparse-symbol extern-c-contents) [7415 7425])
            ("zero_var" variable
               (:typemodifiers ("extern" "\"C\"")
                :constant-flag t)
                (reparse-symbol extern-c-contents) [7364 7372])
            ("XNALLOCA" variable
               (:typemodifiers ("extern" "\"C\"")
                :constant-flag t)
                (reparse-symbol extern-c-contents) [7287 7295])
            ("XNCALLOC" variable
               (:typemodifiers ("extern" "\"C\"")
                :constant-flag t)
                (reparse-symbol extern-c-contents) [7223 7231])
            ("XNMALLOC" variable
               (:typemodifiers ("extern" "\"C\"")
                :constant-flag t)
                (reparse-symbol extern-c-contents) [7158 7166])
            ("XALLOCA" variable
               (:typemodifiers ("extern" "\"C\"")
                :constant-flag t)
                (reparse-symbol extern-c-contents) [7104 7111])
            ("XCALLOC" variable
               (:typemodifiers ("extern" "\"C\"")
                :constant-flag t)
                (reparse-symbol extern-c-contents) [7046 7053])
            ("XMALLOC" variable
               (:typemodifiers ("extern" "\"C\"")
                :constant-flag t)
                (reparse-symbol extern-c-contents) [6991 6998])
            ("xfree_null" variable
               (:typemodifiers ("extern" "\"C\"")
                :constant-flag t)
                (reparse-symbol extern-c-contents) [6921 6931])
            ("xfree" variable
               (:typemodifiers ("extern" "\"C\"")
                :constant-flag t)
                (reparse-symbol extern-c-contents) [6894 6899])
            ("xstrndup" variable
               (:typemodifiers ("extern" "\"C\"")
                :constant-flag t)
                (reparse-symbol extern-c-contents) [6869 6877])
            ("xstrdup" variable
               (:typemodifiers ("extern" "\"C\"")
                :constant-flag t)
                (reparse-symbol extern-c-contents) [6846 6853])
            ("xcalloc" variable
               (:typemodifiers ("extern" "\"C\"")
                :constant-flag t)
                (reparse-symbol extern-c-contents) [6823 6830])
            ("xrealloc" variable
               (:typemodifiers ("extern" "\"C\"")
                :constant-flag t)
                (reparse-symbol extern-c-contents) [6798 6806])
            ("xmalloc" variable
               (:typemodifiers ("extern" "\"C\"")
                :constant-flag t)
                (reparse-symbol extern-c-contents) [6775 6782])
            ("XNUM_TO_digit" variable
               (:typemodifiers ("extern" "\"C\"")
                :constant-flag t)
                (reparse-symbol extern-c-contents) [5540 5553])
            ("XNUM_TO_DIGIT" variable
               (:typemodifiers ("extern" "\"C\"")
                :constant-flag t)
                (reparse-symbol extern-c-contents) [5487 5500])
            ("X2DIGITS_TO_NUM" variable
               (:typemodifiers ("extern" "\"C\"")
                :constant-flag t)
                (reparse-symbol extern-c-contents) [5364 5379])
            ("XDIGIT_TO_NUM" variable
               (:typemodifiers ("extern" "\"C\"")
                :constant-flag t)
                (reparse-symbol extern-c-contents) [5290 5303])
            ("ISXDIGIT" variable
               (:typemodifiers ("extern" "\"C\"")
                :constant-flag t)
                (reparse-symbol extern-c-contents) [5151 5159])
            ("ISDIGIT" variable
               (:typemodifiers ("extern" "\"C\"")
                :constant-flag t)
                (reparse-symbol extern-c-contents) [5109 5116])
            ("lower_32_bits" variable
               (:typemodifiers ("extern" "\"C\"")
                :constant-flag t)
                (reparse-symbol extern-c-contents) [5056 5069])
            ("upper_32_bits" variable
               (:typemodifiers ("extern" "\"C\"")
                :constant-flag t)
                (reparse-symbol extern-c-contents) [4999 5012])
            ("countof" variable
               (:typemodifiers ("extern" "\"C\"")
                :constant-flag t)
                (reparse-symbol extern-c-contents) [4930 4937])
            ("deps/min-max.h" include (:typemodifiers ("extern" "\"C\"")) (reparse-symbol extern-c-contents) [4864 4889])
            ("TYPE_MAXIMUM" variable
               (:typemodifiers ("extern" "\"C\"")
                :constant-flag t)
                (reparse-symbol extern-c-contents) [3256 3268])
            ("FALSE" variable
               (:typemodifiers ("extern" "\"C\"")
                :constant-flag t)
                (reparse-symbol extern-c-contents) [3209 3214])
            ("TRUE" variable
               (:typemodifiers ("extern" "\"C\"")
                :constant-flag t)
                (reparse-symbol extern-c-contents) [3172 3176])
            ("INFINITE" variable
               (:typemodifiers ("extern" "\"C\"")
                :constant-flag t)
                (reparse-symbol extern-c-contents) [3122 3130])
            ("SIZE_T_MAX" variable
               (:typemodifiers ("extern" "\"C\"")
                :constant-flag t)
                (reparse-symbol extern-c-contents) [3069 3079])
            ("UINT64_MAX" variable
               (:typemodifiers ("extern" "\"C\"")
                :constant-flag t)
                (reparse-symbol extern-c-contents) [2980 2990])
            ("INT64_MIN" variable
               (:typemodifiers ("extern" "\"C\"")
                :constant-flag t)
                (reparse-symbol extern-c-contents) [2908 2917])
            ("INT64_MAX" variable
               (:typemodifiers ("extern" "\"C\"")
                :constant-flag t)
                (reparse-symbol extern-c-contents) [2862 2871])
            ("UINT64_C" variable
               (:typemodifiers ("extern" "\"C\"")
                :constant-flag t)
                (reparse-symbol extern-c-contents) [2809 2817])
            ("INT64_C" variable
               (:typemodifiers ("extern" "\"C\"")
                :constant-flag t)
                (reparse-symbol extern-c-contents) [2760 2767])
            ("stdint.h" include
               (:typemodifiers ("extern" "\"C\"")
                :system-flag t)
                (reparse-symbol extern-c-contents) [2691 2710])
            ("ulong" type
               (:typemodifiers ("extern" "\"C\"")
                :type "typedef"
                :superclasses "unsigned long"
                :typedef ("unsigned long"))
                (reparse-symbol extern-c-contents) [2119 2149])
            ("uint" type
               (:typemodifiers ("extern" "\"C\"")
                :type "typedef"
                :superclasses "unsigned int"
                :typedef ("unsigned int"))
                (reparse-symbol extern-c-contents) [2089 2118])
            ("ushort" type
               (:typemodifiers ("extern" "\"C\"")
                :type "typedef"
                :superclasses "unsigned short"
                :typedef ("unsigned short"))
                (reparse-symbol extern-c-contents) [2057 2088])
            ("byte" type
               (:typemodifiers ("extern" "\"C\"")
                :type "typedef"
                :superclasses "unsigned char"
                :typedef ("unsigned char"))
                (reparse-symbol extern-c-contents) [2027 2056])
            ("limits.h" include
               (:typemodifiers ("extern" "\"C\"")
                :system-flag t)
                (reparse-symbol extern-c-contents) [1950 1969])
            ("Shlwapi.h" include
               (:typemodifiers ("extern" "\"C\"")
                :system-flag t)
                (reparse-symbol extern-c-contents) [1684 1704])
            ("windows.h" include
               (:typemodifiers ("extern" "\"C\"")
                :system-flag t)
                (reparse-symbol extern-c-contents) [1663 1683])
            ("assert.h" include
               (:typemodifiers ("extern" "\"C\"")
                :system-flag t)
                (reparse-symbol extern-c-contents) [1588 1607])
            ("stdlib.h" include
               (:typemodifiers ("extern" "\"C\"")
                :system-flag t)
                (reparse-symbol extern-c-contents) [1568 1587])
            ("stdio.h" include
               (:typemodifiers ("extern" "\"C\"")
                :system-flag t)
                (reparse-symbol extern-c-contents) [1549 1567])
            ("cutil_exit" function
               (:typemodifiers ("extern" "\"C\"")
                :type "void"
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [1296 1314])
            ("cutil_init" function
               (:typemodifiers ("extern" "\"C\"")
                :type "void"
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [1277 1295]))          
      :file "cutil.h"
      :pointmax 33562
      :fsize 40846
      :lastmodtime '(20901 64880 194608 470000)
      :unmatched-syntax '((semantic-list 33181 . 33212) (symbol 33171 . 33181) (INT 33165 . 33168) (number 29281 . 29282) (number 29279 . 29280) (semantic-list 29223 . 29264) (symbol 29213 . 29223) (VOID 29208 . 29212) (number 29187 . 29188) (number 29185 . 29186) (semantic-list 29140 . 29170) (symbol 29129 . 29140) (VOID 29124 . 29128) (TYPEDEF 23800 . 23807) (TYPEDEF 16736 . 16743) (TYPEDEF 16626 . 16633) (TYPEDEF 14736 . 14743) (TYPEDEF 13364 . 13371) (TYPEDEF 13056 . 13063) (semantic-list 11593 . 11633) (symbol 11586 . 11593) (string 11594 . 11632) (symbol 11579 . 11585) (string 11594 . 11632) (punctuation 11578 . 11579))
      :lexical-table 
        '(("XCALLOC" (spp-arg-list ("type") 7053 . 7059) . ((semantic-list "((type *)xcalloc(1, sizeof (type)))" 7060 . 7095)))
          ("xisdigit" (spp-arg-list ("c") 7953 . 7956) . ((symbol "isdigit" 7957 . 7964) (semantic-list "((byte)c)" 7964 . 7973)))
          ("xisprint" (spp-arg-list ("c") 8064 . 8067) . ((symbol "isprint" 8068 . 8075) (semantic-list "((byte)c)" 8075 . 8084)))
          ("seek_off_t" . ((LONG "long" 11573 . 11577)))
          ("X2DIGITS_TO_NUM" (spp-arg-list ("h1" "h2") 5379 . 5387) . ((semantic-list "((XDIGIT_TO_NUM (h1) << 4) + XDIGIT_TO_NUM (h2))" 5388 . 5436)))
          ("XNUM_TO_DIGIT" (spp-arg-list ("x") 5500 . 5503) . ((semantic-list "(\"0123456789ABCDEF\"[x] + 0)" 5504 . 5531)))
          ("xrealloc" . ((symbol "realloc" 6807 . 6814)))
          ("xisalpha" (spp-arg-list ("c") 7842 . 7845) . ((symbol "isalpha" 7846 . 7853) (semantic-list "((byte)c)" 7853 . 7862)))
          ("log_dprintf" (spp-arg-list ("level" "fmt" "...") 29998 . 30015) . ((symbol "log_printf" 30016 . 30026) (semantic-list "(0, level, fmt, ##__VA_ARGS__)" 30026 . 30056)))
          ("TRUE" . ((number "1" 3177 . 3178)))
          ("xispunct" (spp-arg-list ("c") 8101 . 8104) . ((symbol "ispunct" 8105 . 8112) (semantic-list "((byte)c)" 8112 . 8121)))
          ("STRNIEQ" (spp-arg-list ("a" "b" "n") 8440 . 8449) . ((semantic-list "(toupper(*(a)) == toupper(*(b)) && strncasecmp((a), (b), (n)) == 0)" 8453 . 8520)))
          ("touch" (spp-arg-list ("file") 16414 . 16420) . ((symbol "write_mem_file" 16421 . 16435) (semantic-list "(file, \"\", 0)" 16435 . 16448)))
          ("INT64_C" (spp-arg-list ("x") 2767 . 2770) . ((spp-symbol-merge ((symbol "x" 2771 . 2772) (symbol "LL" 2774 . 2776)) 2771 . 2776)))
          ("FALSE" . ((number "0" 3215 . 3216)))
          ("TYPE_MAXIMUM" (spp-arg-list ("t") 3268 . 3271) . ((semantic-list "((t) (~ (~ (t) 0 << (sizeof (t) * CHAR_BIT - 1))))" 3272 . 3322)))
          ("xstrdup" . ((symbol "strdup" 6854 . 6860)))
          ("PATH_SEP_WCHAR" . ((string "L'/'" 11144 . 11148)))
          ("UINT64_MAX" . ((symbol "UINT64_C" 2991 . 2999) (semantic-list "(0xFFFFFFFFFFFFFFFF)" 2999 . 3019)))
          ("upper_32_bits" (spp-arg-list ("n") 5012 . 5015) . ((semantic-list "((uint32_t)(((n) >> 16) >> 16))" 5016 . 5047)))
          ("XALLOCA" (spp-arg-list ("type") 7111 . 7117) . ((semantic-list "((type *)alloca(sizeof(type)))" 7118 . 7148)))
          ("xislower" (spp-arg-list ("c") 8027 . 8030) . ((symbol "islower" 8031 . 8038) (semantic-list "((byte)c)" 8038 . 8047)))
          ("xisspace" (spp-arg-list ("c") 8138 . 8141) . ((symbol "isspace" 8142 . 8149) (semantic-list "((byte)c)" 8149 . 8158)))
          ("xstrncpy" (spp-arg-list ("d" "s" "n") 8574 . 8581) . 
              ((DO "do" 8582 . 8584) (semantic-list "{\\
	strncpy(d,s,n);	\\
	d[n-1] = '\\0';	\\
	}" 8585 . 8627) (WHILE "while" 8627 . 8632) (semantic-list "(0)" 8632 . 8635)))
          ("THREAD_CALLTYPE")
          ("VERIFY" (spp-arg-list ("x") 27277 . 27280) . 
              ((IF "if" 27281 . 27283) (semantic-list "(!(x))" 27284 . 27290) (semantic-list "{fatal_exit(\"VERIFY FAILED : \"#x);}" 27290 . 27325)))
          ("INFINITE" . ((symbol "0xFFFFFFFFU" 3131 . 3142)))
          ("xmalloc" . ((symbol "malloc" 6783 . 6789)))
          ("MIN_PATH" . ((number "1" 11249 . 11250)))
          ("xcalloc" . ((symbol "calloc" 6831 . 6837)))
          ("xstrndup" . ((symbol "strndup" 6878 . 6885)))
          ("xfree_null" (spp-arg-list ("p") 6931 . 6934) . 
              ((DO "do" 6935 . 6937) (semantic-list "{ if (p) xfree (p); }" 6937 . 6958) (WHILE "while" 6958 . 6963) (semantic-list "(0)" 6963 . 6966) (punctuation ";" 6966 . 6967)))
          ("XNMALLOC" (spp-arg-list ("n" "type") 7166 . 7175) . ((semantic-list "((type *)xmalloc((n) * sizeof (type)))" 7176 . 7214)))
          ("xisascii" (spp-arg-list ("c") 7805 . 7808) . ((symbol "isascii" 7809 . 7816) (semantic-list "((byte)c)" 7816 . 7825)))
          ("BOUNDED_TO_ALLOCA" (spp-arg-list ("beg" "end" "place") 10267 . 10284) . 
              ((DO "do" 10285 . 10287) (semantic-list "{		\\
	const char *BTA_beg = (beg);					\\
	int BTA_len = (end) - BTA_beg;					\\
	char **BTA_dest = &(place);						\\
	*BTA_dest = (char*)alloca (BTA_len + 1);		\\
	memcpy (*BTA_dest, BTA_beg, BTA_len);			\\
	(*BTA_dest)[BTA_len] = '\\0';					\\
}" 10288 . 10528) (WHILE "while" 10529 . 10534) (semantic-list "(0)" 10535 . 10538)))
          ("PATH_SEP_WSTR" . ((string "L\"/\"" 11198 . 11202)))
          ("SIZE_T_MAX" . ((symbol "UINT_MAX" 3080 . 3088)))
          ("lower_32_bits" (spp-arg-list ("n") 5069 . 5072) . ((semantic-list "((uint32_t)(n))" 5073 . 5088)))
          ("xfree" . ((symbol "free" 6900 . 6904)))
          ("XNCALLOC" (spp-arg-list ("n" "type") 7231 . 7240) . ((semantic-list "((type *)xcalloc((n), sizeof (type)))" 7241 . 7278)))
          ("STREQ" (spp-arg-list ("a" "b") 8249 . 8255) . ((semantic-list "(*(a) == *(b) && strcmp((a), (b)) == 0)" 8256 . 8295)))
          ("XDIGIT_TO_NUM" (spp-arg-list ("h") 5303 . 5306) . ((semantic-list "((h) < 'A' ? (h) - '0' : toupper (h) - 'A' + 10)" 5307 . 5355)))
          ("zero_var" (spp-arg-list ("x") 7372 . 7375) . ((symbol "memset" 7376 . 7382) (semantic-list "(&(x), '\\0', sizeof(x))" 7383 . 7406)))
          ("xisalnum" (spp-arg-list ("c") 7879 . 7882) . ((symbol "isalnum" 7883 . 7890) (semantic-list "((byte)c)" 7890 . 7899)))
          ("xiscntrl" (spp-arg-list ("c") 7916 . 7919) . ((symbol "iscntrl" 7920 . 7927) (semantic-list "((byte)c)" 7927 . 7936)))
          ("xisupper" (spp-arg-list ("c") 8175 . 8178) . ((symbol "isupper" 8179 . 8186) (semantic-list "((byte)c)" 8186 . 8195)))
          ("strdup_null" (spp-arg-list ("x") 8956 . 8959) . ((semantic-list "((x) ? xstrdup(x) : NULL)" 8960 . 8985)))
          ("LINE_END_STR" . ((string "\"\\r\"" 11225 . 11229)))
          ("countof" (spp-arg-list ("arr") 4937 . 4942) . ((semantic-list "(sizeof(arr) / sizeof((arr)[0]))" 4943 . 4975)))
          ("zero_array" (spp-arg-list ("x") 7425 . 7428) . ((symbol "memset" 7429 . 7435) (semantic-list "((x), '\\0', sizeof(x))" 7436 . 7458)))
          ("PATH_SEP_STR" . ((string "\"/\"" 11171 . 11174)))
          ("TIME_BUFSIZE" . ((number "64" 17920 . 17922)))
          ("ASSERT" (spp-arg-list ("x") 27247 . 27250) . ((semantic-list "(x)" 27251 . 27254)))
          ("__CUTIL_H")
          ("INT64_MAX" . ((symbol "INT64_C" 2872 . 2879) (semantic-list "(0x7FFFFFFFFFFFFFFF)" 2879 . 2899)))
          ("TIME_UNIT_MAX" . ((number "20" 17581 . 17583)))
          ("MAX_CHARSET" . ((number "10" 18911 . 18913)))
          ("CONDVAR_UNSUPPORT" . ((number "1" 25741 . 25742)))
          ("log_dclose" (spp-arg-list nil 29469 . 29471) . ((symbol "log_close" 29472 . 29481) (semantic-list "(0)" 29481 . 29484)))
          ("UINT64_C" (spp-arg-list ("x") 2817 . 2820) . ((spp-symbol-merge ((symbol "x" 2821 . 2822) (symbol "ULL" 2824 . 2827)) 2821 . 2827)))
          ("INT64_MIN" . ((symbol "INT64_C" 2918 . 2925) (semantic-list "(0x8000000000000000)" 2925 . 2945)))
          ("ISDIGIT" (spp-arg-list ("c") 5116 . 5119) . ((semantic-list "(c >= '0' && c <= '9')" 5120 . 5142)))
          ("XNALLOCA" (spp-arg-list ("n" "type") 7295 . 7304) . ((semantic-list "((type *)alloca ((n) * sizeof (type)))" 7305 . 7343)))
          ("xisxdigit" (spp-arg-list ("c") 8213 . 8216) . ((symbol "isxdigit" 8217 . 8225) (semantic-list "((byte)c)" 8225 . 8234)))
          ("STRIEQ" (spp-arg-list ("a" "b") 8333 . 8339) . ((semantic-list "(toupper(*(a)) == toupper(*(b)) && strcasecmp((a), (b)) == 0)" 8343 . 8404)))
          ("INVALID_THREAD" . ((number "0" 23777 . 23778)))
          ("LOG_INVALID" . ((punctuation "-" 28450 . 28451) (number "1" 28451 . 28452)))
          ("log_dflush" (spp-arg-list nil 29379 . 29381) . ((symbol "log_flush" 29382 . 29391) (semantic-list "(0)" 29391 . 29394)))
          ("ISXDIGIT" (spp-arg-list ("c") 5159 . 5162) . ((semantic-list "(((c >= '0' && c <= '9') || ((c & ~0x20) >= 'A' && (c & ~0x20) <= 'F')) ? 1 : 0)" 5163 . 5243)))
          ("XNUM_TO_digit" (spp-arg-list ("x") 5553 . 5556) . ((semantic-list "(\"0123456789abcdef\"[x] + 0)" 5557 . 5584)))
          ("XMALLOC" (spp-arg-list ("type") 6998 . 7004) . ((semantic-list "((type *)xmalloc(sizeof (type)))" 7005 . 7037)))
          ("zero_mem" (spp-arg-list ("x" "n") 7475 . 7480) . ((symbol "memset" 7481 . 7487) (semantic-list "((x), '\\0', (n))" 7487 . 7503)))
          ("xisgraph" (spp-arg-list ("c") 7990 . 7993) . ((symbol "isgraph" 7994 . 8001) (semantic-list "((byte)c)" 8001 . 8010)))
          ("PATH_SEP_CHAR" . ((string "'/'" 11116 . 11119)))
          ("TIME_SPAN_BUFSIZE" . ((number "128" 17979 . 17982)))
          ("INVALID_PROCESS" . ((number "0" 22896 . 22897)))
          ("MAX_LOGS" . ((number "100" 28395 . 28398)))
          )
)
    (semanticdb-table "config.h"
      :major-mode 'c-mode
      :tags 
        '( ("CONFIG_UTIL_H" variable (:constant-flag t) nil [220 233])
            ("deps/platform-arch.h" include nil nil [237 268])
            ("PACKAGE_NAME_EN" variable (:constant-flag t) nil [508 523])
            ("PACKAGE_NAME" variable (:constant-flag t) nil [549 561])
            ("PACKAGE_VERSION" variable (:constant-flag t) nil [590 605])
            ("USE_DEBUG_LOG" variable (:constant-flag t) nil [1178 1191])
            ("USE_UTF8_STR" variable (:constant-flag t) nil [1266 1278])
            ("USE_CRASH_DUMP" variable (:constant-flag t) nil [1372 1386])
            ("curl/curl.h" include
               (:typemodifiers ("extern" "\"C\"")
                :system-flag t)
                (reparse-symbol extern-c-contents) [2956 2978])
            ("pcre.h" include
               (:typemodifiers ("extern" "\"C\"")
                :system-flag t)
                (reparse-symbol extern-c-contents) [2831 2848])
            ("zlib.h" include
               (:typemodifiers ("extern" "\"C\"")
                :system-flag t)
                (reparse-symbol extern-c-contents) [2730 2747])
            ("CUnit/Basic.h" include
               (:typemodifiers ("extern" "\"C\"")
                :system-flag t)
                (reparse-symbol extern-c-contents) [2601 2625])
            ("CUnit/Console.h" include
               (:typemodifiers ("extern" "\"C\"")
                :system-flag t)
                (reparse-symbol extern-c-contents) [2573 2599])
            ("CUnit/Automated.h" include
               (:typemodifiers ("extern" "\"C\"")
                :system-flag t)
                (reparse-symbol extern-c-contents) [2543 2571])
            ("CUnit/CUnit.h" include
               (:typemodifiers ("extern" "\"C\"")
                :system-flag t)
                (reparse-symbol extern-c-contents) [2517 2541])
            ("_cstr" variable
               (:typemodifiers ("extern" "\"C\"")
                :constant-flag t)
                (reparse-symbol extern-c-contents) [2296 2301])
            ("_ws" variable
               (:typemodifiers ("extern" "\"C\"")
                :constant-flag t)
                (reparse-symbol extern-c-contents) [2276 2279])
            ("_s" variable
               (:typemodifiers ("extern" "\"C\"")
                :constant-flag t)
                (reparse-symbol extern-c-contents) [2257 2259])
            ("_" variable
               (:typemodifiers ("extern" "\"C\"")
                :constant-flag t)
                (reparse-symbol extern-c-contents) [2239 2240])
            ("libintl.h" include
               (:typemodifiers ("extern" "\"C\"")
                :system-flag t)
                (reparse-symbol extern-c-contents) [1926 1946])
            ("_LIBICONV_H" variable
               (:typemodifiers ("extern" "\"C\"")
                :constant-flag t)
                (reparse-symbol extern-c-contents) [1814 1825])
            ("iconv.h" include
               (:typemodifiers ("extern" "\"C\"")
                :system-flag t)
                (reparse-symbol extern-c-contents) [1766 1784])
            ("deps/ConvertUTF.h" include (:typemodifiers ("extern" "\"C\"")) (reparse-symbol extern-c-contents) [1658 1686]))          
      :file "config.h"
      :pointmax 3464
      :fsize 4052
      :lastmodtime '(20901 49666 97479 866000)
      :unmatched-syntax nil
      :lexical-table 
        '(("USE_UTF8_STR" . ((number "1" 1280 . 1281)))
          ("PACKAGE_VERSION" . ((string "\"1.6.0.82\"" 607 . 617)))
          ("_ws" (spp-arg-list ("x") 2279 . 2282) . ((semantic-list "(x)" 2283 . 2286)))
          ("USE_DEBUG_LOG" . ((number "1" 1193 . 1194)))
          ("_" (spp-arg-list ("x") 2240 . 2243) . ((semantic-list "(x)" 2244 . 2247)))
          ("CONFIG_UTIL_H")
          ("PACKAGE_NAME_EN" . ((string "\"SafeSiteTask\"" 525 . 539)))
          ("PACKAGE_NAME" . ((symbol "_" 563 . 564) (semantic-list "(\"SafeSiteTask\")" 564 . 580)))
          ("_cstr" (spp-arg-list ("x") 2301 . 2304) . ((semantic-list "(x)" 2305 . 2308)))
          ("USE_CRASH_DUMP" . ((number "1" 1388 . 1389)))
          ("_LIBICONV_H" . ((number "1" 1826 . 1827)))
          ("_s" (spp-arg-list ("x") 2259 . 2262) . ((semantic-list "(x)" 2263 . 2266)))
          )
))
  :file "!home!revir!workspace!safesitetask!utils!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2")

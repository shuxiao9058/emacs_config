;; Object cedet/
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "cedet/"
  :tables
  (list
    (semanticdb-table "pulse.el"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("pulse-available-p" function nil nil [1938 2155])
            ("pulse-flag" variable (:default-value (pulse-available-p)) nil [2157 2642])
            ("pulse-highlight-start-face" variable
               (:default-value (quote ((((class color) (background dark)) (:background "#AAAA33")) (((class color) (background light)) (:background "#FFFFAA"))))
                :type "face")
                nil [2644 2879])
            ("pulse-highlight-face" variable
               (:default-value (quote ((((class color) (background dark)) (:background "#AAAA33")) (((class color) (background light)) (:background "#FFFFAA"))))
                :type "face")
                nil [2881 3186])
            ("pulse-int-to-hex" function (:arguments ("int" "nb-digits")) nil [3201 3880])
            ("pulse-color-values-to-hex" function (:arguments ("values")) nil [3882 4372])
            ("pulse-iterations" variable (:default-value 10) nil [4381 4491])
            ("pulse-delay" variable (:default-value 0.03) nil [4492 4619])
            ("pulse-lighten-highlight" function nil nil [4621 5603])
            ("pulse-reset-face" function (:arguments ("face")) nil [5605 5965])
            ("pulse" function (:arguments ("face")) nil [5967 6332])
            ("pulse-momentary-overlay" variable nil nil [6363 6432])
            ("pulse-momentary-highlight-overlay" function (:arguments ("o" "face")) nil [6434 7328])
            ("pulse-momentary-unhighlight" function nil nil [7330 8078])
            ("pulse-momentary-highlight-one-line" function (:arguments ("point" "face")) nil [8080 8481])
            ("pulse-momentary-highlight-region" function (:arguments ("start" "end" "face")) nil [8483 8839])
            ("pulse-command-advice-flag" variable nil nil [8882 8920])
            ("pulse-line-hook-function" function nil nil [8922 9159])
            ("pulse" package nil nil [9161 9177]))          
      :file "pulse.el"
      :pointmax 9202
      :fsize 9201
      :lastmodtime '(20910 56098 347464 0)
      :unmatched-syntax nil)
    (semanticdb-table "semantic.el"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("cedet" include nil nil [1379 1395])
            ("semantic/tag" include nil nil [1396 1419])
            ("semantic/lex" include nil nil [1420 1443])
            ("semantic-version" variable (:default-value "2.2") nil [1445 1509])
            ("declare-function" code nil nil [1511 1556])
            ("declare-function" code nil nil [1557 1628])
            ("semantic-require-version" function (:arguments ("major" "minor" "beta")) nil [1630 2208])
            ("semantic" customgroup (:user-visible-flag t) nil [2210 2292])
            ("semantic-faces" customgroup (:user-visible-flag t) nil [2294 2385])
            ("semantic/fw" include nil nil [2387 2409])
            ("semantic--parse-table" variable nil nil [2460 2655])
            ("make-variable-buffer-local" code nil nil [2656 2707])
            ("semantic-varalias-obsolete" code nil nil [2708 2805])
            ("semantic-symbol->name-assoc-list" variable (:default-value (quote ((type . "Types") (variable . "Variables") (function . "Functions") (include . "Dependencies") (package . "Provides")))) nil [2807 3346])
            ("make-variable-buffer-local" code nil nil [3347 3409])
            ("semantic-symbol->name-assoc-list-for-type-parts" variable nil nil [3411 3845])
            ("make-variable-buffer-local" code nil nil [3846 3923])
            ("semantic-case-fold" variable nil nil [3925 4003])
            ("make-variable-buffer-local" code nil nil [4004 4052])
            ("semantic-expand-nonterminal" variable nil nil [4054 4546])
            ("make-variable-buffer-local" code nil nil [4547 4604])
            ("semantic--buffer-cache" variable nil nil [4606 5019])
            ("make-variable-buffer-local" code nil nil [5020 5072])
            ("semantic-varalias-obsolete" code nil nil [5073 5171])
            ("semantic-unmatched-syntax-cache" variable nil nil [5173 5263])
            ("make-variable-buffer-local" code nil nil [5264 5325])
            ("semantic-unmatched-syntax-cache-check" variable nil nil [5327 5484])
            ("make-variable-buffer-local" code nil nil [5485 5552])
            ("semantic-edits-are-safe" variable nil nil [5554 5904])
            ("semantic-unmatched-syntax-hook" variable nil nil [5906 6531])
            ("semantic--before-fetch-tags-hook" variable nil nil [6533 6831])
            ("semantic-varalias-obsolete" code nil nil [6832 6950])
            ("semantic-after-toplevel-bovinate-hook" variable nil nil [6952 7311])
            ("make-obsolete-variable" code nil nil [7312 7386])
            ("semantic-after-toplevel-cache-change-hook" variable nil nil [7388 7828])
            ("semantic-before-toplevel-cache-flush-hook" variable nil nil [7830 8180])
            ("semantic-dump-parse" variable nil nil [8182 8297])
            ("semantic-parser-name" variable (:default-value "LL") nil [8299 8393])
            ("make-variable-buffer-local" code nil nil [8394 8444])
            ("semantic--completion-cache" variable nil nil [8446 8543])
            ("make-variable-buffer-local" code nil nil [8544 8600])
            ("semantic-parse-tree-state" variable (:default-value (quote needs-rebuild)) nil [8642 8728])
            ("make-variable-buffer-local" code nil nil [8729 8784])
            ("semantic-parse-tree-unparseable" function nil nil [8786 9069])
            ("semantic-parse-tree-unparseable-p" function nil nil [9071 9235])
            ("semantic-parse-tree-set-needs-update" function nil nil [9237 9458])
            ("semantic-parse-tree-needs-update-p" function nil nil [9460 9622])
            ("semantic-parse-tree-set-needs-rebuild" function nil nil [9624 9847])
            ("semantic-parse-tree-needs-rebuild-p" function nil nil [9849 10013])
            ("semantic-parse-tree-set-up-to-date" function nil nil [10015 10159])
            ("semantic-parse-tree-up-to-date-p" function nil nil [10161 10303])
            ("semantic-inhibit-functions" variable nil nil [10340 10581])
            ("semantic-new-buffer-setup-functions" variable (:default-value (quote ((emacs-lisp-mode . semantic-default-elisp-setup) (c-mode . semantic-default-c-setup) (c++-mode . semantic-default-c-setup) (arduino-mode . semantic-default-c-setup) (html-mode . semantic-default-html-setup) (java-mode . wisent-java-default-setup) (js-mode . wisent-javascript-setup-parser) (python-mode . wisent-python-default-setup) (scheme-mode . semantic-default-scheme-setup) (f90-mode . semantic-default-f90-setup) (srecode-template-mode . srecode-template-setup-parser) (texinfo-mode . semantic-default-texi-setup) (makefile-automake-mode . semantic-default-make-setup) (makefile-gmake-mode . semantic-default-make-setup) (makefile-makepp-mode . semantic-default-make-setup) (makefile-bsdmake-mode . semantic-default-make-setup) (makefile-imake-mode . semantic-default-make-setup) (makefile-mode . semantic-default-make-setup)))) nil [10583 11957])
            ("semantic-init-hook" variable nil nil [11959 12054])
            ("semantic-init-mode-hook" variable nil nil [12056 12156])
            ("make-variable-buffer-local" code nil nil [12157 12210])
            ("semantic-init-db-hook" variable nil nil [12212 12482])
            ("semantic-varalias-obsolete" code nil nil [12484 12567])
            ("semantic-varalias-obsolete" code nil nil [12568 12661])
            ("semantic-varalias-obsolete" code nil nil [12662 12751])
            ("semantic-new-buffer-fcn-was-run" variable nil nil [12753 12860])
            ("make-variable-buffer-local" code nil nil [12861 12922])
            ("semantic-active-p" function nil nil [12924 13054])
            ("semantic-error-if-unparsed" function nil nil [13056 13253])
            ("semantic--umatched-syntax-needs-refresh-p" function nil nil [13255 13540])
            ("semantic-new-buffer-fcn" function nil nil [13542 15166])
            ("semantic-fetch-tags-fast" function nil nil [15168 15412])
            ("condition-case" code nil nil [15460 15506])
            ("semantic-edebug" variable nil nil [15509 15648])
            ("semantic-elapsed-time" function (:arguments ("start" "end")) nil [15650 15841])
            ("bovinate" function
               (:user-visible-flag t
                :arguments ("clear"))
                nil [15843 16562])
            ("semantic-parse-stream" function
               (:overloadable t
                :arguments ("stream" "nonterminal"))
                nil [16671 17257])
            ("semantic-parse-changes" function (:overloadable t) nil [17259 17506])
            ("semantic-parse-region" function
               (:overloadable t
                :arguments ("start" "end" "nonterminal" "depth" "returnonerror"))
                nil [17508 18338])
            ("semantic-parse-region-default" function (:arguments ("start" "end" "nonterminal" "depth" "returnonerror")) nil [18340 19392])
            ("semantic-set-unmatched-syntax-cache" function (:arguments ("unmatched-syntax")) nil [19420 19967])
            ("semantic-clear-unmatched-syntax-cache" function nil nil [19969 20158])
            ("semantic-unmatched-syntax-tokens" function nil nil [20160 20783])
            ("semantic-clear-toplevel-cache" function (:user-visible-flag t) nil [20785 21799])
            ("semantic-bovinate-nonterminal-check-obarray" variable nil nil [21801 21853])
            ("semantic--set-buffer-cache" function (:arguments ("tagtable")) nil [21855 22746])
            ("semantic-working-type" variable (:default-value (quote percent)) nil [22748 22950])
            ("semantic-varalias-obsolete" code nil nil [22951 23050])
            ("semantic-minimum-working-buffer-size" variable (:default-value (* 1024 5)) nil [23052 23291])
            ("semantic-parser-working-message" function (:arguments ("arg")) nil [23293 23608])
            ("semantic-fetch-tags" function nil nil [23831 26793])
            ("semantic-refresh-tags-safe" function nil nil [26795 28104])
            ("semantic-bovinate-toplevel" function (:arguments ("ignored")) nil [28106 28221])
            ("make-obsolete" code nil nil [28222 28293])
            ("semantic-fetch-available-tags" function nil nil [28554 28994])
            ("semantic-repeat-parse-whole-stream" function (:arguments ("stream" "nonterm" "returnonerror")) nil [29267 31480])
            ("semantic-parser-warnings" variable nil nil [31756 31852])
            ("make-variable-buffer-local" code nil nil [31853 31907])
            ("semantic-clear-parser-warnings" function nil nil [31909 32051])
            ("semantic-push-parser-warning" function (:arguments ("warning" "start" "end")) nil [32053 32276])
            ("semantic-dump-parser-warnings" function (:user-visible-flag t) nil [32278 32597])
            ("semantic-bovinate-region-until-error" function (:arguments ("start" "end" "nonterm" "depth")) nil [32789 33398])
            ("make-obsolete" code nil nil [33399 33497])
            ("semantic-bovinate-from-nonterminal" function (:arguments ("start" "end" "nonterm" "depth" "length")) nil [33499 34044])
            ("semantic-bovinate-from-nonterminal-full" function (:arguments ("start" "end" "nonterm" "depth")) nil [34046 34622])
            ("make-obsolete" code nil nil [34623 34724])
            ("semantic-force-refresh" function (:user-visible-flag t) nil [34746 34999])
            ("semantic-mode-map" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map ",j" (quote semantic-complete-jump-local)) (define-key map ",J" (quote semantic-complete-jump)) (define-key map ",m" (quote semantic-complete-jump-local-members)) (define-key map ",g" (quote semantic-symref-symbol)) (define-key map ",G" (quote semantic-symref)) (define-key map ",p" (quote senator-previous-tag)) (define-key map ",n" (quote senator-next-tag)) (define-key map ",u" (quote senator-go-to-up-reference)) (define-key map ", " (quote semantic-complete-analyze-inline)) (define-key map "," (quote senator-kill-tag)) (define-key map ",\367" (quote senator-copy-tag)) (define-key map "," (quote senator-yank-tag)) (define-key map ",r" (quote senator-copy-tag-to-register)) (define-key map ",," (quote semantic-force-refresh)) (define-key map [3 44 up] (quote senator-transpose-tags-up)) (define-key map [3 44 down] (quote senator-transpose-tags-down)) (define-key map ",l" (quote semantic-analyze-possible-completions)) (define-key map [menu-bar cedet-menu] (list (quote menu-item) "Development" cedet-menu-map :enable (quote (not (and menu-bar-mode (bound-and-true-p global-ede-mode)))))) map)) nil [35001 36615])
            ("let" code nil nil [36666 43153])
            ("semantic-load-system-cache-loaded" variable nil nil [43305 43467])
            ("semantic-submode-list" variable
               (:constant-flag t
                :default-value (quote (global-semantic-highlight-func-mode global-semantic-decoration-mode global-semantic-stickyfunc-mode global-semantic-idle-completions-mode global-semantic-idle-scheduler-mode global-semanticdb-minor-mode global-semantic-idle-summary-mode global-semantic-mru-bookmark-mode global-cedet-m3-minor-mode global-semantic-idle-local-symbol-highlight-mode global-semantic-highlight-edits-mode global-semantic-show-unmatched-syntax-mode global-semantic-show-parser-state-mode)))
                nil [43469 44079])
            ("semantic-default-submodes" variable (:default-value (quote (global-semantic-idle-scheduler-mode global-semanticdb-minor-mode))) nil [44096 45749])
            ("define-minor-mode" code nil nil [45766 48370])
            ("semantic-completion-at-point-function" function nil nil [48372 48451])
            ("global-semantic-idle-completions-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [48516 48730])
            ("semantic-idle-completions-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [48732 49142])
            ("global-semantic-idle-summary-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [49144 49350])
            ("semantic-idle-summary-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [49352 49867])
            ("global-semantic-idle-local-symbol-highlight-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [49869 50157])
            ("srecode-template-setup-parser" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [50159 50287])
            ("semantic" package nil nil [50289 50308])
            ("semantic/util" include nil nil [50410 50434]))          
      :file "semantic.el"
      :pointmax 50491
      :fsize 50490
      :lastmodtime '(20910 56098 347464 0)
      :unmatched-syntax '((close-paren 15506 . 15507) (symbol 15440 . 15457) (open-paren 15439 . 15440)))
    (semanticdb-table "working.el"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("custom" include nil nil [3942 3959])
            ("fame" include nil nil [3960 3975])
            ("working" customgroup (:user-visible-flag t) nil [3987 4077])
            ("working-status-percentage-type" variable
               (:user-visible-flag t
                :default-value (quote working-bar-percent-display))
                nil [4114 4797])
            ("working-status-dynamic-type" variable
               (:user-visible-flag t
                :default-value (quote working-celeron-display))
                nil [4799 5492])
            ("working-percentage-step" variable
               (:user-visible-flag t
                :default-value 2)
                nil [5494 5718])
            ("if" code nil nil [5846 6028])
            ("working-mode-line-message" variable nil nil [6030 6134])
            ("if" code nil nil [6136 6707])
            ("working-use-echo-area-p" variable
               (:user-visible-flag t
                :default-value t)
                nil [6709 6803])
            ("working-message" variable nil nil [6837 6907])
            ("working-donestring" variable nil nil [6908 6985])
            ("working-ref1" variable nil nil [6986 7057])
            ("working-last-percent" variable nil nil [7058 7135])
            ("cond" code nil nil [7186 7395])
            ("working-noninteractive" function nil nil [7398 7568])
            ("working-message-echo" function (:arguments ("args")) nil [7570 7802])
            ("defalias" code nil nil [7804 7861])
            ("defalias" code nil nil [7862 7913])
            ("working-message" function (:arguments ("args")) nil [7915 8356])
            ("cond" code nil nil [8376 8878])
            ("working-status-forms" function (:arguments ("message" "donestr" "forms")) nil [8880 9585])
            ("put" code nil nil [9586 9637])
            ("working-status-timeout" function (:arguments ("timeout" "message" "donestr" "forms")) nil [9639 10665])
            ("put" code nil nil [10666 10719])
            ("working-status-call-process" function (:arguments ("timeout" "message" "donestr" "program" "infile" "buffer" "display" "args")) nil [10721 11709])
            ("working-status" function (:arguments ("percent" "args")) nil [11711 12501])
            ("working-dynamic-status" function (:arguments ("number" "args")) nil [12505 13151])
            ("working-message-frame-width" function nil nil [13170 13570])
            ("working-percent-display" function (:arguments ("length" "percent")) nil [13605 13998])
            ("working-bar-display" function (:arguments ("length" "percent")) nil [14000 14545])
            ("working-bar-percent-display" function (:arguments ("length" "percent")) nil [14547 15126])
            ("working-percent-bar-display" function (:arguments ("length" "percent")) nil [15128 15707])
            ("working-bubble-display" function (:arguments ("length" "percent")) nil [15709 16408])
            ("working-bubble-percent-display" function (:arguments ("length" "percent")) nil [16410 16989])
            ("working-celeron-percent-display" function (:arguments ("length" "percent")) nil [16991 17505])
            ("working-number-display" function (:arguments ("length" "number")) nil [17537 17919])
            ("working-text-display" function (:arguments ("length" "text")) nil [17921 18231])
            ("working-spinner-display" function (:arguments ("length" "number")) nil [18233 18645])
            ("working-dotgrowth-display" function (:arguments ("length" "number")) nil [18647 19220])
            ("working-frame-animation-display" function (:arguments ("length" "number" "frames")) nil [19222 20262])
            ("working-celeron-strings" variable (:default-value ["[O     ]" "[oO    ]" "[-oO   ]" "[ -oO  ]" "[  -oO ]" "[   -oO]" "[    -O]" "[     O]" "[    Oo]" "[   Oo-]" "[  Oo- ]" "[ Oo-  ]" "[Oo-   ]" "[O-    ]"]) nil [20264 20506])
            ("working-celeron-display" function (:arguments ("length" "number")) nil [20508 20990])
            ("working-bounce-strings" variable (:default-value ["[_         ]" "[ -        ]" "[  ~       ]" "[   -      ]" "[    _     ]" "[     -    ]" "[      ~   ]" "[       -  ]" "[        _ ]" "[         -]"]) nil [20992 21251])
            ("working-bounce-display" function (:arguments ("length" "number")) nil [21254 21733])
            ("add-hook" code nil nil [21760 21936])
            ("working-verify-parenthesis-a" function (:user-visible-flag t) nil [21978 22343])
            ("working-verify-parenthesis-b" function (:user-visible-flag t) nil [22346 22731])
            ("working-wait-for-keypress" function (:user-visible-flag t) nil [22733 23025])
            ("working-verify-sleep" function (:user-visible-flag t) nil [23027 23210])
            ("working-verify-mode-line" function (:user-visible-flag t) nil [23212 23451])
            ("working" package nil nil [23453 23471]))          
      :file "working.el"
      :pointmax 23672
      :fsize 23671
      :lastmodtime '(20910 56098 347464 0)
      :unmatched-syntax '((close-paren 7395 . 7396) (symbol 7166 . 7183) (open-paren 7165 . 7166)))
    (semanticdb-table "cedet.el"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("cl" include nil nil [1155 1168])
            ("declare-function" code nil nil [1171 1224])
            ("cedet-version" variable
               (:constant-flag t
                :default-value "2.0")
                nil [1226 1286])
            ("cedet-packages" variable
               (:constant-flag t
                :default-value (\` ((cedet (\, cedet-version) "common" "common") (eieio "1.4" nil "eieio") (semantic "2.2" nil "semantic/doc") (srecode "1.2" nil "srecode") (ede "1.2" nil "ede") (speedbar "1.0.4" nil "speedbar") (cogre "1.2" nil "cogre") (cedet-contrib "1.2" "contrib" nil))))
                nil [1288 1908])
            ("cedet-menu-map" variable (:default-value (let ((map (make-sparse-keymap "CEDET menu"))) (define-key map [semantic-force-refresh] (quote undefined)) (define-key map [semantic-edit-menu] (quote undefined)) (define-key map [navigate-menu] (quote undefined)) (define-key map [semantic-options-separator] (quote undefined)) (define-key map [global-semantic-highlight-func-mode] (quote undefined)) (define-key map [global-semantic-stickyfunc-mode] (quote undefined)) (define-key map [global-semantic-decoration-mode] (quote undefined)) (define-key map [global-semantic-idle-completions-mode] (quote undefined)) (define-key map [global-semantic-idle-summary-mode] (quote undefined)) (define-key map [global-semantic-idle-scheduler-mode] (quote undefined)) (define-key map [global-semanticdb-minor-mode] (quote undefined)) (define-key map [cedet-menu-separator] (quote undefined)) (define-key map [ede-find-file] (quote undefined)) (define-key map [ede-speedbar] (quote undefined)) (define-key map [ede] (quote undefined)) (define-key map [ede-new] (quote undefined)) (define-key map [ede-target-options] (quote undefined)) (define-key map [ede-project-options] (quote undefined)) (define-key map [ede-build-forms-menu] (quote undefined)) map)) nil [1910 3287])
            ("cedet-version" function (:user-visible-flag t) nil [3289 5068])
            ("cedet" package nil nil [5070 5086]))          
      :file "cedet.el"
      :pointmax 5111
      :fsize 5110
      :lastmodtime '(20910 56098 347464 0)
      :unmatched-syntax '((close-paren 1168 . 1169) (symbol 1135 . 1152) (open-paren 1134 . 1135)))
    (semanticdb-table "fame.el"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("fame-valid-levels" variable
               (:constant-flag t
                :default-value (quote (:error :warning :info :debug)))
                nil [2596 2684])
            ("fame-valid-level-values" variable
               (:constant-flag t
                :default-value (quote (t nolog temp temp-nolog log none)))
                nil [2686 2790])
            ("fame-default-level-values" variable
               (:constant-flag t
                :default-value (quote (:debug log :info temp :warning t :error t)))
                nil [2792 2920])
            ("define-widget" code nil nil [2922 3298])
            ("define-widget" code nil nil [3300 3397])
            ("define-widget" code nil nil [3399 3887])
            ("fame" customgroup (:user-visible-flag t) nil [3889 3982])
            ("fame-temp-message-delay" variable
               (:user-visible-flag t
                :default-value 1)
                nil [3984 4102])
            ("if" code nil nil [6365 7595])
            ("condition-case" code nil nil [6250 6309])
            ("fame-log-message" function (:arguments ("args")) nil [5509 6188])
            ("if" code nil nil [4926 5401])
            ("if" code nil nil [4377 4866])
            ("defalias" code nil nil [4216 4316])
            ("fame-temp-message" function (:arguments ("args")) nil [7601 7878])
            ("fame-temp-message-nolog" function (:arguments ("args")) nil [7880 8182])
            ("fame-check-level" function (:arguments ("level")) nil [8219 8470])
            ("fame-check-level-value" function (:arguments ("value")) nil [8472 8747])
            ("fame-check-channel" function (:arguments ("channel")) nil [8749 8999])
            ("fame-check-channel-levels" function (:arguments ("levels")) nil [9001 9465])
            ("fame-channel-symbol" function (:arguments ("channel")) nil [9467 9628])
            ("fame-channel-levels" function (:arguments ("channel")) nil [9630 9944])
            ("fame-level-display" function (:arguments ("channel" "level")) nil [9946 10155])
            ("fame-send-functions-alist" variable
               (:constant-flag t
                :default-value (quote ((none) (log . fame-log-message) (temp . fame-temp-message) (temp-nolog . fame-temp-message-nolog) (nolog . fame-message-nolog) (t . message))))
                nil [10194 10440])
            ("fame-send" function (:arguments ("channel" "level" "args")) nil [10442 10819])
            ("fame-send-debug" function (:arguments ("channel" "args")) nil [10821 11029])
            ("fame-send-info" function (:arguments ("channel" "args")) nil [11031 11246])
            ("fame-send-warning" function (:arguments ("channel" "args")) nil [11248 11462])
            ("fame-send-error" function (:arguments ("channel" "args")) nil [11464 11673])
            ("define-fame-channel" function (:arguments ("channel" "default" "docstring")) nil [11719 14554])
            ("fame" package nil nil [14556 14571]))          
      :file "fame.el"
      :pointmax 14595
      :fsize 14594
      :lastmodtime '(20910 56098 347464 0)
      :unmatched-syntax '((close-paren 7598 . 7599) (punctuation 5508 . 5509) (symbol 4136 . 4152) (open-paren 4135 . 4136)))
    (semanticdb-table "mode-local.el"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("cl" include nil nil [1786 1799])
            ("mode-local-map-file-buffers" function (:arguments ("function" "predicate" "buffers")) nil [1824 2498])
            ("get-mode-local-parent" function (:arguments ("mode")) nil [2500 2699])
            ("mode-local-equivalent-mode-p" function (:arguments ("mode")) nil [2835 3079])
            ("mode-local-map-mode-buffers" function (:arguments ("function" "modes")) nil [3081 3551])
            ("mode-local-init-hook" variable nil nil [3576 3711])
            ("mode-local-changed-mode-buffers" variable nil nil [3713 3818])
            ("mode-local--init-mode" variable nil nil [3820 3854])
            ("mode-local-initialized-p" function nil nil [3856 4116])
            ("mode-local-post-major-mode-change" function nil nil [4118 4724])
            ("mode-local-on-major-mode-change" function nil nil [4726 4956])
            ("set-mode-local-parent" function (:arguments ("mode" "parent")) nil [4979 5474])
            ("define-child-mode" function (:arguments ("mode" "parent" "docstring")) nil [5476 5760])
            ("mode-local-use-bindings-p" function (:arguments ("this-mode" "desired-mode")) nil [5762 6054])
            ("mode-local-symbol-table" variable nil nil [6083 6290])
            ("make-variable-buffer-local" code nil nil [6291 6344])
            ("mode-local-active-mode" variable nil nil [6346 6426])
            ("new-mode-local-bindings" function nil nil [6428 6537])
            ("mode-local-bind" function (:arguments ("bindings" "plist" "mode")) nil [6539 9652])
            ("mode-local-symbol" function (:arguments ("symbol" "mode")) nil [9654 10538])
            ("mode-local-symbol-value" function (:arguments ("symbol" "mode" "property")) nil [10540 11114])
            ("activate-mode-local-bindings" function (:arguments ("mode")) nil [11145 12889])
            ("deactivate-mode-local-bindings" function (:arguments ("mode")) nil [12891 13567])
            ("with-mode-local-symbol" function (:arguments ("mode" "body")) nil [13569 14965])
            ("put" code nil nil [14966 15019])
            ("with-mode-local" function (:arguments ("mode" "body")) nil [15021 15404])
            ("put" code nil nil [15405 15451])
            ("mode-local-value" function (:arguments ("mode" "sym")) nil [15454 15650])
            ("setq-mode-local" function (:arguments ("mode" "args")) nil [15652 16817])
            ("defvar-mode-local" function (:arguments ("mode" "sym" "val" "docstring")) nil [16819 17106])
            ("put" code nil nil [17107 17160])
            ("defconst-mode-local" function (:arguments ("mode" "sym" "val" "docstring")) nil [17162 17549])
            ("put" code nil nil [17550 17605])
            ("make-obsolete-overload" function (:arguments ("old" "new" "when")) nil [17636 17959])
            ("overload-obsoleted-by" function (:arguments ("overload")) nil [17961 18139])
            ("overload-that-obsolete" function (:arguments ("overload")) nil [18141 18341])
            ("fetch-overload" function (:arguments ("overload")) nil [18343 18832])
            ("mode-local--override" function (:arguments ("name" "args" "body")) nil [18834 19512])
            ("mode-local--expand-overrides" function (:arguments ("name" "args" "body")) nil [19514 20413])
            ("mode-local--overload-body" function (:arguments ("name" "args" "body")) nil [20415 20808])
            ("put" code nil nil [20825 20878])
            ("define-overloadable-function" function (:arguments ("name" "args" "docstring" "body")) nil [20880 22190])
            ("put" code nil nil [22191 22240])
            ("defalias" code nil nil [22242 22299])
            ("function-overload-p" function (:arguments ("symbol")) nil [22301 22474])
            ("define-mode-local-override" function (:arguments ("name" "mode" "args" "docstring" "body")) nil [22476 23432])
            ("mode-local-read-function" function (:arguments ("prompt" "initial" "hist" "default")) nil [23458 23744])
            ("overload-docstring-extension" function (:arguments ("overload")) nil [23767 24416])
            ("mode-local-augment-function-help" function (:arguments ("symbol")) nil [24418 24949])
            ("mode-local-print-binding" function (:arguments ("symbol")) nil [24984 25379])
            ("mode-local-print-bindings" function (:arguments ("table")) nil [25381 26610])
            ("mode-local-describe-bindings-2" function (:arguments ("buffer-or-mode")) nil [26612 27532])
            ("mode-local-describe-bindings-1" function (:arguments ("buffer-or-mode" "interactive-p")) nil [27534 28451])
            ("describe-mode-local-bindings" function
               (:user-visible-flag t
                :arguments ("buffer"))
                nil [28453 28685])
            ("describe-mode-local-bindings-in-mode" function
               (:user-visible-flag t
                :arguments ("mode"))
                nil [28687 29080])
            ("mode-local-setup-edebug-specs" function nil nil [29705 30312])
            ("add-hook" code nil nil [30314 30374])
            ("add-hook" code nil nil [30376 30437])
            ("add-hook" code nil nil [30438 30505])
            ("mode-local" package nil nil [30507 30528]))          
      :file "mode-local.el"
      :pointmax 30558
      :fsize 30557
      :lastmodtime '(20910 56098 347464 0)
      :unmatched-syntax '((close-paren 1799 . 1800) (symbol 1768 . 1785) (open-paren 1767 . 1768))))
  :file "!home!jiya!.emacs.d!plugins!cedet-bzr!lisp!cedet!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2")

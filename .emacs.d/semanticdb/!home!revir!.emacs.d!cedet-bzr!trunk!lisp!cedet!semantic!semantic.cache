;; Object semantic/
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "semantic/"
  :tables
  (list
    (semanticdb-table "ia.el"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("semantic/analyze" include nil nil [1209 1236])
            ("semantic/format" include nil nil [1237 1263])
            ("pulse" include nil nil [1264 1280])
            ("semantic/senator" include nil nil [1281 1308])
            ("semantic/analyze/refs" include nil nil [1309 1341])
            ("semantic/find" include nil nil [1393 1417])
            ("semantic/analyze" include nil nil [1363 1390])
            ("declare-function" code nil nil [1420 1464])
            ("semantic-ia-completion-format-tag-function" variable (:default-value (quote semantic-format-tag-prototype)) nil [1571 1783])
            ("semantic-ia-insert-tag" function
               (:overloadable t
                :arguments ("tag"))
                nil [2142 2261])
            ("semantic-ia-insert-tag-default" function (:arguments ("tag")) nil [2263 2501])
            ("defalias" code nil nil [2503 2682])
            ("semantic-ia-get-completions-deprecated" function (:arguments ("context" "point")) nil [2684 3020])
            ("semantic-ia-complete-symbol" function
               (:user-visible-flag t
                :arguments ("pos"))
                nil [3037 5185])
            ("semantic-ia-completion-menu-format-tag-function" variable
               (:user-visible-flag t
                :default-value (quote semantic-format-tag-uml-concise-prototype))
                nil [5187 5417])
            ("semantic-ia-complete-symbol-menu" function
               (:user-visible-flag t
                :arguments ("point"))
                nil [5434 6697])
            ("semantic-ia-complete-tip" function
               (:user-visible-flag t
                :arguments ("point"))
                nil [6864 7616])
            ("semantic-ia-show-summary" function
               (:user-visible-flag t
                :arguments ("point"))
                nil [7733 8247])
            ("semantic-ia-show-variants" function
               (:user-visible-flag t
                :arguments ("point"))
                nil [8330 9727])
            ("semantic-ia--fast-jump-helper" function (:arguments ("dest")) nil [9919 11229])
            ("declare-function" code nil nil [11231 11311])
            ("semantic-ia-fast-jump" function
               (:user-visible-flag t
                :arguments ("point"))
                nil [11328 13530])
            ("semantic-ia-fast-mouse-jump" function
               (:user-visible-flag t
                :arguments ("evt"))
                nil [13547 13872])
            ("semantic-ia-show-doc" function
               (:user-visible-flag t
                :arguments ("point"))
                nil [14045 15427])
            ("semantic-ia-describe-class" function
               (:user-visible-flag t
                :arguments ("typename"))
                nil [15444 16985])
            ("semantic/ia" package nil nil [16987 17009]))          
      :file "ia.el"
      :pointmax 17158
      :fsize 17157
      :lastmodtime '(20746 56154 0 0)
      :unmatched-syntax '((close-paren 1417 . 1418) (symbol 1343 . 1360) (open-paren 1342 . 1343)))
    (semanticdb-table "analyze.el"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("cl" include nil nil [2732 2745])
            ("semantic" include nil nil [2747 2766])
            ("semantic/format" include nil nil [2767 2793])
            ("semantic/ctxt" include nil nil [2794 2818])
            ("semantic/scope" include nil nil [2819 2844])
            ("semantic/sort" include nil nil [2845 2869])
            ("semantic/analyze/fcn" include nil nil [2870 2901])
            ("semantic/find" include nil nil [2922 2946])
            ("declare-function" code nil nil [2949 3002])
            ("declare-function" code nil nil [3003 3070])
            ("semantic-analyze-error-stack" variable nil nil [3082 3176])
            ("semantic-analyze-push-error" function (:arguments ("err")) nil [3178 3328])
            ("semantic-analyze-context" type
               (:members 
                  ( ("bounds" variable
                       (:documentation "The bounds of this context.
Usually bound to the dimension of a single symbol or command."
                        :type "list")
                        nil nil)
                    ("prefix" variable
                       (:documentation "List of tags defining local text.
This can be nil, or a list where the last element can be a string
representing text that may be incomplete.  Preceding elements
must be semantic tags representing variables or functions
called in a dereference sequence."
                        :type "list")
                        nil nil)
                    ("prefixclass" variable
                       (:documentation "Tag classes expected at this context.
These are classes for tags, such as 'function, or 'variable."
                        :type "list")
                        nil nil)
                    ("prefixtypes" variable
                       (:documentation "List of tags defining types for :prefix.
This list is one shorter than :prefix.  Each element is a semantic
tag representing a type matching the semantic tag in the same
position in PREFIX."
                        :type "list")
                        nil nil)
                    ("scope" variable
                       (:documentation "List of tags available in scopetype.
See `semantic-analyze-scoped-tags' for details."
                        :type "(or null semantic-scope-cache)")
                        nil nil)
                    ("buffer" variable
                       (:documentation "The buffer this context is derived from."
                        :type "buffer")
                        nil nil)
                    ("errors" variable (:documentation "Any errors thrown an caught during analysis.") nil nil))                  
                :type "class")
                nil [3508 4875])
            ("semantic-analyze-context-assignment" type
               (:superclasses "semantic-analyze-context"
                :members 
                  ( ("assignee" variable
                       (:documentation "A sequence of tags for an assignee.
This is a variable into which some value is being placed.  The last
item in the list is the variable accepting the value.  Earlier
tags represent the variables being dereferenced to get to the
assignee."
                        :type "list")
                        nil nil))                  
                :type "class")
                nil [4877 5312])
            ("semantic-analyze-context-functionarg" type
               (:superclasses "semantic-analyze-context"
                :members 
                  ( ("function" variable
                       (:documentation "A sequence of tags for a function.
This is a function being called.  The cursor will be in the position
of an argument.
The last tag in :function is the function being called.  Earlier
tags represent the variables being dereferenced to get to the
function."
                        :type "list")
                        nil nil)
                    ("index" variable
                       (:documentation "The index of the argument for this context.
If a function takes 4 arguments, this value should be bound to
the values 1 through 4."
                        :type "integer")
                        nil nil)
                    ("argument" variable
                       (:documentation "A sequence of tags for the :index argument.
The argument can accept a value of some type, and this contains the
tag for that definition.  It should be a tag, but might
be just a string in some circumstances."
                        :type "list")
                        nil nil))                  
                :type "class")
                nil [5314 6254])
            ("semantic-analyze-context-return" type
               (:superclasses "semantic-analyze-context"
                :type "class")
                nil [6256 6474])
            ("semantic-analyze-type-constraint" function
               (:parent "semantic-analyze-context"
                :arguments ("context" "desired-type"))
                nil [6541 7365])
            ("semantic-analyze-type-constraint" function
               (:parent "semantic-analyze-context-functionarg"
                :arguments ("context"))
                nil [7367 7585])
            ("semantic-analyze-type-constraint" function
               (:parent "semantic-analyze-context-assignment"
                :arguments ("context"))
                nil [7587 7814])
            ("semantic-analyze-interesting-tag" function
               (:parent "semantic-analyze-context"
                :arguments ("context"))
                nil [7816 8240])
            ("semantic-analyze-interesting-tag" function
               (:parent "semantic-analyze-context-functionarg"
                :arguments ("context"))
                nil [8242 8471])
            ("semantic-analyze-interesting-tag" function
               (:parent "semantic-analyze-context-assignment"
                :arguments ("context"))
                nil [8473 8701])
            ("semantic-analyze-find-tag-sequence" function
               (:overloadable t
                :arguments ("sequence" "scope" "typereturn" "throwsym"))
                nil [8920 9664])
            ("semantic-analyze-find-tag-sequence-default" function (:arguments ("sequence" "scope" "typereturn" "throwsym")) nil [9666 13162])
            ("semantic-analyze-find-tag" function (:arguments ("name" "tagclass" "scope")) nil [13164 15242])
            ("semantic-analyze-current-symbol" function
               (:overloadable t
                :arguments ("analyzehookfcn" "position"))
                nil [15327 16379])
            ("semantic-analyze-current-symbol-default" function (:arguments ("analyzehookfcn" "position")) nil [16381 17775])
            ("semantic-analyze-current-context" function
               (:overloadable t
                :user-visible-flag t
                :arguments ("position"))
                nil [17854 19395])
            ("semantic-analyze-current-context-default" function (:arguments ("position")) nil [19397 24690])
            ("semantic-analyze-dereference-alias" function (:arguments ("taglist")) nil [24692 25236])
            ("semantic-adebug-analyze" function
               (:user-visible-flag t
                :arguments ("ctxt"))
                nil [25239 25909])
            ("declare-function" code nil nil [25978 26037])
            ("semantic-analyze-pulse" function
               (:parent "semantic-analyze-context"
                :arguments ("context"))
                nil [26039 26345])
            ("semantic-analyze-summary-function" variable (:default-value (quote semantic-format-tag-prototype)) nil [26347 26600])
            ("semantic-analyze-princ-sequence" function (:arguments ("sequence" "prefix" "buff")) nil [26602 27242])
            ("semantic-analyze-show" function
               (:parent "semantic-analyze-context"
                :arguments ("context"))
                nil [27244 28018])
            ("semantic-analyze-show" function
               (:parent "semantic-analyze-context-assignment"
                :arguments ("context"))
                nil [28020 28253])
            ("semantic-analyze-show" function
               (:parent "semantic-analyze-context-functionarg"
                :arguments ("context"))
                nil [28255 28637])
            ("semantic-analyze-pop-to-context" function (:arguments ("context")) nil [28639 29194])
            ("semantic/analyze" package nil nil [29196 29223]))          
      :file "analyze.el"
      :pointmax 29382
      :fsize 29381
      :lastmodtime '(20779 52264 0 0)
      :unmatched-syntax '((close-paren 2946 . 2947) (symbol 2904 . 2921) (open-paren 2903 . 2904) (close-paren 2745 . 2746) (symbol 2714 . 2731) (open-paren 2713 . 2714)))
    (semanticdb-table "format.el"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("font-lock" include nil nil [1322 1342])
            ("semantic" include nil nil [1344 1363])
            ("semantic/tag-ls" include nil nil [1364 1390])
            ("ezimage" include nil nil [1391 1409])
            ("semantic/find" include nil nil [1430 1454])
            ("semantic-format-tag-functions" variable (:default-value (quote (semantic-format-tag-name semantic-format-tag-canonical-name semantic-format-tag-abbreviate semantic-format-tag-summarize semantic-format-tag-summarize-with-file semantic-format-tag-short-doc semantic-format-tag-prototype semantic-format-tag-concise-prototype semantic-format-tag-uml-abbreviate semantic-format-tag-uml-prototype semantic-format-tag-uml-concise-prototype semantic-format-tag-prin1))) nil [1547 2407])
            ("semantic-format-tag-custom-list" variable (:default-value (append (quote (radio)) (mapcar (lambda (f) (list (quote const) f)) semantic-format-tag-functions) (quote (function)))) nil [2409 2700])
            ("semantic-format-use-images-flag" variable (:default-value ezimage-use-images) nil [2702 2923])
            ("semantic-function-argument-separator" variable (:default-value ",") nil [2925 3040])
            ("make-variable-buffer-local" code nil nil [3041 3107])
            ("semantic-format-parent-separator" variable (:default-value "::") nil [3109 3234])
            ("make-variable-buffer-local" code nil nil [3235 3297])
            ("semantic-format-face-alist" variable (:default-value (\` ((function . font-lock-function-name-face) (variable . font-lock-variable-name-face) (type . font-lock-type-face) (include \, (if (featurep (quote xemacs)) (quote font-lock-preprocessor-face) (quote font-lock-constant-face))) (package \, (if (featurep (quote xemacs)) (quote font-lock-preprocessor-face) (quote font-lock-constant-face))) (label . font-lock-string-face) (comment . font-lock-comment-face) (keyword . font-lock-keyword-face) (abstract . italic) (static . underline) (documentation . font-lock-doc-face)))) nil [3299 4455])
            ("semantic--format-colorize-text" function (:arguments ("text" "face-class")) nil [4485 4922])
            ("semantic--format-colorize-merge-text" function (:arguments ("precoloredtext" "face-class")) nil [4924 5782])
            ("semantic--format-tag-arguments" function (:arguments ("args" "formatter" "color")) nil [5810 6430])
            ("semantic-format-tag-type" function
               (:overloadable t
                :arguments ("tag" "color"))
                nil [6446 6638])
            ("semantic-format-tag-type-default" function (:arguments ("tag" "color")) nil [6640 7363])
            ("semantic-format-tag-prin1" function (:arguments ("tag" "parent" "color")) nil [7405 7577])
            ("semantic-format-tag-name-from-anything" function (:arguments ("anything" "parent" "color" "colorhint")) nil [7579 8770])
            ("semantic-format-tag-name" function
               (:overloadable t
                :arguments ("tag" "parent" "color"))
                nil [8787 9105])
            ("semantic-format-tag-name-default" function (:arguments ("tag" "parent" "color")) nil [9107 9673])
            ("declare-function" code nil nil [9675 9732])
            ("semantic--format-tag-parent-tree" function (:arguments ("tag" "parent")) nil [9734 10850])
            ("semantic-format-tag-canonical-name" function
               (:overloadable t
                :arguments ("tag" "parent" "color"))
                nil [10852 11208])
            ("semantic-format-tag-canonical-name-default" function (:arguments ("tag" "parent" "color")) nil [11210 12323])
            ("semantic-format-tag-abbreviate" function
               (:overloadable t
                :arguments ("tag" "parent" "color"))
                nil [12325 12710])
            ("semantic-format-tag-abbreviate-default" function (:arguments ("tag" "parent" "color")) nil [12712 13648])
            ("semantic-format-tag-summarize" function
               (:overloadable t
                :arguments ("tag" "parent" "color"))
                nil [13665 13934])
            ("semantic-format-tag-summarize-default" function (:arguments ("tag" "parent" "color")) nil [13936 14591])
            ("semantic-format-tag-summarize-with-file" function
               (:overloadable t
                :arguments ("tag" "parent" "color"))
                nil [14593 14899])
            ("semantic-format-tag-summarize-with-file-default" function (:arguments ("tag" "parent" "color")) nil [14901 15748])
            ("semantic-format-tag-short-doc" function
               (:overloadable t
                :arguments ("tag" "parent" "color"))
                nil [15750 16055])
            ("declare-function" code nil nil [16057 16121])
            ("semantic-format-tag-short-doc-default" function (:arguments ("tag" "parent" "color")) nil [16123 17370])
            ("semantic-format-tag-prototype" function
               (:overloadable t
                :arguments ("tag" "parent" "color"))
                nil [17415 17818])
            ("semantic-format-tag-prototype-default" function (:arguments ("tag" "parent" "color")) nil [17820 19396])
            ("semantic-format-tag-concise-prototype" function
               (:overloadable t
                :arguments ("tag" "parent" "color"))
                nil [19413 19691])
            ("semantic-format-tag-concise-prototype-default" function (:arguments ("tag" "parent" "color")) nil [19693 20778])
            ("semantic-uml-colon-string" variable
               (:user-visible-flag t
                :default-value " : ")
                nil [20806 21057])
            ("semantic-uml-no-protection-string" variable (:user-visible-flag t) nil [21059 21260])
            ("semantic--format-uml-post-colorize" function (:arguments ("text" "tag" "parent")) nil [21262 21666])
            ("semantic-uml-attribute-string" function (:arguments ("tag" "parent")) nil [21668 21977])
            ("semantic-format-tag-protection-image-alist" variable (:default-value (quote (("+" . ezimage-unlock) ("#" . ezimage-key) ("-" . ezimage-lock)))) nil [21979 22170])
            ("semantic-format-tag-protection-symbol-to-string-assoc-list" variable (:default-value (quote ((public . "+") (protected . "#") (private . "-")))) nil [22172 22451])
            ("semantic-format-tag-uml-protection-to-string" function
               (:overloadable t
                :arguments ("protection-symbol" "color"))
                nil [22453 22931])
            ("semantic-format-tag-uml-protection-to-string-default" function (:arguments ("protection-symbol" "color")) nil [22933 23687])
            ("semantic-format-tag-uml-protection" function (:arguments ("tag" "parent" "color")) nil [23689 23984])
            ("semantic--format-tag-uml-type" function (:arguments ("tag" "color")) nil [23986 24251])
            ("semantic-format-tag-uml-abbreviate" function
               (:overloadable t
                :arguments ("tag" "parent" "color"))
                nil [24253 24533])
            ("semantic-format-tag-uml-abbreviate-default" function (:arguments ("tag" "parent" "color")) nil [24535 25167])
            ("semantic-format-tag-uml-prototype" function
               (:overloadable t
                :arguments ("tag" "parent" "color"))
                nil [25169 25445])
            ("semantic-format-tag-uml-prototype-default" function (:arguments ("tag" "parent" "color")) nil [25447 26306])
            ("semantic-format-tag-uml-concise-prototype" function
               (:overloadable t
                :arguments ("tag" "parent" "color"))
                nil [26308 26600])
            ("semantic-format-tag-uml-concise-prototype-default" function (:arguments ("tag" "parent" "color")) nil [26602 27210])
            ("semantic/format" package nil nil [27212 27238]))          
      :file "format.el"
      :pointmax 27395
      :fsize 27394
      :lastmodtime '(20746 56154 0 0)
      :unmatched-syntax '((close-paren 1454 . 1455) (symbol 1412 . 1429) (open-paren 1411 . 1412) (close-paren 1342 . 1343) (symbol 1304 . 1321) (open-paren 1303 . 1304)))
    (semanticdb-table "senator.el"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("ring" include nil nil [1144 1159])
            ("working" include nil nil [1160 1178])
            ("semantic" include nil nil [1179 1198])
            ("semantic/ctxt" include nil nil [1199 1223])
            ("semantic/decorate" include nil nil [1224 1252])
            ("semantic/format" include nil nil [1253 1279])
            ("semantic/db" include nil nil [1280 1302])
            ("semantic/db-find" include nil nil [1303 1330])
            ("semantic/find" include nil nil [1352 1376])
            ("declare-function" code nil nil [1425 1499])
            ("declare-function" code nil nil [1500 1569])
            ("declare-function" code nil nil [1570 1633])
            ("declare-function" code nil nil [1634 1701])
            ("declare-function" code nil nil [1702 1764])
            ("declare-function" code nil nil [1765 1809])
            ("senator" customgroup (:user-visible-flag t) nil [1829 1894])
            ("senator-minor-mode" variable nil nil [1896 2035])
            ("make-variable-buffer-local" code nil nil [2036 2084])
            ("senator-step-at-tag-classes" variable nil nil [2101 2429])
            ("make-variable-buffer-local" code nil nil [2445 2502])
            ("senator-step-at-start-end-tag-classes" variable nil nil [2519 3212])
            ("make-variable-buffer-local" code nil nil [3228 3295])
            ("senator-highlight-found" variable nil nil [3297 3438])
            ("make-variable-buffer-local" code nil nil [3439 3492])
            ("senator-momentary-highlight-face" variable
               (:default-value (quote ((((class color) (background dark)) (:background "gray30")) (((class color) (background light)) (:background "gray70"))))
                :type "face")
                nil [3504 3754])
            ("senator-momentary-highlight-tag" function (:arguments ("tag")) nil [3778 4024])
            ("senator-step-at-start-end-p" function (:arguments ("tag")) nil [4026 4291])
            ("senator-skip-p" function (:arguments ("tag")) nil [4293 4496])
            ("senator-middle-of-tag-p" function (:arguments ("pos" "tag")) nil [4498 4679])
            ("senator-step-at-parent" function (:arguments ("tag")) nil [4681 5254])
            ("senator-previous-tag-or-parent" function (:arguments ("pos")) nil [5256 6063])
            ("senator-full-tag-name" function (:arguments ("tag" "parent")) nil [6065 6580])
            ("semantic-alias-obsolete" code nil nil [6581 6683])
            ("senator-completion-cache" variable nil nil [6685 6774])
            ("make-variable-buffer-local" code nil nil [6775 6829])
            ("senator-completion-cache-flush-fcn" function (:arguments ("ignore")) nil [6831 7051])
            ("senator-completion-flatten-stream" function (:arguments ("stream" "parents" "top-level")) nil [7053 7949])
            ("senator-completion-function-args" function (:arguments ("tag")) nil [7951 8322])
            ("senator-completion-refine-name" function (:arguments ("elt")) nil [8324 10093])
            ("senator-completion-uniquify-names" function (:arguments ("completion-stream")) nil [10095 11497])
            ("senator-completion-stream" function (:arguments ("stream" "top-level")) nil [11499 12340])
            ("senator-current-type-context" function nil nil [12342 12650])
            ("senator-completion-list" function (:arguments ("in-context")) nil [12652 13356])
            ("senator-find-tag-for-completion" function (:arguments ("prefix")) nil [13358 14216])
            ("senator-find-nonterminal-by-name" function (:arguments ("ignore")) nil [14280 14396])
            ("senator-find-nonterminal-by-name-regexp" function (:arguments ("ignore")) nil [14398 14521])
            ("senator-search-tag-name" function (:arguments ("tag")) nil [14545 15590])
            ("senator-search-ignore-tag-classes" variable (:default-value (quote (code block))) nil [15592 15792])
            ("senator-search-default-tag-filter" function (:arguments ("tag")) nil [15794 16039])
            ("senator-search-tag-filter-functions" variable (:default-value (quote (senator-search-default-tag-filter))) nil [16041 16281])
            ("senator-search" function (:arguments ("searcher" "text" "bound" "noerror" "count")) nil [16283 18025])
            ("senator-next-tag" function (:user-visible-flag t) nil [18067 19408])
            ("senator-previous-tag" function (:user-visible-flag t) nil [19425 20770])
            ("semantic-alias-obsolete" code nil nil [20771 20846])
            ("senator-jump-completion-list" variable nil nil [20848 21010])
            ("senator-jump-interactive" function (:arguments ("prompt" "in-context" "no-default" "require-match")) nil [21012 22953])
            ("senator-jump-noselect" function (:arguments ("sym" "next-p" "regexp-p")) nil [22955 23547])
            ("senator-jump" function
               (:user-visible-flag t
                :arguments ("sym" "in-context" "no-default"))
                nil [23564 24471])
            ("senator-jump-regexp" function
               (:user-visible-flag t
                :arguments ("symregex" "in-context" "no-default"))
                nil [24488 25511])
            ("senator-last-completion-stats" variable nil nil [25513 25651])
            ("senator-current-symbol-start" function nil nil [25653 25878])
            ("senator-complete-symbol" function
               (:user-visible-flag t
                :arguments ("cycle-once"))
                nil [25991 28444])
            ("senator-completion-menu-summary-function" variable
               (:user-visible-flag t
                :default-value (quote semantic-format-tag-concise-prototype))
                nil [28478 28752])
            ("make-variable-buffer-local" code nil nil [28753 28823])
            ("senator-completion-menu-insert-function" variable
               (:user-visible-flag t
                :default-value (quote senator-completion-menu-insert-default))
                nil [28825 29132])
            ("make-variable-buffer-local" code nil nil [29133 29202])
            ("senator-completion-menu-insert-default" function (:arguments ("tag")) nil [29204 29341])
            ("senator-completion-menu-do-complete" function (:arguments ("tag-array")) nil [29343 29957])
            ("senator-completion-menu-item" function (:arguments ("tag")) nil [29959 30397])
            ("senator-completion-menu-window-offsets" function (:arguments ("window")) nil [30399 32108])
            ("senator-completion-menu-point-as-event" function nil nil [32110 33390])
            ("senator-completion-menu-popup" function (:user-visible-flag t) nil [33407 35616])
            ("senator-search-forward" function
               (:user-visible-flag t
                :arguments ("string" "bound" "noerror" "count"))
                nil [35665 36046])
            ("senator-re-search-forward" function
               (:user-visible-flag t
                :arguments ("regexp" "bound" "noerror" "count"))
                nil [36048 36464])
            ("senator-word-search-forward" function
               (:user-visible-flag t
                :arguments ("word" "bound" "noerror" "count"))
                nil [36466 36861])
            ("senator-search-backward" function
               (:user-visible-flag t
                :arguments ("string" "bound" "noerror" "count"))
                nil [36863 37263])
            ("senator-re-search-backward" function
               (:user-visible-flag t
                :arguments ("regexp" "bound" "noerror" "count"))
                nil [37265 37700])
            ("senator-word-search-backward" function
               (:user-visible-flag t
                :arguments ("word" "bound" "noerror" "count"))
                nil [37702 38116])
            ("senator-last-search-type" variable nil nil [38170 38263])
            ("senator-nonincremental-repeat-search-forward" function (:user-visible-flag t) nil [38265 38697])
            ("senator-nonincremental-repeat-search-backward" function (:user-visible-flag t) nil [38699 39135])
            ("senator-nonincremental-search-forward" function
               (:user-visible-flag t
                :arguments ("string"))
                nil [39137 39468])
            ("senator-nonincremental-search-backward" function
               (:user-visible-flag t
                :arguments ("string"))
                nil [39470 39813])
            ("senator-nonincremental-re-search-forward" function
               (:user-visible-flag t
                :arguments ("string"))
                nil [39815 40183])
            ("senator-nonincremental-re-search-backward" function
               (:user-visible-flag t
                :arguments ("string"))
                nil [40185 40565])
            ("senator--search-filter" variable nil nil [40567 40602])
            ("senator-search-set-tag-class-filter" function
               (:user-visible-flag t
                :arguments ("classes"))
                nil [40604 41803])
            ("senator-fold-tag" function
               (:user-visible-flag t
                :arguments ("tag"))
                nil [41950 42094])
            ("senator-unfold-tag" function
               (:user-visible-flag t
                :arguments ("tag"))
                nil [42096 42244])
            ("senator-fold-tag-toggle" function
               (:user-visible-flag t
                :arguments ("tag"))
                nil [42246 42482])
            ("semantic-up-reference" function
               (:overloadable t
                :arguments ("tag"))
                nil [42534 42901])
            ("senator-go-to-up-reference" function
               (:user-visible-flag t
                :arguments ("tag"))
                nil [42918 43978])
            ("semantic-up-reference-default" function (:arguments ("tag")) nil [43980 45955])
            ("senator-isearch-semantic-mode" variable nil nil [45957 46077])
            ("make-variable-buffer-local" code nil nil [46078 46137])
            ("senator-beginning-of-defun" function (:arguments ("arg")) nil [46139 46725])
            ("senator-end-of-defun" function (:arguments ("arg")) nil [46727 47359])
            ("senator-narrow-to-defun" function (:user-visible-flag t) nil [47361 47736])
            ("senator-mark-defun" function (:user-visible-flag t) nil [47738 48284])
            ("beginning-of-defun" function (:arguments ("around" "senator" "activate")) nil [48286 48574])
            ("end-of-defun" function (:arguments ("around" "senator" "activate")) nil [48576 48844])
            ("narrow-to-defun" function (:arguments ("around" "senator" "activate")) nil [48846 49180])
            ("mark-defun" function (:arguments ("around" "senator" "activate")) nil [49182 49513])
            ("c-mark-function" function (:arguments ("around" "senator" "activate")) nil [49515 49851])
            ("senator-add-log-tags" variable (:default-value (quote (function variable type))) nil [49853 50056])
            ("semantic-varalias-obsolete" code nil nil [50057 50163])
            ("add-log-current-defun" function (:arguments ("around" "senator" "activate")) nil [50165 50744])
            ("senator-tag-ring" variable (:default-value (make-ring 20)) nil [51079 51164])
            ("senator-copy-tag" function (:user-visible-flag t) nil [51181 51626])
            ("senator-kill-tag" function (:user-visible-flag t) nil [51643 52161])
            ("senator-yank-tag" function (:user-visible-flag t) nil [52178 52679])
            ("senator-copy-tag-to-register" function
               (:user-visible-flag t
                :arguments ("register" "kill-flag"))
                nil [52696 53151])
            ("senator-transpose-tags-up" function (:user-visible-flag t) nil [53168 54378])
            ("senator-transpose-tags-down" function (:user-visible-flag t) nil [54395 54993])
            ("senator-lazy-highlight-update" function nil nil [55038 55235])
            ("senator-isearch-search-fun" function nil nil [55393 55853])
            ("senator-isearch-toggle-semantic-mode" function (:user-visible-flag t) nil [55855 56260])
            ("senator-old-isearch-search-fun" variable nil nil [56262 56363])
            ("senator-isearch-mode-hook" function nil nil [56365 57431])
            ("semantic/senator" package nil nil [57726 57753]))          
      :file "senator.el"
      :pointmax 57912
      :fsize 57911
      :lastmodtime '(20746 56154 0 0)
      :unmatched-syntax '((close-paren 1376 . 1377) (symbol 1334 . 1351) (open-paren 1333 . 1334)))
    (semanticdb-table "find.el"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("semantic" include nil nil [1633 1652])
            ("semantic/tag" include nil nil [1653 1676])
            ("declare-function" code nil nil [1678 1739])
            ("declare-function" code nil nil [1740 1809])
            ("semantic-find-tag-by-overlay" function (:arguments ("positionormarker" "buffer")) nil [2000 3093])
            ("semantic-find-tag-by-overlay-in-region" function (:arguments ("start" "end" "buffer")) nil [3110 3762])
            ("semantic-find-tag-by-overlay-next" function (:arguments ("start" "buffer")) nil [3779 4779])
            ("semantic-find-tag-by-overlay-prev" function (:arguments ("start" "buffer")) nil [4796 5856])
            ("semantic-find-tag-parent-by-overlay" function (:arguments ("tag")) nil [5873 6322])
            ("semantic-current-tag" function nil nil [6339 6581])
            ("semantic-current-tag-parent" function nil nil [6598 6868])
            ("semantic-current-tag-of-class" function (:arguments ("class")) nil [6870 7290])
            ("semantic--find-tags-by-function" function (:arguments ("predicate" "table")) nil [8362 8996])
            ("semantic--find-tags-by-macro" function (:arguments ("form" "table")) nil [9198 9604])
            ("semantic-find-first-tag-by-name" function (:arguments ("name" "table")) nil [9647 10028])
            ("semantic-find-tags-by-name" function (:arguments ("name" "table")) nil [10030 10359])
            ("semantic-find-tags-for-completion" function (:arguments ("prefix" "table")) nil [10361 10933])
            ("semantic-find-tags-by-name-regexp" function (:arguments ("regexp" "table")) nil [10935 11422])
            ("semantic-find-tags-by-class" function (:arguments ("class" "table")) nil [11424 11773])
            ("semantic-filter-tags-by-class" function (:arguments ("class" "table")) nil [11775 12159])
            ("semantic-find-tags-by-type" function (:arguments ("type" "table")) nil [12161 12600])
            ("semantic-find-tags-of-compound-type" function (:arguments ("table")) nil [12602 12940])
            ("semantic-find-tags-by-scope-protection" function
               (:overloadable t
                :arguments ("scopeprotection" "parent" "table"))
                nil [12957 13723])
            ("semantic-find-tags-by-scope-protection-default" function (:arguments ("scopeprotection" "parent" "table")) nil [13725 14610])
            ("semantic-find-tags-included" function
               (:overloadable t
                :arguments ("table"))
                nil [14627 14824])
            ("semantic-find-tags-included-default" function (:arguments ("table")) nil [14826 15108])
            ("semantic-deep-find-tags-by-name" function (:arguments ("name" "table")) nil [15129 15484])
            ("semantic-deep-find-tags-for-completion" function (:arguments ("prefix" "table")) nil [15486 15868])
            ("semantic-deep-find-tags-by-name-regexp" function (:arguments ("regexp" "table")) nil [15870 16397])
            ("semantic-find-tags-external-children-of-type" function (:arguments ("type" "table")) nil [16423 16797])
            ("semantic-find-tags-subclasses-of-type" function (:arguments ("type" "table")) nil [16799 17289])
            ("semantic-brute-find-first-tag-by-name" function (:arguments ("name" "streamorbuffer" "search-parts" "search-include")) nil [17733 18698])
            ("semantic-brute-find-tag-by-class" function (:arguments ("class" "streamorbuffer" "search-parts" "search-includes")) nil [18700 19250])
            ("semantic-brute-find-tag-standard" function (:arguments ("streamorbuffer" "search-parts" "search-includes")) nil [19252 19728])
            ("semantic-brute-find-tag-by-type" function (:arguments ("type" "streamorbuffer" "search-parts" "search-includes")) nil [19730 20388])
            ("semantic-brute-find-tag-by-type-regexp" function (:arguments ("regexp" "streamorbuffer" "search-parts" "search-includes")) nil [20390 21100])
            ("semantic-brute-find-tag-by-name-regexp" function (:arguments ("regex" "streamorbuffer" "search-parts" "search-includes")) nil [21102 21530])
            ("semantic-brute-find-tag-by-property" function (:arguments ("property" "value" "streamorbuffer" "search-parts" "search-includes")) nil [21532 21982])
            ("semantic-brute-find-tag-by-attribute" function (:arguments ("attr" "streamorbuffer" "search-parts" "search-includes")) nil [21984 22443])
            ("semantic-brute-find-tag-by-attribute-value" function (:arguments ("attr" "value" "streamorbuffer" "search-parts" "search-includes")) nil [22445 22988])
            ("semantic-brute-find-tag-by-function" function (:arguments ("function" "streamorbuffer" "search-parts" "search-includes")) nil [22990 24410])
            ("semantic-brute-find-first-tag-by-function" function (:arguments ("function" "streamorbuffer" "search-parts" "search-includes")) nil [24412 25243])
            ("semantic-brute-find-tag-by-position" function (:arguments ("position" "streamorbuffer" "nomedian")) nil [25309 26450])
            ("semantic-brute-find-innermost-tag-by-position" function (:arguments ("position" "streamorbuffer" "nomedian")) nil [26452 27530])
            ("semantic/find" package nil nil [27532 27556]))          
      :file "find.el"
      :pointmax 27709
      :fsize 27708
      :lastmodtime '(20786 48311 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "dep.el"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("semantic/tag" include nil nil [1440 1463])
            ("semantic-dependency-include-path" variable nil nil [1476 2144])
            ("make-variable-buffer-local" code nil nil [2145 2207])
            ("semantic-dependency-system-include-path" variable nil nil [2209 2774])
            ("make-variable-buffer-local" code nil nil [2775 2844])
            ("defcustom-mode-local-semantic-dependency-system-include-path" function (:arguments ("mode" "name" "value" "docstring")) nil [2846 4342])
            ("semantic-add-system-include" function
               (:user-visible-flag t
                :arguments ("dir" "mode"))
                nil [4428 4996])
            ("semantic-remove-system-include" function
               (:user-visible-flag t
                :arguments ("dir" "mode"))
                nil [5013 5678])
            ("semantic-reset-system-include" function
               (:user-visible-flag t
                :arguments ("mode"))
                nil [5695 6021])
            ("semantic-customize-system-include-path" function
               (:user-visible-flag t
                :arguments ("mode"))
                nil [6038 6583])
            ("semantic--dependency-find-file-on-path" function (:arguments ("file" "path")) nil [6653 6980])
            ("ede-minor-mode" variable nil nil [6982 7005])
            ("ede-object" variable nil nil [7006 7025])
            ("declare-function" code nil nil [7026 7074])
            ("semantic-dependency-find-file-on-path" function (:arguments ("file" "systemp" "mode")) nil [7076 8163])
            ("semantic/dep" package nil nil [8166 8189]))          
      :file "dep.el"
      :pointmax 8340
      :fsize 8339
      :lastmodtime '(20746 56154 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "ctxt.el"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("semantic" include nil nil [1169 1188])
            ("semantic-command-separation-character" variable (:default-value ";") nil [1200 1350])
            ("make-variable-buffer-local" code nil nil [1351 1418])
            ("semantic-function-argument-separation-character" variable (:default-value ",") nil [1420 1577])
            ("make-variable-buffer-local" code nil nil [1578 1655])
            ("declare-function" code nil nil [1755 1819])
            ("semantic-up-context" function
               (:overloadable t
                :arguments ("point" "bounds-type"))
                nil [1821 2663])
            ("semantic-up-context-default" function nil nil [2665 2982])
            ("semantic-beginning-of-context" function
               (:overloadable t
                :arguments ("point"))
                nil [2984 3212])
            ("semantic-beginning-of-context-default" function (:arguments ("point")) nil [3214 3491])
            ("semantic-end-of-context" function
               (:overloadable t
                :arguments ("point"))
                nil [3493 3749])
            ("semantic-end-of-context-default" function (:arguments ("point")) nil [3751 4540])
            ("semantic-narrow-to-context" function nil nil [4542 4867])
            ("semantic-with-buffer-narrowed-to-context" function (:arguments ("body")) nil [4869 5067])
            ("put" code nil nil [5068 5139])
            ("add-hook" code nil nil [5140 5266])
            ("semantic-get-local-variables" function
               (:overloadable t
                :arguments ("point"))
                nil [5294 5738])
            ("semantic-get-local-variables-default" function nil nil [5740 7796])
            ("semantic-get-local-arguments" function
               (:overloadable t
                :arguments ("point"))
                nil [7798 9177])
            ("semantic-get-local-arguments-default" function nil nil [9179 9485])
            ("semantic-get-all-local-variables" function
               (:overloadable t
                :arguments ("point"))
                nil [9487 9825])
            ("semantic-get-all-local-variables-default" function (:arguments ("point")) nil [9827 10393])
            ("semantic-end-of-command" function (:overloadable t) nil [10908 11067])
            ("semantic-end-of-command-default" function nil nil [11069 11641])
            ("semantic-beginning-of-command" function (:overloadable t) nil [11643 11814])
            ("semantic-beginning-of-command-default" function nil nil [11816 12495])
            ("semantic-point-at-beginning-of-command" function nil nil [12498 12671])
            ("semantic-point-at-end-of-command" function nil nil [12673 12834])
            ("semantic-narrow-to-command" function nil nil [12836 13033])
            ("semantic-with-buffer-narrowed-to-command" function (:arguments ("body")) nil [13035 13233])
            ("put" code nil nil [13234 13305])
            ("add-hook" code nil nil [13306 13432])
            ("semantic-ctxt-end-of-symbol" function
               (:overloadable t
                :arguments ("point"))
                nil [13434 13748])
            ("semantic-ctxt-end-of-symbol-default" function (:arguments ("point")) nil [13750 15974])
            ("semantic-ctxt-current-symbol" function
               (:overloadable t
                :arguments ("point"))
                nil [15976 16436])
            ("semantic-ctxt-current-symbol-default" function (:arguments ("point")) nil [16438 18707])
            ("semantic-ctxt-current-symbol-and-bounds" function
               (:overloadable t
                :arguments ("point"))
                nil [18710 18974])
            ("semantic-ctxt-current-symbol-and-bounds-default" function (:arguments ("point")) nil [18976 19896])
            ("semantic-ctxt-current-assignment" function
               (:overloadable t
                :arguments ("point"))
                nil [19898 20133])
            ("semantic-ctxt-current-assignment-default" function (:arguments ("point")) nil [20135 20884])
            ("semantic-ctxt-current-function" function
               (:overloadable t
                :arguments ("point"))
                nil [20886 21212])
            ("semantic-ctxt-current-function-default" function (:arguments ("point")) nil [21214 21663])
            ("semantic-ctxt-current-argument" function
               (:overloadable t
                :arguments ("point"))
                nil [21665 21817])
            ("semantic-ctxt-current-argument-default" function (:arguments ("point")) nil [21819 22475])
            ("semantic-ctxt-current-thing" function nil nil [22477 22930])
            ("semantic-ctxt-current-class-list" function
               (:overloadable t
                :arguments ("point"))
                nil [22932 23286])
            ("semantic-ctxt-current-class-list-default" function (:arguments ("point")) nil [23288 23789])
            ("semantic-ctxt-current-mode" function
               (:overloadable t
                :arguments ("point"))
                nil [23806 24085])
            ("semantic-ctxt-current-mode-default" function (:arguments ("point")) nil [24087 24319])
            ("semantic-ctxt-scoped-types" function
               (:overloadable t
                :arguments ("point"))
                nil [24491 24789])
            ("semantic-ctxt-scoped-types-default" function (:arguments ("point")) nil [24791 25015])
            ("semantic-ctxt-imported-packages" function
               (:overloadable t
                :arguments ("point"))
                nil [25017 25409])
            ("semantic/ctxt" package nil nil [25411 25435]))          
      :file "ctxt.el"
      :pointmax 25588
      :fsize 25587
      :lastmodtime '(20827 33737 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "scope.el"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("semantic/db" include nil nil [1635 1657])
            ("semantic/analyze/fcn" include nil nil [1658 1689])
            ("semantic/ctxt" include nil nil [1690 1714])
            ("semantic/find" include nil nil [1735 1759])
            ("declare-function" code nil nil [1762 1814])
            ("declare-function" code nil nil [1815 1878])
            ("declare-function" code nil nil [1879 1948])
            ("declare-function" code nil nil [1949 2026])
            ("declare-function" code nil nil [2027 2104])
            ("declare-function" code nil nil [2105 2164])
            ("semantic-scope-cache" type
               (:superclasses "semanticdb-abstract-cache"
                :members 
                  ( ("tag" variable
                       (:documentation "The tag this scope was calculated for."
                        :default-value "nil")
                        nil nil)
                    ("scopetypes" variable
                       (:documentation "The list of types currently in scope.
For C++, this would contain anonymous namespaces known, and
anything labeled by a `using' statement."
                        :default-value "nil")
                        nil nil)
                    ("parents" variable
                       (:documentation "List of parents in scope w/in the body of this function.
Presumably, the members of these parent classes are available for access
based on private:, or public: style statements."
                        :default-value "nil")
                        nil nil)
                    ("parentinheritance" variable
                       (:documentation "Alist of parents by inheritance.
Each entry is ( PARENT . PROTECTION ), where PARENT is a type, and
PROTECTION is a symbol representing the level of inheritance, such as 'private, or 'protected."
                        :default-value "nil")
                        nil nil)
                    ("scope" variable
                       (:documentation "Items in scope due to the scopetypes or parents."
                        :default-value "nil")
                        nil nil)
                    ("fullscope" variable
                       (:documentation "All the other stuff on one master list you can search."
                        :default-value "nil")
                        nil nil)
                    ("localargs" variable
                       (:documentation "The arguments to the function tag."
                        :default-value "nil")
                        nil nil)
                    ("localvar" variable
                       (:documentation "The local variables."
                        :default-value "nil")
                        nil nil)
                    ("typescope" variable
                       (:documentation "Slot to save intermediate scope while metatypes are dereferenced."
                        :default-value "nil")
                        nil nil))                  
                :type "class")
                nil [2177 3654])
            ("semantic-reset" function
               (:parent "semantic-scope-cache"
                :arguments ("obj"))
                nil [3738 4078])
            ("semanticdb-synchronize" function
               (:parent "semantic-scope-cache"
                :arguments ("cache" "new-tags"))
                nil [4080 4230])
            ("semanticdb-partial-synchronize" function
               (:parent "semantic-scope-cache"
                :arguments ("cache" "new-tags"))
                nil [4233 4629])
            ("semantic-scope-reset-cache" function nil nil [4631 4870])
            ("semantic-scope-set-typecache" function
               (:parent "semantic-scope-cache"
                :arguments ("cache" "types-in-scope"))
                nil [4872 5396])
            ("semantic-scope-tag-clone-with-scope" function (:arguments ("tag" "scopetags")) nil [5676 5975])
            ("semantic-scope-tag-get-scope" function (:arguments ("tag")) nil [5977 6126])
            ("semantic-analyze-scoped-types" function
               (:overloadable t
                :arguments ("position"))
                nil [6202 6414])
            ("semantic-analyze-scoped-types-default" function (:arguments ("position")) nil [6416 7639])
            ("semantic-analyze-scope-nested-tags" function
               (:overloadable t
                :arguments ("position" "scopedtypes"))
                nil [7704 8066])
            ("semantic-analyze-scope-nested-tags-default" function (:arguments ("position" "scopetypes")) nil [8068 12344])
            ("semantic-analyze-scope-lineage-tags" function
               (:overloadable t
                :arguments ("parents" "scopedtypes"))
                nil [12346 12715])
            ("semantic-analyze-scope-lineage-tags-default" function (:arguments ("parents" "scopetypes")) nil [12717 13710])
            ("semantic-analyze-scoped-tags" function
               (:overloadable t
                :arguments ("typelist" "parentlist"))
                nil [13777 14138])
            ("semantic-analyze-scoped-tags-default" function (:arguments ("typelist" "halfscope")) nil [14140 16295])
            ("semantic-analyze-scope-calculate-access" function
               (:overloadable t
                :arguments ("type" "scope"))
                nil [16360 16728])
            ("semantic-analyze-scope-calculate-access-default" function (:arguments ("type" "scope")) nil [16730 18169])
            ("semantic-completable-tags-from-type" function (:arguments ("type")) nil [18171 18685])
            ("semantic-analyze-scoped-type-parts" function (:arguments ("type" "scope" "noinherit" "protection")) nil [18687 20471])
            ("semantic-analyze-scoped-inherited-tags" function (:arguments ("type" "scope" "access")) nil [20473 21612])
            ("semantic-analyze-scoped-inherited-tag-map" function (:arguments ("type" "fcn" "scope")) nil [21614 24165])
            ("semantic-calculate-scope" function
               (:user-visible-flag t
                :arguments ("point"))
                nil [24256 27045])
            ("semantic-scope-find" function (:arguments ("name" "class" "scope-in")) nil [27047 29213])
            ("semantic-analyze-show" function
               (:parent "semantic-scope-cache"
                :arguments ("context"))
                nil [29227 29849])
            ("semantic/scope" package nil nil [29851 29876]))          
      :file "scope.el"
      :pointmax 30031
      :fsize 30030
      :lastmodtime '(20746 56154 0 0)
      :unmatched-syntax '((close-paren 1759 . 1760) (symbol 1717 . 1734) (open-paren 1716 . 1717)))
    (semanticdb-table "sort.el"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("semantic" include nil nil [1219 1238])
            ("semantic/find" include nil nil [1260 1284])
            ("declare-function" code nil nil [1287 1375])
            ("semantic-string-lessp-ci" function (:arguments ("s1" "s2")) nil [1504 1869])
            ("semantic-sort-tag-type" function (:arguments ("tag")) nil [1871 2086])
            ("semantic-tag-lessp-name-then-type" function (:arguments ("A" "B")) nil [2088 2910])
            ("semantic-sort-tags-by-name-increasing" function (:arguments ("tags")) nil [2912 3153])
            ("semantic-sort-tags-by-name-decreasing" function (:arguments ("tags")) nil [3155 3396])
            ("semantic-sort-tags-by-type-increasing" function (:arguments ("tags")) nil [3398 3649])
            ("semantic-sort-tags-by-type-decreasing" function (:arguments ("tags")) nil [3651 3902])
            ("semantic-sort-tags-by-name-increasing-ci" function (:arguments ("tags")) nil [3904 4158])
            ("semantic-sort-tags-by-name-decreasing-ci" function (:arguments ("tags")) nil [4160 4414])
            ("semantic-sort-tags-by-type-increasing-ci" function (:arguments ("tags")) nil [4416 4680])
            ("semantic-sort-tags-by-type-decreasing-ci" function (:arguments ("tags")) nil [4682 4946])
            ("semantic-sort-tags-by-name-then-type-increasing" function (:arguments ("tags")) nil [4948 5175])
            ("semantic-sort-tags-by-name-then-type-decreasing" function (:arguments ("tags")) nil [5177 5404])
            ("semantic-unique-tag-table-by-name" function (:arguments ("tags")) nil [5630 6249])
            ("semantic-unique-tag-table" function (:arguments ("tags")) nil [6251 7109])
            ("semantic-flatten-tags-table" function (:arguments ("table")) nil [7453 8313])
            ("semantic-bucketize-tag-class" variable (:default-value (lambda (tok) (semantic-tag-class tok))) nil [8533 9116])
            ("semantic-bucketize" function (:arguments ("tags" "parent" "filter")) nil [9118 10820])
            ("semantic-orphaned-member-metaparent-type" variable (:default-value "class") nil [11060 11305])
            ("make-variable-buffer-local" code nil nil [11306 11376])
            ("semantic-mark-external-member-function" variable nil nil [11378 11947])
            ("semantic-adopt-external-members" function (:arguments ("tags")) nil [11949 15983])
            ("semantic-tag-external-member-parent" function
               (:overloadable t
                :arguments ("tag"))
                nil [16125 16656])
            ("semantic-tag-external-member-parent-default" function (:arguments ("tag")) nil [16658 16987])
            ("semantic-tag-external-member-p" function
               (:overloadable t
                :arguments ("parent" "tag"))
                nil [16989 17527])
            ("semantic-tag-external-member-p-default" function (:arguments ("parent" "tag")) nil [17529 17867])
            ("semantic-tag-external-member-children" function
               (:overloadable t
                :arguments ("tag" "usedb"))
                nil [17869 18744])
            ("semantic-tag-external-member-children-default" function (:arguments ("tag" "usedb")) nil [18746 19473])
            ("semantic-tag-external-class" function
               (:overloadable t
                :arguments ("tag"))
                nil [19475 19996])
            ("semantic-tag-external-class-default" function (:arguments ("tag")) nil [19998 20516])
            ("semantic/sort" package nil nil [20518 20542]))          
      :file "sort.el"
      :pointmax 20695
      :fsize 20694
      :lastmodtime '(20710 22649 0 0)
      :unmatched-syntax '((close-paren 1284 . 1285) (symbol 1240 . 1257) (open-paren 1239 . 1240)))
    (semanticdb-table "tag-ls.el"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("semantic" include nil nil [1315 1334])
            ("semantic/find" include nil nil [1335 1359])
            ("semantic-tag-similar-ignorable-attributes" variable (:default-value (quote (:prototype-flag))) nil [1780 1918])
            ("semantic--tag-similar-names-p" function
               (:overloadable t
                :arguments ("tag1" "tag2" "blankok"))
                nil [1920 2257])
            ("semantic--tag-similar-names-p-default" function (:arguments ("tag1" "tag2" "blankok")) nil [2259 2749])
            ("semantic--tag-similar-types-p" function
               (:overloadable t
                :arguments ("tag1" "tag2"))
                nil [2751 3161])
            ("semantic--tag-similar-types-p-default" function (:arguments ("tag1" "tag2")) nil [3163 3417])
            ("semantic--tag-attribute-similar-p" function
               (:overloadable t
                :arguments ("attr" "value1" "value2" "ignorable-attributes"))
                nil [3419 4037])
            ("semantic--tag-attribute-similar-p-default" function (:arguments ("attr" "value1" "value2" "ignorable-attributes")) nil [4039 4811])
            ("semantic-tag-similar-p" function
               (:overloadable t
                :arguments ("tag1" "tag2" "ignorable-attributes"))
                nil [4813 5518])
            ("semantic-tag-similar-p-default" function (:arguments ("tag1" "tag2" "ignorable-attributes")) nil [5607 7198])
            ("semantic-tag-full-package" function
               (:overloadable t
                :arguments ("tag" "stream-or-buffer"))
                nil [7419 8302])
            ("semantic-tag-full-package-default" function (:arguments ("tag" "stream")) nil [8304 8630])
            ("semantic-tag-full-name" function
               (:overloadable t
                :arguments ("tag" "stream-or-buffer"))
                nil [8632 9786])
            ("make-obsolete-overload" code nil nil [9788 9899])
            ("semantic-tag-full-name-default" function (:arguments ("tag" "stream")) nil [9901 10240])
            ("semantic-tag-calculate-parent" function
               (:overloadable t
                :arguments ("tag"))
                nil [10439 10744])
            ("semantic-tag-calculate-parent-default" function (:arguments ("tag")) nil [10746 11032])
            ("semantic-tag-protection" function
               (:overloadable t
                :arguments ("tag" "parent"))
                nil [11034 11898])
            ("make-obsolete-overload" code nil nil [11900 12013])
            ("semantic-tag-protection-default" function (:arguments ("tag" "parent")) nil [12015 12671])
            ("semantic-tag-package-protected-p" function (:arguments ("tag" "parent" "currentpackage")) nil [12673 13745])
            ("semantic-tag-protected-p" function (:arguments ("tag" "protection" "parent")) nil [13747 14523])
            ("semantic-tag-abstract-p" function
               (:overloadable t
                :arguments ("tag" "parent"))
                nil [14525 14948])
            ("make-obsolete-overload" code nil nil [14950 15061])
            ("semantic-tag-abstract-p-default" function (:arguments ("tag" "parent")) nil [15063 15475])
            ("semantic-tag-leaf-p" function
               (:overloadable t
                :arguments ("tag" "parent"))
                nil [15477 15808])
            ("make-obsolete-overload" code nil nil [15810 15913])
            ("semantic-tag-leaf-p-default" function (:arguments ("tag" "parent")) nil [15915 16349])
            ("semantic-tag-static-p" function
               (:overloadable t
                :arguments ("tag" "parent"))
                nil [16351 16683])
            ("semantic-tag-static-p-default" function (:arguments ("tag" "parent")) nil [16685 17062])
            ("semantic-tag-prototype-p" function
               (:overloadable t
                :arguments ("tag"))
                nil [17079 17285])
            ("semantic-tag-prototype-p-default" function (:arguments ("tag")) nil [17287 17696])
            ("semantic/tag-ls" package nil nil [17698 17724]))          
      :file "tag-ls.el"
      :pointmax 17881
      :fsize 17880
      :lastmodtime '(20746 56154 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "decorate.el"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("semantic" include nil nil [1097 1116])
            ("pulse" include nil nil [1117 1133])
            ("semantic-highlight-tag" function (:arguments ("tag" "face")) nil [1170 1547])
            ("semantic-unhighlight-tag" function (:arguments ("tag")) nil [1549 1839])
            ("semantic-momentary-highlight-one-tag-line" function (:arguments ("tag" "face")) nil [1879 2216])
            ("semantic-momentary-highlight-tag" function (:arguments ("tag" "face")) nil [2257 2873])
            ("semantic-set-tag-face" function (:arguments ("tag" "face")) nil [2875 3028])
            ("semantic-set-tag-invisible" function (:arguments ("tag" "visible")) nil [3030 3263])
            ("semantic-tag-invisible-p" function (:arguments ("tag")) nil [3265 3406])
            ("semantic-set-tag-intangible" function (:arguments ("tag" "tangible")) nil [3408 3764])
            ("semantic-tag-intangible-p" function (:arguments ("tag")) nil [3766 4027])
            ("semantic-overlay-signal-read-only" function (:arguments ("overlay" "after" "start" "end" "len")) nil [4029 4493])
            ("semantic-set-tag-read-only" function (:arguments ("tag" "writable")) nil [4495 5114])
            ("semantic-tag-read-only-p" function (:arguments ("tag")) nil [5116 5490])
            ("semantic-tag-secondary-overlays" function (:arguments ("tag")) nil [5783 5938])
            ("semantic-tag-create-secondary-overlay" function (:arguments ("tag" "link-hook")) nil [5940 7119])
            ("semantic-tag-get-secondary-overlay" function (:arguments ("tag" "property")) nil [7121 7530])
            ("semantic-tag-delete-secondary-overlay" function (:arguments ("tag" "overlay-or-property")) nil [7532 8301])
            ("semantic--tag-unlink-copy-secondary-overlays" function (:arguments ("tag")) nil [8303 9106])
            ("semantic--tag-unlink-secondary-overlays" function (:arguments ("tag")) nil [9108 10116])
            ("semantic--tag-link-secondary-overlays" function (:arguments ("tag")) nil [10118 10486])
            ("semantic-set-tag-folded" function (:arguments ("tag" "folded")) nil [10579 11705])
            ("declare-function" code nil nil [11707 11762])
            ("semantic-set-tag-folded-isearch" function (:arguments ("overlay")) nil [11764 11969])
            ("semantic-tag-folded-p" function (:arguments ("tag")) nil [11971 12109])
            ("semantic/decorate" package nil nil [12111 12139]))          
      :file "decorate.el"
      :pointmax 12176
      :fsize 12175
      :lastmodtime '(20746 56154 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "db.el"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("eieio-base" include nil nil [1025 1046])
            ("semantic" include nil nil [1047 1066])
            ("semantic/find" include nil nil [1089 1113])
            ("declare-function" code nil nil [1116 1181])
            ("semanticdb-refresh-references" function (:prototype-flag t) nil [1245 1352])
            ("semanticdb" customgroup (:user-visible-flag t) nil [1369 1465])
            ("semanticdb-database-list" variable nil nil [1467 1538])
            ("semanticdb-new-database-class" variable (:default-value (quote semanticdb-project-database-file)) nil [1540 1813])
            ("make-variable-buffer-local" code nil nil [1814 1873])
            ("semanticdb-default-find-index-class" variable (:default-value (quote semanticdb-find-search-index)) nil [1875 2080])
            ("make-variable-buffer-local" code nil nil [2081 2146])
            ("semanticdb-current-database" variable nil nil [2163 2266])
            ("make-variable-buffer-local" code nil nil [2267 2324])
            ("semanticdb-current-table" variable nil nil [2341 2447])
            ("make-variable-buffer-local" code nil nil [2448 2502])
            ("semanticdb-abstract-table" type
               (:members 
                  ( ("parent-db" variable (:documentation "Database Object containing this table.") nil nil)
                    ("major-mode" variable
                       (:documentation "Major mode this table belongs to.
Sometimes it is important for a program to know if a given table has the
same major mode as the current buffer."
                        :default-value "nil")
                        nil nil)
                    ("tags" variable (:documentation "The tags belonging to this table.") nil nil)
                    ("db-refs" variable
                       (:documentation "List of `semanticdb-table' objects refering to this one.
These aren't saved, but are instead recalculated after load.
See the file semanticdb-ref.el for how this slot is used."
                        :default-value "nil")
                        nil nil)
                    ("index" variable
                       (:documentation "The search index.
Used by semanticdb-find to store additional information about
this table for searching purposes.

Note: This index will not be saved in a persistent file."
                        :type "semanticdb-abstract-search-index")
                        nil nil)
                    ("cache" variable
                       (:documentation "List of cache information for tools.
Any particular tool can cache data to a database at runtime
with `semanticdb-cache-get'.

Using a semanticdb cache does not save any information to a file,
so your cache will need to be recalculated at runtime.  Caches can be
referenced even when the file is not in a buffer.

Note: This index will not be saved in a persistent file."
                        :default-value "nil"
                        :type "list")
                        nil nil))                  
                :type "class")
                nil [2528 4192])
            ("semanticdb-in-buffer-p" function
               (:parent "semanticdb-abstract-table"
                :arguments ("obj"))
                nil [4194 4333])
            ("semanticdb-get-buffer" function
               (:parent "semanticdb-abstract-table"
                :arguments ("obj"))
                nil [4335 4516])
            ("semanticdb-full-filename" function
               (:parent "semanticdb-abstract-table"
                :arguments ("obj"))
                nil [4518 4703])
            ("semanticdb-dirty-p" function
               (:parent "semanticdb-abstract-table"
                :arguments ("obj"))
                nil [4705 4813])
            ("semanticdb-set-dirty" function
               (:parent "semanticdb-abstract-table"
                :arguments ("obj"))
                nil [4815 5062])
            ("semanticdb-normalize-tags" function
               (:parent "semanticdb-abstract-table"
                :arguments ("obj" "tags"))
                nil [5064 5434])
            ("semanticdb-normalize-one-tag" function
               (:parent "semanticdb-abstract-table"
                :arguments ("obj" "tag"))
                nil [5436 5881])
            ("object-print" function
               (:parent "semanticdb-abstract-table"
                :arguments ("obj" "strings"))
                nil [5883 6389])
            ("semanticdb-abstract-search-index" type
               (:members 
                  ( ("table" variable
                       (:documentation "XRef to the table this belongs to."
                        :type "semanticdb-abstract-table")
                        nil nil))                  
                :type "class")
                nil [6410 6800])
            ("semanticdb-get-table-index" function
               (:parent "semanticdb-abstract-table"
                :arguments ("obj"))
                nil [6802 7232])
            ("semanticdb-synchronize" function
               (:parent "semanticdb-abstract-search-index"
                :arguments ("idx" "new-tags"))
                nil [7234 7429])
            ("semanticdb-partial-synchronize" function
               (:parent "semanticdb-abstract-search-index"
                :arguments ("idx" "new-tags"))
                nil [7431 7643])
            ("semanticdb-search-results-table" type
               (:superclasses "semanticdb-abstract-table"
                :type "class")
                nil [7775 8049])
            ("semanticdb-refresh-table" function
               (:parent "semanticdb-search-results-table"
                :arguments ("obj" "force"))
                nil [8051 8276])
            ("semanticdb-table" type
               (:superclasses "semanticdb-abstract-table"
                :members 
                  ( ("file" variable (:documentation "File name relative to the parent database.
This is for the file whose tags are stored in this TABLE object.") nil nil)
                    ("buffer" variable
                       (:documentation "The buffer associated with this table.
If nil, the table's buffer is no in Emacs.  If it has a value, then
it is in Emacs."
                        :default-value "nil")
                        nil nil)
                    ("dirty" variable
                       (:documentation "Non nil if this table needs to be `Saved'."
                        :default-value "nil")
                        nil nil)
                    ("db-refs" variable
                       (:documentation "List of `semanticdb-table' objects referring to this one.
These aren't saved, but are instead recalculated after load.
See the file semantic/db-ref.el for how this slot is used."
                        :default-value "nil")
                        nil nil)
                    ("pointmax" variable
                       (:documentation "Size of buffer when written to disk.
Checked on retrieval to make sure the file is the same."
                        :default-value "nil")
                        nil nil)
                    ("fsize" variable
                       (:documentation "Size of the file when it was last referenced.
Checked when deciding if a loaded table needs updating from changes
outside of Semantic's control."
                        :default-value "nil")
                        nil nil)
                    ("lastmodtime" variable
                       (:documentation "Last modification time of the file referenced.
Checked when deciding if a loaded table needs updating from changes outside of
Semantic's control."
                        :default-value "nil")
                        nil nil)
                    ("unmatched-syntax" variable (:documentation "List of vectors specifying unmatched syntax.") nil nil)
                    ("lexical-table" variable
                       (:documentation "Table that might be needed by the lexical analyzer.
For C/C++, the C preprocessor macros can be saved here."
                        :default-value "nil")
                        nil nil))                  
                :type "class")
                nil [8308 10159])
            ("semanticdb-in-buffer-p" function
               (:parent "semanticdb-table"
                :arguments ("obj"))
                nil [10161 10408])
            ("semanticdb-get-buffer" function
               (:parent "semanticdb-table"
                :arguments ("obj"))
                nil [10410 10808])
            ("semanticdb-set-buffer" function
               (:parent "semanticdb-table"
                :arguments ("obj"))
                nil [10810 11014])
            ("semanticdb-full-filename" function
               (:parent "semanticdb-table"
                :arguments ("obj"))
                nil [11016 11216])
            ("semanticdb-dirty-p" function
               (:parent "semanticdb-table"
                :arguments ("obj"))
                nil [11218 11330])
            ("semanticdb-set-dirty" function
               (:parent "semanticdb-table"
                :arguments ("obj"))
                nil [11332 11452])
            ("object-print" function
               (:parent "semanticdb-table"
                :arguments ("obj" "strings"))
                nil [11454 11789])
            ("semanticdb-project-database" type
               (:superclasses "eieio-instance-tracker"
                :members 
                  ( ("tracking-symbol" variable (:default-value "semanticdb-database-list") nil nil)
                    ("reference-directory" variable
                       (:documentation "Directory this database refers to.
When a cache directory is specified, then this refers to the directory
this database contains symbols for."
                        :type "string")
                        nil nil)
                    ("new-table-class" variable
                       (:documentation "New tables created for this database are of this class."
                        :default-value "semanticdb-table"
                        :type "class")
                        nil nil)
                    ("cache" variable
                       (:documentation "List of cache information for tools.
Any particular tool can cache data to a database at runtime
with `semanticdb-cache-get'.

Using a semanticdb cache does not save any information to a file,
so your cache will need to be recalculated at runtime.

Note: This index will not be saved in a persistent file."
                        :default-value "nil"
                        :type "list")
                        nil nil)
                    ("tables" variable
                       (:documentation "List of `semantic-db-table' objects."
                        :protection ":protected"
                        :type "semanticdb-abstract-table-list")
                        nil nil))                  
                :type "class")
                nil [11818 12985])
            ("semanticdb-full-filename" function
               (:parent "semanticdb-project-database"
                :arguments ("obj"))
                nil [12987 13174])
            ("semanticdb-dirty-p" function
               (:parent "semanticdb-project-database"
                :arguments ("DB"))
                nil [13176 13581])
            ("object-print" function
               (:parent "semanticdb-project-database"
                :arguments ("obj" "strings"))
                nil [13583 13991])
            ("semanticdb-create-database" function
               (:parent "semanticdb-project-database"
                :arguments ("dbc" "directory"))
                nil [13993 14649])
            ("semanticdb-flush-database-tables" function
               (:parent "semanticdb-project-database"
                :arguments ("db"))
                nil [14651 14793])
            ("semanticdb-create-table" function
               (:parent "semanticdb-project-database"
                :arguments ("db" "file"))
                nil [14795 15475])
            ("semanticdb-file-table" function
               (:parent "semanticdb-project-database"
                :arguments ("obj" "filename"))
                nil [15477 15742])
            ("semanticdb-get-database" function (:arguments ("filename")) nil [15766 15959])
            ("semanticdb-directory-loaded-p" function (:arguments ("path")) nil [15961 16156])
            ("semanticdb-create-table-for-file" function (:arguments ("filename")) nil [16158 16738])
            ("semanticdb-abstract-cache" type
               (:members 
                  ( ("table" variable
                       (:documentation "Cross reference to the table this belongs to."
                        :type "semanticdb-abstract-table")
                        nil nil))                  
                :type "class")
                nil [16760 17333])
            ("semanticdb-cache-get" function
               (:parent "semanticdb-abstract-table"
                :arguments ("table" "desired-class"))
                nil [17335 18089])
            ("semanticdb-cache-remove" function
               (:parent "semanticdb-abstract-table"
                :arguments ("table" "cache"))
                nil [18091 18269])
            ("semanticdb-synchronize" function
               (:parent "semanticdb-abstract-cache"
                :arguments ("cache" "new-tags"))
                nil [18271 18448])
            ("semanticdb-partial-synchronize" function
               (:parent "semanticdb-abstract-cache"
                :arguments ("cache" "new-tags"))
                nil [18450 18644])
            ("semanticdb-abstract-db-cache" type
               (:members 
                  ( ("db" variable
                       (:documentation "Cross reference to the database this belongs to."
                        :type "semanticdb-project-database")
                        nil nil))                  
                :type "class")
                nil [18646 19233])
            ("semanticdb-cache-get" function
               (:parent "semanticdb-project-database"
                :arguments ("db" "desired-class"))
                nil [19235 19973])
            ("semanticdb-cache-remove" function
               (:parent "semanticdb-project-database"
                :arguments ("db" "cache"))
                nil [19975 20149])
            ("semanticdb-synchronize" function
               (:parent "semanticdb-abstract-db-cache"
                :arguments ("cache" "new-tags"))
                nil [20152 20332])
            ("semanticdb-partial-synchronize" function
               (:parent "semanticdb-abstract-db-cache"
                :arguments ("cache" "new-tags"))
                nil [20334 20531])
            ("semanticdb-refresh-table" function
               (:parent "semanticdb-table"
                :arguments ("obj" "force"))
                nil [20546 21548])
            ("semanticdb-needs-refresh-p" function
               (:parent "semanticdb-table"
                :arguments ("obj"))
                nil [21550 22539])
            ("semanticdb-synchronize" function
               (:parent "semanticdb-abstract-table"
                :arguments ("table" "new-tags"))
                nil [22566 23568])
            ("semanticdb-partial-synchronize" function
               (:parent "semanticdb-abstract-table"
                :arguments ("table" "new-tags"))
                nil [23570 24634])
            ("semanticdb-save-db" function
               (:parent "semanticdb-project-database"
                :arguments ("DB" "suppress-questions"))
                nil [24653 24936])
            ("semanticdb-save-current-db" function (:user-visible-flag t) nil [24938 25229])
            ("semanticdb--inhibit-create-file-directory" variable nil nil [25355 25405])
            ("semanticdb-save-all-db" function (:user-visible-flag t) nil [25407 25736])
            ("semanticdb-save-all-db-idle" function nil nil [25738 26122])
            ("semanticdb-project-predicate-functions" variable nil nil [26157 26620])
            ("semanticdb-write-directory-p" function
               (:parent "semanticdb-project-database"
                :arguments ("obj"))
                nil [26622 26822])
            ("semanticdb-current-database" function nil nil [26966 27218])
            ("semanticdb-match-any-mode" variable nil nil [27220 27499])
            ("semanticdb-with-match-any-mode" function (:arguments ("body")) nil [27501 27758])
            ("put" code nil nil [27759 27820])
            ("semanticdb-equivalent-mode-for-search" function (:arguments ("buffer")) nil [27822 28286])
            ("semanticdb-equivalent-mode" function
               (:parent "semanticdb-abstract-table"
                :arguments ("table" "buffer"))
                nil [28288 28533])
            ("semanticdb-equivalent-mode" function
               (:parent "semanticdb-table"
                :arguments ("table" "buffer"))
                nil [28535 29221])
            ("semanticdb-project-roots" variable (:user-visible-flag t) nil [29340 29702])
            ("semanticdb-project-root-functions" variable nil nil [29704 30159])
            ("semanticdb-project-system-databases" variable nil nil [30161 30472])
            ("make-variable-buffer-local" code nil nil [30473 30538])
            ("semanticdb-search-system-databases" variable (:default-value t) nil [30540 30650])
            ("semanticdb-current-database-list" function (:arguments ("dir")) nil [30652 32667])
            ("semanticdb-file-table-hash" variable (:default-value (make-hash-table :test (quote equal))) nil [32806 32926])
            ("semanticdb-file-table-object-from-hash" function (:arguments ("file")) nil [32928 33111])
            ("semanticdb-file-table-object-put-hash" function (:arguments ("file" "dbtable")) nil [33113 33276])
            ("semanticdb-file-table-object" function (:arguments ("file" "dontload")) nil [33293 37237])
            ("semanticdb-out-of-buffer-create-table-fcn" variable nil nil [37239 37397])
            ("make-variable-buffer-local" code nil nil [37398 37469])
            ("semanticdb-create-table-for-file-not-in-buffer" function (:arguments ("filename")) nil [37471 38858])
            ("semanticdb-file-stream" function (:arguments ("file")) nil [38860 39188])
            ("semantic/db" package nil nil [39190 39212]))          
      :file "db.el"
      :pointmax 39361
      :fsize 39360
      :lastmodtime '(20810 25851 0 0)
      :unmatched-syntax '((close-paren 1113 . 1114) (symbol 1069 . 1086) (open-paren 1068 . 1069)))
    (semanticdb-table "db-find.el"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("semantic/db" include nil nil [4572 4594])
            ("semantic/db-ref" include nil nil [4595 4621])
            ("semantic/find" include nil nil [4643 4667])
            ("data-debug-thing-alist" variable nil nil [4681 4712])
            ("declare-function" code nil nil [4713 4773])
            ("declare-function" code nil nil [4774 4827])
            ("declare-function" code nil nil [4886 4948])
            ("declare-function" code nil nil [4949 5025])
            ("declare-function" code nil nil [5026 5070])
            ("semanticdb-find-throttle-custom-list" variable (:default-value (quote (repeat (radio (const (quote local)) (const (quote project)) (const (quote unloaded)) (const (quote system)) (const (quote recursive)) (const (quote omniscience)))))) nil [5072 5362])
            ("semanticdb-find-default-throttle" variable (:default-value (quote (local project unloaded system recursive))) nil [5379 6928])
            ("make-variable-buffer-local" code nil nil [6930 6992])
            ("semanticdb-find-throttle-active-p" function (:arguments ("access-type")) nil [6994 7288])
            ("semanticdb-find-search-index" type
               (:superclasses "semanticdb-abstract-search-index"
                :members 
                  ( ("include-path" variable
                       (:documentation "List of semanticdb tables from the include path."
                        :default-value "nil")
                        nil nil)
                    ("type-cache" variable
                       (:documentation "Cache of all the data types accessible from this file.
Includes all types from all included files, merged namespaces, and
expunge duplicates."
                        :default-value "nil")
                        nil nil))                  
                :type "class")
                nil [7486 7983])
            ("semantic-reset" function
               (:parent "semanticdb-find-search-index"
                :arguments ("idx"))
                nil [7985 8358])
            ("semanticdb-synchronize" function
               (:parent "semanticdb-find-search-index"
                :arguments ("idx" "new-tags"))
                nil [8360 8731])
            ("semanticdb-partial-synchronize" function
               (:parent "semanticdb-find-search-index"
                :arguments ("idx" "new-tags"))
                nil [8733 9785])
            ("semanticdb-find-translate-path" function
               (:overloadable t
                :arguments ("path" "brutish"))
                nil [10009 11812])
            ("semanticdb-find-translate-path-default" function (:arguments ("path" "brutish")) nil [11814 12295])
            ("semanticdb-find-table-for-include" function
               (:overloadable t
                :arguments ("includetag" "table"))
                nil [12312 12676])
            ("semanticdb-find-translate-path-brutish-default" function (:arguments ("path")) nil [12678 13952])
            ("semanticdb-find-incomplete-cache-entries-p" function (:arguments ("cache")) nil [13954 14233])
            ("semanticdb-find-need-cache-update-p" function (:arguments ("table")) nil [14235 14928])
            ("semanticdb-find-translate-path-includes-default" function (:arguments ("path")) nil [14930 16277])
            ("semanticdb-find-lost-includes" variable nil nil [16279 16388])
            ("make-variable-buffer-local" code nil nil [16389 16448])
            ("semanticdb-find-scanned-include-tags" variable nil nil [16450 16705])
            ("make-variable-buffer-local" code nil nil [16706 16772])
            ("semanticdb-implied-include-tags" variable nil nil [16774 17125])
            ("semanticdb-find-translate-path-includes--internal" function (:arguments ("path")) nil [17127 22124])
            ("semanticdb-find-load-unloaded" function
               (:overloadable t
                :arguments ("filename"))
                nil [22126 22513])
            ("semanticdb-find-load-unloaded-default" function (:arguments ("filename")) nil [22515 22688])
            ("semanticdb-find-table-for-include-default" function (:arguments ("includetag" "table")) nil [22736 27047])
            ("semanticdb-find-test-translate-path" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [27130 27771])
            ("semanticdb-find-test-translate-path-no-loading" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [27773 28569])
            ("semanticdb-find-adebug-lost-includes" function (:user-visible-flag t) nil [28586 29093])
            ("semanticdb-find-adebug-insert-scanned-tag-cons" function (:arguments ("consdata" "prefix" "prebuttontext")) nil [29095 30334])
            ("semanticdb-find-adebug-scanned-includes" function (:user-visible-flag t) nil [30336 31132])
            ("semanticdb-strip-find-results" function (:arguments ("results" "find-file-match")) nil [31279 33191])
            ("semanticdb-fast-strip-find-results" function (:arguments ("results")) nil [33193 33522])
            ("semanticdb-find-results-p" function (:arguments ("resultp")) nil [33524 33970])
            ("semanticdb-find-result-prin1-to-string" function (:arguments ("result")) nil [33972 34526])
            ("semanticdb-find-result-with-nil-p" function (:arguments ("resultp")) nil [34528 35237])
            ("semanticdb-find-result-length" function (:arguments ("result")) nil [35254 35458])
            ("semanticdb-find-result-nth" function (:arguments ("result" "n")) nil [35475 36334])
            ("semanticdb-find-result-test" function (:arguments ("result")) nil [36336 36785])
            ("semanticdb-find-result-nth-in-buffer" function (:arguments ("result" "n")) nil [36802 37821])
            ("semanticdb-find-result-mapc" function (:arguments ("fcn" "result")) nil [37823 38196])
            ("semanticdb-find-log-flag" variable nil nil [38280 38364])
            ("semanticdb-find-log-buffer-name" variable (:default-value "*SemanticDB Find Log*") nil [38366 38466])
            ("semanticdb-find-toggle-logging" function (:user-visible-flag t) nil [38468 38716])
            ("semanticdb-reset-log" function (:user-visible-flag t) nil [38718 38931])
            ("semanticdb-find-log-move-to-end" function nil nil [38933 39355])
            ("semanticdb-find-log-new-search" function (:arguments ("forwhat")) nil [39357 39645])
            ("semanticdb-find-log-activity" function (:arguments ("table" "result")) nil [39647 40011])
            ("semanticdb-find-tags-collector" function (:arguments ("function" "path" "find-file-match" "brutish")) nil [40111 43079])
            ("semanticdb-find-tags-by-name" function (:arguments ("name" "path" "find-file-match")) nil [43096 43542])
            ("semanticdb-find-tags-by-name-regexp" function (:arguments ("regexp" "path" "find-file-match")) nil [43559 44025])
            ("semanticdb-find-tags-for-completion" function (:arguments ("prefix" "path" "find-file-match")) nil [44042 44508])
            ("semanticdb-find-tags-by-class" function (:arguments ("class" "path" "find-file-match")) nil [44525 44970])
            ("semanticdb-deep-find-tags-by-name" function (:arguments ("name" "path" "find-file-match")) nil [44990 45502])
            ("semanticdb-deep-find-tags-by-name-regexp" function (:arguments ("regexp" "path" "find-file-match")) nil [45504 46036])
            ("semanticdb-deep-find-tags-for-completion" function (:arguments ("prefix" "path" "find-file-match")) nil [46038 46570])
            ("semanticdb-brute-deep-find-tags-by-name" function (:arguments ("name" "path" "find-file-match")) nil [46603 47161])
            ("semanticdb-brute-deep-find-tags-for-completion" function (:arguments ("prefix" "path" "find-file-match")) nil [47163 47741])
            ("semanticdb-brute-find-tags-by-class" function (:arguments ("class" "path" "find-file-match")) nil [47743 48291])
            ("semanticdb-find-tags-external-children-of-type" function (:arguments ("type" "path" "find-file-match")) nil [48323 48831])
            ("semanticdb-find-tags-subclasses-of-type" function (:arguments ("type" "path" "find-file-match")) nil [48833 49324])
            ("semanticdb-find-tags-by-name-method" function
               (:parent "semanticdb-abstract-table"
                :arguments ("table" "name" "tags"))
                nil [49498 49819])
            ("semanticdb-find-tags-by-name-regexp-method" function
               (:parent "semanticdb-abstract-table"
                :arguments ("table" "regexp" "tags"))
                nil [49821 50166])
            ("semanticdb-find-tags-for-completion-method" function
               (:parent "semanticdb-abstract-table"
                :arguments ("table" "prefix" "tags"))
                nil [50168 50513])
            ("semanticdb-find-tags-by-class-method" function
               (:parent "semanticdb-abstract-table"
                :arguments ("table" "class" "tags"))
                nil [50515 51089])
            ("semanticdb-find-tags-external-children-of-type-method" function
               (:parent "semanticdb-abstract-table"
                :arguments ("table" "parent" "tags"))
                nil [51091 51504])
            ("semanticdb-find-tags-subclasses-of-type-method" function
               (:parent "semanticdb-abstract-table"
                :arguments ("table" "parent" "tags"))
                nil [51506 51905])
            ("semanticdb-deep-find-tags-by-name-method" function
               (:parent "semanticdb-abstract-table"
                :arguments ("table" "name" "tags"))
                nil [51925 52356])
            ("semanticdb-deep-find-tags-by-name-regexp-method" function
               (:parent "semanticdb-abstract-table"
                :arguments ("table" "regexp" "tags"))
                nil [52358 52813])
            ("semanticdb-deep-find-tags-for-completion-method" function
               (:parent "semanticdb-abstract-table"
                :arguments ("table" "prefix" "tags"))
                nil [52815 53270])
            ("semantic/db-find" package nil nil [53272 53299]))          
      :file "db-find.el"
      :pointmax 53458
      :fsize 53457
      :lastmodtime '(20779 52264 0 0)
      :unmatched-syntax '((close-paren 4667 . 4668) (symbol 4623 . 4640) (open-paren 4622 . 4623)))
    (semanticdb-table "tag.el"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("semantic/fw" include nil nil [1789 1811])
            ("semantic/lex" include nil nil [1812 1835])
            ("declare-function" code nil nil [1837 1906])
            ("declare-function" code nil nil [1907 1956])
            ("declare-function" code nil nil [1957 2016])
            ("declare-function" code nil nil [2017 2076])
            ("semantic-tag-version" variable
               (:constant-flag t
                :default-value "2.0")
                nil [2078 2172])
            ("semantic-tag-incompatible-version" variable
               (:constant-flag t
                :default-value "1.0")
                nil [2174 2418])
            ("semantic-tag-name" function (:arguments ("tag")) nil [3179 3493])
            ("semantic-tag-class" function (:arguments ("tag")) nil [3495 4243])
            ("semantic-tag-attributes" function (:arguments ("tag")) nil [4245 4419])
            ("semantic-tag-properties" function (:arguments ("tag")) nil [4421 4594])
            ("semantic-tag-overlay" function (:arguments ("tag")) nil [4596 4873])
            ("semantic--tag-overlay-cdr" function (:arguments ("tag")) nil [4875 5037])
            ("semantic--tag-set-overlay" function (:arguments ("tag" "overlay")) nil [5039 5226])
            ("semantic-tag-start" function (:arguments ("tag")) nil [5228 5426])
            ("semantic-tag-end" function (:arguments ("tag")) nil [5428 5620])
            ("semantic-tag-bounds" function (:arguments ("tag")) nil [5622 5782])
            ("semantic-tag-set-bounds" function (:arguments ("tag" "start" "end")) nil [5784 6070])
            ("semantic-tag-in-buffer-p" function (:arguments ("tag")) nil [6072 6427])
            ("semantic--tag-get-property" function (:arguments ("tag" "property")) nil [6429 6699])
            ("semantic-tag-buffer" function (:arguments ("tag")) nil [6701 7282])
            ("semantic-tag-mode" function (:arguments ("tag")) nil [7284 8192])
            ("semantic--tag-attributes-cdr" function (:arguments ("tag")) nil [8194 8362])
            ("semantic-tag-put-attribute" function (:arguments ("tag" "attribute" "value")) nil [8364 8888])
            ("semantic-tag-put-attribute-no-side-effect" function (:arguments ("tag" "attribute" "value")) nil [8890 9520])
            ("semantic-tag-get-attribute" function (:arguments ("tag" "attribute")) nil [9522 9811])
            ("semantic--tag-properties-cdr" function (:arguments ("tag")) nil [9859 10027])
            ("semantic--tag-put-property" function (:arguments ("tag" "property" "value")) nil [10029 10503])
            ("semantic--tag-put-property-no-side-effect" function (:arguments ("tag" "property" "value")) nil [10505 11169])
            ("semantic-tag-file-name" function (:arguments ("tag")) nil [11171 11603])
            ("semantic-tag-p" function (:arguments ("tag")) nil [11637 12058])
            ("semantic-tag-of-class-p" function (:arguments ("tag" "class")) nil [12060 12189])
            ("semantic-tag-type-members" function (:arguments ("tag")) nil [12191 12379])
            ("semantic-tag-type" function (:arguments ("tag")) nil [12381 12706])
            ("semantic-tag-with-position-p" function (:arguments ("tag")) nil [12708 12971])
            ("semantic-equivalent-tag-p" function (:arguments ("tag1" "tag2")) nil [12973 13656])
            ("semantic-tag-similar-with-subtags-p" function (:arguments ("tag1" "tag2" "ignorable-attributes")) nil [13659 14056])
            ("semantic-tag-of-type-p" function (:arguments ("tag" "type")) nil [14058 15385])
            ("semantic-tag-type-compound-p" function (:arguments ("tag")) nil [15387 15834])
            ("semantic-tag-faux-p" function (:arguments ("tag")) nil [15836 16201])
            ("semantic-tag-make-plist" function (:arguments ("args")) nil [16262 16988])
            ("semantic-tag" function (:arguments ("name" "class" "attributes")) nil [16990 17359])
            ("semantic-tag-new-variable" function (:arguments ("name" "type" "default-value" "attributes")) nil [17361 17875])
            ("semantic-tag-new-function" function (:arguments ("name" "type" "arg-list" "attributes")) nil [17877 18374])
            ("semantic-tag-new-type" function (:arguments ("name" "type" "members" "parents" "attributes")) nil [18376 19446])
            ("semantic-tag-new-include" function (:arguments ("name" "system-flag" "attributes")) nil [19448 19899])
            ("semantic-tag-new-package" function (:arguments ("name" "detail" "attributes")) nil [19901 20287])
            ("semantic-tag-new-code" function (:arguments ("name" "detail" "attributes")) nil [20289 20616])
            ("semantic-tag-set-faux" function (:arguments ("tag")) nil [20618 20854])
            ("semantic-tag-set-name" function (:arguments ("tag" "name")) nil [20856 20945])
            ("semantic-create-tag-proxy" function (:arguments ("function" "data")) nil [21362 21910])
            ("semantic-tag-set-proxy" function (:arguments ("tag" "proxy" "filename")) nil [21912 22372])
            ("semantic-tag-resolve-proxy" function (:arguments ("tag")) nil [22374 22772])
            ("semantic-tag-clone" function (:arguments ("tag" "name")) nil [22807 23223])
            ("semantic-tag-copy" function (:arguments ("tag" "name" "keep-file")) nil [23225 24728])
            ("semantic--tag-copy-properties" function (:arguments ("tag1" "tag2")) nil [24986 25313])
            ("semantic-tag-deep-copy-one-tag" function (:arguments ("tag" "filter")) nil [25334 26254])
            ("semantic--tag-deep-copy-attributes" function (:arguments ("attrs" "filter")) nil [26256 26852])
            ("semantic--tag-deep-copy-value" function (:arguments ("value" "filter")) nil [26854 27460])
            ("semantic--tag-deep-copy-tag-list" function (:arguments ("tags" "filter")) nil [27462 28064])
            ("semantic-tag-modifiers" function (:arguments ("tag")) nil [28110 28262])
            ("semantic-tag-docstring" function (:arguments ("tag" "buffer")) nil [28264 29056])
            ("semantic-tag-named-parent" function (:arguments ("tag")) nil [29107 29408])
            ("semantic-tag-type-superclasses" function (:arguments ("tag")) nil [29436 30065])
            ("semantic--tag-find-parent-by-name" function (:arguments ("name" "supers")) nil [30067 30673])
            ("semantic-tag-type-superclass-protection" function (:arguments ("tag" "parentstring")) nil [30675 31781])
            ("semantic-tag-type-interfaces" function (:arguments ("tag")) nil [31783 31988])
            ("semantic-tag-function-arguments" function (:arguments ("tag")) nil [32022 32226])
            ("semantic-tag-function-throws" function (:arguments ("tag")) nil [32228 32431])
            ("semantic-tag-function-parent" function (:arguments ("tag")) nil [32433 32735])
            ("semantic-tag-function-destructor-p" function (:arguments ("tag")) nil [32737 32954])
            ("semantic-tag-function-constructor-p" function (:arguments ("tag")) nil [32956 33177])
            ("semantic-tag-variable-default" function (:arguments ("tag")) nil [33211 33425])
            ("semantic-tag-variable-constant-p" function (:arguments ("tag")) nil [33427 33648])
            ("semantic-tag-include-system-p" function (:arguments ("tag")) nil [33681 33900])
            ("semantic-tag-include-filename" function
               (:overloadable t
                :arguments ("tag"))
                nil [33902 34334])
            ("semantic-tag-include-filename-default" function (:arguments ("tag")) nil [34336 34487])
            ("semantic-tag-code-detail" function (:arguments ("tag")) nil [34517 34707])
            ("semantic-tag-new-alias" function (:arguments ("name" "meta-tag-class" "value" "attributes")) nil [34738 35171])
            ("semantic-tag-alias-class" function (:arguments ("tag")) nil [35173 35306])
            ("semantic-tag-alias-definition" function
               (:overloadable t
                :arguments ("tag"))
                nil [35308 35726])
            ("semantic-tag-components" function
               (:overloadable t
                :arguments ("tag"))
                nil [35792 36076])
            ("semantic-tag-components-default" function (:arguments ("tag")) nil [36078 36394])
            ("semantic-tag-components-with-overlays" function
               (:overloadable t
                :arguments ("tag"))
                nil [36396 36927])
            ("semantic-tag-components-with-overlays-default" function (:arguments ("tag")) nil [36929 38125])
            ("semantic-tag-children-compatibility" function (:arguments ("tag" "positiononly")) nil [38127 38523])
            ("semantic-narrow-to-tag" function
               (:user-visible-flag t
                :arguments ("tag"))
                nil [38618 38890])
            ("semantic-with-buffer-narrowed-to-current-tag" function (:arguments ("body")) nil [38892 39109])
            ("put" code nil nil [39110 39185])
            ("add-hook" code nil nil [39186 39316])
            ("semantic-with-buffer-narrowed-to-tag" function (:arguments ("tag" "body")) nil [39318 39488])
            ("put" code nil nil [39489 39556])
            ("add-hook" code nil nil [39557 39679])
            ("semantic--tag-hook-value" variable nil nil [40028 40061])
            ("semantic-tag-add-hook" function (:arguments ("tag" "hook" "function" "append")) nil [40063 40677])
            ("semantic-tag-remove-hook" function (:arguments ("tag" "hook" "function")) nil [40679 41252])
            ("semantic--tag-run-hooks" function (:arguments ("tag" "hook" "args")) nil [41254 41809])
            ("semantic--tag-unlink-list-from-buffer" function (:arguments ("tags")) nil [41966 42177])
            ("semantic--tag-unlink-from-buffer" function (:arguments ("tag")) nil [42179 42840])
            ("semantic--tag-link-list-to-buffer" function (:arguments ("tags")) nil [42842 43043])
            ("semantic--tag-link-to-buffer" function (:arguments ("tag")) nil [43045 43844])
            ("semantic--tag-unlink-cache-from-buffer" function nil nil [43846 44124])
            ("semantic--buffer-cache" variable nil nil [44126 44157])
            ("semantic--tag-link-cache-to-buffer" function nil nil [44159 44723])
            ("semantic--tag-expanded-p" function (:arguments ("tag")) nil [44939 45395])
            ("semantic-tag-expand-function" variable nil nil [45397 45909])
            ("make-variable-buffer-local" code nil nil [45910 45968])
            ("semantic--tag-expand" function (:arguments ("tag")) nil [45970 47704])
            ("semantic-foreign-tag-invalid" function (:arguments ("tag")) nil [47726 47882])
            ("semantic-foreign-tag-p" function (:arguments ("tag")) nil [47884 48167])
            ("semantic-foreign-tag-check" function (:arguments ("tag")) nil [48169 48356])
            ("semantic-foreign-tag" function (:arguments ("tag")) nil [48358 49173])
            ("semantic-obtain-foreign-tag" function
               (:overloadable t
                :arguments ("tag"))
                nil [49225 49465])
            ("semantic-insert-foreign-tag-default" function (:arguments ("foreign-tag")) nil [49467 49840])
            ("semantic-insert-foreign-tag" function
               (:overloadable t
                :arguments ("foreign-tag"))
                nil [49842 50201])
            ("semantic-insert-foreign-tag" function
               (:parent "log-edit-mode"
                :override-function-flag t
                :arguments ("foreign-tag"))
                nil [50230 50429])
            ("semantic-insert-foreign-tag" function
               (:parent "change-log-mode"
                :override-function-flag t
                :arguments ("foreign-tag"))
                nil [50431 50632])
            ("semantic-token-version" variable
               (:constant-flag t
                :default-value semantic-tag-version)
                nil [50656 50712])
            ("semantic-token-incompatible-version" variable
               (:constant-flag t
                :default-value semantic-tag-incompatible-version)
                nil [50713 50795])
            ("semantic-token-type-parent" function (:arguments ("tag")) nil [50797 51230])
            ("make-obsolete" code nil nil [51232 51374])
            ("semantic-alias-obsolete" code nil nil [51376 51488])
            ("semantic-varalias-obsolete" code nil nil [51490 51612])
            ("semantic/tag" package nil nil [51614 51637]))          
      :file "tag.el"
      :pointmax 51788
      :fsize 51787
      :lastmodtime '(20746 56154 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "lex.el"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("semantic/fw" include nil nil [7518 7540])
            ("semantic-lex-map-symbols" function (:arguments ("fun" "table" "property")) nil [7590 8001])
            ("semantic-flex-keywords-obarray" variable nil nil [8180 8357])
            ("make-variable-buffer-local" code nil nil [8358 8418])
            ("semantic-lex-keyword-invalid" function (:arguments ("name")) nil [8420 8580])
            ("semantic-lex-keyword-symbol" function (:arguments ("name")) nil [8582 8811])
            ("semantic-lex-keyword-p" function (:arguments ("name")) nil [8813 9028])
            ("semantic-lex-keyword-set" function (:arguments ("name" "value")) nil [9030 9199])
            ("semantic-lex-keyword-value" function (:arguments ("name")) nil [9201 9484])
            ("semantic-lex-keyword-put" function (:arguments ("name" "property" "value")) nil [9486 9748])
            ("semantic-lex-keyword-get" function (:arguments ("name" "property")) nil [9750 10000])
            ("semantic-lex-make-keyword-table" function (:arguments ("specs" "propspecs")) nil [10002 10937])
            ("semantic-lex-map-keywords" function (:arguments ("fun" "property")) nil [10939 11260])
            ("semantic-lex-keywords" function (:arguments ("property")) nil [11262 11574])
            ("semantic-lex-unterminated-syntax-end-function" variable nil nil [11599 11653])
            ("semantic-lex-analysis-bounds" variable nil nil [11654 11691])
            ("semantic-lex-end-point" variable nil nil [11692 11723])
            ("semantic-lex-token-bounds" function (:arguments ("token")) nil [11725 11945])
            ("semantic-lex-token-start" function (:arguments ("token")) nil [11947 12133])
            ("semantic-lex-token-end" function (:arguments ("token")) nil [12135 12317])
            ("semantic-lex-unterminated-syntax-detected" function (:arguments ("syntax")) nil [12319 12848])
            ("semantic-lex-types-obarray" variable nil nil [13104 13200])
            ("make-variable-buffer-local" code nil nil [13201 13257])
            ("semantic-lex-type-invalid" function (:arguments ("type")) nil [13259 13418])
            ("semantic-lex-type-symbol" function (:arguments ("type")) nil [13420 13630])
            ("semantic-lex-type-p" function (:arguments ("type")) nil [13632 13802])
            ("semantic-lex-type-set" function (:arguments ("type" "value")) nil [13804 13970])
            ("semantic-lex-type-value" function (:arguments ("type" "noerror")) nil [13972 14348])
            ("semantic-lex-type-put" function (:arguments ("type" "property" "value" "add")) nil [14350 14836])
            ("semantic-lex-type-get" function (:arguments ("type" "property" "noerror")) nil [14838 15236])
            ("semantic-lex-preset-default-types" function nil nil [15238 16105])
            ("semantic-lex-make-type-table" function (:arguments ("specs" "propspecs")) nil [16107 17873])
            ("semantic-lex-map-types" function (:arguments ("fun" "property")) nil [17875 18186])
            ("semantic-lex-types" function (:arguments ("property")) nil [18188 18488])
            ("semantic-lex-analyzer" variable (:default-value (quote semantic-flex)) nil [18535 18736])
            ("make-variable-buffer-local" code nil nil [18737 18788])
            ("semantic-lex-tokens" variable (:default-value (quote ((bol) (charquote) (close-paren) (comment) (newline) (open-paren) (punctuation) (semantic-list) (string) (symbol) (whitespace)))) nil [18790 22131])
            ("semantic-lex-syntax-modifications" variable nil nil [22133 22504])
            ("make-variable-buffer-local" code nil nil [22505 22568])
            ("semantic-lex-syntax-table" variable nil nil [22570 22697])
            ("make-variable-buffer-local" code nil nil [22698 22753])
            ("semantic-lex-comment-regex" variable nil nil [22755 22997])
            ("make-variable-buffer-local" code nil nil [22998 23054])
            ("semantic-lex-number-expression" variable (:default-value (eval-when-compile (concat "\\(" "\\<[0-9]+[.][0-9]+\\([eE][-+]?[0-9]+\\)?[fFdD]?\\>" "\\|" "\\<[0-9]+[.][eE][-+]?[0-9]+[fFdD]?\\>" "\\|" "\\<[0-9]+[.][fFdD]\\>" "\\|" "\\<[0-9]+[.]" "\\|" "[.][0-9]+\\([eE][-+]?[0-9]+\\)?[fFdD]?\\>" "\\|" "\\<[0-9]+[eE][-+]?[0-9]+[fFdD]?\\>" "\\|" "\\<0[xX][0-9a-fA-F]+[lL]?\\>" "\\|" "\\<[0-9]+[lLfFdD]?\\>" "\\)"))) nil [23056 24330])
            ("make-variable-buffer-local" code nil nil [24331 24391])
            ("semantic-lex-depth" variable nil nil [24393 24499])
            ("make-variable-buffer-local" code nil nil [24500 24548])
            ("semantic-lex-unterminated-syntax-end-function" variable (:default-value (lambda (syntax syntax-start lex-end) lex-end)) nil [24550 25122])
            ("declare-function" code nil nil [25158 25209])
            ("semantic-lex-test" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [25211 25747])
            ("semantic-lex-debug" variable nil nil [25749 25832])
            ("semantic-lex-debug" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [25834 26313])
            ("semantic-lex-highlight-token" function (:arguments ("token")) nil [26315 26628])
            ("semantic-lex-one-token" function (:arguments ("analyzers")) nil [27016 27272])
            ("semantic-lex-end-point" variable nil nil [27274 27365])
            ("semantic-lex-current-depth" variable nil nil [27367 27466])
            ("semantic-lex-maximum-depth" variable nil nil [27468 27582])
            ("semantic-lex-token-stream" variable nil nil [27584 27670])
            ("semantic-lex-analysis-bounds" variable nil nil [27672 27753])
            ("semantic-lex-block-streams" variable nil nil [27755 27985])
            ("define-obsolete-variable-alias" code nil nil [27987 28084])
            ("semantic-lex-reset-functions" variable nil nil [28085 28333])
            ("semantic-lex-block-stack" variable nil nil [28362 28399])
            ("semantic-lex-debug-break" function (:arguments ("token")) nil [28489 28887])
            ("define-lex" function (:arguments ("name" "doc" "analyzers")) nil [28889 32364])
            ("semantic-lex-start-block" function (:arguments ("syntax")) nil [32422 32805])
            ("semantic-lex-end-block" function (:arguments ("syntax")) nil [32807 35160])
            ("semantic-lex-token" function (:arguments ("symbol" "start" "end" "str")) nil [35360 36110])
            ("semantic-lex-token-p" function (:arguments ("thing")) nil [36112 36458])
            ("semantic-lex-token-with-text-p" function (:arguments ("thing")) nil [36460 36772])
            ("semantic-lex-token-without-text-p" function (:arguments ("thing")) nil [36774 37058])
            ("semantic-lex-expand-block-specs" function (:arguments ("specs")) nil [37079 38271])
            ("semantic-lex-push-token" function (:arguments ("token" "blockspecs")) nil [38275 39109])
            ("semantic-lex-token-class" function (:arguments ("token")) nil [39111 39260])
            ("semantic-lex-token-text" function (:arguments ("token")) nil [39262 39580])
            ("semantic-lex-init" function nil nil [39582 40069])
            ("semantic-lex" function
               (:overloadable t
                :arguments ("start" "end" "depth" "length"))
                nil [40086 40921])
            ("semantic-lex-buffer" function (:arguments ("depth")) nil [40923 41103])
            ("semantic-lex-list" function (:arguments ("semlist" "depth")) nil [41105 41312])
            ("semantic-lex-debug-analyzers" variable nil nil [41597 41790])
            ("semantic-lex-unterminated-syntax-protection" function (:arguments ("syntax" "forms")) nil [41792 42519])
            ("put" code nil nil [42520 42599])
            ("define-lex-analyzer" function (:arguments ("name" "doc" "condition" "forms")) nil [42601 44769])
            ("define-lex-regex-analyzer" function (:arguments ("name" "doc" "regexp" "forms")) nil [44771 45092])
            ("define-lex-simple-regex-analyzer" function (:arguments ("name" "doc" "regexp" "toksym" "index" "forms")) nil [45094 45872])
            ("define-lex-block-analyzer" function (:arguments ("name" "doc" "spec1" "specs")) nil [45874 48108])
            ("define-lex-analyzer" code nil nil [48164 48371])
            ("define-lex-analyzer" code nil nil [48373 48913])
            ("define-lex-simple-regex-analyzer" code nil nil [48915 49045])
            ("define-lex-regex-analyzer" code nil nil [49047 49835])
            ("define-lex-regex-analyzer" code nil nil [49837 50105])
            ("define-lex-regex-analyzer" code nil nil [50107 50845])
            ("define-lex-regex-analyzer" code nil nil [50847 51109])
            ("define-lex-simple-regex-analyzer" code nil nil [51111 51333])
            ("define-lex-regex-analyzer" code nil nil [51335 51614])
            ("define-lex-simple-regex-analyzer" code nil nil [51616 51789])
            ("define-lex-simple-regex-analyzer" code nil nil [51791 51934])
            ("define-lex-analyzer" code nil nil [51936 53184])
            ("define-lex-regex-analyzer" code nil nil [53186 53880])
            ("define-lex-simple-regex-analyzer" code nil nil [53882 54079])
            ("define-lex-simple-regex-analyzer" code nil nil [54081 54279])
            ("define-lex-regex-analyzer" code nil nil [54281 54600])
            ("define-lex-regex-analyzer" code nil nil [54602 55256])
            ("define-lex-regex-analyzer" code nil nil [55258 55944])
            ("define-lex-regex-analyzer" code nil nil [55946 56622])
            ("semantic-comment-lexer" function (:lexical-analyzer-flag t) nil [56725 57075])
            ("semantic-simple-lexer" function (:lexical-analyzer-flag t) nil [57095 57598])
            ("define-lex-keyword-type-analyzer" function (:arguments ("name" "doc" "syntax")) nil [57760 58296])
            ("define-lex-sexp-type-analyzer" function (:arguments ("name" "doc" "syntax" "token")) nil [58298 58818])
            ("define-lex-regex-type-analyzer" function (:arguments ("name" "doc" "syntax" "matches" "default")) nil [58820 60076])
            ("define-lex-string-type-analyzer" function (:arguments ("name" "doc" "syntax" "matches" "default")) nil [60078 61655])
            ("define-lex-block-type-analyzer" function (:arguments ("name" "doc" "syntax" "matches")) nil [61657 65453])
            ("semantic-lex-catch-errors" function (:arguments ("symbol" "forms")) nil [65695 67311])
            ("put" code nil nil [67312 67368])
            ("add-hook" code nil nil [67403 68063])
            ("semantic-alias-obsolete" code nil nil [68157 68236])
            ("semantic-alias-obsolete" code nil nil [68237 68312])
            ("semantic-alias-obsolete" code nil nil [68313 68390])
            ("semantic-alias-obsolete" code nil nil [68391 68490])
            ("semantic-alias-obsolete" code nil nil [68491 68572])
            ("semantic-alias-obsolete" code nil nil [68573 68658])
            ("semantic-alias-obsolete" code nil nil [68659 68744])
            ("semantic-alias-obsolete" code nil nil [68745 68832])
            ("semantic-alias-obsolete" code nil nil [68833 68912])
            ("semantic-alias-obsolete" code nil nil [68913 68988])
            ("semantic-alias-obsolete" code nil nil [68989 69060])
            ("semantic-flex-tokens" variable (:default-value semantic-lex-tokens) nil [69283 69406])
            ("semantic-flex-unterminated-syntax-end-function" variable (:default-value (lambda (syntax syntax-start flex-end) flex-end)) nil [69408 69984])
            ("semantic-flex-extensions" variable nil nil [69986 70401])
            ("make-variable-buffer-local" code nil nil [70402 70456])
            ("semantic-flex-syntax-modifications" variable nil nil [70458 70830])
            ("make-variable-buffer-local" code nil nil [70831 70895])
            ("semantic-ignore-comments" variable (:default-value t) nil [70897 71068])
            ("make-variable-buffer-local" code nil nil [71069 71123])
            ("semantic-flex-enable-newlines" variable nil nil [71125 71343])
            ("make-variable-buffer-local" code nil nil [71344 71403])
            ("semantic-flex-enable-whitespace" variable nil nil [71405 71621])
            ("make-variable-buffer-local" code nil nil [71622 71683])
            ("semantic-flex-enable-bol" variable nil nil [71685 71904])
            ("make-variable-buffer-local" code nil nil [71905 71959])
            ("semantic-number-expression" variable (:default-value semantic-lex-number-expression) nil [71961 72078])
            ("make-variable-buffer-local" code nil nil [72079 72135])
            ("semantic-flex-depth" variable nil nil [72137 72245])
            ("make-variable-buffer-local" code nil nil [72246 72295])
            ("semantic-flex" function (:arguments ("start" "end" "depth" "length")) nil [72297 81519])
            ("semantic/lex" package nil nil [81521 81544]))          
      :file "lex.el"
      :pointmax 81695
      :fsize 81694
      :lastmodtime '(20746 56154 0 0)
      :unmatched-syntax '((close-paren 38272 . 38273) (symbol 37061 . 37077) (open-paren 37060 . 37061)))
    (semanticdb-table "fw.el"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("mode-local" include nil nil [1137 1158])
            ("eieio" include nil nil [1159 1175])
            ("load" code nil nil [1176 1217])
            ("defalias" code nil nil [5482 5545])
            ("defalias" code nil nil [5322 5426])
            ("defalias" code nil nil [5111 5219])
            ("defalias" code nil nil [4952 5107])
            ("if" code nil nil [1260 4947])
            ("semantic-delete-overlay-maybe" function (:arguments ("overlay")) nil [5551 5740])
            ("semantic-menu-item" function (:arguments ("item")) nil [5773 6274])
            ("semantic-cache-data-overlays" variable nil nil [6305 6394])
            ("semantic-cache-data-to-buffer" function (:arguments ("buffer" "start" "end" "value" "name" "lifespan")) nil [6396 7682])
            ("semantic-cache-data-post-command-hook" function nil nil [7684 8675])
            ("semantic-get-cache-data" function (:arguments ("name" "point")) nil [8677 9126])
            ("semantic-test-data-cache" function (:user-visible-flag t) nil [9128 9683])
            ("semantic-overload-symbol-from-function" function (:arguments ("name")) nil [9733 9997])
            ("semantic-alias-obsolete" function (:arguments ("oldfnalias" "newfn" "when")) nil [9999 10809])
            ("semantic-varalias-obsolete" function (:arguments ("oldvaralias" "newvar" "when")) nil [10811 11433])
            ("semantic-safe" function (:arguments ("format" "body")) nil [11458 12229])
            ("put" code nil nil [12230 12274])
            ("semantic-map-buffers" function (:arguments ("function")) nil [12298 12574])
            ("defalias" code nil nil [12576 12642])
            ("semantic-alias-obsolete" code nil nil [12644 12766])
            ("semantic-install-function-overrides" function (:arguments ("overrides" "transient" "mode")) nil [12768 13819])
            ("semantic-current-input-throw-symbol" variable nil nil [13853 13960])
            ("semantic-exit-on-input" function (:arguments ("symbol" "forms")) nil [13962 14416])
            ("put" code nil nil [14417 14470])
            ("semantic-throw-on-input" function (:arguments ("from")) nil [14472 14911])
            ("semantic-find-file-noselect" function (:arguments ("file" "nowarn" "rawfile" "wildcards")) nil [14952 16805])
            ("semanticdb-without-unloaded-file-searches" function (:arguments ("forms")) nil [16844 17134])
            ("put" code nil nil [17135 17207])
            ("semantic-fw-add-edebug-spec" function nil nil [19487 19578])
            ("add-hook" code nil nil [19580 19638])
            ("semantic/fw" package nil nil [19640 19662]))          
      :file "fw.el"
      :pointmax 19693
      :fsize 19692
      :lastmodtime '(20746 56154 0 0)
      :unmatched-syntax '((close-paren 5548 . 5549) (symbol 1241 . 1257) (open-paren 1240 . 1241)))
    (semanticdb-table "util.el"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("semantic" include nil nil [955 974])
            ("semantic/find" include nil nil [1141 1165])
            ("semantic/db-find" include nil nil [997 1024])
            ("declare-function" code nil nil [1168 1228])
            ("declare-function" code nil nil [1229 1284])
            ("declare-function" code nil nil [1285 1359])
            ("semantic-type-relation-separator-character" variable (:default-value (quote ("."))) nil [1372 1836])
            ("make-variable-buffer-local" code nil nil [1837 1909])
            ("semantic-equivalent-major-modes" variable nil nil [1911 2142])
            ("make-variable-buffer-local" code nil nil [2143 2204])
            ("semantic-file-tag-table" function (:arguments ("file")) nil [2384 3134])
            ("semantic-alias-obsolete" code nil nil [3136 3225])
            ("semantic-something-to-tag-table" function (:arguments ("something")) nil [3227 4914])
            ("semantic-alias-obsolete" code nil nil [4916 5015])
            ("semantic-read-symbol-history" variable nil nil [5127 5199])
            ("semantic-read-symbol" function (:arguments ("prompt" "default" "stream" "filter")) nil [5201 6112])
            ("semantic-read-variable" function (:arguments ("prompt" "default" "stream")) nil [6114 6580])
            ("semantic-read-function" function (:arguments ("prompt" "default" "stream")) nil [6582 7046])
            ("semantic-read-type" function (:arguments ("prompt" "default" "stream")) nil [7048 7496])
            ("semantic-describe-tag" function
               (:user-visible-flag t
                :arguments ("tag"))
                nil [7533 7812])
            ("semantic-add-label" function
               (:user-visible-flag t
                :arguments ("label" "value" "tag"))
                nil [7845 8225])
            ("semantic-show-label" function
               (:user-visible-flag t
                :arguments ("label" "tag"))
                nil [8227 8550])
            ("semantic-describe-buffer-var-helper" function (:arguments ("varsym" "buffer")) nil [8613 9219])
            ("semantic-describe-buffer" function (:user-visible-flag t) nil [9221 10746])
            ("semantic-assert-valid-token" function (:arguments ("tok")) nil [10748 11256])
            ("semantic-sanity-check" function
               (:user-visible-flag t
                :arguments ("cache" "over" "notfirst"))
                nil [11258 12595])
            ("semantic-find-tag-for-completion" function (:arguments ("prefix")) nil [12924 13651])
            ("semantic-complete-symbol" function
               (:user-visible-flag t
                :arguments ("predicate"))
                nil [13653 15611])
            ("semantic/util" package nil nil [15613 15637])
            ("semantic/util-modes" include nil nil [15658 15688]))          
      :file "util.el"
      :pointmax 15721
      :fsize 15720
      :lastmodtime '(20746 56154 0 0)
      :unmatched-syntax '((close-paren 1165 . 1166) (symbol 977 . 994) (open-paren 976 . 977)))
    (semanticdb-table "db-ref.el"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("eieio" include nil nil [1437 1453])
            ("semantic" include nil nil [1454 1473])
            ("semantic/db" include nil nil [1474 1496])
            ("semantic/tag" include nil nil [1497 1520])
            ("semantic/find" include nil nil [1593 1617])
            ("semanticdb-add-reference" function
               (:parent "semanticdb-abstract-table"
                :arguments ("dbt" "include-tag"))
                nil [1620 2460])
            ("semanticdb-check-references" function
               (:parent "semanticdb-abstract-table"
                :arguments ("dbt"))
                nil [2462 2701])
            ("semanticdb-includes-in-table" function
               (:parent "semanticdb-abstract-table"
                :arguments ("dbt"))
                nil [2703 2895])
            ("semanticdb-check-references" function
               (:parent "semanticdb-table"
                :arguments ("dbt"))
                nil [2898 3786])
            ("semanticdb-refresh-references" function
               (:parent "semanticdb-abstract-table"
                :arguments ("dbt"))
                nil [3788 3978])
            ("semanticdb-refresh-references" function
               (:parent "semanticdb-table"
                :arguments ("dbt"))
                nil [3980 4305])
            ("semanticdb-notify-references" function
               (:parent "semanticdb-table"
                :arguments ("dbt" "method"))
                nil [4307 4664])
            ("semanticdb-ref-adebug" type
               (:members 
                  ( ("i-depend-on" variable nil nil nil)
                    ("local-table" variable nil nil nil)
                    ("i-include" variable nil nil nil))                  
                :type "class")
                nil [4679 4882])
            ("declare-function" code nil nil [4884 4937])
            ("declare-function" code nil nil [4938 5005])
            ("semanticdb-ref-test" function
               (:user-visible-flag t
                :arguments ("refresh"))
                nil [5007 5746])
            ("semantic/db-ref" package nil nil [5748 5774]))          
      :file "db-ref.el"
      :pointmax 5809
      :fsize 5808
      :lastmodtime '(20746 56154 0 0)
      :unmatched-syntax '((close-paren 1617 . 1618) (symbol 1575 . 1592) (open-paren 1574 . 1575)))
    (semanticdb-table "util-modes.el"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("semantic" include nil nil [1155 1174])
            ("semantic-modes" customgroup (:user-visible-flag t) nil [1219 1326])
            ("semantic-update-mode-line" variable (:default-value t) nil [1370 1806])
            ("semantic-mode-line-prefix" variable (:default-value (propertize "S" (quote face) (quote bold))) nil [1808 2044])
            ("semantic-minor-modes-format" variable nil nil [2046 2197])
            ("put" code nil nil [2198 2256])
            ("semantic-minor-mode-alist" variable nil nil [2258 2398])
            ("semantic-mode-line-update" function nil nil [2400 4476])
            ("semantic-desktop-ignore-this-minor-mode" function (:arguments ("buffer")) nil [4478 4665])
            ("semantic-add-minor-mode" function (:arguments ("toggle" "name")) nil [4667 5733])
            ("semantic-toggle-minor-mode-globally" function (:arguments ("mode" "arg")) nil [5735 6883])
            ("define-minor-mode" code nil nil [6966 7326])
            ("semantic-highlight-edits-mode-hook" variable nil nil [7328 7480])
            ("semantic-highlight-edits-face" variable
               (:default-value (quote ((((class color) (background dark)) (:background "gray20")) (((class color) (background light)) (:background "gray90"))))
                :type "face")
                nil [7482 7813])
            ("semantic-highlight-edits-new-change-hook-fcn" function (:arguments ("overlay")) nil [7815 8121])
            ("semantic-highlight-edits-mode-map" variable (:default-value (let ((km (make-sparse-keymap))) km)) nil [8123 8251])
            ("define-minor-mode" code nil nil [8268 9437])
            ("semantic-add-minor-mode" code nil nil [9439 9524])
            ("define-minor-mode" code nil nil [9603 10071])
            ("semantic-show-unmatched-syntax-mode-hook" variable nil nil [10073 10237])
            ("semantic-unmatched-syntax-face" variable
               (:default-value (quote ((((class color) (background dark)) (:underline "red")) (((class color) (background light)) (:underline "red"))))
                :type "face")
                nil [10239 10536])
            ("semantic-unmatched-syntax-overlay-p" function (:arguments ("overlay")) nil [10538 10711])
            ("semantic-showing-unmatched-syntax-p" function nil nil [10713 11042])
            ("semantic-show-unmatched-lex-tokens-fetch" function nil nil [11044 11586])
            ("semantic-clean-unmatched-syntax-in-region" function (:arguments ("beg" "end")) nil [11588 11891])
            ("semantic-clean-unmatched-syntax-in-buffer" function nil nil [11893 12087])
            ("semantic-clean-token-of-unmatched-syntax" function (:arguments ("token")) nil [12089 12314])
            ("semantic-show-unmatched-syntax" function (:arguments ("syntax")) nil [12316 13255])
            ("semantic-next-unmatched-syntax" function (:arguments ("point" "bound")) nil [13257 13955])
            ("semantic-show-unmatched-syntax-mode-map" variable (:default-value (let ((km (make-sparse-keymap))) (define-key km ",`" (quote semantic-show-unmatched-syntax-next)) km)) nil [13957 14176])
            ("define-minor-mode" code nil nil [14193 16051])
            ("semantic-add-minor-mode" code nil nil [16053 16144])
            ("semantic-show-unmatched-syntax-next" function (:user-visible-flag t) nil [16146 16375])
            ("define-minor-mode" code nil nil [16466 16895])
            ("semantic-show-parser-state-mode-hook" variable nil nil [16897 17053])
            ("semantic-show-parser-state-mode-map" variable (:default-value (let ((km (make-sparse-keymap))) km)) nil [17055 17187])
            ("define-minor-mode" code nil nil [17204 20914])
            ("semantic-add-minor-mode" code nil nil [20916 21002])
            ("semantic-show-parser-state-string" variable nil nil [21004 21156])
            ("make-variable-buffer-local" code nil nil [21157 21220])
            ("semantic-show-parser-state-marker" function (:arguments ("ignore")) nil [21222 22042])
            ("semantic-show-parser-state-auto-marker" function nil nil [22044 22362])
            ("define-minor-mode" code nil nil [22439 22860])
            ("semantic-stickyfunc-mode-hook" variable nil nil [22862 23004])
            ("semantic-stickyfunc-mode-map" variable (:default-value (let ((km (make-sparse-keymap))) (define-key km [header-line down-mouse-1] (quote semantic-stickyfunc-menu)) km)) nil [23006 23199])
            ("semantic-stickyfunc-popup-menu" variable nil nil [23201 23321])
            ("easy-menu-define" code nil nil [23323 24470])
            ("semantic-stickyfunc-indent-string" variable (:default-value (if (and window-system (not (featurep (quote xemacs)))) (concat (condition-case nil (let ((charwidth (frame-char-width)) (scrollpos (frame-parameter (selected-frame) (quote vertical-scroll-bars)))) (if (or (eq scrollpos (quote left)) (eq scrollpos t)) (let ((w (when (boundp (quote scroll-bar-width)) (symbol-value (quote scroll-bar-width))))) (if (not w) (setq w (frame-parameter (selected-frame) (quote scroll-bar-width)))) (if (not w) (setq w (+ (get (quote scroll-bar-width) (quote x-frame-parameter)) 1))) (if (not w) "  " (setq w (+ 2 w)) (make-string (/ w charwidth) 32))) "")) (error "")) (condition-case nil (let* ((f (window-fringes)) (fw (car f)) (numspace (/ fw (frame-char-width)))) (make-string numspace 32)) (error (condition-case nil (if (get (quote fringe) (quote face)) " " "") (error ""))))) "")) nil [24472 26623])
            ("semantic-stickyfunc-old-hlf" variable nil nil [26625 26725])
            ("semantic-stickyfunc-header-line-format" variable
               (:constant-flag t
                :default-value (cond ((featurep (quote xemacs)) nil) ((>= emacs-major-version 22) (quote (:eval (list (propertize " " (quote display) (quote ((space :align-to 0)))) (semantic-stickyfunc-fetch-stickyline))))) ((= emacs-major-version 21) (quote (:eval (list semantic-stickyfunc-indent-string (semantic-stickyfunc-fetch-stickyline))))) (t nil)))
                nil [26727 27187])
            ("define-minor-mode" code nil nil [27204 29199])
            ("semantic-stickyfunc-sticky-classes" variable (:default-value (quote (function type))) nil [29201 29337])
            ("make-variable-buffer-local" code nil nil [29338 29402])
            ("semantic-stickyfunc-show-only-functions-p" variable nil nil [29404 29682])
            ("semantic-stickyfunc-tag-to-stick" function nil nil [29684 30051])
            ("semantic-stickyfunc-fetch-stickyline" function nil nil [30053 31872])
            ("semantic-stickyfunc-menu" function
               (:user-visible-flag t
                :arguments ("event"))
                nil [31874 32344])
            ("semantic-add-minor-mode" code nil nil [32347 32426])
            ("define-minor-mode" code nil nil [32680 33120])
            ("semantic-highlight-func-mode-hook" variable nil nil [33122 33272])
            ("semantic-highlight-func-mode-map" variable (:default-value (let ((km (make-sparse-keymap)) (m3 (if (featurep (quote xemacs)) [button3] [mouse-3]))) (define-key km m3 (quote semantic-highlight-func-menu)) km)) nil [33274 33510])
            ("semantic-highlight-func-popup-menu" variable nil nil [33512 33651])
            ("easy-menu-define" code nil nil [33653 34708])
            ("semantic-highlight-func-menu" function
               (:user-visible-flag t
                :arguments ("event"))
                nil [34710 35226])
            ("semantic-highlight-func-ct-overlay" variable nil nil [35228 35331])
            ("make-variable-buffer-local" code nil nil [35332 35396])
            ("semantic-highlight-func-current-tag-face" variable
               (:default-value (quote ((((class color) (background dark)) (:background "gray20")) (((class color) (background light)) (:background "gray90"))))
                :type "face")
                nil [35398 35720])
            ("define-minor-mode" code nil nil [35737 37090])
            ("semantic-highlight-func-highlight-current-tag" function (:arguments ("disable")) nil [37092 38757])
            ("semantic-add-minor-mode" code nil nil [38759 38842])
            ("semantic/util-modes" package nil nil [38889 38919]))          
      :file "util-modes.el"
      :pointmax 39084
      :fsize 39083
      :lastmodtime '(20746 56154 0 0)
      :unmatched-syntax nil))
  :file "!home!revir!.emacs.d!cedet-bzr!trunk!lisp!cedet!semantic!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2")
